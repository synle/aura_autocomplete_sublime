".source.js":
	"$A.test.errors=":
		"prefix": "$A.test.errors"
		"body"  : "$A.test.errors=$1"
".source.js":
	"$A.test.addWaitFor(expected,testFunction,callback)":
		"prefix": "$A.test.addWaitFor"
		"body"  : "$A.test.addWaitFor($1expected,testFunction,callback)"
".source.js":
	"$A.test.addWaitForAction(success,actionName,callback)":
		"prefix": "$A.test.addWaitForAction"
		"body"  : "$A.test.addWaitForAction($1success,actionName,callback)"
".source.js":
	"$A.test.addWaitForWithFailureMessage(expected,testFunction,failureMessage,callback)":
		"prefix": "$A.test.addWaitForWithFailureMessage"
		"body"  : "$A.test.addWaitForWithFailureMessage($1expected,testFunction,failureMessage,callback)"
".source.js":
	"$A.test.blockRequests()":
		"prefix": "$A.test.blockRequests"
		"body"  : "$A.test.blockRequests($1)"
".source.js":
	"$A.test.blockForegroundRequests()":
		"prefix": "$A.test.blockForegroundRequests"
		"body"  : "$A.test.blockForegroundRequests($1)"
".source.js":
	"$A.test.blockBackgroundRequests()":
		"prefix": "$A.test.blockBackgroundRequests"
		"body"  : "$A.test.blockBackgroundRequests($1)"
".source.js":
	"$A.test.releaseRequests()":
		"prefix": "$A.test.releaseRequests"
		"body"  : "$A.test.releaseRequests($1)"
".source.js":
	"$A.test.releaseForegroundRequests()":
		"prefix": "$A.test.releaseForegroundRequests"
		"body"  : "$A.test.releaseForegroundRequests($1)"
".source.js":
	"$A.test.releaseBackgroundRequests()":
		"prefix": "$A.test.releaseBackgroundRequests"
		"body"  : "$A.test.releaseBackgroundRequests($1)"
".source.js":
	"$A.test.getSentRequestCount()":
		"prefix": "$A.test.getSentRequestCount"
		"body"  : "$A.test.getSentRequestCount($1)"
".source.js":
	"$A.test.areActionsComplete(actions)":
		"prefix": "$A.test.areActionsComplete"
		"body"  : "$A.test.areActionsComplete($1actions)"
".source.js":
	"$A.test.addCleanup(cleanupFunction)":
		"prefix": "$A.test.addCleanup"
		"body"  : "$A.test.addCleanup($1cleanupFunction)"
".source.js":
	"$A.test.getAction(component,name,params,callback)":
		"prefix": "$A.test.getAction"
		"body"  : "$A.test.getAction($1component,name,params,callback)"
".source.js":
	"$A.test.runActionsAsTransaction(actions,scope,callback)":
		"prefix": "$A.test.runActionsAsTransaction"
		"body"  : "$A.test.runActionsAsTransaction($1actions,scope,callback)"
".source.js":
	"$A.test.enqueueAction(action,background)":
		"prefix": "$A.test.enqueueAction"
		"body"  : "$A.test.enqueueAction($1action,background)"
".source.js":
	"$A.test.getExternalAction(component,descriptor,params,returnType,callback)":
		"prefix": "$A.test.getExternalAction"
		"body"  : "$A.test.getExternalAction($1component,descriptor,params,returnType,callback)"
".source.js":
	"$A.test.clearAndAssertComponentConfigs(a)":
		"prefix": "$A.test.clearAndAssertComponentConfigs"
		"body"  : "$A.test.clearAndAssertComponentConfigs($1a)"
".source.js":
	"$A.test.isActionPending()":
		"prefix": "$A.test.isActionPending"
		"body"  : "$A.test.isActionPending($1)"
".source.js":
	"$A.test.callServerAction(action,doImmediate)":
		"prefix": "$A.test.callServerAction"
		"body"  : "$A.test.callServerAction($1action,doImmediate)"
".source.js":
	"$A.test.setServerReachable(reachable)":
		"prefix": "$A.test.setServerReachable"
		"body"  : "$A.test.setServerReachable($1reachable)"
".source.js":
	"$A.test.runAfterIf(conditionFunction,callback,intervalInMs)":
		"prefix": "$A.test.runAfterIf"
		"body"  : "$A.test.runAfterIf($1conditionFunction,callback,intervalInMs)"
".source.js":
	"$A.test.setTestTimeout(timeoutMsec)":
		"prefix": "$A.test.setTestTimeout"
		"body"  : "$A.test.setTestTimeout($1timeoutMsec)"
".source.js":
	"$A.test.isComplete()":
		"prefix": "$A.test.isComplete"
		"body"  : "$A.test.isComplete($1)"
".source.js":
	"$A.test.getErrors()":
		"prefix": "$A.test.getErrors"
		"body"  : "$A.test.getErrors($1)"
".source.js":
	"$A.test.print(value)":
		"prefix": "$A.test.print"
		"body"  : "$A.test.print($1value)"
".source.js":
	"$A.test.auraError(level,msg/*,error*/)":
		"prefix": "$A.test.auraError"
		"body"  : "$A.test.auraError($1level,msg/*,error*/)"
".source.js":
	"$A.test.expectAuraError(e)":
		"prefix": "$A.test.expectAuraError"
		"body"  : "$A.test.expectAuraError($1e)"
".source.js":
	"$A.test.auraWarning(level,msg)":
		"prefix": "$A.test.auraWarning"
		"body"  : "$A.test.auraWarning($1level,msg)"
".source.js":
	"$A.test.expectAuraWarning(w)":
		"prefix": "$A.test.expectAuraWarning"
		"body"  : "$A.test.expectAuraWarning($1w)"
".source.js":
	"$A.test.assertAccessible()":
		"prefix": "$A.test.assertAccessible"
		"body"  : "$A.test.assertAccessible($1)"
".source.js":
	"$A.test.assertTruthy(condition,assertMessage)":
		"prefix": "$A.test.assertTruthy"
		"body"  : "$A.test.assertTruthy($1condition,assertMessage)"
".source.js":
	"$A.test.assertFalsy(condition,assertMessage)":
		"prefix": "$A.test.assertFalsy"
		"body"  : "$A.test.assertFalsy($1condition,assertMessage)"
".source.js":
	"$A.test.assert(condition,assertMessage)":
		"prefix": "$A.test.assert"
		"body"  : "$A.test.assert($1condition,assertMessage)"
".source.js":
	"$A.test.assertEquals(arg1,arg2,assertMessage)":
		"prefix": "$A.test.assertEquals"
		"body"  : "$A.test.assertEquals($1arg1,arg2,assertMessage)"
".source.js":
	"$A.test.assertEqualsIgnoreWhitespace(arg1,arg2,assertMessage)":
		"prefix": "$A.test.assertEqualsIgnoreWhitespace"
		"body"  : "$A.test.assertEqualsIgnoreWhitespace($1arg1,arg2,assertMessage)"
".source.js":
	"$A.test.assertStartsWith(start,full,assertMessage)":
		"prefix": "$A.test.assertStartsWith"
		"body"  : "$A.test.assertStartsWith($1start,full,assertMessage)"
".source.js":
	"$A.test.assertNotEquals(arg1,arg2,assertMessage)":
		"prefix": "$A.test.assertNotEquals"
		"body"  : "$A.test.assertNotEquals($1arg1,arg2,assertMessage)"
".source.js":
	"$A.test.assertDefined(condition,assertMessage)":
		"prefix": "$A.test.assertDefined"
		"body"  : "$A.test.assertDefined($1condition,assertMessage)"
".source.js":
	"$A.test.assertTrue(condition,assertMessage)":
		"prefix": "$A.test.assertTrue"
		"body"  : "$A.test.assertTrue($1condition,assertMessage)"
".source.js":
	"$A.test.assertFalse(condition,assertMessage)":
		"prefix": "$A.test.assertFalse"
		"body"  : "$A.test.assertFalse($1condition,assertMessage)"
".source.js":
	"$A.test.assertUndefined(condition,assertMessage)":
		"prefix": "$A.test.assertUndefined"
		"body"  : "$A.test.assertUndefined($1condition,assertMessage)"
".source.js":
	"$A.test.assertNotUndefinedOrNull(condition,assertMessage)":
		"prefix": "$A.test.assertNotUndefinedOrNull"
		"body"  : "$A.test.assertNotUndefinedOrNull($1condition,assertMessage)"
".source.js":
	"$A.test.assertUndefinedOrNull(condition,assertMessage)":
		"prefix": "$A.test.assertUndefinedOrNull"
		"body"  : "$A.test.assertUndefinedOrNull($1condition,assertMessage)"
".source.js":
	"$A.test.assertNull(condition,assertMessage)":
		"prefix": "$A.test.assertNull"
		"body"  : "$A.test.assertNull($1condition,assertMessage)"
".source.js":
	"$A.test.assertNotNull(condition,assertMessage)":
		"prefix": "$A.test.assertNotNull"
		"body"  : "$A.test.assertNotNull($1condition,assertMessage)"
".source.js":
	"$A.test.assertAuraType(type,condition,assertMessage)":
		"prefix": "$A.test.assertAuraType"
		"body"  : "$A.test.assertAuraType($1type,condition,assertMessage)"
".source.js":
	"$A.test.fail(assertMessage,extraInfoMessage)":
		"prefix": "$A.test.fail"
		"body"  : "$A.test.fail($1assertMessage,extraInfoMessage)"
".source.js":
	"$A.test.getPrototype(instance)":
		"prefix": "$A.test.getPrototype"
		"body"  : "$A.test.getPrototype($1instance)"
".source.js":
	"$A.test.overrideFunction(instance,name,newFunction)":
		"prefix": "$A.test.overrideFunction"
		"body"  : "$A.test.overrideFunction($1instance,name,newFunction)"
".source.js":
	"$A.test.addFunctionHandler(instance,name,newFunction,postProcess)":
		"prefix": "$A.test.addFunctionHandler"
		"body"  : "$A.test.addFunctionHandler($1instance,name,newFunction,postProcess)"
".source.js":
	"$A.test.getOuterHtml(node)":
		"prefix": "$A.test.getOuterHtml"
		"body"  : "$A.test.getOuterHtml($1node)"
".source.js":
	"$A.test.getText(node)":
		"prefix": "$A.test.getText"
		"body"  : "$A.test.getText($1node)"
".source.js":
	"$A.test.getTextByComponent(component)":
		"prefix": "$A.test.getTextByComponent"
		"body"  : "$A.test.getTextByComponent($1component)"
".source.js":
	"$A.test.getStyle(elem,style)":
		"prefix": "$A.test.getStyle"
		"body"  : "$A.test.getStyle($1elem,style)"
".source.js":
	"$A.test.getNonCommentNodes(nodes)":
		"prefix": "$A.test.getNonCommentNodes"
		"body"  : "$A.test.getNonCommentNodes($1nodes)"
".source.js":
	"$A.test.isNodeDeleted(node)":
		"prefix": "$A.test.isNodeDeleted"
		"body"  : "$A.test.isNodeDeleted($1node)"
".source.js":
	"$A.test.select()":
		"prefix": "$A.test.select"
		"body"  : "$A.test.select($1)"
".source.js":
	"$A.test.contains(testString,targetString)":
		"prefix": "$A.test.contains"
		"body"  : "$A.test.contains($1testString,targetString)"
".source.js":
	"$A.test.compareValues(expected,actual)":
		"prefix": "$A.test.compareValues"
		"body"  : "$A.test.compareValues($1expected,actual)"
".source.js":
	"$A.test.getActiveElement()":
		"prefix": "$A.test.getActiveElement"
		"body"  : "$A.test.getActiveElement($1)"
".source.js":
	"$A.test.getActiveElementText()":
		"prefix": "$A.test.getActiveElementText"
		"body"  : "$A.test.getActiveElementText($1)"
".source.js":
	"$A.test.walkTheDOM(node,func)":
		"prefix": "$A.test.walkTheDOM"
		"body"  : "$A.test.walkTheDOM($1node,func)"
".source.js":
	"$A.test.getElementsByClassNameCustom(className,parentElement)":
		"prefix": "$A.test.getElementsByClassNameCustom"
		"body"  : "$A.test.getElementsByClassNameCustom($1className,parentElement)"
".source.js":
	"$A.test.findChildWithClassName(parentElement,className)":
		"prefix": "$A.test.findChildWithClassName"
		"body"  : "$A.test.findChildWithClassName($1parentElement,className)"
".source.js":
	"$A.test.getElementByClass(classname)":
		"prefix": "$A.test.getElementByClass"
		"body"  : "$A.test.getElementByClass($1classname)"
".source.js":
	"$A.test.fireDomEvent(element,eventName,canBubble,cancelable)":
		"prefix": "$A.test.fireDomEvent"
		"body"  : "$A.test.fireDomEvent($1element,eventName,canBubble,cancelable)"
".source.js":
	"$A.test.clickOrTouch(element,canBubble,cancelable)":
		"prefix": "$A.test.clickOrTouch"
		"body"  : "$A.test.clickOrTouch($1element,canBubble,cancelable)"
".source.js":
	"$A.test.isInstanceOfText(node)":
		"prefix": "$A.test.isInstanceOfText"
		"body"  : "$A.test.isInstanceOfText($1node)"
".source.js":
	"$A.test.isInstanceOfAnchorElement(element)":
		"prefix": "$A.test.isInstanceOfAnchorElement"
		"body"  : "$A.test.isInstanceOfAnchorElement($1element)"
".source.js":
	"$A.test.isInstanceOfInputElement(element)":
		"prefix": "$A.test.isInstanceOfInputElement"
		"body"  : "$A.test.isInstanceOfInputElement($1element)"
".source.js":
	"$A.test.isInstanceOfLiElement(element)":
		"prefix": "$A.test.isInstanceOfLiElement"
		"body"  : "$A.test.isInstanceOfLiElement($1element)"
".source.js":
	"$A.test.isInstanceOfParagraphElement(element)":
		"prefix": "$A.test.isInstanceOfParagraphElement"
		"body"  : "$A.test.isInstanceOfParagraphElement($1element)"
".source.js":
	"$A.test.isInstanceOfButtonElement(element)":
		"prefix": "$A.test.isInstanceOfButtonElement"
		"body"  : "$A.test.isInstanceOfButtonElement($1element)"
".source.js":
	"$A.test.isInstanceOfImageElement(element)":
		"prefix": "$A.test.isInstanceOfImageElement"
		"body"  : "$A.test.isInstanceOfImageElement($1element)"
".source.js":
	"$A.test.isInstanceOfDivElement(element)":
		"prefix": "$A.test.isInstanceOfDivElement"
		"body"  : "$A.test.isInstanceOfDivElement($1element)"
".source.js":
	"$A.test.isInstanceOfSpanElement(element)":
		"prefix": "$A.test.isInstanceOfSpanElement"
		"body"  : "$A.test.isInstanceOfSpanElement($1element)"
".source.js":
	"$A.test.isInstanceOf(element,elementType,tag)":
		"prefix": "$A.test.isInstanceOf"
		"body"  : "$A.test.isInstanceOf($1element,elementType,tag)"
".source.js":
	"$A.test.objectKeys(obj)":
		"prefix": "$A.test.objectKeys"
		"body"  : "$A.test.objectKeys($1obj)"
".source.js":
	"$A.test.getElementAttributeValue(element,attributeName)":
		"prefix": "$A.test.getElementAttributeValue"
		"body"  : "$A.test.getElementAttributeValue($1element,attributeName)"
".source.js":
	"$A.test.addEventHandler(eventName,handler,component,insert)":
		"prefix": "$A.test.addEventHandler"
		"body"  : "$A.test.addEventHandler($1eventName,handler,component,insert)"
".source.js":
	"$A.test.dummyFunction()":
		"prefix": "$A.test.dummyFunction"
		"body"  : "$A.test.dummyFunction($1)"
".source.js":
	"$A.test.getAppCacheEvents()":
		"prefix": "$A.test.getAppCacheEvents"
		"body"  : "$A.test.getAppCacheEvents($1)"
".source.js":
	"$A.test.getAuraErrorMessage()":
		"prefix": "$A.test.getAuraErrorMessage"
		"body"  : "$A.test.getAuraErrorMessage($1)"
".source.js":
	"$A.test.getAvailableXHROverride(config,isBackground)":
		"prefix": "$A.test.getAvailableXHROverride"
		"body"  : "$A.test.getAvailableXHROverride($1config,isBackground)"
".source.js":
	"$A.test.sendOverride(config,auraXHR,actions,method,options)":
		"prefix": "$A.test.sendOverride"
		"body"  : "$A.test.sendOverride($1config,auraXHR,actions,method,options)"
".source.js":
	"$A.test.decodeOverride(config,response,noStrip)":
		"prefix": "$A.test.decodeOverride"
		"body"  : "$A.test.decodeOverride($1config,response,noStrip)"
".source.js":
	"$A.test.PrePostConfig (action,preSendCallback,postSendCallback)":
		"prefix": "$A.test.PrePostConfig"
		"body"  : "$A.test.PrePostConfig $1(action,preSendCallback,postSendCallback)"
".source.js":
	"$A.test.addPrePostSendCallback (action,preSendCallback,postSendCallback)":
		"prefix": "$A.test.addPrePostSendCallback"
		"body"  : "$A.test.addPrePostSendCallback $1(action,preSendCallback,postSendCallback)"
".source.js":
	"$A.test.removePrePostSendCallback (handle)":
		"prefix": "$A.test.removePrePostSendCallback"
		"body"  : "$A.test.removePrePostSendCallback $1(handle)"
".source.js":
	"$A.test.install()":
		"prefix": "$A.test.install"
		"body"  : "$A.test.install($1)"
".source.js":
	"$A.test.run(name,code,timeoutOverride,quickFixException)":
		"prefix": "$A.test.run"
		"body"  : "$A.test.run($1name,code,timeoutOverride,quickFixException)"
".source.js":
	"$A.test.runInternal(name)":
		"prefix": "$A.test.runInternal"
		"body"  : "$A.test.runInternal($1name)"
".source.js":
	"$A.test.executeAfterCkEditorIsReady(inputRichTextComponent,callback)":
		"prefix": "$A.test.executeAfterCkEditorIsReady"
		"body"  : "$A.test.executeAfterCkEditorIsReady($1inputRichTextComponent,callback)"
".source.js":
	"$A.test.reloadGlobalValueProviders(gvp,callback)":
		"prefix": "$A.test.reloadGlobalValueProviders"
		"body"  : "$A.test.reloadGlobalValueProviders($1gvp,callback)"
".source.js":
	"$A.test.getCreationPath(cmp)":
		"prefix": "$A.test.getCreationPath"
		"body"  : "$A.test.getCreationPath($1cmp)"
".source.js":
	"$A.test.createHttpRequest()":
		"prefix": "$A.test.createHttpRequest"
		"body"  : "$A.test.createHttpRequest($1)"
".source.js":
	"$A.test.checkGlobalNamespacePollution()":
		"prefix": "$A.test.checkGlobalNamespacePollution"
		"body"  : "$A.test.checkGlobalNamespacePollution($1)"
".source.js":
	"$A.test.orderedEncode(obj)":
		"prefix": "$A.test.orderedEncode"
		"body"  : "$A.test.orderedEncode($1obj)"
".source.js":
	"$A.util.isIE()":
		"prefix": "$A.util.isIE"
		"body"  : "$A.util.isIE($1)"
".source.js":
	"$A.util.isIOSWebView()":
		"prefix": "$A.util.isIOSWebView"
		"body"  : "$A.util.isIOSWebView($1)"
".source.js":
	"$A.util.globalEval()":
		"prefix": "$A.util.globalEval"
		"body"  : "$A.util.globalEval($1)"
".source.js":
	"$A.util.isArray()":
		"prefix": "$A.util.isArray"
		"body"  : "$A.util.isArray($1)"
".source.js":
	"$A.util.isObject(obj)":
		"prefix": "$A.util.isObject"
		"body"  : "$A.util.isObject($1obj)"
".source.js":
	"$A.util.isPlainObject(obj)":
		"prefix": "$A.util.isPlainObject"
		"body"  : "$A.util.isPlainObject($1obj)"
".source.js":
	"$A.util.isError(obj)":
		"prefix": "$A.util.isError"
		"body"  : "$A.util.isError($1obj)"
".source.js":
	"$A.util.isFunction(obj)":
		"prefix": "$A.util.isFunction"
		"body"  : "$A.util.isFunction($1obj)"
".source.js":
	"$A.util.isString(obj)":
		"prefix": "$A.util.isString"
		"body"  : "$A.util.isString($1obj)"
".source.js":
	"$A.util.isNumber(obj)":
		"prefix": "$A.util.isNumber"
		"body"  : "$A.util.isNumber($1obj)"
".source.js":
	"$A.util.isFiniteNumber(obj)":
		"prefix": "$A.util.isFiniteNumber"
		"body"  : "$A.util.isFiniteNumber($1obj)"
".source.js":
	"$A.util.isBoolean(obj)":
		"prefix": "$A.util.isBoolean"
		"body"  : "$A.util.isBoolean($1obj)"
".source.js":
	"$A.util.isUndefined(obj)":
		"prefix": "$A.util.isUndefined"
		"body"  : "$A.util.isUndefined($1obj)"
".source.js":
	"$A.util.isUndefinedOrNull(obj)":
		"prefix": "$A.util.isUndefinedOrNull"
		"body"  : "$A.util.isUndefinedOrNull($1obj)"
".source.js":
	"$A.util.isEmpty(obj)":
		"prefix": "$A.util.isEmpty"
		"body"  : "$A.util.isEmpty($1obj)"
".source.js":
	"$A.util.getBooleanValue (val)":
		"prefix": "$A.util.getBooleanValue"
		"body"  : "$A.util.getBooleanValue $1(val)"
".source.js":
	"$A.util.createHtmlElement (tagName,attributes)":
		"prefix": "$A.util.createHtmlElement"
		"body"  : "$A.util.createHtmlElement $1(tagName,attributes)"
".source.js":
	"$A.util.clearNode (node)":
		"prefix": "$A.util.clearNode"
		"body"  : "$A.util.clearNode $1(node)"
".source.js":
	"$A.util.getElement(id)":
		"prefix": "$A.util.getElement"
		"body"  : "$A.util.getElement($1id)"
".source.js":
	"$A.util.copy(value)":
		"prefix": "$A.util.copy"
		"body"  : "$A.util.copy($1value)"
".source.js":
	"$A.util.compareValues(expected,actual)":
		"prefix": "$A.util.compareValues"
		"body"  : "$A.util.compareValues($1expected,actual)"
".source.js":
	"$A.util.hasClass(element,className)":
		"prefix": "$A.util.hasClass"
		"body"  : "$A.util.hasClass($1element,className)"
".source.js":
	"$A.util.addClass(element,newClass)":
		"prefix": "$A.util.addClass"
		"body"  : "$A.util.addClass($1element,newClass)"
".source.js":
	"$A.util.removeClass(element,newClass)":
		"prefix": "$A.util.removeClass"
		"body"  : "$A.util.removeClass($1element,newClass)"
".source.js":
	"$A.util.toggleClass(element,className,condition)":
		"prefix": "$A.util.toggleClass"
		"body"  : "$A.util.toggleClass($1element,className,condition)"
".source.js":
	"$A.util.swapClass(element,oldClass,newClass)":
		"prefix": "$A.util.swapClass"
		"body"  : "$A.util.swapClass($1element,oldClass,newClass)"
".source.js":
	"$A.util.setClass(element,newClass,remove)":
		"prefix": "$A.util.setClass"
		"body"  : "$A.util.setClass($1element,newClass,remove)"
".source.js":
	"$A.util.buildClass(oldClass,newClass,remove)":
		"prefix": "$A.util.buildClass"
		"body"  : "$A.util.buildClass($1oldClass,newClass,remove)"
".source.js":
	"$A.util.buildFlavorClass(cmp,flavor)":
		"prefix": "$A.util.buildFlavorClass"
		"body"  : "$A.util.buildFlavorClass($1cmp,flavor)"
".source.js":
	"$A.util.createElementsFromMarkup(markup)":
		"prefix": "$A.util.createElementsFromMarkup"
		"body"  : "$A.util.createElementsFromMarkup($1markup)"
".source.js":
	"$A.util.insertFirst(newEl,referenceEl)":
		"prefix": "$A.util.insertFirst"
		"body"  : "$A.util.insertFirst($1newEl,referenceEl)"
".source.js":
	"$A.util.insertBefore(newEl,referenceEl)":
		"prefix": "$A.util.insertBefore"
		"body"  : "$A.util.insertBefore($1newEl,referenceEl)"
".source.js":
	"$A.util.insertAfter(newEl,referenceEl)":
		"prefix": "$A.util.insertAfter"
		"body"  : "$A.util.insertAfter($1newEl,referenceEl)"
".source.js":
	"$A.util.appendChild(newEl,referenceEl)":
		"prefix": "$A.util.appendChild"
		"body"  : "$A.util.appendChild($1newEl,referenceEl)"
".source.js":
	"$A.util.removeElement(element)":
		"prefix": "$A.util.removeElement"
		"body"  : "$A.util.removeElement($1element)"
".source.js":
	"$A.util.urlDecode(url)":
		"prefix": "$A.util.urlDecode"
		"body"  : "$A.util.urlDecode($1url)"
".source.js":
	"$A.util.trim(value)":
		"prefix": "$A.util.trim"
		"body"  : "$A.util.trim($1value)"
".source.js":
	"$A.util.format(formatString,arg1,arg2,argN)":
		"prefix": "$A.util.format"
		"body"  : "$A.util.format($1formatString,arg1,arg2,argN)"
".source.js":
	"$A.util.truncate(st,len,ellipsis,truncateByWord)":
		"prefix": "$A.util.truncate"
		"body"  : "$A.util.truncate($1st,len,ellipsis,truncateByWord)"
".source.js":
	"$A.util.createTimeoutCallback(callback,toleranceMillis)":
		"prefix": "$A.util.createTimeoutCallback"
		"body"  : "$A.util.createTimeoutCallback($1callback,toleranceMillis)"
".source.js":
	"$A.util.removeOn(element,eventName,listener,useCapture)":
		"prefix": "$A.util.removeOn"
		"body"  : "$A.util.removeOn($1element,eventName,listener,useCapture)"
".source.js":
	"$A.util.formToMap(form)":
		"prefix": "$A.util.formToMap"
		"body"  : "$A.util.formToMap($1form)"
".source.js":
	"$A.util.getSelectValue(select)":
		"prefix": "$A.util.getSelectValue"
		"body"  : "$A.util.getSelectValue($1select)"
".source.js":
	"$A.util.addValueToMap(inputMap,key,value)":
		"prefix": "$A.util.addValueToMap"
		"body"  : "$A.util.addValueToMap($1inputMap,key,value)"
".source.js":
	"$A.util.addMapValueToMap(inputMap,key,value,subMapKey)":
		"prefix": "$A.util.addMapValueToMap"
		"body"  : "$A.util.addMapValueToMap($1inputMap,key,value,subMapKey)"
".source.js":
	"$A.util.isSubDef(def,qname)":
		"prefix": "$A.util.isSubDef"
		"body"  : "$A.util.isSubDef($1def,qname)"
".source.js":
	"$A.util.apply(/* Object|Function */ baseObject,/* Object|Function*/ members,/* bool */ forceCopy,/* bool */ deepCopy)":
		"prefix": "$A.util.apply"
		"body"  : "$A.util.apply($1/* Object|Function */ baseObject,/* Object|Function*/ members,/* bool */ forceCopy,/* bool */ deepCopy)"
".source.js":
	"$A.util.camelCaseToHyphens(str)":
		"prefix": "$A.util.camelCaseToHyphens"
		"body"  : "$A.util.camelCaseToHyphens($1str)"
".source.js":
	"$A.util.hyphensToCamelCase(str)":
		"prefix": "$A.util.hyphensToCamelCase"
		"body"  : "$A.util.hyphensToCamelCase($1str)"
".source.js":
	"$A.util.acceptsData(element)":
		"prefix": "$A.util.acceptsData"
		"body"  : "$A.util.acceptsData($1element)"
".source.js":
	"$A.util.getElementAttributeValue(element,attributeName)":
		"prefix": "$A.util.getElementAttributeValue"
		"body"  : "$A.util.getElementAttributeValue($1element,attributeName)"
".source.js":
	"$A.util.getDataAttribute(element,key)":
		"prefix": "$A.util.getDataAttribute"
		"body"  : "$A.util.getDataAttribute($1element,key)"
".source.js":
	"$A.util.setDataAttribute(element,key,value)":
		"prefix": "$A.util.setDataAttribute"
		"body"  : "$A.util.setDataAttribute($1element,key,value)"
".source.js":
	"$A.util.getDataAttributeName(key)":
		"prefix": "$A.util.getDataAttributeName"
		"body"  : "$A.util.getDataAttributeName($1key)"
".source.js":
	"$A.util.hasDataAttribute(element,key)":
		"prefix": "$A.util.hasDataAttribute"
		"body"  : "$A.util.hasDataAttribute($1element,key)"
".source.js":
	"$A.util.isElement(obj)":
		"prefix": "$A.util.isElement"
		"body"  : "$A.util.isElement($1obj)"
".source.js":
	"$A.util.attachToDocumentBody(element)":
		"prefix": "$A.util.attachToDocumentBody"
		"body"  : "$A.util.attachToDocumentBody($1element)"
".source.js":
	"$A.util.stringEndsWith(fullstr,substr)":
		"prefix": "$A.util.stringEndsWith"
		"body"  : "$A.util.stringEndsWith($1fullstr,substr)"
".source.js":
	"$A.util.bind()":
		"prefix": "$A.util.bind"
		"body"  : "$A.util.bind($1)"
".source.js":
	"$A.util.keys()":
		"prefix": "$A.util.keys"
		"body"  : "$A.util.keys($1)"
".source.js":
	"$A.util.lookup(object /*,var-args of arrays*/)":
		"prefix": "$A.util.lookup"
		"body"  : "$A.util.lookup($1object /*,var-args of arrays*/)"
".source.js":
	"$A.util.merge(first /*,var-args of arrays*/)":
		"prefix": "$A.util.merge"
		"body"  : "$A.util.merge($1first /*,var-args of arrays*/)"
".source.js":
	"$A.util.forEach()":
		"prefix": "$A.util.forEach"
		"body"  : "$A.util.forEach($1)"
".source.js":
	"$A.util.map()":
		"prefix": "$A.util.map"
		"body"  : "$A.util.map($1)"
".source.js":
	"$A.util.reduce()":
		"prefix": "$A.util.reduce"
		"body"  : "$A.util.reduce($1)"
".source.js":
	"$A.util.every()":
		"prefix": "$A.util.every"
		"body"  : "$A.util.every($1)"
".source.js":
	"$A.util.some()":
		"prefix": "$A.util.some"
		"body"  : "$A.util.some($1)"
".source.js":
	"$A.util.filter()":
		"prefix": "$A.util.filter"
		"body"  : "$A.util.filter($1)"
".source.js":
	"$A.util.destroyAsync(cmp)":
		"prefix": "$A.util.destroyAsync"
		"body"  : "$A.util.destroyAsync($1cmp)"
".source.js":
	"$A.util.instanceOf(instance,constructor)":
		"prefix": "$A.util.instanceOf"
		"body"  : "$A.util.instanceOf($1instance,constructor)"
".source.js":
	"$A.util.emptyComponentTrash()":
		"prefix": "$A.util.emptyComponentTrash"
		"body"  : "$A.util.emptyComponentTrash($1)"
".source.js":
	"$A.util.contains(container,element)":
		"prefix": "$A.util.contains"
		"body"  : "$A.util.contains($1container,element)"
".source.js":
	"$A.util.squash(event,preventDefault)":
		"prefix": "$A.util.squash"
		"body"  : "$A.util.squash($1event,preventDefault)"
".source.js":
	"$A.util.stripTags(input,tags)":
		"prefix": "$A.util.stripTags"
		"body"  : "$A.util.stripTags($1input,tags)"
".source.js":
	"$A.util.getWindowSize()":
		"prefix": "$A.util.getWindowSize"
		"body"  : "$A.util.getWindowSize($1)"
".source.js":
	"$A.util.isComponent(obj)":
		"prefix": "$A.util.isComponent"
		"body"  : "$A.util.isComponent($1obj)"
".source.js":
	"$A.util.isExpression (obj)":
		"prefix": "$A.util.isExpression"
		"body"  : "$A.util.isExpression $1(obj)"
".source.js":
	"$A.util.isValue(obj)":
		"prefix": "$A.util.isValue"
		"body"  : "$A.util.isValue($1obj)"
".source.js":
	"$A.util.isAction(obj)":
		"prefix": "$A.util.isAction"
		"body"  : "$A.util.isAction($1obj)"
".source.js":
	"$A.util.supportsTouchEvents()":
		"prefix": "$A.util.supportsTouchEvents"
		"body"  : "$A.util.supportsTouchEvents($1)"
".source.js":
	"$A.util.estimateSize(obj)":
		"prefix": "$A.util.estimateSize"
		"body"  : "$A.util.estimateSize($1obj)"
".source.js":
	"$A.util.toArray(collection)":
		"prefix": "$A.util.toArray"
		"body"  : "$A.util.toArray($1collection)"
".source.js":
	"$A.util.setText(node,text)":
		"prefix": "$A.util.setText"
		"body"  : "$A.util.setText($1node,text)"
".source.js":
	"$A.util.getDebugToolComponent()":
		"prefix": "$A.util.getDebugToolComponent"
		"body"  : "$A.util.getDebugToolComponent($1)"
".source.js":
	"$A.util.getDebugToolsAuraInstance()":
		"prefix": "$A.util.getDebugToolsAuraInstance"
		"body"  : "$A.util.getDebugToolsAuraInstance($1)"
".source.js":
	"$A.util.setDebugToolWindow(debugWindow)":
		"prefix": "$A.util.setDebugToolWindow"
		"body"  : "$A.util.setDebugToolWindow($1debugWindow)"
".source.js":
	"$A.util.getUrl()":
		"prefix": "$A.util.getUrl"
		"body"  : "$A.util.getUrl($1)"
".source.js":
	"$A.util.getText(node)":
		"prefix": "$A.util.getText"
		"body"  : "$A.util.getText($1node)"
".source.js":
	"$A.util.errorBasedOnMode(msg)":
		"prefix": "$A.util.errorBasedOnMode"
		"body"  : "$A.util.errorBasedOnMode($1msg)"
".source.js":
	"$A.util.includeScript(url,callback)":
		"prefix": "$A.util.includeScript"
		"body"  : "$A.util.includeScript($1url,callback)"
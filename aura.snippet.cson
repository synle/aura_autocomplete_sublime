".source.js":
	"A.test.addWaitFor":
		"prefix": "test.addWaitFor"
		"body"  : "$A.test.addWaitFor(expected, testFunction, callback)"
".source.js":
	"A.test.addWaitForAction":
		"prefix": "test.addWaitForAction"
		"body"  : "$A.test.addWaitForAction(success, actionName, callback)"
".source.js":
	"A.test.addWaitForWithFailureMessage":
		"prefix": "test.addWaitForWithFailureMessage"
		"body"  : "$A.test.addWaitForWithFailureMessage(expected, testFunction, failureMessage, callback)"
".source.js":
	"A.test.blockRequests":
		"prefix": "test.blockRequest"
		"body"  : "$A.test.blockRequests()"
".source.js":
	"A.test.blockForegroundRequests":
		"prefix": "test.blockForegroundRequest"
		"body"  : "$A.test.blockForegroundRequests()"
".source.js":
	"A.test.blockBackgroundRequests":
		"prefix": "test.blockBackgroundRequest"
		"body"  : "$A.test.blockBackgroundRequests()"
".source.js":
	"A.test.releaseRequests":
		"prefix": "test.releaseRequest"
		"body"  : "$A.test.releaseRequests()"
".source.js":
	"A.test.releaseForegroundRequests":
		"prefix": "test.releaseForegroundRequest"
		"body"  : "$A.test.releaseForegroundRequests()"
".source.js":
	"A.test.releaseBackgroundRequests":
		"prefix": "test.releaseBackgroundRequest"
		"body"  : "$A.test.releaseBackgroundRequests()"
".source.js":
	"A.test.getSentRequestCount":
		"prefix": "test.getSentRequestCoun"
		"body"  : "$A.test.getSentRequestCount()"
".source.js":
	"A.test.areActionsComplete":
		"prefix": "test.areActionsComplete"
		"body"  : "$A.test.areActionsComplete(actions)"
".source.js":
	"A.test.addCleanup":
		"prefix": "test.addCleanup"
		"body"  : "$A.test.addCleanup(cleanupFunction)"
".source.js":
	"A.test.getAction":
		"prefix": "test.getAction"
		"body"  : "$A.test.getAction(component, name, params, callback)"
".source.js":
	"A.test.runActionsAsTransaction":
		"prefix": "test.runActionsAsTransaction"
		"body"  : "$A.test.runActionsAsTransaction(actions, scope, callback)"
".source.js":
	"A.test.enqueueAction":
		"prefix": "test.enqueueAction"
		"body"  : "$A.test.enqueueAction(action, background)"
".source.js":
	"A.test.getExternalAction":
		"prefix": "test.getExternalAction"
		"body"  : "$A.test.getExternalAction(component, descriptor, params, returnType, callback)"
".source.js":
	"A.test.clearAndAssertComponentConfigs":
		"prefix": "test.clearAndAssertComponentConfigs"
		"body"  : "$A.test.clearAndAssertComponentConfigs(a)"
".source.js":
	"A.test.isActionPending":
		"prefix": "test.isActionPendin"
		"body"  : "$A.test.isActionPending()"
".source.js":
	"A.test.callServerAction":
		"prefix": "test.callServerAction"
		"body"  : "$A.test.callServerAction(action, doImmediate)"
".source.js":
	"A.test.setServerReachable":
		"prefix": "test.setServerReachable"
		"body"  : "$A.test.setServerReachable(reachable)"
".source.js":
	"A.test.runAfterIf":
		"prefix": "test.runAfterIf"
		"body"  : "$A.test.runAfterIf(conditionFunction, callback, intervalInMs)"
".source.js":
	"A.test.setTestTimeout":
		"prefix": "test.setTestTimeout"
		"body"  : "$A.test.setTestTimeout(timeoutMsec)"
".source.js":
	"A.test.isComplete":
		"prefix": "test.isComplet"
		"body"  : "$A.test.isComplete()"
".source.js":
	"A.test.getErrors":
		"prefix": "test.getError"
		"body"  : "$A.test.getErrors()"
".source.js":
	"A.test.print":
		"prefix": "test.print"
		"body"  : "$A.test.print(value)"
".source.js":
	"A.test.auraError":
		"prefix": "test.auraError"
		"body"  : "$A.test.auraError(level, msg)"
".source.js":
	"A.test.expectAuraError":
		"prefix": "test.expectAuraError"
		"body"  : "$A.test.expectAuraError(e)"
".source.js":
	"A.test.auraWarning":
		"prefix": "test.auraWarning"
		"body"  : "$A.test.auraWarning(level, msg)"
".source.js":
	"A.test.expectAuraWarning":
		"prefix": "test.expectAuraWarning"
		"body"  : "$A.test.expectAuraWarning(w)"
".source.js":
	"A.test.assertAccessible":
		"prefix": "test.assertAccessibl"
		"body"  : "$A.test.assertAccessible()"
".source.js":
	"A.test.assertTruthy":
		"prefix": "test.assertTruthy"
		"body"  : "$A.test.assertTruthy(condition, assertMessage)"
".source.js":
	"A.test.assertFalsy":
		"prefix": "test.assertFalsy"
		"body"  : "$A.test.assertFalsy(condition, assertMessage)"
".source.js":
	"A.test.assert":
		"prefix": "test.assert"
		"body"  : "$A.test.assert(condition, assertMessage)"
".source.js":
	"A.test.assertEquals":
		"prefix": "test.assertEquals"
		"body"  : "$A.test.assertEquals(arg1, arg2, assertMessage)"
".source.js":
	"A.test.assertEqualsIgnoreWhitespace":
		"prefix": "test.assertEqualsIgnoreWhitespace"
		"body"  : "$A.test.assertEqualsIgnoreWhitespace(arg1, arg2, assertMessage)"
".source.js":
	"A.test.assertStartsWith":
		"prefix": "test.assertStartsWith"
		"body"  : "$A.test.assertStartsWith(start, full, assertMessage)"
".source.js":
	"A.test.assertNotEquals":
		"prefix": "test.assertNotEquals"
		"body"  : "$A.test.assertNotEquals(arg1, arg2, assertMessage)"
".source.js":
	"A.test.assertDefined":
		"prefix": "test.assertDefined"
		"body"  : "$A.test.assertDefined(condition, assertMessage)"
".source.js":
	"A.test.assertTrue":
		"prefix": "test.assertTrue"
		"body"  : "$A.test.assertTrue(condition, assertMessage)"
".source.js":
	"A.test.assertFalse":
		"prefix": "test.assertFalse"
		"body"  : "$A.test.assertFalse(condition, assertMessage)"
".source.js":
	"A.test.assertUndefined":
		"prefix": "test.assertUndefined"
		"body"  : "$A.test.assertUndefined(condition, assertMessage)"
".source.js":
	"A.test.assertNotUndefinedOrNull":
		"prefix": "test.assertNotUndefinedOrNull"
		"body"  : "$A.test.assertNotUndefinedOrNull(condition, assertMessage)"
".source.js":
	"A.test.assertUndefinedOrNull":
		"prefix": "test.assertUndefinedOrNull"
		"body"  : "$A.test.assertUndefinedOrNull(condition, assertMessage)"
".source.js":
	"A.test.assertNull":
		"prefix": "test.assertNull"
		"body"  : "$A.test.assertNull(condition, assertMessage)"
".source.js":
	"A.test.assertNotNull":
		"prefix": "test.assertNotNull"
		"body"  : "$A.test.assertNotNull(condition, assertMessage)"
".source.js":
	"A.test.assertAuraType":
		"prefix": "test.assertAuraType"
		"body"  : "$A.test.assertAuraType(type, condition, assertMessage)"
".source.js":
	"A.test.fail":
		"prefix": "test.fail"
		"body"  : "$A.test.fail(assertMessage, extraInfoMessage)"
".source.js":
	"A.test.getPrototype":
		"prefix": "test.getPrototype"
		"body"  : "$A.test.getPrototype(instance)"
".source.js":
	"A.test.overrideFunction":
		"prefix": "test.overrideFunction"
		"body"  : "$A.test.overrideFunction(instance, name, newFunction)"
".source.js":
	"A.test.addFunctionHandler":
		"prefix": "test.addFunctionHandler"
		"body"  : "$A.test.addFunctionHandler(instance, name, newFunction, postProcess)"
".source.js":
	"A.test.getOuterHtml":
		"prefix": "test.getOuterHtml"
		"body"  : "$A.test.getOuterHtml(node)"
".source.js":
	"A.test.getText":
		"prefix": "test.getText"
		"body"  : "$A.test.getText(node)"
".source.js":
	"A.test.getTextByComponent":
		"prefix": "test.getTextByComponent"
		"body"  : "$A.test.getTextByComponent(component)"
".source.js":
	"A.test.getStyle":
		"prefix": "test.getStyle"
		"body"  : "$A.test.getStyle(elem, style)"
".source.js":
	"A.test.getNonCommentNodes":
		"prefix": "test.getNonCommentNodes"
		"body"  : "$A.test.getNonCommentNodes(nodes)"
".source.js":
	"A.test.isNodeDeleted":
		"prefix": "test.isNodeDeleted"
		"body"  : "$A.test.isNodeDeleted(node)"
".source.js":
	"A.test.select":
		"prefix": "test.selec"
		"body"  : "$A.test.select()"
".source.js":
	"A.test.contains":
		"prefix": "test.contains"
		"body"  : "$A.test.contains(testString, targetString)"
".source.js":
	"A.test.compareValues":
		"prefix": "test.compareValues"
		"body"  : "$A.test.compareValues(expected, actual)"
".source.js":
	"A.test.getActiveElement":
		"prefix": "test.getActiveElemen"
		"body"  : "$A.test.getActiveElement()"
".source.js":
	"A.test.getActiveElementText":
		"prefix": "test.getActiveElementTex"
		"body"  : "$A.test.getActiveElementText()"
".source.js":
	"A.test.walkTheDOM":
		"prefix": "test.walkTheDOM"
		"body"  : "$A.test.walkTheDOM(node, func)"
".source.js":
	"A.test.getElementsByClassNameCustom":
		"prefix": "test.getElementsByClassNameCustom"
		"body"  : "$A.test.getElementsByClassNameCustom(className, parentElement)"
".source.js":
	"A.test.findChildWithClassName":
		"prefix": "test.findChildWithClassName"
		"body"  : "$A.test.findChildWithClassName(parentElement, className)"
".source.js":
	"A.test.getElementByClass":
		"prefix": "test.getElementByClass"
		"body"  : "$A.test.getElementByClass(classname)"
".source.js":
	"A.test.fireDomEvent":
		"prefix": "test.fireDomEvent"
		"body"  : "$A.test.fireDomEvent(element, eventName, canBubble, cancelable)"
".source.js":
	"A.test.clickOrTouch":
		"prefix": "test.clickOrTouch"
		"body"  : "$A.test.clickOrTouch(element, canBubble, cancelable)"
".source.js":
	"A.test.isInstanceOfText":
		"prefix": "test.isInstanceOfText"
		"body"  : "$A.test.isInstanceOfText(node)"
".source.js":
	"A.test.isInstanceOfAnchorElement":
		"prefix": "test.isInstanceOfAnchorElement"
		"body"  : "$A.test.isInstanceOfAnchorElement(element)"
".source.js":
	"A.test.isInstanceOfInputElement":
		"prefix": "test.isInstanceOfInputElement"
		"body"  : "$A.test.isInstanceOfInputElement(element)"
".source.js":
	"A.test.isInstanceOfLiElement":
		"prefix": "test.isInstanceOfLiElement"
		"body"  : "$A.test.isInstanceOfLiElement(element)"
".source.js":
	"A.test.isInstanceOfParagraphElement":
		"prefix": "test.isInstanceOfParagraphElement"
		"body"  : "$A.test.isInstanceOfParagraphElement(element)"
".source.js":
	"A.test.isInstanceOfButtonElement":
		"prefix": "test.isInstanceOfButtonElement"
		"body"  : "$A.test.isInstanceOfButtonElement(element)"
".source.js":
	"A.test.isInstanceOfImageElement":
		"prefix": "test.isInstanceOfImageElement"
		"body"  : "$A.test.isInstanceOfImageElement(element)"
".source.js":
	"A.test.isInstanceOfDivElement":
		"prefix": "test.isInstanceOfDivElement"
		"body"  : "$A.test.isInstanceOfDivElement(element)"
".source.js":
	"A.test.isInstanceOfSpanElement":
		"prefix": "test.isInstanceOfSpanElement"
		"body"  : "$A.test.isInstanceOfSpanElement(element)"
".source.js":
	"A.test.isInstanceOf":
		"prefix": "test.isInstanceOf"
		"body"  : "$A.test.isInstanceOf(element, elementType, tag)"
".source.js":
	"A.test.objectKeys":
		"prefix": "test.objectKeys"
		"body"  : "$A.test.objectKeys(obj)"
".source.js":
	"A.test.getElementAttributeValue":
		"prefix": "test.getElementAttributeValue"
		"body"  : "$A.test.getElementAttributeValue(element, attributeName)"
".source.js":
	"A.test.addEventHandler":
		"prefix": "test.addEventHandler"
		"body"  : "$A.test.addEventHandler(eventName, handler, component, insert)"
".source.js":
	"A.test.dummyFunction":
		"prefix": "test.dummyFunctio"
		"body"  : "$A.test.dummyFunction()"
".source.js":
	"A.test.getAppCacheEvents":
		"prefix": "test.getAppCacheEvent"
		"body"  : "$A.test.getAppCacheEvents()"
".source.js":
	"A.test.getAuraErrorMessage":
		"prefix": "test.getAuraErrorMessag"
		"body"  : "$A.test.getAuraErrorMessage()"
".source.js":
	"A.test.getAvailableXHROverride":
		"prefix": "test.getAvailableXHROverride"
		"body"  : "$A.test.getAvailableXHROverride(config, isBackground)"
".source.js":
	"A.test.sendOverride":
		"prefix": "test.sendOverride"
		"body"  : "$A.test.sendOverride(config, auraXHR, actions, method, options)"
".source.js":
	"A.test.decodeOverride":
		"prefix": "test.decodeOverride"
		"body"  : "$A.test.decodeOverride(config, response, noStrip)"
".source.js":
	"A.test.PrePostConfig":
		"prefix": "test.PrePostConfig "
		"body"  : "$A.test.PrePostConfig (action, preSendCallback, postSendCallback)"
".source.js":
	"A.test.addPrePostSendCallback":
		"prefix": "test.addPrePostSendCallback "
		"body"  : "$A.test.addPrePostSendCallback (action, preSendCallback, postSendCallback)"
".source.js":
	"A.test.removePrePostSendCallback":
		"prefix": "test.removePrePostSendCallback "
		"body"  : "$A.test.removePrePostSendCallback (handle)"
".source.js":
	"A.test.install":
		"prefix": "test.instal"
		"body"  : "$A.test.install()"
".source.js":
	"A.test.run":
		"prefix": "test.run"
		"body"  : "$A.test.run(name, code, timeoutOverride, quickFixException)"
".source.js":
	"A.test.runInternal":
		"prefix": "test.runInternal"
		"body"  : "$A.test.runInternal(name)"
".source.js":
	"A.test.executeAfterCkEditorIsReady":
		"prefix": "test.executeAfterCkEditorIsReady"
		"body"  : "$A.test.executeAfterCkEditorIsReady(inputRichTextComponent, callback)"
".source.js":
	"A.test.reloadGlobalValueProviders":
		"prefix": "test.reloadGlobalValueProviders"
		"body"  : "$A.test.reloadGlobalValueProviders(gvp, callback)"
".source.js":
	"A.test.getCreationPath":
		"prefix": "test.getCreationPath"
		"body"  : "$A.test.getCreationPath(cmp)"
".source.js":
	"A.test.createHttpRequest":
		"prefix": "test.createHttpReques"
		"body"  : "$A.test.createHttpRequest()"
".source.js":
	"A.test.checkGlobalNamespacePollution":
		"prefix": "test.checkGlobalNamespacePollutio"
		"body"  : "$A.test.checkGlobalNamespacePollution()"
".source.js":
	"A.test.orderedEncode":
		"prefix": "test.orderedEncode"
		"body"  : "$A.test.orderedEncode(obj)"
".source.js":
	"A.util.isIE":
		"prefix": "util.isI"
		"body"  : "$A.util.isIE()"
".source.js":
	"A.util.isIOSWebView":
		"prefix": "util.isIOSWebVie"
		"body"  : "$A.util.isIOSWebView()"
".source.js":
	"A.util.globalEval":
		"prefix": "util.globalEva"
		"body"  : "$A.util.globalEval()"
".source.js":
	"A.util.isArray":
		"prefix": "util.isArra"
		"body"  : "$A.util.isArray()"
".source.js":
	"A.util.isObject":
		"prefix": "util.isObject"
		"body"  : "$A.util.isObject(obj)"
".source.js":
	"A.util.isPlainObject":
		"prefix": "util.isPlainObject"
		"body"  : "$A.util.isPlainObject(obj)"
".source.js":
	"A.util.isError":
		"prefix": "util.isError"
		"body"  : "$A.util.isError(obj)"
".source.js":
	"A.util.isFunction":
		"prefix": "util.isFunction"
		"body"  : "$A.util.isFunction(obj)"
".source.js":
	"A.util.isString":
		"prefix": "util.isString"
		"body"  : "$A.util.isString(obj)"
".source.js":
	"A.util.isNumber":
		"prefix": "util.isNumber"
		"body"  : "$A.util.isNumber(obj)"
".source.js":
	"A.util.isFiniteNumber":
		"prefix": "util.isFiniteNumber"
		"body"  : "$A.util.isFiniteNumber(obj)"
".source.js":
	"A.util.isBoolean":
		"prefix": "util.isBoolean"
		"body"  : "$A.util.isBoolean(obj)"
".source.js":
	"A.util.isUndefined":
		"prefix": "util.isUndefined"
		"body"  : "$A.util.isUndefined(obj)"
".source.js":
	"A.util.isUndefinedOrNull":
		"prefix": "util.isUndefinedOrNull"
		"body"  : "$A.util.isUndefinedOrNull(obj)"
".source.js":
	"A.util.isEmpty":
		"prefix": "util.isEmpty"
		"body"  : "$A.util.isEmpty(obj)"
".source.js":
	"A.util.getBooleanValue":
		"prefix": "util.getBooleanValue "
		"body"  : "$A.util.getBooleanValue (val)"
".source.js":
	"A.util.createHtmlElement":
		"prefix": "util.createHtmlElement "
		"body"  : "$A.util.createHtmlElement (tagName, attributes)"
".source.js":
	"A.util.clearNode":
		"prefix": "util.clearNode "
		"body"  : "$A.util.clearNode (node)"
".source.js":
	"A.util.getElement":
		"prefix": "util.getElement"
		"body"  : "$A.util.getElement(id)"
".source.js":
	"A.util.copy":
		"prefix": "util.copy"
		"body"  : "$A.util.copy(value)"
".source.js":
	"A.util.compareValues":
		"prefix": "util.compareValues"
		"body"  : "$A.util.compareValues(expected, actual)"
".source.js":
	"A.util.hasClass":
		"prefix": "util.hasClass"
		"body"  : "$A.util.hasClass(element, className)"
".source.js":
	"A.util.addClass":
		"prefix": "util.addClass"
		"body"  : "$A.util.addClass(element, newClass)"
".source.js":
	"A.util.removeClass":
		"prefix": "util.removeClass"
		"body"  : "$A.util.removeClass(element, newClass)"
".source.js":
	"A.util.toggleClass":
		"prefix": "util.toggleClass"
		"body"  : "$A.util.toggleClass(element, className, condition)"
".source.js":
	"A.util.swapClass":
		"prefix": "util.swapClass"
		"body"  : "$A.util.swapClass(element, oldClass, newClass)"
".source.js":
	"A.util.setClass":
		"prefix": "util.setClass"
		"body"  : "$A.util.setClass(element, newClass, remove)"
".source.js":
	"A.util.buildClass":
		"prefix": "util.buildClass"
		"body"  : "$A.util.buildClass(oldClass, newClass, remove)"
".source.js":
	"A.util.buildFlavorClass":
		"prefix": "util.buildFlavorClass"
		"body"  : "$A.util.buildFlavorClass(cmp, flavor)"
".source.js":
	"A.util.createElementsFromMarkup":
		"prefix": "util.createElementsFromMarkup"
		"body"  : "$A.util.createElementsFromMarkup(markup)"
".source.js":
	"A.util.insertFirst":
		"prefix": "util.insertFirst"
		"body"  : "$A.util.insertFirst(newEl, referenceEl)"
".source.js":
	"A.util.insertBefore":
		"prefix": "util.insertBefore"
		"body"  : "$A.util.insertBefore(newEl, referenceEl)"
".source.js":
	"A.util.insertAfter":
		"prefix": "util.insertAfter"
		"body"  : "$A.util.insertAfter(newEl, referenceEl)"
".source.js":
	"A.util.appendChild":
		"prefix": "util.appendChild"
		"body"  : "$A.util.appendChild(newEl, referenceEl)"
".source.js":
	"A.util.removeElement":
		"prefix": "util.removeElement"
		"body"  : "$A.util.removeElement(element)"
".source.js":
	"A.util.urlDecode":
		"prefix": "util.urlDecode"
		"body"  : "$A.util.urlDecode(url)"
".source.js":
	"A.util.trim":
		"prefix": "util.trim"
		"body"  : "$A.util.trim(value)"
".source.js":
	"A.util.format":
		"prefix": "util.format"
		"body"  : "$A.util.format(formatString, arg1, arg2, argN)"
".source.js":
	"A.util.truncate":
		"prefix": "util.truncate"
		"body"  : "$A.util.truncate(st, len, ellipsis, truncateByWord)"
".source.js":
	"A.util.createTimeoutCallback":
		"prefix": "util.createTimeoutCallback"
		"body"  : "$A.util.createTimeoutCallback(callback, toleranceMillis)"
".source.js":
	"A.util.removeOn":
		"prefix": "util.removeOn"
		"body"  : "$A.util.removeOn(element, eventName, listener, useCapture)"
".source.js":
	"A.util.formToMap":
		"prefix": "util.formToMap"
		"body"  : "$A.util.formToMap(form)"
".source.js":
	"A.util.getSelectValue":
		"prefix": "util.getSelectValue"
		"body"  : "$A.util.getSelectValue(select)"
".source.js":
	"A.util.addValueToMap":
		"prefix": "util.addValueToMap"
		"body"  : "$A.util.addValueToMap(inputMap, key, value)"
".source.js":
	"A.util.addMapValueToMap":
		"prefix": "util.addMapValueToMap"
		"body"  : "$A.util.addMapValueToMap(inputMap, key, value, subMapKey)"
".source.js":
	"A.util.isSubDef":
		"prefix": "util.isSubDef"
		"body"  : "$A.util.isSubDef(def, qname)"
".source.js":
	"A.util.apply":
		"prefix": "util.appl"
		"body"  : "$A.util.apply( deepCopy)"
".source.js":
	"A.util.camelCaseToHyphens":
		"prefix": "util.camelCaseToHyphens"
		"body"  : "$A.util.camelCaseToHyphens(str)"
".source.js":
	"A.util.hyphensToCamelCase":
		"prefix": "util.hyphensToCamelCase"
		"body"  : "$A.util.hyphensToCamelCase(str)"
".source.js":
	"A.util.acceptsData":
		"prefix": "util.acceptsData"
		"body"  : "$A.util.acceptsData(element)"
".source.js":
	"A.util.getElementAttributeValue":
		"prefix": "util.getElementAttributeValue"
		"body"  : "$A.util.getElementAttributeValue(element, attributeName)"
".source.js":
	"A.util.getDataAttribute":
		"prefix": "util.getDataAttribute"
		"body"  : "$A.util.getDataAttribute(element, key)"
".source.js":
	"A.util.setDataAttribute":
		"prefix": "util.setDataAttribute"
		"body"  : "$A.util.setDataAttribute(element, key, value)"
".source.js":
	"A.util.getDataAttributeName":
		"prefix": "util.getDataAttributeName"
		"body"  : "$A.util.getDataAttributeName(key)"
".source.js":
	"A.util.hasDataAttribute":
		"prefix": "util.hasDataAttribute"
		"body"  : "$A.util.hasDataAttribute(element, key)"
".source.js":
	"A.util.isElement":
		"prefix": "util.isElement"
		"body"  : "$A.util.isElement(obj)"
".source.js":
	"A.util.attachToDocumentBody":
		"prefix": "util.attachToDocumentBody"
		"body"  : "$A.util.attachToDocumentBody(element)"
".source.js":
	"A.util.stringEndsWith":
		"prefix": "util.stringEndsWith"
		"body"  : "$A.util.stringEndsWith(fullstr, substr)"
".source.js":
	"A.util.bind":
		"prefix": "util.bin"
		"body"  : "$A.util.bind()"
".source.js":
	"A.util.keys":
		"prefix": "util.key"
		"body"  : "$A.util.keys()"
".source.js":
	"A.util.lookup":
		"prefix": "util.lookup"
		"body"  : "$A.util.lookup(object )"
".source.js":
	"A.util.merge":
		"prefix": "util.merge"
		"body"  : "$A.util.merge(first )"
".source.js":
	"A.util.forEach":
		"prefix": "util.forEac"
		"body"  : "$A.util.forEach()"
".source.js":
	"A.util.map":
		"prefix": "util.ma"
		"body"  : "$A.util.map()"
".source.js":
	"A.util.reduce":
		"prefix": "util.reduc"
		"body"  : "$A.util.reduce()"
".source.js":
	"A.util.every":
		"prefix": "util.ever"
		"body"  : "$A.util.every()"
".source.js":
	"A.util.some":
		"prefix": "util.som"
		"body"  : "$A.util.some()"
".source.js":
	"A.util.filter":
		"prefix": "util.filte"
		"body"  : "$A.util.filter()"
".source.js":
	"A.util.destroyAsync":
		"prefix": "util.destroyAsync"
		"body"  : "$A.util.destroyAsync(cmp)"
".source.js":
	"A.util.instanceOf":
		"prefix": "util.instanceOf"
		"body"  : "$A.util.instanceOf(instance, constructor)"
".source.js":
	"A.util.emptyComponentTrash":
		"prefix": "util.emptyComponentTras"
		"body"  : "$A.util.emptyComponentTrash()"
".source.js":
	"A.util.contains":
		"prefix": "util.contains"
		"body"  : "$A.util.contains(container, element)"
".source.js":
	"A.util.squash":
		"prefix": "util.squash"
		"body"  : "$A.util.squash(event, preventDefault)"
".source.js":
	"A.util.stripTags":
		"prefix": "util.stripTags"
		"body"  : "$A.util.stripTags(input, tags)"
".source.js":
	"A.util.getWindowSize":
		"prefix": "util.getWindowSiz"
		"body"  : "$A.util.getWindowSize()"
".source.js":
	"A.util.isComponent":
		"prefix": "util.isComponent"
		"body"  : "$A.util.isComponent(obj)"
".source.js":
	"A.util.isExpression":
		"prefix": "util.isExpression "
		"body"  : "$A.util.isExpression (obj)"
".source.js":
	"A.util.isValue":
		"prefix": "util.isValue"
		"body"  : "$A.util.isValue(obj)"
".source.js":
	"A.util.isAction":
		"prefix": "util.isAction"
		"body"  : "$A.util.isAction(obj)"
".source.js":
	"A.util.supportsTouchEvents":
		"prefix": "util.supportsTouchEvent"
		"body"  : "$A.util.supportsTouchEvents()"
".source.js":
	"A.util.estimateSize":
		"prefix": "util.estimateSize"
		"body"  : "$A.util.estimateSize(obj)"
".source.js":
	"A.util.toArray":
		"prefix": "util.toArray"
		"body"  : "$A.util.toArray(collection)"
".source.js":
	"A.util.setText":
		"prefix": "util.setText"
		"body"  : "$A.util.setText(node, text)"
".source.js":
	"A.util.getDebugToolComponent":
		"prefix": "util.getDebugToolComponen"
		"body"  : "$A.util.getDebugToolComponent()"
".source.js":
	"A.util.getDebugToolsAuraInstance":
		"prefix": "util.getDebugToolsAuraInstanc"
		"body"  : "$A.util.getDebugToolsAuraInstance()"
".source.js":
	"A.util.setDebugToolWindow":
		"prefix": "util.setDebugToolWindow"
		"body"  : "$A.util.setDebugToolWindow(debugWindow)"
".source.js":
	"A.util.getUrl":
		"prefix": "util.getUrl"
		"body"  : "$A.util.getUrl()"
".source.js":
	"A.util.getText":
		"prefix": "util.getText"
		"body"  : "$A.util.getText(node)"
".source.js":
	"A.util.errorBasedOnMode":
		"prefix": "util.errorBasedOnMode"
		"body"  : "$A.util.errorBasedOnMode(msg)"
".source.js":
	"A.util.includeScript":
		"prefix": "util.includeScript"
		"body"  : "$A.util.includeScript(url, callback)"

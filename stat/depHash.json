{
 "app.__artifactId__.__artifactId__": {
  "cmp.aura.application": [
   {}
  ]
 },
 "app.aura.application": {
  "cmp.aura.application": [
   {
    "abstract": "true",
    "extensible": "true",
    "locationchangeevent": "aura:locationChange",
    "template": "aura:template",
    "renderer": "js://aura.component, java://org.auraframework.renderer.ComponentRenderer",
    "access": "UNAUTHENTICATED",
    "implements": "aura:rootComponent",
    "support": "GA",
    "useappcache": "false",
    "description": "The root of the application hierarchy."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "body",
    "access": "GLOBAL",
    "type": "Aura.Component[]",
    "description": "The components to render within this application."
   }
  ]
 },
 "app.aura.integrationServiceApp": {
  "cmp.aura.application": [
   {
    "extensible": "true",
    "access": "global",
    "template": "aura:integrationServiceTemplate",
    "render": "CLIENT"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "aura:*"
   },
   {
    "resource": "ui:message"
   },
   {
    "resource": "ui:outputText"
   }
  ]
 },
 "app.auraadmin.admin": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.impl.admin.AdminModel",
    "controller": "java://org.auraframework.impl.admin.AdminController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "mbeans",
    "type": "boolean"
   }
  ],
  "cmp.auraadmin.cacheview": [
   {
    "data": "{!m.defsData}",
    "name": "Definitions",
    "showdefs": "true"
   },
   {
    "data": "{!m.existsData}",
    "name": "Existence"
   },
   {
    "data": "{!m.stringsData}",
    "name": "Strings"
   },
   {
    "data": "{!m.descriptorFilterData}",
    "name": "Descriptor Filter"
   }
  ],
  "cmp.aura.iteration": [
   {
    "var": "reg",
    "items": "{!m.registryData}"
   }
  ],
  "cmp.auraadmin.registryview": [
   {
    "registry": "{!reg}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.mbeans}"
   }
  ],
  "cmp.auraadmin.counterbeans": [
   {
    "beans": "{!m.beanData}"
   }
  ]
 },
 "app.auraadmin.catalog": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.components.auraadmin.CatalogModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.components}",
    "var": "cmp",
    "indexvar": "index"
   }
  ]
 },
 "app.auraadmin.unused": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.components.auraadmin.UnusedModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.components}",
    "var": "cmp",
    "indexvar": "index"
   }
  ]
 },
 "app.auradev.autocompleteExample": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.ui.autocomplete": [
   {
    "aura:id": "autoComplete",
    "optionvar": "row",
    "matchdone": "{!c.handleMatchDone}",
    "inputchange": "{!c.handleInputChange}",
    "selectlistoption": "{!c.handleSelectOption}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   }
  ],
  "cmp.auradev.testdataprovider": [
   {}
  ],
  "cmp.auradev.testdataprovider2": [
   {}
  ],
  "cmp.ui.autocompleteoption": [
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   }
  ]
 },
 "app.auradev.dependencies": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "component",
    "default": "aura:application"
   },
   {
    "type": "Boolean",
    "name": "clearPreloads",
    "default": "true"
   }
  ],
  "cmp.auradev.showdependencies": [
   {
    "component": "{!v.component}"
   }
  ]
 },
 "app.auradev.lint": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String"
   }
  ],
  "cmp.ui.message": [
   {
    "title": "Usage:",
    "severity": "info"
   }
  ],
  "cmp.auradev.lintc": [
   {
    "name": "{!v.name}",
    "aura:load": "lazy"
   }
  ]
 },
 "app.auradev.serializeRegistry": {
  "cmp.aura.application": [
   {
    "controller": "java://org.auraframework.components.auradev.SerializeRegistryController"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "serializeBtn",
    "press": "{!c.serialize}",
    "label": "Serialize!",
    "disabled": "false"
   }
  ]
 },
 "app.auradocs.docs": {
  "cmp.aura.application": [
   {
    "access": "global",
    "template": "auradocs:template",
    "controller": "java://org.auraframework.docs.DocsController",
    "useappcache": "false",
    "locationchangeevent": "auradocs:locationChange",
    "implements": "auraStorage:refreshObserver"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "auradocs:*"
   },
   {
    "resource": "aurastorage:*"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:waiting",
    "action": "{!c.waiting}"
   },
   {
    "event": "aura:doneWaiting",
    "action": "{!c.doneWaiting}"
   },
   {
    "name": "refreshBegin",
    "action": "{!c.refreshBegin}"
   },
   {
    "name": "refreshEnd",
    "action": "{!c.refreshEnd}"
   }
  ],
  "cmp.auradocs.nav": [
   {
    "aura:id": "navbar"
   }
  ]
 },
 "app.auradocs.examples": {
  "cmp.aura.application": [
   {
    "template": "auradocs:examplesTemplate",
    "access": "global"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String"
   }
  ],
  "cmp.ui.message": [
   {
    "title": "Usage:",
    "severity": "info"
   }
  ],
  "cmp.auradocs.examplesc": [
   {
    "name": "{!v.name}",
    "aura:load": "lazy"
   }
  ]
 },
 "app.auradocs.outputViewer": {
  "cmp.aura.application": [
   {
    "access": "global"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "def",
    "type": "String"
   }
  ],
  "cmp.auradocs.outputviewerc": [
   {
    "def": "{!v.def}"
   }
  ]
 },
 "app.auradocs.reference": {
  "cmp.aura.application": [
   {
    "access": "global",
    "template": "auradocs:template",
    "controller": "java://org.auraframework.docs.DocsController",
    "useappcache": "false",
    "locationchangeevent": "auradocs:locationChange",
    "implements": "auraStorage:refreshObserver"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "auradocs:*"
   },
   {
    "resource": "aurastorage:*"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:waiting",
    "action": "{!c.waiting}"
   },
   {
    "event": "aura:doneWaiting",
    "action": "{!c.doneWaiting}"
   },
   {
    "name": "refreshBegin",
    "action": "{!c.refreshBegin}"
   },
   {
    "name": "refreshEnd",
    "action": "{!c.refreshEnd}"
   }
  ],
  "cmp.auradocs.nav": [
   {
    "aura:id": "navbar",
    "referenceonly": "true"
   }
  ]
 },
 "app.auraide.ide": {
  "cmp.aura.application": [
   {
    "render": "server"
   }
  ]
 },
 "app.aurajstest.blank": {
  "cmp.aura.application": [
   {
    "description": "Placeholder app for free-form js tests; used by TestInjectionRenderer"
   }
  ]
 },
 "app.aurajstest.inject": {
  "cmp.aura.application": [
   {
    "renderer": "java://org.auraframework.components.aurajstest.TestInjectionRenderer",
    "template": "aurajstest:emptyTemplate",
    "access": "INTERNAL"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "defType",
    "type": "String",
    "default": "COMPONENT"
   },
   {
    "name": "descriptor",
    "type": "String",
    "required": "true"
   },
   {
    "name": "testName",
    "type": "String",
    "required": "true"
   }
  ]
 },
 "app.aurajstest.jstest": {
  "cmp.aura.application": [
   {
    "access": "GLOBAL",
    "model": "java://org.auraframework.components.aurajstest.JSTestModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "descriptor",
    "type": "String",
    "default": "ui:button"
   },
   {
    "name": "defType",
    "type": "String",
    "default": "COMPONENT"
   },
   {
    "name": "index",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "test",
    "type": "String"
   }
  ],
  "cmp.ui.tabset": [
   {
    "aura:id": "tabs",
    "class": "jstestTabset"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.testCases}",
    "var": "case"
   }
  ],
  "cmp.aurajstest.jstestcase": [
   {
    "aura:id": "test",
    "case": "{!case}",
    "url": "{!m.url}",
    "suite": "{!m.testSuite}",
    "done": "{!c.testDone}"
   }
  ]
 },
 "app.aurajstest.jstestAis": {
  "cmp.aura.application": [
   {
    "access": "GLOBAL",
    "model": "java://org.auraframework.components.aurajstest.JSTestModel"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!m.isHybrid}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "descriptor",
    "type": "String",
    "default": "ui:button"
   },
   {
    "name": "descriptor2",
    "type": "String",
    "default": "ui:button"
   },
   {
    "name": "defType",
    "type": "String",
    "default": "COMPONENT"
   },
   {
    "name": "index",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "test",
    "type": "String"
   }
  ],
  "cmp.ui.tabset": [
   {
    "aura:id": "tabs",
    "class": "jstestTabset"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.testCases}",
    "var": "case"
   }
  ],
  "cmp.aurajstest.jstestcase": [
   {
    "aura:id": "test",
    "case": "{!case}",
    "url": "{!m.url}",
    "suite": "{!m.testSuite}",
    "done": "{!c.testDone}"
   }
  ]
 },
 "app.uiExamples.panelExamples": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://uiExamples:modalContent",
    "type": "COMPONENT"
   },
   {
    "resource": "markup://uiExamples:panelContent",
    "type": "COMPONENT"
   },
   {
    "resource": "markup://uiExamples:panelHeader",
    "type": "COMPONENT"
   },
   {
    "resource": "markup://uiExamples:panelFooter",
    "type": "COMPONENT"
   },
   {
    "resource": "markup://ui:spinner",
    "type": "COMPONENT"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Create panelType: panel, flavor: custom",
    "class": "customer-header-button",
    "press": "{!c.createPanelWithHeader}"
   },
   {
    "label": "Create panelType: panel, flavor: full screen",
    "press": "{!c.createFullPanel}"
   },
   {
    "label": "Create panelType: modal",
    "press": "{!c.createModal}"
   },
   {
    "label": "Create panelType: modal, flavor: large",
    "press": "{!c.createLargeModal}"
   },
   {
    "label": "Update content after panel created",
    "press": "{!c.lazyLoadPanel}"
   }
  ],
  "cmp.ui.panelmanager2": [
   {
    "aura:id": "pm"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "registeredPanels"
   }
  ],
  "cmp.ui.panel": [
   {
    "alias": "panel"
   }
  ],
  "cmp.ui.modal": [
   {
    "alias": "modal"
   }
  ]
 },
 "app.uiExamples.panelsTooltipsDemo": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://uiExamples:modalContent",
    "type": "COMPONENT"
   },
   {
    "resource": "markup://uiExamples:panelContent",
    "type": "COMPONENT"
   },
   {
    "resource": "markup://uiExamples:panelFooter",
    "type": "COMPONENT"
   },
   {
    "resource": "markup://uiExamples:panelHeader",
    "type": "COMPONENT"
   },
   {
    "resource": "markup://ui:spinner",
    "type": "COMPONENT"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "flat-btn",
    "label": "Modal",
    "press": "{!c.createModal}"
   },
   {
    "label": "Large Modal (flavor)",
    "class": "flat-btn",
    "press": "{!c.createLargeModal}"
   },
   {
    "label": "Lazy load content",
    "class": "flat-btn",
    "press": "{!c.lazyLoadPanel}"
   },
   {
    "label": "Flavored Panel with a pointer",
    "class": "customer-header-button flat-btn",
    "press": "{!c.createPanelWithHeader}"
   },
   {
    "class": "positioned-target flat-btn",
    "label": "South",
    "press": "{!c.openNotification}"
   },
   {
    "class": "positioned-target-east flat-btn",
    "label": "East",
    "press": "{!c.openEastPanel}"
   },
   {
    "class": "positioned-target-west flat-btn",
    "label": "West",
    "press": "{!c.openWestPanel}"
   },
   {
    "class": "positioned-target-north flat-btn",
    "label": "North",
    "press": "{!c.openNorthPanel}"
   }
  ],
  "cmp.ui.tooltip": [
   {
    "advanced": "false",
    "triggerclass": "my-tt",
    "tabindex": "-1",
    "tooltipbody": "This is a CSS-only tooltip, perfect for long lists. (long tooltips are ok too)"
   },
   {
    "aura:flavor": "pop",
    "triggerclass": "my-tt",
    "advanced": "true",
    "tooltipbody": "The position adjusts to fit the viewport."
   },
   {
    "fadeinduration": "500",
    "fadeoutduration": "500",
    "triggerclass": "my-tt",
    "advanced": "true",
    "trigger": "click",
    "tooltipbody": "Also it fades in!"
   },
   {
    "aura:flavor": "pop",
    "fadeinduration": "500",
    "fadeoutduration": "500",
    "direction": "east",
    "triggerclass": "my-tt",
    "advanced": "true",
    "trigger": "click",
    "tooltipbody": "This is tooltip goes to the east, also supported: south and west!"
   }
  ],
  "cmp.ui.panelmanager2": [
   {
    "aura:id": "pm"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "registeredPanels"
   }
  ],
  "cmp.ui.panel": [
   {
    "alias": "panel"
   }
  ],
  "cmp.ui.modal": [
   {
    "alias": "modal"
   }
  ]
 },
 "app.appCache.additionalUrls": {
  "cmp.aura.application": [
   {
    "access": "global",
    "useappcache": "true",
    "render": "client",
    "controller": "java://org.auraframework.components.test.java.controller.TestController",
    "additionalappcacheurls": "{!c.getAppCacheUrls}"
   }
  ]
 },
 "app.appCache.appCacheEvents": {
  "cmp.aura.application": [
   {
    "access": "global",
    "useappcache": "true",
    "render": "client"
   }
  ]
 },
 "app.appCache.nopreload": {
  "cmp.aura.application": [
   {
    "access": "global",
    "useappcache": "true",
    "render": "client"
   }
  ]
 },
 "app.appCache.testApp": {
  "cmp.aura.application": [
   {
    "access": "global",
    "useappcache": "true",
    "render": "client"
   }
  ]
 },
 "app.appCache.withpreload": {
  "cmp.aura.application": [
   {
    "access": "global",
    "useappcache": "true",
    "render": "client"
   }
  ],
  "cmp.appcache.slate": [
   {}
  ]
 },
 "app.attributesTest.caseSensitivity": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
    "access": "GLOBAL"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "attr",
    "type": "String",
    "default": "An Aura of Lightning Lumenated the Plume"
   },
   {
    "name": "map",
    "type": "Object",
    "default": "{!m.map}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputText",
    "value": "{!v.map.fruit}"
   }
  ]
 },
 "app.auraStorageTest.applicationTest": {
  "cmp.aura.application": [
   {
    "template": "auraStorageTest:indexedDBtemplate"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "status",
    "type": "String",
    "default": "Waiting"
   },
   {
    "name": "refreshed",
    "type": "String",
    "default": "NO"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:applicationRefreshed",
    "action": "{!c.handleRefreshed}"
   },
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "addToStorage",
    "action": "c.addToStorage"
   }
  ]
 },
 "app.auraStorageTest.indexedDBStorageTest": {
  "cmp.aura.application": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://auraStorageTest:indexedDBCmp"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "auraStorage:modified",
    "action": "{!c.storageModified}"
   }
  ]
 },
 "app.auratest.aisAsyncApp": {
  "cmp.aura.application": [
   {
    "extends": "aura:integrationServiceApp",
    "template": "auratest:aisAsyncTemplate"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "handleEventTest:applicationEvent",
    "action": "{!c.handlerPressFromInject}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "msgFromEvent",
    "type": "String",
    "default": "empty"
   }
  ]
 },
 "app.auratest.createInnerCmpQuickFixApp": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.auratest.innercmpthatdoesntexist": [
   {}
  ]
 },
 "app.auratest.excludedTestsList": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.components.test.java.model.ExcludedTestsListModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.browserInfo}",
    "var": "browser"
   },
   {
    "items": "{!m.browserInfo}",
    "var": "browser"
   },
   {
    "items": "{!browser.ignoredTests}",
    "var": "test"
   }
  ]
 },
 "app.auratest.rerender": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "whichArray",
    "type": "String",
    "default": "v.emptyArray"
   },
   {
    "name": "emptyArray",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "aura:id": "linkDef",
    "label": "#def",
    "value": "#def"
   },
   {
    "aura:id": "linkDeath",
    "label": "#death",
    "value": "#death"
   },
   {
    "aura:id": "linkEmpty",
    "label": "#empty",
    "value": "#empty"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "value": "{!v.whichArray}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "pushText",
    "label": "push text",
    "press": "{!c.pushText}"
   },
   {
    "aura:id": "pushComponent",
    "label": "push component",
    "press": "{!c.pushComponent}"
   },
   {
    "aura:id": "reverse",
    "label": "reverse",
    "press": "{!c.reverse}"
   },
   {
    "aura:id": "pop",
    "label": "pop",
    "press": "{!c.pop}"
   },
   {
    "aura:id": "clear",
    "label": "clear",
    "press": "{!c.clear}"
   }
  ],
  "cmp.auratest.rerenderchild": [
   {
    "aura:id": "emptyArrayContainer",
    "title": "emptyArray = "
   },
   {
    "aura:id": "child1",
    "title": "child1"
   },
   {
    "aura:id": "grandchild1",
    "title": "grandchild1"
   },
   {
    "aura:id": "child2",
    "title": "child2"
   },
   {
    "aura:id": "grandchild2",
    "title": "grandchild2"
   },
   {
    "aura:id": "greatgrandchild2",
    "title": "greatgrandchild2"
   },
   {
    "aura:id": "grandchild2a",
    "title": "grandchild2a"
   }
  ]
 },
 "app.auratest.testApplication1": {
  "cmp.aura.application": [
   {
    "extensible": "true",
    "implements": "auratest:testInterface",
    "extends": "auratest:testApplication3",
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "myString",
    "type": "String",
    "default": "Default String"
   }
  ],
  "cmp.auratest.testcomponent2": [
   {
    "myinteger": "1"
   }
  ]
 },
 "app.auratest.testApplication3": {
  "cmp.aura.application": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "myBoolean",
    "type": "Boolean",
    "default": "True"
   }
  ]
 },
 "app.auratest.testLayoutMatch": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:layoutChange",
    "action": "{!c.layoutChanged}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "matchRegexp",
    "type": "String",
    "default": "^match.+"
   },
   {
    "name": "undefinedRegexp",
    "type": "String"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "label": "noMatch",
    "value": "#noMatch"
   },
   {
    "label": "xMatch",
    "value": "#xMatch"
   }
  ]
 },
 "app.auratest.testLayoutsWithJavaController": {
  "cmp.aura.application": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController",
    "locationchangeevent": "auratest:locationChange"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:layoutChange",
    "action": "{!c.layoutDone}"
   }
  ]
 },
 "app.auratest.testPerfRunner": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "scope",
    "type": "String"
   },
   {
    "name": "keyword",
    "type": "String"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.scope == 'perf'}"
   }
  ],
  "cmp.auratest.testperfrunnercontainer": [
   {
    "aura:id": "container",
    "scope": "{!v.scope}",
    "keyword": "{!v.keyword}",
    "aura:load": "lazy"
   }
  ]
 },
 "app.auratest.testTitleChangeEvent": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "titleExpr",
    "type": "String",
    "default": "from expression"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:layoutChange",
    "action": "{!c.layoutChanged}"
   },
   {
    "event": "aura:titleChange",
    "action": "{!c.titleChanged}"
   }
  ]
 },
 "app.auratest.test_Preload_ScrapNamespace": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.dependency": [
   {
    "resource": "somecrap"
   }
  ],
  "cmp.auratest.test_button": [
   {
    "class": "displayText",
    "label": "Sitting pretty tight"
   }
  ]
 },
 "app.auratest.test_Preload_SimpleCmp": {
  "cmp.aura.application": [
   {
    "preload": "ui,aura"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Apex Instantiated",
    "class": "displayText1",
    "aura:id": "button"
   }
  ]
 },
 "app.auratest.test_ServerRendering": {
  "cmp.aura.application": [
   {
    "render": "SERVER"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "expression",
    "type": "String",
    "default": "testServerSideRenderingOfBasicComponents"
   }
  ]
 },
 "app.auratest.test_SimpleServerRenderedPage": {
  "cmp.aura.application": [
   {
    "render": "server"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "ui:*"
   },
   {
    "resource": "aura:*"
   },
   {
    "resource": "auradev:*"
   },
   {
    "resource": "preloadTest:*"
   }
  ],
  "cmp.test.test_javarndr_component": [
   {}
  ]
 },
 "app.clientApiTest.auraError": {
  "cmp.aura.application": [
   {
    "access": "unauthenticated"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "systemErrorHandled",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "setFriendlyErrorHandled",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "useFriendlyErrorMessageFromData",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "handleSystemErrorEvent",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "errorCode",
    "type": "String",
    "default": "8675309"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:systemError",
    "action": "{!c.handleSystemError}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Throw Aura Error",
    "press": "{!c.throwAuraError}",
    "class": "auraErrorButton"
   },
   {
    "label": "Failing Assert",
    "press": "{!c.failAssert}",
    "class": "assertButton"
   },
   {
    "label": "Throw Friendly Error",
    "press": "{!c.throwFriendlyError}",
    "class": "friendlyErrorButton"
   },
   {
    "label": "Throw Aura Error with errorCode",
    "press": "{!c.throwErrorWithCode}",
    "class": "errorCodeButton"
   }
  ]
 },
 "app.clientLibraryTest.clientLibraryTest": {
  "cmp.aura.application": [
   {
    "render": "client",
    "useappcache": "true",
    "access": "global"
   }
  ],
  "cmp.aura.clientlibrary": [
   {
    "name": "UIPerf",
    "type": "JS",
    "modes": "PTEST,CADENCE"
   },
   {
    "name": "CkEditor",
    "type": "JS"
   },
   {
    "name": "clTestAppJS",
    "url": "js://clientLibraryTest.clientLibraryTest",
    "type": "JS"
   },
   {
    "name": "clTestAppCSS",
    "url": "css://clientLibraryTest.clientLibraryTest",
    "type": "CSS",
    "combine": "true"
   },
   {
    "name": "UIPerfCsS",
    "type": "CSS",
    "modes": "STATS"
   }
  ]
 },
 "app.clientLibraryTest.testDependencies": {
  "cmp.aura.application": [
   {
    "access": "public",
    "render": "client"
   }
  ],
  "cmp.aura.clientlibrary": [
   {
    "name": "endofBody",
    "url": "http://likeaboss.com/topOfBody.js",
    "type": "JS"
   },
   {
    "name": "endofBody",
    "url": "http://likeaboss.com/endOfBody.js",
    "type": "JS"
   },
   {
    "name": "duplicate",
    "url": "http://likeaboss.com/duplicate.js",
    "type": "JS"
   },
   {
    "url": "http://likeaboss.com/mode.js",
    "type": "JS",
    "modes": "PTEST"
   }
  ],
  "cmp.clientlibrarytest.testchild": [
   {}
  ],
  "cmp.clientlibrarytest.testinterface": [
   {
    "implnumber": "1"
   }
  ],
  "cmp.clientlibrarytest.testfacet": [
   {},
   {}
  ]
 },
 "app.clientServiceTest.actionStorage": {
  "cmp.aura.application": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "name": "actions",
    "maxsize": "10"
   }
  ]
 },
 "app.clientServiceTest.connectivity": {
  "cmp.aura.application": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "host",
    "type": "String",
    "default": ""
   },
   {
    "name": "actionStatus",
    "type": "String",
    "default": ""
   },
   {
    "name": "actionValue",
    "type": "String",
    "default": ""
   },
   {
    "name": "eventsFired",
    "type": "String",
    "default": ""
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:connectionLost",
    "action": "{!c.logEvent}"
   },
   {
    "event": "aura:connectionResumed",
    "action": "{!c.logEvent}"
   },
   {
    "event": "aura:layoutChange",
    "action": "{!c.logEvent}"
   },
   {
    "event": "aura:layoutFailed",
    "action": "{!c.logEvent}"
   },
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.setHost}"
   },
   {
    "name": "change",
    "value": "{!v.host}",
    "action": "{!c.setHost}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inputHost",
    "label": "inputTextForConnection",
    "labelposition": "hidden",
    "value": "{!v.host}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "testConnection",
    "label": "test connection",
    "press": "{!c.testConnection}"
   },
   {
    "aura:id": "setConnectedFalseButton",
    "label": "set connected false",
    "press": "{!c.setConnectedFalse}"
   },
   {
    "aura:id": "setConnectedTrueButton",
    "label": "set connected true",
    "press": "{!c.setConnectedTrue}"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "aura:id": "defaultlink",
    "label": "default layout",
    "value": "#default"
   },
   {
    "aura:id": "actionlink",
    "label": "action layout",
    "value": "#action"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!'events fired: ' + v.eventsFired}"
   },
   {
    "value": "{!'action status: ' + v.actionStatus}"
   },
   {
    "value": "{!'action value: ' + v.actionValue}"
   }
  ]
 },
 "app.clientServiceTest.csrfTokenStorage": {
  "cmp.aura.application": [
   {
    "template": "auraStorageTest:actionsStorageTemplate",
    "render": "client",
    "access": "unauthenticated"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "token",
    "type": "String",
    "default": "undefined"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ]
 },
 "app.clientServiceTest.refreshDuringLocationChange": {
  "cmp.aura.application": [
   {
    "controller": "java://org.auraframework.controller.java.DelayedController"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "label": "newLayout",
    "value": "#newLayout"
   }
  ]
 },
 "app.componentTest.creationPath": {
  "cmp.aura.application": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.componenttest.hasbody": [
   {
    "aura:id": "topbody"
   },
   {
    "aura:id": "headerbody"
   },
   {
    "aura:id": "nestestbody"
   },
   {
    "aura:id": "nestedbody"
   },
   {
    "aura:id": "truebody"
   },
   {
    "aura:id": "falsebody"
   }
  ],
  "cmp.componenttest.hasmodel": [
   {
    "aura:id": "topmodel"
   },
   {
    "aura:id": "headermodel"
   },
   {
    "aura:id": "innermodel"
   },
   {
    "aura:id": "innermodel2"
   },
   {
    "aura:id": "nestingmodel"
   },
   {
    "aura:id": "nestedmodel"
   },
   {
    "aura:id": "nestestmodel"
   },
   {
    "aura:id": "truemodel"
   },
   {
    "aura:id": "falsemodel"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "headerComponents"
   },
   {
    "attribute": "innerComponents"
   },
   {
    "attribute": "else"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "iftrue",
    "type": "boolean",
    "default": "true"
   },
   {
    "name": "ifserver",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "list",
    "type": "List",
    "default": "x"
   },
   {
    "name": "descriptor",
    "type": "String",
    "default": "aura:text"
   },
   {
    "name": "value",
    "type": "String",
    "default": "hi"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.iftrue}"
   },
   {
    "istrue": "{!v.ifserver}"
   },
   {
    "istrue": "{!v.ifserver}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iteration",
    "items": "{!v.list}",
    "var": "x",
    "indexvar": "idx"
   }
  ],
  "cmp.componenttest.appendcomponent": [
   {
    "aura:id": "iterinst",
    "descriptor": "{!v.descriptor}",
    "value": "{!v.value}"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:layoutChange",
    "action": "{!c.layoutChange}"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "aura:id": "defaultlink",
    "label": "default layout",
    "value": "#default"
   },
   {
    "aura:id": "actionlink",
    "label": "action layout",
    "value": "#action"
   }
  ]
 },
 "app.flavorTest.async_override": {
  "cmp.aura.application": [
   {}
  ]
 },
 "app.flavorTest.overrides_changeDefault": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.flavortest.overrides_x_onlyimplicitdefault": [
   {
    "aura:id": "implicit"
   }
  ],
  "cmp.flavortest.overrides_x_onlyflavora": [
   {
    "aura:id": "onlyA"
   }
  ],
  "cmp.flavortest.overrides_x_onlyflavorb": [
   {
    "aura:id": "onlyB"
   }
  ],
  "cmp.flavortest.overrides_x_onlyflavorc": [
   {
    "aura:id": "onlyC"
   }
  ],
  "cmp.flavortest.overrides_x_all": [
   {
    "aura:id": "all"
   }
  ]
 },
 "app.flavorTest.overrides_changeDefaultToMultiple": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.flavortest.x_sample": [
   {
    "aura:id": "usingDefault"
   },
   {
    "aura:id": "usingExplicit",
    "aura:flavor": "base"
   }
  ]
 },
 "app.flavorTest.overrides_changeDefaultToNew": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.flavortest.overrides_x_all": [
   {
    "aura:id": "target"
   }
  ]
 },
 "app.flavorTest.overrides_replaceViaUse": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.flavortest.overrides_x_onlyimplicitdefault": [
   {
    "aura:id": "target"
   }
  ]
 },
 "app.flavorTest.removal_all": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.flavortest.x_samplewithdefault": [
   {
    "aura:id": "c1"
   }
  ],
  "cmp.flavortest.overrides_x_onlyimplicitdefault": [
   {
    "aura:id": "c2"
   }
  ]
 },
 "app.flavorTest.removal_allFromNs": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.flavortest.x_samplewithdefault": [
   {
    "aura:id": "c1"
   }
  ],
  "cmp.flavortest.overrides_x_onlyimplicitdefault": [
   {
    "aura:id": "c2"
   }
  ]
 },
 "app.flavorTest.removal_singleCmp": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.flavortest.x_samplewithdefault": [
   {
    "aura:id": "c1"
   }
  ],
  "cmp.flavortest.overrides_x_onlyimplicitdefault": [
   {
    "aura:id": "c2"
   }
  ]
 },
 "app.handleEventTest.fireFromServer": {
  "cmp.aura.application": [
   {
    "render": "client",
    "controller": "java://org.auraframework.components.test.java.controller.TestControllerToAttachEvents"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "handleEventTest:applicationEvent",
    "action": "{!c.handleApplicationEvent}"
   },
   {
    "event": "preloadTest:applicationEvent",
    "action": "{!c.preloadedEventDef}"
   },
   {
    "event": "test:applicationEvent",
    "action": "{!c.newEventDef}"
   },
   {
    "event": "handleEventTest:dupEvent",
    "action": "{!c.handleDupEvent}"
   },
   {
    "event": "handleEventTest:chainEvent",
    "action": "{!c.handleChainEvent}"
   },
   {
    "event": "handleEventTest:cyclicEvent",
    "action": "{!c.causeInfiniteEvenLoop}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Run action to attach single event at server",
    "press": "{!c.attachOneEvent}"
   },
   {
    "label": "Run action to attach multiple events at server",
    "press": "{!c.attachMultipleEvents}"
   },
   {
    "label": "Run action to attach duplicate events at server",
    "press": "{!c.attachDupEvent}"
   },
   {
    "label": "Run action to simulate event chain.",
    "press": "{!c.attachEventChain}"
   },
   {
    "label": "You spin my head right round (Click me and I will keep spinning)",
    "press": "{!c.infiniteEventCycle}"
   }
  ]
 },
 "app.handleEventTest.handleLocationChangeEvent": {
  "cmp.aura.application": [
   {
    "locationchangeevent": "auratest:locationChange"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "clickCount",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "locationChangeCount",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "order",
    "type": "String",
    "default": ""
   },
   {
    "name": "results",
    "type": "String[]",
    "default": ""
   },
   {
    "name": "hideLocationChangeTimes",
    "type": "Integer",
    "default": "2"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "auratest:locationChange",
    "action": "{!c.locationChange}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.results}",
    "var": "item"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "value": "{!'#' + v.locationChangeCount}",
    "label": "Add one",
    "aura:id": "hashLink",
    "click": "{!c.click}"
   }
  ]
 },
 "app.layoutServiceTest.multipleLayoutItems": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:layoutChange",
    "action": "{!c.layoutDone}"
   },
   {
    "event": "aura:beforeLayoutChange",
    "action": "{!c.layoutChanging}"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.forward}",
    "label": "Forward",
    "aura:id": "Forward_Button",
    "class": "Forward_Button"
   },
   {
    "press": "{!c.backward}",
    "label": "Back",
    "aura:id": "Back_Button",
    "class": "Back_Button"
   },
   {
    "press": "{!c.removeLayoutDone}",
    "label": "Remove Layout Done",
    "aura:id": "Remove_Layout_Done",
    "class": "Remove_Layout_Done"
   }
  ]
 },
 "app.loadLevelTest.lazyLoadWithLayouts": {
  "cmp.aura.application": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController",
    "locationchangeevent": "auratest:locationChange"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:layoutChange",
    "action": "{!c.layoutDone}"
   }
  ],
  "cmp.loadleveltest.servercomponent": [
   {
    "aura:id": "containerA",
    "aura:load": "lazy"
   },
   {
    "aura:id": "containerB",
    "aura:load": "lazy"
   },
   {
    "aura:id": "containerC",
    "aura:load": "exclusive"
   }
  ]
 },
 "app.miscTest.nonpreloadedPerfApp": {
  "cmp.aura.application": [
   {
    "render": "client"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Push component to page",
    "press": "{!c.pushComponent}"
   }
  ]
 },
 "app.miscTest.perfApp": {
  "cmp.aura.application": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel",
    "controller": "java://org.auraframework.components.test.java.controller.TestController"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "color",
    "default": "white",
    "type": "String"
   },
   {
    "name": "start",
    "type": "Integer"
   },
   {
    "name": "end",
    "type": "Integer"
   },
   {
    "name": "count",
    "type": "List",
    "default": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "{! 'bkgColor ' + v.color}",
    "label": "Change color by setting attribute value",
    "press": "{!c.changeBkgColor}"
   },
   {
    "label": "Cut the team by half",
    "press": "{!c.by2}",
    "class": "changeIteratonIndex"
   },
   {
    "label": "Simple Server action",
    "press": "{!c.simpleServerAction}",
    "class": "simpleServerAction"
   },
   {
    "label": "Server action to get Component and resolve configs",
    "press": "{!c.getComponent}",
    "class": "fetchComponentFromServer"
   },
   {
    "label": "Change to Basketball layout",
    "press": "{!c.changeLayout}",
    "class": "switchLayout"
   },
   {
    "label": "Change Back to Baseball layout",
    "press": "{!c.revertLayout}",
    "class": "revertLayout"
   },
   {
    "label": "Push component to page",
    "press": "{!c.pushComponent}",
    "class": "pushCmp"
   },
   {
    "label": "Measure time to destroy component (Component.destroy())",
    "press": "{!c.destroyComponent}"
   }
  ],
  "cmp.misctest.htmlmarkup": [
   {
    "color": "{!v.color}"
   }
  ],
  "cmp.misctest.iteratecomponents": [
   {
    "color": "{!v.color}",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "cmps"
   }
  ],
  "cmp.aura.text": [
   {
    "value": "Name"
   }
  ],
  "cmp.misctest.iteratebasicdata": [
   {
    "color": "{!v.color}",
    "rownumber": "{!v.count}",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ],
  "cmp.misctest.deepiteration": [
   {
    "color": "{!v.color}",
    "players": "{!m.playerData}",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ],
  "cmp.misctest.inheritance": [
   {
    "color": "{!v.color}"
   }
  ]
 },
 "app.miscTest.perfComponentsApp": {
  "cmp.aura.application": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel",
    "controller": "java://org.auraframework.components.test.java.controller.TestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "perf",
    "default": "test",
    "type": "String"
   }
  ]
 },
 "app.miscTest.preloadPerfApp": {
  "cmp.aura.application": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "miscTest:*"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Push component to page",
    "press": "{!c.pushComponent}"
   }
  ]
 },
 "app.perfTest.perf": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.dependency": [
   {
    "resource": "aura:*"
   },
   {
    "resource": "ui:*"
   },
   {
    "resource": "perfTest:*"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "event": "aura:locationChange",
    "action": "{!c.locationChange}"
   }
  ]
 },
 "app.performance.runner": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "event": "aura:locationChange",
    "action": "{!c.locationChange}"
   },
   {
    "name": "finish",
    "event": "performance:testFinish",
    "action": "{!c.finish}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "run"
   },
   {
    "name": "setup"
   }
  ],
  "cmp.aura.import": [
   {
    "library": "performance:perfLib",
    "property": "lib"
   }
  ]
 },
 "app.preloadTest.dependenciesApp": {
  "cmp.aura.application": [
   {
    "access": "unauthenticated",
    "render": "client"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "UI Button"
   }
  ],
  "cmp.preloadtest.test_specialcharacter": [
   {}
  ],
  "cmp.test.test_button": [
   {
    "label": "test button"
   }
  ],
  "cmp.auratest.test_button": [
   {
    "label": "auratest button"
   }
  ]
 },
 "app.preloadTest.test_Preload_Cmp_SameNameSpace": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.auratest.test_button": [
   {
    "class": "displayText",
    "label": "Sitting pretty tight"
   }
  ]
 },
 "app.preloadTest.test_SimpleApplication": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.preloadtest.test_specialcharacter": [
   {}
  ]
 },
 "app.provider.newComponent": {
  "cmp.aura.application": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "provider:*"
   },
   {
    "resource": "ui:outputText"
   },
   {
    "resource": "markup://attributesTest:simpleValue"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "newDescriptor",
    "type": "String",
    "default": "markup://provider:clientProvider"
   },
   {
    "name": "newAttributes",
    "type": "String",
    "default": "{value:\"{componentDef:'markup://aura:text',attributes:{value:'breadwinner'}}\"}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "value": "{!v.newDescriptor}",
    "size": "128"
   },
   {
    "value": "{!v.newAttributes}",
    "size": "128"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "create",
    "press": "{!c.createComponent}",
    "label": "create component"
   }
  ]
 },
 "app.styleServiceTest.applyThemesTest": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.styleservicetest.colors": [
   {
    "aura:id": "colors"
   }
  ]
 },
 "app.styleServiceTest.crossReferenceTest": {
  "cmp.aura.application": [
   {
    "theme": "styleServiceTest:crossReferenceBase"
   }
  ]
 },
 "app.styleServiceTest.debug": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.styleservicetest.colors": [
   {}
  ]
 },
 "app.test.basicCspTest": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "testIframe",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testScriptSource",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testStyleSource",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testMediaSource",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testConnectionSource",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "xmlHttpRequestComplete",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "xmlHttpRequestDebug",
    "type": "String",
    "default": "Start; "
   },
   {
    "name": "testObjectSource",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.testIframe}"
   },
   {
    "istrue": "{!v.testScriptSource}"
   },
   {
    "istrue": "{!v.testStyleSource}"
   },
   {
    "istrue": "{!v.testMediaSource}"
   },
   {
    "istrue": "{!v.testConnectionSource}"
   }
  ],
  "cmp.test.basiccspcmpextendstemplate": [
   {}
  ],
  "cmp.ui.button": [
   {
    "aura:id": "uiButton_sendXHR",
    "press": "{!c.post}",
    "label": "Send XHR",
    "class": "button"
   }
  ]
 },
 "app.test.fakeApplication": {
  "cmp.aura.application": [
   {
    "access": "unauthenticated"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   }
  ]
 },
 "app.test.fakeThemeApp": {
  "cmp.aura.application": [
   {
    "access": "unauthenticated",
    "theme": "test:fakeTheme"
   }
  ]
 },
 "app.test.laxSecurity": {
  "cmp.aura.application": [
   {
    "access": "unauthenticated",
    "render": "client"
   }
  ]
 },
 "app.test.layoutNoLayout": {
  "cmp.aura.application": [
   {}
  ]
 },
 "app.test.layouts": {
  "cmp.aura.application": [
   {}
  ]
 },
 "app.test.layouts2": {
  "cmp.aura.application": [
   {
    "layouts": "test:layouts"
   }
  ]
 },
 "app.test.layoutsNoDefault": {
  "cmp.aura.application": [
   {}
  ]
 },
 "app.test.layoutsNonExistCatchall": {
  "cmp.aura.application": [
   {}
  ]
 },
 "app.test.layoutsNonExistDefault": {
  "cmp.aura.application": [
   {}
  ]
 },
 "app.test.styleTest": {
  "cmp.aura.application": [
   {
    "template": "test:styleTestTemplate"
   }
  ],
  "cmp.ui.message": [
   {}
  ],
  "cmp.ui.block": [
   {
    "class": "color"
   }
  ]
 },
 "app.test.testJSRendererApp": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "default": "testJSRenderer",
    "name": "label"
   }
  ]
 },
 "app.test.testJSRendererUsingHelperApp": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "default": "testJSRendererUsingJSHelper",
    "name": "label"
   }
  ]
 },
 "app.test.test_CompoundCntrlrApp": {
  "cmp.aura.application": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.TestController",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String",
    "default": "Button"
   }
  ],
  "cmp.test.test_button": [
   {
    "label": "{!v.label}",
    "press": "{!c.handleClick}",
    "class": "test_locator"
   }
  ]
 },
 "app.test.test_Layouts": {
  "cmp.aura.application": [
   {
    "layouts": "markup://test:test_Layouts"
   }
  ]
 },
 "app.test.test_LocChng_CompositeComponent": {
  "cmp.aura.application": [
   {
    "locationchangeevent": "test:test_LocChng_Event2"
   }
  ],
  "cmp.test.test_button": [
   {
    "label": "click me (Button on Composite Component)",
    "class": "CompositeComponent",
    "press": "{!c.clientAction}",
    "aura:id": "compositeButton"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "test:test_LocChng_Event2",
    "action": "{!c.clicked}"
   }
  ]
 },
 "app.test.test_LocChng_Navigation": {
  "cmp.aura.application": [
   {
    "locationchangeevent": "test:test_LocChng_Event"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "click me",
    "class": "SimpleComponent",
    "press": "{!c.clientAction}"
   },
   {
    "label": "Back",
    "class": "Back",
    "press": "{!c.back}"
   },
   {
    "label": "Next",
    "class": "Next",
    "press": "{!c.next}"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "test:test_LocChng_Event",
    "action": "{!c.locationChange}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "display",
    "class": "id",
    "aura:id": "display"
   },
   {
    "value": "{! 'Location change indicator:' + v.locationChangeIndicator}",
    "class": "{!v.locationChangeIndicator}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "locationChangeIndicator",
    "type": "String",
    "default": "start"
   }
  ]
 },
 "app.test.test_LocChng_NoExtends": {
  "cmp.aura.application": [
   {
    "locationchangeevent": "test:test_LocChng_NoExtendsEvt"
   }
  ]
 },
 "app.test.test_LocChng_NoHandler": {
  "cmp.aura.application": [
   {
    "locationchangeevent": "test:test_LocChng_Event"
   }
  ],
  "cmp.test.test_button": [
   {
    "label": "click me",
    "press": "{!c.clientAction}",
    "class": "identifier"
   }
  ]
 },
 "app.test.test_LocChng_SimpleComponent": {
  "cmp.aura.application": [
   {
    "locationchangeevent": "test:test_LocChng_Event"
   }
  ],
  "cmp.test.test_button": [
   {
    "label": "click me (Button on Simple Component)",
    "class": "SimpleComponent",
    "press": "{!c.clientAction}",
    "aura:id": "button"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "test:test_LocChng_Event",
    "action": "{!c.locationChange}"
   },
   {
    "event": "test:test_LocChng_Event2",
    "action": "{!c.locationChangeComposite}"
   },
   {
    "event": "aura:locationChange",
    "action": "{!c.locationChangeGeneric}"
   }
  ]
 },
 "app.test.test_Preload_CustomNameSpaces": {
  "cmp.aura.application": [
   {
    "preload": "test"
   }
  ]
 },
 "app.themeSanityTest.usingOverride": {
  "cmp.aura.application": [
   {
    "theme": "themeSanityTest:customTheme"
   }
  ],
  "cmp.themesanitytest.header": [
   {}
  ],
  "cmp.themesanitytest.header2": [
   {}
  ]
 },
 "app.uitest.listView_Test": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.components.ui.listView.ListViewTestModel"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "ui:*",
    "type": "COMPONENT"
   }
  ],
  "cmp.ui.listview": [
   {
    "id": "test-empty-list-generated-columns",
    "aura:id": "test-empty-list-generated-columns"
   },
   {
    "id": "test-list-generated-columns",
    "aura:id": "test-list-generated-columns",
    "items": "{!m.generatedListData}"
   },
   {
    "id": "test-empty-list-specified-columns",
    "aura:id": "test-empty-list-specified-columns"
   },
   {
    "id": "test-list-data-does-not-map-to-specified-columns",
    "aura:id": "test-list-data-does-not-map-to-specified-columns",
    "items": "{!m.specifiedListData}"
   },
   {
    "id": "test-list-data-partially-maps-to-specified-columns",
    "aura:id": "test-list-data-partially-maps-to-specified-columns",
    "items": "{!m.specifiedListData}"
   },
   {
    "id": "test-list-specified-columns",
    "aura:id": "test-list-specified-columns",
    "items": "{!m.specifiedListData}"
   },
   {
    "id": "test-list-nested-columns",
    "aura:id": "test-list-nested-columns",
    "items": "{!m.nestedColumnsListData}"
   },
   {
    "id": "test-list-nested-columns-fields-map-from-non-leaf-columns",
    "aura:id": "test-list-nested-columns-fields-map-from-non-leaf-columns",
    "items": "{!m.nestedColumnsFieldsMapsFromNonLeafNodeColumnsListData}"
   },
   {
    "id": "test-fireEvents-number",
    "aura:id": "test-fireEvents-number",
    "items": "{!m.generatedListData}"
   },
   {
    "id": "test-list-events-webdriver-test",
    "aura:id": "test-list-events-webdriver-test",
    "items": "{!m.generatedListData}",
    "oncellclick": "{!c.cellClickHandler}",
    "onheaderclick": "{!c.headerClickHandler}"
   }
  ],
  "cmp.ui.column": [
   {
    "type": "",
    "title": "Type:Empty String",
    "fieldname": "type:empty string"
   },
   {
    "title": "Type:Undefined",
    "fieldname": "type:undefined"
   },
   {
    "type": "Text",
    "title": "Type:Text",
    "fieldname": "type:text"
   },
   {
    "type": "Email",
    "title": "Type:Email",
    "fieldname": "type:email"
   },
   {
    "type": "Checkbox",
    "title": "Type:Checkbox",
    "fieldname": "type:checkbox"
   },
   {
    "type": "Link",
    "title": "Type:Link",
    "fieldname": "type:link"
   },
   {
    "type": "Index",
    "title": "Type:Index",
    "fieldname": "type:index"
   },
   {
    "type": "Html",
    "title": "Type:Html",
    "fieldname": "type:html"
   },
   {
    "type": "Text",
    "title": "Non-matching column",
    "fieldname": "non-matching column"
   },
   {
    "type": "Text",
    "title": "Non-matching column",
    "fieldname": "non-matching column"
   },
   {
    "type": "Text",
    "title": "Type:Text",
    "fieldname": "type:text"
   },
   {
    "type": "",
    "title": "Type:Empty String",
    "fieldname": "type:empty string"
   },
   {
    "title": "Type:Undefined",
    "fieldname": "type:undefined"
   },
   {
    "type": "Text",
    "title": "Type:Text",
    "fieldname": "type:text"
   },
   {
    "type": "Email",
    "title": "Type:Email",
    "fieldname": "type:email"
   },
   {
    "type": "Checkbox",
    "title": "Type:Checkbox",
    "fieldname": "type:checkbox"
   },
   {
    "type": "Link",
    "title": "Type:Link",
    "fieldname": "type:link"
   },
   {
    "type": "Index",
    "title": "Type:Index",
    "fieldname": "type:index"
   },
   {
    "type": "Html",
    "title": "Type:Html",
    "fieldname": "type:html"
   },
   {
    "title": "First Row 0",
    "fieldname": "first row 0"
   },
   {
    "title": "Second Row 0",
    "fieldname": "second row 0"
   },
   {
    "title": "Third Row 0, Leaf 0",
    "fieldname": "third row 0, leaf 0"
   },
   {
    "title": "Second Row 1",
    "fieldname": "second row 1"
   },
   {
    "title": "Third Row 1, Leaf 1",
    "fieldname": "third row 1, leaf 1"
   },
   {
    "title": "Third Row 2, Leaf 2",
    "fieldname": "third row 2, leaf 2"
   },
   {
    "title": "Second Row 2, Leaf 3",
    "fieldname": "second row 2, leaf 3"
   },
   {
    "title": "First Row 1, Leaf 4",
    "fieldname": "first row 1, leaf 4"
   },
   {
    "title": "First Row 0",
    "fieldname": "first row 0"
   },
   {
    "title": "Second Row 0",
    "fieldname": "second row 0"
   },
   {
    "title": "Third Row 0, Leaf 0",
    "fieldname": "third row 0, leaf 0"
   },
   {
    "title": "Second Row 1",
    "fieldname": "second row 1"
   },
   {
    "title": "Third Row 1, Leaf 1",
    "fieldname": "third row 1, leaf 1"
   },
   {
    "title": "Third Row 2, Leaf 2",
    "fieldname": "third row 2, leaf 2"
   },
   {
    "title": "Second Row 2, Leaf 3",
    "fieldname": "second row 2, leaf 3"
   },
   {
    "title": "First Row 1, Leaf 4",
    "fieldname": "first row 1, leaf 4"
   }
  ]
 },
 "app.uitest.localizationComponent_Test": {
  "cmp.aura.application": [
   {
    "access": "unauthenticated",
    "controller": "java://org.auraframework.components.test.java.controller.TestControllerLocalization",
    "model": "java://org.auraframework.components.test.java.model.TestModelLocalization"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "hardCoded",
    "type": "String",
    "default": "Values hard coded on server..",
    "description": "Description"
   },
   {
    "name": "submitCount",
    "type": "number"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "press",
    "type": "ui:press"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outSubmitCount",
    "value": "0"
   },
   {
    "aura:id": "currentLocale",
    "value": "{!i}"
   },
   {
    "aura:id": "outNumber",
    "value": ""
   },
   {
    "aura:id": "outDate",
    "value": ""
   },
   {
    "aura:id": "outDateTime",
    "value": ""
   },
   {
    "aura:id": "outPercent",
    "value": ""
   },
   {
    "aura:id": "outCurrency",
    "value": ""
   },
   {
    "aura:id": "outText",
    "value": ""
   },
   {
    "value": "{!i}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.localeData}",
    "var": "i"
   },
   {
    "items": "{!m.numbers}",
    "var": "i"
   },
   {
    "items": "{!m.dates}",
    "var": "i"
   },
   {
    "items": "{!m.times}",
    "var": "i"
   },
   {
    "items": "{!m.percentages}",
    "var": "i"
   },
   {
    "items": "{!m.currencies}",
    "var": "i"
   },
   {
    "items": "{!m.strings}",
    "var": "i"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "aura:id": "inNumber",
    "value": "{!m.numberBigDecimal}"
   }
  ],
  "cmp.ui.button": [
   {
    "buttontitle": "Number",
    "label": "Submit",
    "class": "custom",
    "press": "{!c.submitCmp}"
   },
   {
    "buttontitle": "Date",
    "label": "Submit",
    "class": "custom",
    "press": "{!c.submitCmp}"
   },
   {
    "buttontitle": "DateTime",
    "label": "Submit",
    "class": "custom",
    "press": "{!c.submitCmp}"
   },
   {
    "buttontitle": "Percent",
    "label": "Submit",
    "class": "custom",
    "press": "{!c.submitCmp}"
   },
   {
    "buttontitle": "Currency",
    "label": "Submit",
    "class": "custom",
    "press": "{!c.submitCmp}"
   },
   {
    "buttontitle": "Text",
    "label": "Submit",
    "class": "custom",
    "press": "{!c.submit}"
   }
  ],
  "cmp.ui.message": [
   {
    "severity": "info"
   },
   {
    "severity": "info"
   },
   {
    "severity": "info"
   },
   {
    "severity": "info"
   },
   {
    "severity": "info"
   },
   {
    "severity": "info"
   }
  ],
  "cmp.ui.outputnumber": [
   {
    "value": "{!i}"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "aura:id": "inDate",
    "value": "{!m.date}"
   }
  ],
  "cmp.ui.outputdate": [
   {
    "value": "{!i}"
   }
  ],
  "cmp.ui.outputdatetime": [
   {
    "value": "{!i}"
   }
  ],
  "cmp.ui.inputdatetime": [
   {
    "aura:id": "inDateTime",
    "value": "{!m.dateTime}"
   }
  ],
  "cmp.ui.inputpercent": [
   {
    "aura:id": "inPercent",
    "value": "{!m.percent}"
   }
  ],
  "cmp.ui.outputpercent": [
   {
    "value": "{!i}"
   }
  ],
  "cmp.ui.inputcurrency": [
   {
    "aura:id": "inCurrency",
    "value": "{!m.currency}"
   }
  ],
  "cmp.ui.outputcurrency": [
   {
    "value": "{!i}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inText",
    "value": "{!m.text}",
    "maxlength": "10"
   }
  ]
 },
 "app.uitest.localization_Test": {
  "cmp.aura.application": [
   {
    "access": "unauthenticated",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "submitCount",
    "type": "integer"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outSubmitCount",
    "value": "0"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "aura:id": "inDate",
    "value": "{!m.dateOnly}"
   }
  ],
  "cmp.ui.button": [
   {
    "buttontitle": "Date",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "DateTime",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Number",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Percent",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Currency",
    "label": "submit",
    "press": "{!c.submit}"
   }
  ],
  "cmp.ui.outputdate": [
   {
    "aura:id": "outDate",
    "value": "{!m.dateOnly}"
   }
  ],
  "cmp.ui.inputdatetime": [
   {
    "aura:id": "inDateTime",
    "value": "{!m.dateTimeISOString}",
    "timezone": "GMT"
   }
  ],
  "cmp.ui.outputdatetime": [
   {
    "aura:id": "outDateTime",
    "value": "{!m.dateTimeISOString}",
    "timezone": "GMT"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "aura:id": "inNumber",
    "value": "{!m.integer}"
   }
  ],
  "cmp.ui.outputnumber": [
   {
    "aura:id": "outNumber",
    "value": "{!m.integer}"
   }
  ],
  "cmp.ui.inputpercent": [
   {
    "aura:id": "inPercent",
    "value": "{!m.percent}"
   }
  ],
  "cmp.ui.outputpercent": [
   {
    "aura:id": "outPercent",
    "value": "{!m.percent}"
   }
  ],
  "cmp.ui.inputcurrency": [
   {
    "aura:id": "inCurrency",
    "value": "{!m.currency}"
   }
  ],
  "cmp.ui.outputcurrency": [
   {
    "aura:id": "outCurrency",
    "value": "{!m.currency}"
   }
  ]
 },
 "app.uitest.menu_AttachToBodyTest": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.components.ui.MenuTestModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "expandEventFired",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "collapseEventFired",
    "type": "boolean",
    "default": "false"
   }
  ],
  "cmp.ui.menu": [
   {
    "aura:id": "uiMenu",
    "class": "clubMenu"
   },
   {
    "aura:id": "uiMenuAttachToBody",
    "class": "uiMenuAttachToBody"
   }
  ],
  "cmp.ui.menutriggerlink": [
   {
    "class": "trigger",
    "aura:id": "trigger",
    "label": "Please pick your favorite soccer club"
   },
   {
    "class": "triggerAttachToBody",
    "aura:id": "triggerAttachToBody",
    "label": "Please pick your favorite soccer club"
   }
  ],
  "cmp.ui.menulist": [
   {
    "class": "actionMenu",
    "aura:id": "actionMenu",
    "attachtobody": "true"
   },
   {
    "class": "actionMenuAttachToBody",
    "aura:id": "actionMenuAttachToBody",
    "attachtobody": "true"
   }
  ],
  "cmp.ui.actionmenuitem": [
   {
    "class": "actionItem1",
    "aura:id": "actionItem1",
    "label": "Bayern München",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "actionItem2",
    "aura:id": "actionItem2",
    "label": "FC Barcelona",
    "click": "{!c.updateTriggerLabel}",
    "disabled": "true"
   },
   {
    "class": "actionItem3",
    "aura:id": "actionItem3",
    "label": "Inter Milan",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "actionItem4",
    "aura:id": "actionItem4",
    "label": "Manchester United",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "actionItemAttachToBody1",
    "aura:id": "actionItemAttachToBody1",
    "label": "Bayern München",
    "click": "{!c.updateTriggerLabelForAttachToBody}"
   },
   {
    "class": "actionItemAttachTBody2",
    "aura:id": "actionItemAttachToBody2",
    "label": "FC Barcelona",
    "click": "{!c.updateTriggerLabelForAttachToBody}",
    "disabled": "true"
   },
   {
    "class": "actionItemAttachToBody3",
    "aura:id": "actionItemAttachToBody3",
    "label": "Inter Milan",
    "click": "{!c.updateTriggerLabelForAttachToBody}"
   },
   {
    "class": "actionItemAttachToBody4",
    "aura:id": "actionItemAttachToBody4",
    "label": "Manchester United",
    "click": "{!c.updateTriggerLabelForAttachToBody}"
   }
  ],
  "cmp.ui.block": [
   {
    "aura:id": "overflowHidden"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "right"
   }
  ]
 },
 "app.uitest.menu_EventBubbling": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.components.ui.MenuTestModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "eventBubbled",
    "type": "boolean"
   },
   {
    "name": "stopClickPropagation",
    "type": "Boolean"
   }
  ],
  "cmp.ui.menu": [
   {
    "aura:id": "uiMenu",
    "class": "clubMenu"
   }
  ],
  "cmp.ui.menutriggerlink": [
   {
    "class": "trigger",
    "aura:id": "trigger",
    "label": "Please pick your favorite soccer club",
    "stopclickpropagation": "{!v.stopClickPropagation}"
   }
  ],
  "cmp.ui.menulist": [
   {
    "class": "actionMenu",
    "aura:id": "actionMenu"
   }
  ],
  "cmp.ui.actionmenuitem": [
   {
    "class": "actionItem1",
    "aura:id": "actionItem1",
    "label": "Bayern München",
    "click": "{!c.updateTriggerLabel}",
    "hidemenuafterselected": "{!v.hideMenuAfterSelected}"
   },
   {
    "class": "actionItem2",
    "aura:id": "actionItem2",
    "label": "FC Barcelona",
    "click": "{!c.updateTriggerLabel}",
    "disabled": "true"
   },
   {
    "class": "actionItem3",
    "aura:id": "actionItem3",
    "label": "Inter Milan",
    "click": "{!c.updateTriggerLabel}",
    "hidemenuafterselected": "{!v.hideMenuAfterSelected}"
   },
   {
    "class": "actionItem4",
    "aura:id": "actionItem4",
    "label": "Manchester United",
    "click": "{!c.updateTriggerLabel}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputStatus",
    "value": "Event Propogation To Parent Div did not happen"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Toggle stopClickPropagation",
    "press": "{!c.toggle}"
   }
  ]
 },
 "app.uitest.menu_MetadataTest": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.components.ui.MenuTestModel"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "ui:*",
    "type": "COMPONENT"
   }
  ],
  "cmp.ui.menu": [
   {},
   {},
   {},
   {}
  ],
  "cmp.ui.menutriggerlink": [
   {
    "aura:id": "metadatatrigger",
    "label": "Snow Resorts"
   },
   {
    "class": "trigger",
    "aura:id": "trigger",
    "label": "Please pick your favorite soccer club"
   },
   {
    "class": "checkboxMenuLabel",
    "aura:id": "checkboxMenuLabel",
    "label": "NFC West Teams"
   },
   {
    "aura:id": "imageTrigger",
    "class": "imageLink",
    "label": "Tiger"
   }
  ],
  "cmp.ui.menulist": [
   {
    "menuitems": "{!m.resorts}"
   },
   {
    "class": "actionMenu",
    "menuitems": "{!m.places}",
    "menuselect": "{!c.pickPlace}"
   },
   {
    "class": "checkboxMenu",
    "aura:id": "checkboxMenu",
    "menuitems": "{!m.data}"
   },
   {
    "aura:id": "tigerMenu",
    "class": "inline",
    "menuitems": "{!m.images}",
    "menuselect": "{!c.pickTiger}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "<ui:menu>"
   },
   {
    "value": "  <ui:menuTriggerLink aura:id=\"metadatatrigger\" label=\"Snow Resorts\"/>"
   },
   {
    "value": "  <ui:menuList menuItems=\"{ !m.resorts}\"/>"
   },
   {
    "value": "</ui:menu>"
   },
   {
    "value": "<ui:menu>"
   },
   {
    "value": "  <ui:menuTriggerLink aura:id=\"metadataAction\" label=\"Pick a ski place\"/>"
   },
   {
    "value": "  <ui:menuList menuItems=\"{ !m.places}\" menuSelect=\"{ !c.pickPlace}\"/>"
   },
   {
    "value": "</ui:menu>"
   },
   {
    "class": "checkboxMenuResult",
    "aura:id": "checkboxMenuResult",
    "value": "Which items get selected"
   },
   {
    "value": "<ui:menu>"
   },
   {
    "value": "  <ui:menuTriggerLink aura:id=\"metadatatrigger\" label=\"Snow Resorts\"/>"
   },
   {
    "value": "  <ui:menuList aura:id=\"myMenu\" menuItems=\"{ !m.data}\"/>"
   },
   {
    "value": "</ui:menu>"
   },
   {
    "value": "<ui:button press=\"{ !c.getMenuSelected}\" label=\"Check the selected menu items\"/>"
   },
   {
    "value": "<ui:outputText aura:id=\"result\" value=\"Which items get selected\"/>"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "checkboxButton",
    "aura:id": "checkboxButton",
    "press": "{!c.getMenuSelected}",
    "label": "Check the selected menu items"
   }
  ]
 },
 "app.uitest.menu_Test": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.components.ui.MenuTestModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "expandEventFired",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "collapseEventFired",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "hideMenuAfterSelected",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "menuSelectFireCount",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "menuCondition",
    "type": "Boolean",
    "default": "true"
   }
  ],
  "cmp.ui.menu": [
   {
    "aura:id": "uiMenu",
    "class": "checkPositionMenu"
   },
   {
    "aura:id": "uiMenu",
    "class": "clubMenu"
   },
   {},
   {},
   {},
   {},
   {},
   {
    "aura:id": "uiMenu",
    "class": "clubMenu"
   },
   {},
   {
    "aura:id": "uiMenu",
    "class": "extendPositionMenu"
   },
   {
    "aura:id": "uiMenuImage",
    "class": "uiMenuImage"
   }
  ],
  "cmp.ui.menutriggerlink": [
   {
    "class": "triggercheckPosition",
    "aura:id": "triggercheckPosition",
    "label": "Please pick your favorite soccer club",
    "disabledoubleclicks": "true"
   },
   {
    "class": "trigger",
    "aura:id": "trigger",
    "label": "Please pick your favorite soccer club"
   },
   {
    "class": "checkboxMenuLabel",
    "aura:id": "checkboxMenuLabel",
    "label": "NFC West Teams"
   },
   {
    "class": "radioMenuLabel",
    "aura:id": "radioMenuLabel",
    "label": "National League West"
   },
   {
    "aura:id": "iterationTrigger",
    "label": "iterationTrigger"
   },
   {
    "aura:id": "conditionTrigger",
    "label": "conditionTrigger"
   },
   {
    "aura:id": "conditionIterationTrigger",
    "label": "conditionIterationTrigger"
   },
   {
    "class": "triggerNested",
    "aura:id": "triggerNested",
    "label": "Please pick your favorite soccer club"
   },
   {
    "aura:id": "mytrigger",
    "label": "All teams"
   },
   {
    "class": "triggerLink",
    "aura:id": "triggerLink",
    "label": "Pick your favorite soccer club"
   },
   {
    "class": "triggerImage",
    "aura:id": "triggerImage"
   }
  ],
  "cmp.ui.menulist": [
   {
    "class": "checkPosition",
    "aura:id": "checkPosition",
    "menucollapse": "{!c.menuCollapse}",
    "menuexpand": "{!c.menuExpand}",
    "menuselect": "{!c.incrementMenuSelectFireCount}"
   },
   {
    "class": "actionMenu",
    "aura:id": "actionMenu"
   },
   {
    "aura:id": "checkboxMenu",
    "class": "checkboxMenu"
   },
   {
    "class": "radioMenu",
    "aura:id": "radioMenu"
   },
   {
    "aura:id": "iterationRadioMenu"
   },
   {
    "aura:id": "conditionRadioMenu"
   },
   {
    "aura:id": "conditionIterationMenu"
   },
   {
    "class": "actionMenuNested",
    "aura:id": "actionMenuNested"
   },
   {},
   {
    "class": "actionMenuImage",
    "aura:id": "actionMenuImage"
   }
  ],
  "cmp.ui.actionmenuitem": [
   {
    "class": "checkPositionItem1",
    "aura:id": "checkPositionItem1",
    "label": "Bayern München",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "checkPositionItem2",
    "aura:id": "checkPositionItem2",
    "label": "FC Barcelona",
    "click": "{!c.updateTriggerLabel}",
    "disabled": "true"
   },
   {
    "class": "checkPositionItem3",
    "aura:id": "checkPositionItem3",
    "label": "Inter Milan",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "checkPositionItem4",
    "aura:id": "checkPositionItem4",
    "label": "Manchester United",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "actionItem1",
    "aura:id": "actionItem1",
    "label": "Bayern München",
    "click": "{!c.updateTriggerLabel}",
    "hidemenuafterselected": "{!v.hideMenuAfterSelected}"
   },
   {
    "class": "actionItem2",
    "aura:id": "actionItem2",
    "label": "FC Barcelona",
    "click": "{!c.updateTriggerLabel}",
    "disabled": "true"
   },
   {
    "class": "actionItem3",
    "aura:id": "actionItem3",
    "label": "Inter Milan",
    "click": "{!c.updateTriggerLabel}",
    "hidemenuafterselected": "{!v.hideMenuAfterSelected}"
   },
   {
    "class": "actionItem4",
    "aura:id": "actionItem4",
    "label": "Manchester United",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "label": "trueCondition",
    "value": "trueCondition"
   },
   {
    "class": "actionItem1Nested",
    "aura:id": "actionItem1Nested",
    "label": "Bayern München",
    "click": "{!c.updateTriggerLabelForNestedMenuItems}",
    "hidemenuafterselected": "{!v.hideMenuAfterSelected}"
   },
   {
    "class": "actionItem2Nested",
    "aura:id": "actionItem2Nested",
    "label": "FC Barcelona",
    "click": "{!c.updateTriggerLabelForNestedMenuItems}",
    "disabled": "true"
   },
   {
    "class": "actionItem3Nested",
    "aura:id": "actionItem3Nested",
    "label": "{!team}",
    "click": "{!c.updateTriggerLabelForNestedMenuItems}"
   },
   {
    "class": "actionItem4Nested",
    "aura:id": "actionItem4Nested",
    "label": "Manchester United",
    "click": "{!c.updateTriggerLabelForNestedMenuItems}",
    "hidemenuafterselected": "{!v.hideMenuAfterSelected}"
   },
   {
    "label": "Bayern München",
    "click": "{!c.updateLabel}"
   },
   {
    "label": "FC Barcelona",
    "click": "{!c.updateLabel}"
   },
   {
    "label": "Inter Milan",
    "click": "{!c.updateLabel}"
   },
   {
    "label": "Manchester United",
    "click": "{!c.updateLabel}"
   },
   {
    "class": "extendList1",
    "aura:id": "extendList1",
    "label": "Bayern München"
   },
   {
    "class": "extendList2",
    "aura:id": "extendList2",
    "label": "FC Barcelona",
    "disabled": "true"
   },
   {
    "class": "extendList3",
    "aura:id": "extendList3",
    "label": "Inter Milan"
   },
   {
    "class": "extendList4",
    "aura:id": "extendList4",
    "label": "Manchester United"
   },
   {
    "class": "actionItem1Image",
    "aura:id": "actionItem1Image",
    "label": "Bayern München",
    "click": "{!c.updateTriggerLabel}",
    "hidemenuafterselected": "{!v.hideMenuAfterSelected}"
   },
   {
    "class": "actionItem2Image",
    "aura:id": "actionItem2Image",
    "label": "FC Barcelona",
    "click": "{!c.updateTriggerLabel}",
    "disabled": "true"
   },
   {
    "class": "actionItem3Image",
    "aura:id": "actionItem3Image",
    "label": "Inter Milan",
    "click": "{!c.updateTriggerLabel}",
    "hidemenuafterselected": "{!v.hideMenuAfterSelected}"
   },
   {
    "class": "actionItem4Image",
    "aura:id": "actionItem4Image",
    "label": "Manchester United",
    "click": "{!c.updateTriggerLabel}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "<ui:menu>"
   },
   {
    "value": "  <ui:menuTriggerLink aura:id=\"trigger\" label=\"Please pick your favorite soccer club\"/>"
   },
   {
    "value": "  <ui:menuList aura:id=\"actionMenu\">"
   },
   {
    "value": "    <ui:actionMenuItem aura:id=\"actionItem1\" label=\"Bayern München\" click=\"{ !c.updateTriggerLabel}\"/>"
   },
   {
    "value": "    <ui:actionMenuItem aura:id=\"actionItem2\" label=\"FC Barcelona\" click=\"{ !c.updateTriggerLabel}\"/>"
   },
   {
    "value": "    <ui:actionMenuItem aura:id=\"actionItem3\" label=\"Inter Milan\" click=\"{ !c.updateTriggerLabel}\"/>"
   },
   {
    "value": "    <ui:actionMenuItem aura:id=\"actionItem4\" label=\"Manchester United\" click=\"{ !c.updateTriggerLabel}\"/>"
   },
   {
    "value": "  </ui:menuList>"
   },
   {
    "value": "</ui:menu>"
   },
   {
    "class": "checkboxMenuResult",
    "aura:id": "checkboxMenuResult",
    "value": "Which items get selected"
   },
   {
    "value": "<ui:menu>"
   },
   {
    "value": "  <ui:menuTriggerLink aura:id=\"checkboxMenuLabel\" label=\"NFC West Teams\"/>"
   },
   {
    "value": "  <ui:menuList aura:id=\"checkboxMenu\">"
   },
   {
    "value": "    <ui:checkboxMenuItem aura:id=\"checkboxItem1\" label=\"San Francisco 49ers\"/>"
   },
   {
    "value": "    <ui:checkboxMnuItem aura:id=\"checkboxItem2\" label=\"Seattle Seahawks\"/>"
   },
   {
    "value": "    <ui:checkboxMenuItem aura:id=\"checkboxItem3\" label=\"St. Louis Rams\"/>"
   },
   {
    "value": "    <ui:checkboxMenuItem aura:id=\"checkboxItem4\" label=\"Arizona Cardinals\" disabled=\"true\" selected=\"true\"/>"
   },
   {
    "value": "  </ui:menuList>"
   },
   {
    "value": "</ui:menu>"
   },
   {
    "value": "<ui:button aura:id=\"checkboxButton\" press=\"{ !c.getMenuSelected}\" label=\"Check the selected menu items\"/>"
   },
   {
    "value": "<ui:outputText aura:id=\"result\" value=\"Which items get selected\"/>"
   },
   {
    "class": "radioMenuResult",
    "aura:id": "radioMenuResult",
    "value": "Which items get selected"
   },
   {
    "value": "<ui:menu>"
   },
   {
    "value": "  <ui:menuTriggerLink aura:id=\"radioMenuLabel\" label=\"National League West\"/>"
   },
   {
    "value": "  <ui:menuList aura:id=\"radioMenu\">"
   },
   {
    "value": "    <ui:radioMenuItem aura:id=\"radioItem1\" label=\"San Francisco\"/>"
   },
   {
    "value": "    <ui:radioMnuItem aura:id=\"radioItem2\" label=\"LA Dodgers\"/>"
   },
   {
    "value": "    <ui:radioMenuItem aura:id=\"radioItem3\" label=\"Arizona\"/>"
   },
   {
    "value": "    <ui:radioMenuItem aura:id=\"radioItem4\" label=\"Diego\" disabled=\"true\"/>"
   },
   {
    "value": "    <ui:radioMenuItem aura:id=\"radioItem5\" label=\"Colorado\"/>"
   },
   {
    "value": "  </ui:menuList>"
   },
   {
    "value": "</ui:menu>"
   },
   {
    "value": "<ui:button aura:id=\"radioButton\" press=\"{ !c.getRadioMenuSelected}\" label=\"Check the selected menu items\"/>"
   },
   {
    "value": "<ui:outputText aura:id=\"radioResult\" value=\"Which items get selected\"/>"
   },
   {
    "class": "iterationRadioMenuResult",
    "aura:id": "iterationRadioMenuResult",
    "value": "Which items get selected"
   },
   {
    "value": "<ui:menu>"
   },
   {
    "value": "  <ui:menuTriggerLink aura:id=\"iterationTrigger\" label=\"iterationTrigger\"/>"
   },
   {
    "value": "  <ui:menuList aura:id=\"iterationRadioMenu\">"
   },
   {
    "value": "    <aura:iteration items=\"{ !m.iterationItems}\" var=\"item\">"
   },
   {
    "value": "        <ui:radioMenuItem label=\"{ !item.label}\" value=\"{ !item.type} aura:id=\"{ !item.auraId}/>"
   },
   {
    "value": "    </aura:iteration>"
   },
   {
    "value": "  </ui:menuList>"
   },
   {
    "value": "</ui:menu>"
   },
   {
    "value": "<ui:button aura:id=\"radioIterationButton\" press=\"{ !c.getRadioIterationMenuSelected}\" label=\"Check the selected menu items\"/>"
   },
   {
    "value": "<ui:outputText aura:id=\"radioIterationResult\" value=\"Which items get selected\"/>"
   },
   {
    "class": "conditionRadioMenuResult",
    "aura:id": "conditionRadioMenuResult",
    "value": "Which items get selected"
   },
   {
    "class": "conditionIterationMenuResult",
    "aura:id": "conditionIterationMenuResult",
    "value": "Which items get selected"
   },
   {
    "value": "<ui:menu>"
   },
   {
    "value": "  <ui:menuTriggerLink label=\"All teams\"/>"
   },
   {
    "value": "  <ui:menuList>"
   },
   {
    "value": "    <ui:actionMenuItem label=\"Bayern München\" click=\"{ !c.updateLabel}\"/>"
   },
   {
    "value": "    <ui:actionMenuItem label=\"FC Barcelona\" click=\"{ !c.updateLabel}\"/>"
   },
   {
    "value": "    <ui:actionMenuItem label=\"Inter Milan\" click=\"{ !c.updateLabel}\"/>"
   },
   {
    "value": "    <ui:actionMenuItem label=\"Manchester United\" click=\"{ !c.updateLabel}\"/>"
   },
   {
    "value": "    <ui:menuItemSeparator/>"
   },
   {
    "value": "    <ui:checkboxMenuItem label=\"San Francisco 49ers\"/>"
   },
   {
    "value": "    <ui:checkboxMnuItem label=\"Seattle Seahawks\"/>"
   },
   {
    "value": "    <ui:checkboxMenuItem label=\"St. Louis Rams\"/>"
   },
   {
    "value": "    <ui:checkboxMenuItem label=\"Arizona Cardinals\"/>"
   },
   {
    "value": "    <ui:menuItemSeparator/>"
   },
   {
    "value": "    <ui:radioMenuItem label=\"San Francisco 49ers\"/>"
   },
   {
    "value": "    <ui:radioMnuItem label=\"San Francisco Giants\"/>"
   },
   {
    "value": "    <ui:radioMenuItem label=\"Oakland As\"/>"
   },
   {
    "value": "    <ui:radioMenuItem label=\"Golden State Warriors\"/>"
   },
   {
    "value": "  </ui:menuList>"
   },
   {
    "value": "</ui:menu>"
   }
  ],
  "cmp.ui.checkboxmenuitem": [
   {
    "class": "checkboxItem1",
    "aura:id": "checkboxItem1",
    "label": "San Francisco 49ers"
   },
   {
    "class": "checkboxItem2",
    "aura:id": "checkboxItem2",
    "label": "Seattle Seahawks"
   },
   {
    "class": "checkboxItem3",
    "aura:id": "checkboxItem3",
    "label": "St. Louis Rams"
   },
   {
    "class": "checkboxItem4",
    "aura:id": "checkboxItem4",
    "label": "Arizona Cardinals",
    "disabled": "true",
    "selected": "true"
   },
   {
    "label": "falseCondition",
    "value": "falseCondition"
   },
   {
    "label": "outsideCondition",
    "value": "outsideCondition"
   },
   {
    "label": "San Francisco 49ers"
   },
   {
    "label": "Seattle Seahawks"
   },
   {
    "label": "St. Louis Rams"
   },
   {
    "label": "Arizona Cardinals"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "checkboxButton",
    "aura:id": "checkboxButton",
    "press": "{!c.getMenuSelected}",
    "label": "Check the selected menu items"
   },
   {
    "class": "radioButton",
    "aura:id": "radioButton",
    "press": "{!c.getRadioMenuSelected}",
    "label": "Check the selected menu items"
   },
   {
    "class": "radioIterationButton",
    "aura:id": "radioIterationButton",
    "press": "{!c.getRadioIterationMenuSelected}",
    "label": "Check the selected menu items"
   },
   {
    "class": "radioConditionButton",
    "aura:id": "radioConditionButton",
    "press": "{!c.getRadioConditionMenuSelected}",
    "label": "Check the selected menu items"
   },
   {
    "class": "conditionIterationButton",
    "aura:id": "conditionIterationButton",
    "press": "{!c.getConditionIterationMenuSelected}",
    "label": "Check the selected menu items"
   }
  ],
  "cmp.ui.radiomenuitem": [
   {
    "class": "radioItem1",
    "aura:id": "radioItem1",
    "label": "San Francisco"
   },
   {
    "class": "radioItem2",
    "aura:id": "radioItem2",
    "label": "LA Dodgers"
   },
   {
    "class": "radioItem3",
    "aura:id": "radioItem3",
    "label": "Arizona"
   },
   {
    "class": "radioItem4",
    "aura:id": "radioItem4",
    "label": "Diego",
    "disabled": "true"
   },
   {
    "class": "radioItem5",
    "aura:id": "radioItem5",
    "label": "Colorado"
   },
   {
    "label": "{!item.label}",
    "value": "{!item.value}"
   },
   {
    "label": "trueCondition",
    "value": "trueCondition"
   },
   {
    "label": "falseCondition1",
    "value": "falseCondition1"
   },
   {
    "label": "falseCondition2",
    "value": "falseCondition2"
   },
   {
    "label": "outsideCondition",
    "value": "outsideCondition"
   },
   {
    "label": "{!item.label}",
    "value": "{!item.value}"
   },
   {
    "label": "San Francisco"
   },
   {
    "label": "LA Dodgers"
   },
   {
    "label": "Arizona"
   },
   {
    "label": "San Diego"
   },
   {
    "label": "Colorado"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.iterationItems}",
    "var": "item"
   },
   {
    "items": "{!m.iterationItems}",
    "var": "item"
   },
   {
    "aura:id": "Iteration",
    "items": "Inter Milan",
    "var": "team"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.menuCondition}"
   },
   {
    "istrue": "{!v.menuCondition}"
   },
   {
    "istrue": "{!v.menuCondition}"
   },
   {
    "istrue": "{!v.menuCondition}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   }
  ],
  "cmp.ui.menuitemseparator": [
   {},
   {},
   {},
   {}
  ],
  "cmp.uitest.menulist_extend": [
   {
    "aura:id": "extendMenuList",
    "class": "extendMenuList"
   }
  ],
  "cmp.ui.image": [
   {
    "aura:id": "image",
    "src": "/auraFW/resources/aura/auralogo.png",
    "imagetype": "decorative"
   }
  ]
 },
 "app.uitest.menu_extendMenuItem": {
  "cmp.aura.application": [
   {
    "model": "java://org.auraframework.components.ui.MenuTestModel"
   }
  ],
  "cmp.ui.menu": [
   {
    "aura:id": "uiMenu",
    "class": "clubMenu"
   }
  ],
  "cmp.ui.menutriggerlink": [
   {
    "class": "trigger",
    "aura:id": "trigger",
    "label": "Please pick your favorite soccer club"
   }
  ],
  "cmp.ui.menulist": [
   {
    "class": "actionMenu",
    "aura:id": "actionMenu"
   }
  ],
  "cmp.uitest.menuitem_extend": [
   {
    "zclass": "actionItem1",
    "zlabel": "Bayern München",
    "aura:id": "actionItem1"
   },
   {
    "zclass": "actionItem2",
    "zlabel": "FC Barcelona",
    "aura:id": "actionItem2"
   },
   {
    "zclass": "actionItem3",
    "zlabel": "Inter Milan",
    "aura:id": "actionItem3"
   },
   {
    "zclass": "actionItem4",
    "zlabel": "Manchester United",
    "aura:id": "actionItem4"
   }
  ]
 },
 "app.uitest.menu_extendMenuList": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "expandEventFired",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "collapseEventFired",
    "type": "boolean",
    "default": "false"
   }
  ],
  "cmp.ui.menu": [
   {
    "aura:id": "uiMenuAttachToBody",
    "class": "uiMenuAttachToBody"
   }
  ],
  "cmp.ui.menutriggerlink": [
   {
    "class": "triggerAttachToBody",
    "aura:id": "triggerAttachToBody",
    "label": "Please pick your favorite soccer club"
   }
  ],
  "cmp.uitest.menulist_extend": [
   {
    "class": "actionMenuAttachToBody",
    "aura:id": "actionMenuAttachToBody",
    "attachtobody": "true"
   }
  ],
  "cmp.ui.actionmenuitem": [
   {
    "class": "actionItemAttachToBody1",
    "aura:id": "actionItemAttachToBody1",
    "label": "Bayern München",
    "click": "{!c.updateTriggerLabelForAttachToBody}"
   },
   {
    "class": "actionItemAttachTBody2",
    "aura:id": "actionItemAttachToBody2",
    "label": "FC Barcelona",
    "click": "{!c.updateTriggerLabelForAttachToBody}",
    "disabled": "true"
   },
   {
    "class": "actionItemAttachToBody3",
    "aura:id": "actionItemAttachToBody3",
    "label": "Inter Milan",
    "click": "{!c.updateTriggerLabelForAttachToBody}"
   },
   {
    "class": "actionItemAttachToBody4",
    "aura:id": "actionItemAttachToBody4",
    "label": "Manchester United",
    "click": "{!c.updateTriggerLabelForAttachToBody}"
   }
  ]
 },
 "app.uitest.outputURL_LocationChange": {
  "cmp.aura.application": [
   {
    "locationchangeevent": "auratest:locationChange",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "locationChangeCountPeach",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "locationChangeCount",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "locationTokenOrange",
    "type": "String",
    "default": "EMPTY"
   },
   {
    "name": "locationToken",
    "type": "String",
    "default": "EMPTY2"
   },
   {
    "name": "clickCount",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "debugMsg",
    "type": "String",
    "default": "Nothing"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "auratest:locationChange",
    "action": "{!c.locationChanged}"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "value": "#APPLE",
    "label": "hashLinkApple",
    "aura:id": "hashLinkA",
    "click": "{!c.clickApple}"
   },
   {
    "value": "{!'#' + BANANA}",
    "label": "hashLinkBanana",
    "aura:id": "hashLinkB",
    "click": "{!c.clickBanana}"
   },
   {
    "value": "{!'#' + v.locationTokenOrange}",
    "label": "hashLinkOrange",
    "aura:id": "hashLinkO",
    "click": "{!c.clickOrange}"
   },
   {
    "value": "{!'#' + v.locationChangeCountPeach}",
    "label": "hashLinkPeach",
    "aura:id": "hashLinkP",
    "click": "{!c.clickPeach}"
   }
  ]
 },
 "app.uitest.panel2_Test": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "testPanelType",
    "type": "String",
    "default": "modal"
   },
   {
    "name": "testTitle",
    "type": "String",
    "default": "New Panel"
   },
   {
    "name": "testDisplayTitle",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "testClass",
    "type": "String"
   },
   {
    "name": "testFlavor",
    "type": "String"
   },
   {
    "name": "testIsVisible",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "testStartOfDialogLabel",
    "type": "String",
    "default": "Start of Dialog"
   },
   {
    "name": "testCloseOnClickOut",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testShowCloseButton",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "testCloseDialogLabel",
    "type": "String",
    "default": "Close"
   },
   {
    "name": "testUseTransition",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "testAnimation",
    "type": "String",
    "default": "bottom"
   },
   {
    "name": "testAutoFocus",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "testDirection",
    "type": "String",
    "default": "north"
   },
   {
    "name": "testShowPointer",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testReferenceElement",
    "type": "Object"
   },
   {
    "name": "testUseReferenceElement",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testReferenceElementSelector",
    "type": "String"
   },
   {
    "name": "testUseHeader",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testUseFooter",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testPanelHeader",
    "type": "Aura.Component[]"
   },
   {
    "name": "testPanelFooter",
    "type": "Aura.Component[]"
   },
   {
    "name": "testMakeScrollable",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "nonScrollable",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testCustomizeCloseAction",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.ui.block": [
   {
    "aura:id": "overflowHidden"
   },
   {
    "aura:id": "overflowVisible",
    "overflow": "true",
    "tag": "span"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "right"
   },
   {
    "attribute": "registeredPanels"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "class": "appInput",
    "aura:id": "appInput",
    "value": "TestingCloseOnClickOutFeature",
    "maxlength": "10"
   }
  ],
  "cmp.uitest.panel2_tester": [
   {
    "aura:id": "tester",
    "paneltype": "{!v.testPanelType}",
    "title": "{!v.testTitle}",
    "titledisplay": "{!v.testDisplayTitle}",
    "class": "{!v.testClass}",
    "flavor": "{!v.testFlavor}",
    "isvisible": "{!v.testIsVisible}",
    "startofdialoglabel": "{!v.testStartOfDialogLabel}",
    "closeonclickout": "{!v.testCloseOnClickOut}",
    "showclosebutton": "{!v.testShowCloseButton}",
    "closedialoglabel": "{!v.testCloseDialogLabel}",
    "usetransition": "{!v.testUseTransition}",
    "animation": "{!v.testAnimation}",
    "autofocus": "{!v.testAutoFocus}",
    "direction": "{!v.testDirection}",
    "showpointer": "{!v.testShowPointer}",
    "referenceelement": "{!v.testReferenceElement}",
    "usereferenceelement": "{!v.testUseReferenceElement}",
    "referenceelementselector": "{!v.testReferenceElementSelector}",
    "useheader": "{!v.testUseHeader}",
    "usefooter": "{!v.testUseFooter}",
    "panelheader": "{!v.testPanelHeader}",
    "panelfooter": "{!v.testPanelFooter}",
    "makescrollable": "{!v.testMakeScrollable}",
    "customizecloseaction": "{!v.testCustomizeCloseAction}"
   }
  ],
  "cmp.ui.panelmanager2": [
   {}
  ],
  "cmp.ui.panel": [
   {
    "alias": "panel"
   }
  ],
  "cmp.ui.modal": [
   {
    "alias": "modal"
   }
  ]
 },
 "app.uitest.panelManager_Test": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "_testPanels",
    "type": "Object[]"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://uitest:panel2Content",
    "type": "COMPONENT"
   }
  ],
  "cmp.ui.panelmanager2": [
   {
    "aura:id": "pm"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "registeredPanels"
   }
  ],
  "cmp.uitest.panel2": [
   {
    "alias": "myPanel2"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "createPanelBtn",
    "label": "Create panelType: myPanel2",
    "press": "{!c.createP2}"
   }
  ]
 },
 "app.uitest.popupTest": {
  "cmp.aura.application": [
   {}
  ],
  "cmp.ui.popup": [
   {},
   {},
   {
    "aura:id": "popup1"
   },
   {},
   {},
   {},
   {},
   {}
  ],
  "cmp.ui.popuptrigger": [
   {
    "aura:id": "triggerExtendedTarget",
    "label": "extended target"
   },
   {
    "aura:id": "triggerExtendedTarget",
    "label": "!attachToBody"
   },
   {
    "aura:id": "triggerLabel",
    "label": "trigger via label"
   },
   {
    "aura:id": "triggerLabel",
    "label": "!closeOnClickOutside"
   },
   {
    "class": "customTrigger"
   },
   {
    "aura:id": "triggerPopupExtended"
   },
   {
    "aura:id": "triggerCurtain"
   },
   {
    "aura:id": "triggerManualPositionCurtain",
    "label": "label trigger + manualPosition + curtain"
   },
   {
    "class": "triggerExtendedTarget",
    "aura:id": "triggerExtendedTarget",
    "label": "Triggerglsc"
   }
  ],
  "cmp.uitest.popuptestextendedtarget": [
   {
    "aura:id": "targetExtendedTarget",
    "attachtobody": "true",
    "closeonclickinside": "true"
   },
   {
    "aura:id": "targetNotAttached"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.alert}",
    "label": "Alert + close"
   },
   {
    "press": "{!c.destroyPopup}",
    "label": "destroy popup1"
   }
  ],
  "cmp.ui.popuptarget": [
   {
    "aura:id": "targetLabel",
    "attachtobody": "true"
   },
   {
    "aura:id": "targetLabel",
    "attachtobody": "true",
    "closeonclickoutside": "false"
   },
   {
    "class": "customTriggerTargetContainer",
    "aura:id": "targetTriggerElement",
    "attachtobody": "true"
   },
   {
    "aura:id": "targetPopupExtended"
   },
   {
    "aura:id": "targetCurtain",
    "attachtobody": "true",
    "curtain": "true"
   },
   {
    "aura:id": "targetManualPositionCurtain",
    "attachtobody": "true",
    "manualposition": "true",
    "curtain": "true"
   },
   {
    "aura:id": "targetExtendedTarget",
    "attachtobody": "true",
    "manualposition": "true",
    "autoposition": "false"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "trigger"
   }
  ],
  "cmp.uitest.popuptesttriggerelement": [
   {
    "aura:id": "triggerTriggerElement"
   }
  ],
  "cmp.uitest.popuptestextendedpopup": [
   {}
  ]
 },
 "app.uitest.testApp": {
  "cmp.aura.application": [
   {
    "access": "unauthenticated",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "submitCount",
    "type": "integer"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outSubmitCount",
    "value": "0"
   },
   {
    "aura:id": "outCheckbox",
    "value": ""
   },
   {
    "aura:id": "outCurrency",
    "value": ""
   },
   {
    "aura:id": "outDate",
    "value": ""
   },
   {
    "aura:id": "outDateTime",
    "value": ""
   },
   {
    "aura:id": "outEmail",
    "value": ""
   },
   {
    "aura:id": "outNumber",
    "value": ""
   },
   {
    "aura:id": "outOption",
    "value": ""
   },
   {
    "aura:id": "outPercent",
    "value": ""
   },
   {
    "aura:id": "outPhone",
    "value": ""
   },
   {
    "aura:id": "outSearch",
    "value": ""
   },
   {
    "aura:id": "outSecret",
    "value": ""
   },
   {
    "aura:id": "outSelect",
    "value": ""
   },
   {
    "aura:id": "outSelectOption",
    "value": ""
   },
   {
    "aura:id": "outText",
    "value": ""
   },
   {
    "aura:id": "outTextArea",
    "value": ""
   },
   {
    "aura:id": "outUrl",
    "value": ""
   },
   {
    "aura:id": "outSelectMulti",
    "value": ""
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "aura:id": "inCheckbox",
    "value": "{!m.checked}"
   }
  ],
  "cmp.ui.button": [
   {
    "buttontitle": "Checkbox",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Currency",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Date",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "DateTime",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Email",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Number",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Option",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Percent",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Phone",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Search",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Secret",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Select",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "SelectOption",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Text",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "TextArea",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "Url",
    "label": "submit",
    "press": "{!c.submit}"
   },
   {
    "buttontitle": "SelectMulti",
    "label": "submit",
    "press": "{!c.submit}"
   }
  ],
  "cmp.ui.inputcurrency": [
   {
    "aura:id": "inCurrency",
    "value": "{!m.currency}"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "aura:id": "inDate",
    "value": "{!m.dateOnly}"
   }
  ],
  "cmp.ui.inputdatetime": [
   {
    "aura:id": "inDateTime",
    "value": "{!m.dateTime}"
   }
  ],
  "cmp.ui.inputemail": [
   {
    "aura:id": "inEmail",
    "value": "{!m.email}"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "aura:id": "inNumber",
    "value": "{!m.number}"
   }
  ],
  "cmp.ui.inputoption": [
   {
    "aura:id": "inOption",
    "value": "{!m.option}"
   }
  ],
  "cmp.ui.inputpercent": [
   {
    "aura:id": "inPercent",
    "value": "{!m.percent}"
   }
  ],
  "cmp.ui.inputphone": [
   {
    "aura:id": "inPhone",
    "value": "{!m.phone}"
   }
  ],
  "cmp.ui.inputsearch": [
   {
    "aura:id": "inSearch",
    "value": "{!m.search}"
   }
  ],
  "cmp.ui.inputsecret": [
   {
    "aura:id": "inSecret",
    "value": "{!m.secret}"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "aura:id": "inSelect",
    "options": "{!m.select}"
   },
   {
    "size": "{!m.selectOptions.length}",
    "value": "option1",
    "multiple": "true",
    "aura:id": "inSelectMulti",
    "options": "{!m.selectOptions}"
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "aura:id": "inSelectOption",
    "value": "{!m.selectOption}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inText",
    "value": "{!m.text}",
    "maxlength": "10"
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "aura:id": "inTextArea",
    "value": "{!m.textAreaText}"
   }
  ],
  "cmp.ui.inputurl": [
   {
    "aura:id": "inUrl",
    "value": "{!m.url}"
   }
  ]
 },
 "app.updateTest.updateBase": {
  "cmp.aura.application": [
   {
    "extensible": "true"
   }
  ]
 },
 "app.updateTest.updateWithPreload": {
  "cmp.aura.application": [
   {
    "preload": "updateTest",
    "extends": "updateTest:updateWithoutPreload"
   }
  ]
 },
 "app.updateTest.updateWithoutPreload": {
  "cmp.aura.application": [
   {
    "extends": "updateTest:updateBase",
    "extensible": "true"
   }
  ],
  "cmp.updatetest.updateable": [
   {}
  ],
  "cmp.updatetest.updateablealso": [
   {}
  ]
 },
 "app.utilTest.defaultUtils": {
  "cmp.aura.application": [
   {}
  ]
 },
 "app.results.AuraArchetypeSimpleTest": {
  "cmp.aura.application": [
   {}
  ]
 },
 "cmp.aura.component": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true",
    "template": "aura:template",
    "renderer": "js://aura.component, java://org.auraframework.renderer.ComponentRenderer",
    "implements": "aura:rootComponent",
    "support": "GA",
    "access": "GLOBAL",
    "description": "The root of the component hierarchy. Provides a default rendering implementation."
   }
  ],
  "cmp.aura.clientlibrary": [
   {
    "name": "UIPerf",
    "type": "JS",
    "modes": "PTEST,CADENCE"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://aura:applicationEvent",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:beforeLayoutChange",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:clientOutOfSync",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:clientRedirect",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:componentEvent",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:connectionLost",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:connectionResumed",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:debugLog",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:doneRendering",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:doneWaiting",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:initialized",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:invalidSession",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:layoutChange",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:layoutFailed",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:locationChange",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:methodCall",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:noAccess",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:operationComplete",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:systemError",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:titleChange",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:valueChange",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:valueDestroy",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:valueEvent",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:valueInit",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:waiting",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:applicationRefreshed",
    "type": "EVENT"
   },
   {
    "resource": "markup://aura:placeholder"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "body",
    "type": "Aura.Component[]",
    "access": "GLOBAL",
    "description": "The body of the component. In markup, this is everything in the body of the tag."
   }
  ]
 },
 "cmp.aura.debug": {
  "cmp.aura.component": [
   {
    "support": "PROTO",
    "extensible": "true",
    "description": "The Aura debug tool opens a separate browser window and outputs debug information about an Aura component. The debug tool has the following tabs: Errors, Warnings, Components, Events, Storage, Accessibility, and Console. To launch the Aura Debug tool, add the query string aura.debugtool=true after the URL of the Aura component file that you are viewing in your browser. For example: http://localhost:8080/auranote/noteList.cmp?aura.debugtool=true. To display additional statistics in the Components tab, append the query string aura.mode=STATS to the URL. For example: http://localhost:8080/auranote/noteList.cmp?aura.debugtool=true&aura.mode=STATS. You must disable the popup blocking feature of your web browser to use the debug tool."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "errorsData",
    "type": "String",
    "default": "",
    "description": "The errors found in the component."
   },
   {
    "name": "warningsData",
    "type": "String",
    "default": "",
    "description": "The warnings found in the component."
   },
   {
    "name": "cmpData",
    "type": "String",
    "default": "",
    "description": "The component data, including the number of components and its definitions. If aura.mode=STATS is used, the number of each type of value object is also returned. "
   },
   {
    "name": "eventData",
    "type": "String",
    "default": "",
    "description": "The component and application events fired in the component, shown with the parameters that are passed to the events."
   },
   {
    "name": "storageData",
    "type": "String",
    "default": "0 K ()",
    "description": "The storage name, its size in KB, and its status (OK, Warning, or Critical)."
   },
   {
    "name": "consoleData",
    "type": "String",
    "default": "",
    "description": "Logs the errors and warnings found in the component."
   },
   {
    "name": "storageName",
    "type": "String",
    "default": "actions",
    "description": "The storage name, retrieved from the Storage Service."
   },
   {
    "name": "accessibilityData",
    "type": "String",
    "default": "",
    "description": "The accessibility errors found in the component, based on Web Content Accessibility Guidelines 2.0."
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:debugLog",
    "action": "{!c.debugLogEventListener}"
   },
   {
    "event": "aura:systemError",
    "action": "{!c.errorEventListener}"
   },
   {
    "event": "auraStorage:modified",
    "action": "{!c.storageEventListener}"
   }
  ],
  "cmp.ui.tabset": [
   {}
  ],
  "cmp.ui.tab": [
   {
    "aura:id": "errorsTab",
    "title": "Errors"
   },
   {
    "aura:id": "warningsTab",
    "title": "Warnings"
   },
   {
    "aura:id": "cmpTab",
    "title": "Components",
    "onactivated": "{!c.cmpStats}"
   },
   {
    "aura:id": "eventTab",
    "title": "Events"
   },
   {
    "aura:id": "storageTab",
    "title": "Storage"
   },
   {
    "aura:id": "accessibilityTab",
    "title": "Accessibility",
    "onactivated": "{!c.checkAccessibility}"
   },
   {
    "aura:id": "consoleTab",
    "title": "Console"
   }
  ],
  "cmp.ui.image": [
   {
    "src": "/auraFW/resources/aura/images/refresh.png",
    "imagetype": "decorative"
   }
  ]
 },
 "cmp.aura.embeddedTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extensible": "true",
    "support": "BETA",
    "description": "A server-rendered template used to bootstrap the loading of the Aura framework and an application or component embedded in other containers, such as Visualforce, Siteforce, and legacy Salesforce UI."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "auraStyleTags",
    "type": "String",
    "description": "A list of external style tags necessary for the Aura framework."
   },
   {
    "name": "auraScriptTags",
    "type": "String",
    "description": "A list of external script tags necessary for the Aura framework."
   },
   {
    "name": "auraInit",
    "type": "String",
    "description": "A config object used to retrieve and initialize components for this application."
   },
   {
    "name": "auraInitBlock",
    "type": "String",
    "description": "A string of inline script code to use in this template."
   },
   {
    "name": "extraStyleTags",
    "type": "Aura.Component[]",
    "description": "A list of style tags necessary for this template"
   },
   {
    "name": "extraScriptTags",
    "type": "Aura.Component[]",
    "description": "A list of script tags necessary for this template"
   },
   {
    "name": "extraMetaTags",
    "type": "Aura.Component[]",
    "description": "A list of meta tags necessary for this template"
   }
  ]
 },
 "cmp.aura.expression": {
  "cmp.aura.component": [
   {
    "renderer": "js://aura.expression, java://org.auraframework.renderer.ExpressionRenderer",
    "template": "aura:template",
    "implements": "aura:rootComponent",
    "access": "GLOBAL",
    "support": "GA",
    "description": "Renders the value to which an expression evaluates. Creates an instance of this component which renders the\n                        referenced \"property reference value\" set to the value attribute when expressions are found in free text or markup."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "access": "GLOBAL",
    "description": "The expression to evaluate and render."
   }
  ]
 },
 "cmp.aura.html": {
  "cmp.aura.component": [
   {
    "renderer": "js://aura.html, java://org.auraframework.renderer.HtmlRenderer",
    "template": "auradev:blankTemplate",
    "implements": "aura:rootComponent",
    "support": "GA",
    "access": "GLOBAL",
    "description": "A meta component that represents all html elements.  Any html found in your markup causes the creation of one of these."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "body",
    "type": "Aura.Component[]",
    "access": "GLOBAL",
    "description": "The body of the component.  In markup, this is everything in the body of the tag."
   },
   {
    "name": "tag",
    "type": "String",
    "access": "GLOBAL",
    "description": "The name of the html element that should be rendered."
   },
   {
    "name": "HTMLAttributes",
    "type": "Map",
    "access": "GLOBAL",
    "description": "A Map of attributes to set on the html element."
   }
  ]
 },
 "cmp.aura.if": {
  "cmp.aura.component": [
   {
    "support": "GA",
    "implements": "aura:rootComponent",
    "renderer": "js://aura.component, java://org.auraframework.components.aura.ProvidedBodyRenderer",
    "provider": "java://org.auraframework.impl.root.component.IfProvider, js://aura.if",
    "access": "GLOBAL",
    "description": "Conditionally instantiates and renders either the body or the components in the else attribute."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "isTrue",
    "type": "Boolean",
    "required": "true",
    "access": "GLOBAL",
    "description": "An expression that must be fulfilled in order to display the body."
   },
   {
    "name": "body",
    "type": "Aura.ComponentDefRef[]",
    "required": "true",
    "access": "GLOBAL",
    "description": "The components to render when isTrue evaluates to true."
   },
   {
    "name": "else",
    "type": "Aura.ComponentDefRef[]",
    "access": "GLOBAL",
    "description": "The alternative to render when isTrue evaluates to false, and the body is not rendered.  Should always be set using the aura:set tag."
   },
   {
    "name": "template",
    "type": "Aura.ComponentDefRef[]",
    "description": "Internal use only. Any value set will be ignored."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.isTrue}",
    "action": "{!c.handleTheTruth}"
   }
  ]
 },
 "cmp.aura.include": {
  "cmp.aura.component": [
   {
    "support": "BETA",
    "description": "Only usable in the body of aura:library (.lib) files. This attribute is used to specifiy the Javascript files that are loaded by the library and which file depend on which."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String",
    "required": "true",
    "access": "GLOBAL",
    "description": "Javascript file name in the same folder as the .lib file. The .js extension is omitted."
   },
   {
    "name": "imports",
    "type": "String",
    "required": "true",
    "access": "GLOBAL",
    "description": "Specifies a comma separated list of files in the same folder as the .lib that are required by the Javascript file being included. The required files will be passed in as arguments to the module's function."
   }
  ]
 },
 "cmp.aura.integrationServiceTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extensible": "true",
    "support": "BETA",
    "description": "A server-rendered template used to bootstrap the loading of the Aura framework and an application or component embedded in other containers, such as Visualforce, Siteforce, and legacy Salesforce UI."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "auraStyleTags",
    "type": "String",
    "description": "A list of external style tags necessary for the Aura framework."
   },
   {
    "name": "auraScriptTags",
    "type": "String",
    "description": "A list of external script tags necessary for the Aura framework."
   },
   {
    "name": "auraInit",
    "type": "String",
    "description": "A config object used to retrieve and initialize components for this application."
   },
   {
    "name": "auraInitBlock",
    "type": "String",
    "description": "A string of inline script code to use in this template."
   },
   {
    "name": "extraStyleTags",
    "type": "Aura.Component[]",
    "description": "A list of style tags necessary for this template"
   },
   {
    "name": "extraScriptTags",
    "type": "Aura.Component[]",
    "description": "A list of script tags necessary for this template"
   },
   {
    "name": "extraMetaTags",
    "type": "Aura.Component[]",
    "description": "A list of meta tags necessary for this template"
   }
  ]
 },
 "cmp.aura.iteration": {
  "cmp.aura.component": [
   {
    "implements": "aura:rootComponent",
    "renderer": "js://aura.component, java://org.auraframework.components.aura.ProvidedBodyRenderer",
    "provider": "java://org.auraframework.impl.root.component.IterationProvider, js://aura.iteration",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Renders a view of a collection of items. Supports iterations containing components that can be created exclusively on the client-side."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "items",
    "type": "List",
    "required": "true",
    "access": "GLOBAL",
    "description": "The collection of data to iterate over"
   },
   {
    "name": "var",
    "type": "String",
    "required": "true",
    "access": "GLOBAL",
    "description": "The name of the variable to use for each item inside the iteration"
   },
   {
    "name": "indexVar",
    "type": "String",
    "default": "_index",
    "access": "GLOBAL",
    "description": "The name of variable to use for the index of each item inside the iteration"
   },
   {
    "name": "start",
    "type": "Integer",
    "access": "GLOBAL",
    "description": "The index of the collection to start at (inclusive)"
   },
   {
    "name": "end",
    "type": "Integer",
    "access": "GLOBAL",
    "description": "The index of the collection to stop at (exclusive)"
   },
   {
    "name": "loaded",
    "type": "Boolean",
    "access": "GLOBAL",
    "description": "True if the iteration has finished loading the set of templates.",
    "default": "false"
   },
   {
    "name": "body",
    "type": "Aura.ComponentDefRef[]",
    "access": "GLOBAL",
    "required": "true",
    "description": "Template to use when creating components for each iteration."
   },
   {
    "name": "template",
    "type": "Aura.ComponentDefRef[]",
    "access": "GLOBAL",
    "description": "The template that is used to generate components. By default, this is set from the body markup on first load."
   },
   {
    "name": "forceServer",
    "type": "Boolean",
    "description": "Force a server request for the body. Set to true if the iteration contains any elements requiring server-side creation.",
    "default": "false"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.items}",
    "action": "{!c.itemsChange}"
   },
   {
    "name": "change",
    "value": "{!v.start}",
    "action": "{!c.rangeChange}"
   },
   {
    "name": "change",
    "value": "{!v.end}",
    "action": "{!c.rangeChange}"
   },
   {
    "name": "change",
    "value": "{!v.template}",
    "action": "{!c.templateChange}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "iterationComplete",
    "type": "aura:operationComplete",
    "description": "The event fired when this component has finished asynchronously constructing the children of the iteration from the template provided."
   }
  ]
 },
 "cmp.aura.label": {
  "cmp.aura.component": [
   {
    "support": "GA",
    "description": "Represents a label that accepts a dynamic value."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "description": "The text to display on the label. The value attribute can hold a string value or a $Label provider expression to reference a label value defined elsewhere, such as {!$Label.Object.title}. You can use one or more numbered parameters, such as {0} and {1}, to substitute their values from items in this component's body. An item can be a component, or an expression like {!$Label.Object.title}, {!500}, or {!'abc'}. The parameters can be used in the value attribute directly or in the label definition of the label referenced by the value attribute."
   }
  ]
 },
 "cmp.aura.placeholder": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "body",
    "type": "Aura.Component[]",
    "description": "A placeholder spinner component used when waiting for a server-side dependency, such as when lazy-loading a component."
   },
   {
    "name": "refDescriptor",
    "type": "java://org.auraframework.def.DefDescriptor"
   },
   {
    "name": "attributes",
    "type": "Object"
   },
   {
    "name": "loaded",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "exclusive",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://aura:text",
    "type": "COMPONENT"
   }
  ]
 },
 "cmp.aura.renderIf": {
  "cmp.aura.component": [
   {
    "support": "GA",
    "access": "GLOBAL",
    "description": "This component allows you to conditionally render its contents. It renders its body only if isTrue evaluates to true. The else attribute allows you to render an alternative when isTrue evaluates to false."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "isTrue",
    "type": "Boolean",
    "required": "true",
    "access": "GLOBAL",
    "description": "An expression that must evaluate to true to display the body of the component."
   },
   {
    "name": "else",
    "type": "Aura.Component[]",
    "access": "GLOBAL",
    "description": "The alternative content to render when isTrue evaluates to false, and the body is not rendered. Set using the <aura:set> tag."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "destroy",
    "value": "{!this}",
    "action": "{!c.destroy}"
   },
   {
    "name": "change",
    "value": "{!v.body}",
    "action": "{!c.facetChange}"
   },
   {
    "name": "change",
    "value": "{!v.else}",
    "action": "{!c.facetChange}"
   }
  ],
  "cmp.aura.expression": [
   {
    "value": "{!v.isTrue==true || v.isTrue=='true'?v.body:v.else}",
    "aura:id": "expression"
   }
  ]
 },
 "cmp.aura.template": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Default template used to bootstrap Aura framework. To use another template, extend aura:template and set attributes using aura:set."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String",
    "access": "GLOBAL",
    "default": "Aura",
    "description": "The title of the template."
   },
   {
    "name": "auraStyleTags",
    "type": "String",
    "description": "Loads Aura CSS files."
   },
   {
    "name": "auraScriptTags",
    "type": "String",
    "description": "Loads the js framework, preloads the definitions of all preload namespaces, and any other framework script"
   },
   {
    "name": "auraBaseScriptTags",
    "type": "String"
   },
   {
    "name": "auraNamespacesScriptTags",
    "type": "String"
   },
   {
    "name": "auraResetCss",
    "type": "String"
   },
   {
    "name": "auraInlineStyle",
    "type": "String",
    "description": "Loads Aura inline style from template.css."
   },
   {
    "name": "auraInit",
    "type": "String",
    "description": "Initializes Aura ayncronously."
   },
   {
    "name": "auraInitSync",
    "type": "String",
    "description": "Denotes synchronous initialization of Aura. Returns the same value as auraInit."
   },
   {
    "name": "auraPreInitBlock",
    "type": "Aura.Component[]",
    "description": "The block of content that is rendered before Aura initialization."
   },
   {
    "name": "auraInitBlock",
    "type": "Aura.Component[]",
    "description": "The block of content that is rendered when initialization is complete."
   },
   {
    "name": "autoInitialize",
    "type": "String",
    "default": "true",
    "description": "Denotes whether Aura should auto-initialize (true) or not (false)."
   },
   {
    "name": "autoInitializeSync",
    "type": "String",
    "default": "false"
   },
   {
    "name": "doctype",
    "type": "String",
    "access": "GLOBAL",
    "default": "<!DOCTYPE html>",
    "description": "The DOCTYPE declaration for the template."
   },
   {
    "name": "loadingText",
    "type": "String",
    "access": "GLOBAL",
    "default": "Loading",
    "description": "Loading text"
   },
   {
    "name": "errorTitle",
    "type": "String",
    "access": "GLOBAL",
    "default": "Looks like there's a problem:",
    "description": "Error title when an error has occured."
   },
   {
    "name": "errorMessage",
    "type": "String",
    "access": "GLOBAL",
    "default": "CSS Error",
    "description": "Error loading text"
   },
   {
    "name": "defaultBodyClass",
    "type": "String",
    "access": "GLOBAL",
    "default": "loading",
    "description": "Default body CSS styles."
   },
   {
    "name": "bodyClass",
    "type": "String",
    "access": "GLOBAL",
    "description": "Extra body CSS styles"
   },
   {
    "name": "extraStyleTags",
    "type": "Aura.Component[]",
    "description": "Additional <link> elements for external CSS."
   },
   {
    "name": "extraScriptTags",
    "type": "Aura.Component[]",
    "description": "Additional <script> elements."
   },
   {
    "name": "extraMetaTags",
    "type": "Aura.Component[]",
    "description": "Additional <meta> tags"
   },
   {
    "name": "normalizeCss",
    "type": "Boolean",
    "default": "false",
    "description": "Use normalize or resetCSS"
   },
   {
    "name": "forceError",
    "type": "Boolean",
    "default": "false",
    "description": "Set this to true to force the display of an error that would be hidden because of nesting."
   },
   {
    "name": "manifest",
    "type": "String",
    "description": "Specifies the location of the document's cache manifest. Works with HTML5 only."
   },
   {
    "name": "lastMod",
    "type": "String",
    "description": "The last modified date."
   },
   {
    "name": "afterAuraInit",
    "type": "String",
    "description": "Not used."
   },
   {
    "name": "inlineStyle",
    "type": "Aura.Component[]",
    "description": "The CSS style used to display inline elements"
   },
   {
    "name": "appcacheProgressBarStyle",
    "type": "Aura.Component[]",
    "description": "The CSS style used to display appcache progress bar."
   }
  ]
 },
 "cmp.aura.text": {
  "cmp.aura.component": [
   {
    "renderer": "js://aura.text, java://org.auraframework.renderer.TextRenderer",
    "template": "auradev:blankTemplate",
    "implements": "aura:rootComponent",
    "access": "GLOBAL",
    "support": "GA",
    "description": "Renders plain text.  When any free text (not a tag or attribute value) is found in markup, an instance of this component is created with the value attribute set to the text found in the markup."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "access": "GLOBAL",
    "description": "The String to be rendered."
   },
   {
    "name": "truncate",
    "type": "Integer",
    "description": "The maximum number of characters to render.  Any additional characters is not displayed."
   },
   {
    "name": "truncateByWord",
    "type": "Boolean",
    "default": "false",
    "description": "When the truncate attribute is enabled and the value is truncated, truncation never occurs in the middle of a word if this attribute is true."
   },
   {
    "name": "ellipsis",
    "type": "Boolean",
    "default": "true",
    "description": "If truncation is enabled, and the value is truncated, an ellipsis will be appended to the truncated value if this is true. The truncate value takes the 3 additional characters of the ellipsis into account when counting characters."
   }
  ]
 },
 "cmp.aura.unescapedHtml": {
  "cmp.aura.component": [
   {
    "support": "GA",
    "access": "GLOBAL",
    "description": "The value assigned to this component will be rendered as-is, without altering its contents. It's intended for outputting pre-formatted HTML, for example, where the formatting is arbitrary, or expensive to calculate. The body of this component is ignored, and won't be rendered. Warning: this component outputs value as unescaped HTML, which introduces the possibility of security vulnerabilities in your code. You must sanitize user input before rendering it unescaped, or you will create a cross-site scripting (XSS) vulnerability. Only use <aura:unescapedHtml> with trusted or sanitized sources of data."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "body",
    "type": "Aura.Component[]",
    "access": "GLOBAL",
    "description": "The body of <aura:unescapedHtml> is ignored and won't be rendered."
   },
   {
    "name": "value",
    "type": "String",
    "access": "GLOBAL",
    "description": "The string that should be rendered as unescaped HTML."
   }
  ]
 },
 "cmp.auraStorage.fuelGauge": {
  "cmp.aura.component": [
   {
    "support": "GA"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "storageName",
    "type": "String",
    "required": "true"
   },
   {
    "name": "value",
    "type": "Decimal",
    "default": "0.0"
   },
   {
    "name": "enabled",
    "type": "Boolean"
   },
   {
    "name": "implementation",
    "type": "String"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "auraStorage:modified",
    "action": "{!c.update}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.enabled}"
   }
  ],
  "cmp.ui.stamp": [
   {
    "aura:id": "stamp",
    "severity": "success",
    "onclick": "{!c.showStats}"
   }
  ]
 },
 "cmp.auraStorage.init": {
  "cmp.aura.component": [
   {
    "renderer": "java://org.auraframework.component.auraStorage.InitRenderer",
    "support": "GA"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String",
    "required": "true",
    "description": "The programmatic name for the storage instance."
   },
   {
    "name": "persistent",
    "type": "Boolean",
    "default": "false",
    "description": "Set to true if this storage requires persistent storage support."
   },
   {
    "name": "secure",
    "type": "Boolean",
    "default": "false",
    "description": "Set to true if this storage requires secure storage support."
   },
   {
    "name": "clearStorageOnInit",
    "type": "Boolean",
    "default": "true",
    "description": "Set to true to delete all previous data on initialization for persistent storage."
   },
   {
    "name": "defaultExpiration",
    "type": "Integer",
    "default": "10",
    "description": "The default number of seconds that an object will be retained in storage if a request specific expiration has not been specified in the call to Action.setStorable()."
   },
   {
    "name": "defaultAutoRefreshInterval",
    "type": "Integer",
    "default": "30",
    "description": "The default number of seconds before an auto refresh request will be initiated if a request specific interval has not been specified in the call to Action.setStorable()."
   },
   {
    "name": "maxSize",
    "type": "Integer",
    "default": "1000",
    "description": "Maximum size in kilobytes that will be used in the memory adapter's storage. Existing items will be evicted to make room for new items using LRU and expiry strategies. Value is multiplied by 1024 bytes for storage initialization."
   },
   {
    "name": "debugLoggingEnabled",
    "type": "Boolean",
    "default": "false",
    "description": "Controls if additional $A.log() messages are generated."
   },
   {
    "name": "requireUseStorageQueryParam",
    "type": "Boolean",
    "default": "false",
    "description": "If true, aura.useStorage=true must be set in the query string in the URL to use the storage service. If true and the query parameter is not set, storage is not initialized."
   },
   {
    "name": "version",
    "type": "String",
    "default": "",
    "description": "Optional. Version to associate all storage items"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "event": "aura:connectionLost",
    "action": "{!c.connectionLost}"
   },
   {
    "event": "aura:connectionResumed",
    "action": "{!c.connectionResumed}"
   }
  ]
 },
 "cmp.auraadmin.cacheView": {
  "cmp.aura.component": [
   {
    "controller": "js://auraadmin.cacheView"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String",
    "required": "true"
   },
   {
    "name": "expanded",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "showDefs",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "data",
    "type": "Map",
    "required": "true"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.showDefs}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.expanded}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "var": "def",
    "items": "{!v.data.defs}"
   }
  ]
 },
 "cmp.auraadmin.cachingRegistryView": {
  "cmp.aura.component": [
   {
    "extends": "auraadmin:registryView"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "expanded",
    "type": "boolean"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "buttons"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.expanded}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "var": "def",
    "items": "{!v.registry.defs}"
   }
  ]
 },
 "cmp.auraadmin.counterBeans": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "beans",
    "type": "List"
   }
  ],
  "cmp.aura.iteration": [
   {
    "var": "bean",
    "items": "{!v.beans}"
   }
  ]
 },
 "cmp.auraadmin.registryView": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "registry",
    "type": "Map",
    "required": "true"
   },
   {
    "name": "buttons",
    "type": "Aura.Component[]"
   }
  ]
 },
 "cmp.auradev.blankTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true"
   }
  ]
 },
 "cmp.auradev.componentClass": {
  "cmp.aura.component": [
   {
    "description": "Renders the concrete javascript class for a component.",
    "istemplate": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "fullyQualifiedName",
    "type": "String",
    "required": "true"
   },
   {
    "name": "superFullyQualifiedName",
    "type": "String",
    "required": "true"
   },
   {
    "name": "className",
    "type": "String",
    "required": "true"
   },
   {
    "name": "superClassName",
    "type": "String",
    "required": "true"
   },
   {
    "name": "helperProperties",
    "type": "java://List<org.auraframework.impl.ServerServiceImpl.HelperInfo>",
    "required": "true"
   },
   {
    "name": "renderMethods",
    "type": "java://List<org.auraframework.util.json.JsFunction>",
    "required": "true"
   },
   {
    "name": "renderMethodStubs",
    "type": "String[]",
    "required": "true"
   },
   {
    "name": "superRenderMethodNames",
    "type": "java://List<org.auraframework.impl.ServerServiceImpl.RerenderInfo>",
    "required": "true"
   },
   {
    "name": "rootComponent",
    "type": "Boolean",
    "required": "true"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.superClassName != '$A.Component'}"
   },
   {
    "istrue": "{!empty(v.helperProperties)}"
   },
   {
    "istrue": "{!v.superClassName != '$A.Component'}"
   },
   {
    "istrue": "{!v.superClassName != '$A.Component'}"
   },
   {
    "istrue": "{!method.arguments.length > 0}"
   },
   {
    "istrue": "{!method.arguments.length > 1}"
   },
   {
    "istrue": "{!v.rootComponent == true && name == 'unrender'}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.helperProperties}",
    "var": "property"
   },
   {
    "items": "{!v.renderMethods}",
    "var": "method"
   },
   {
    "items": "{!v.renderMethodStubs}",
    "var": "name"
   }
  ]
 },
 "cmp.auradev.createApplicationDefQuickFix": {
  "cmp.aura.component": [
   {
    "extends": "auradev:createBaseComponentDefQuickFix"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "defType",
    "value": "Application"
   }
  ]
 },
 "cmp.auradev.createAttributeDefQuickFix": {
  "cmp.aura.component": [
   {
    "extends": "auradev:quickFix"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.quickFix.attributes.intf}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.auradev.createBaseComponentDefQuickFix": {
  "cmp.aura.component": [
   {
    "extends": "auradev:quickFix",
    "abstract": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "defType",
    "type": "String",
    "default": "Component"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.defType == 'Component'}"
   },
   {
    "istrue": "{!v.defType == 'Component'}"
   },
   {
    "istrue": "{!v.defType == 'Component'}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.auradev.createComponentDefQuickFix": {
  "cmp.aura.component": [
   {
    "extends": "auradev:createBaseComponentDefQuickFix"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "defType",
    "value": "Component"
   }
  ]
 },
 "cmp.auradev.createThemeDefQuickFix": {
  "cmp.aura.component": [
   {
    "extends": "auradev:quickFix"
   }
  ]
 },
 "cmp.auradev.createThemeVarDefQuickFix": {
  "cmp.aura.component": [
   {
    "extends": "auradev:quickFix"
   }
  ]
 },
 "cmp.auradev.dependencyItem": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "descriptor",
    "type": "String"
   },
   {
    "name": "type",
    "type": "String"
   },
   {
    "name": "uid",
    "type": "String"
   },
   {
    "name": "error",
    "type": "Boolean"
   }
  ]
 },
 "cmp.auradev.lintc": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.component.auradev.LintModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String"
   }
  ],
  "cmp.aura.iteration": [
   {
    "var": "error",
    "items": "{!m.errors}"
   }
  ]
 },
 "cmp.auradev.quickFix": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "controller": "java://org.auraframework.throwable.quickfix.AuraQuickFixController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "quickFix",
    "type": "java://org.auraframework.throwable.quickfix.AuraQuickFix"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "fixButton",
    "label": "Fix!",
    "press": "{!c.fix}"
   }
  ]
 },
 "cmp.auradev.quickFixButton": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.throwable.quickfix.AuraQuickFixController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "quickFix",
    "type": "java://org.auraframework.throwable.quickfix.AuraQuickFix"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "showUI",
    "type": "auradev:showQuickFixUI"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "createButton",
    "press": "{!c.fix}",
    "label": "{!v.quickFix.description}"
   }
  ]
 },
 "cmp.auradev.quickFixException": {
  "cmp.aura.component": [
   {
    "template": "auradev:quickFixTemplate"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://auradev:*QuickFix"
   },
   {
    "resource": "markup://auradev:quickFix*"
   },
   {
    "resource": "markup://aura:*"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "exception",
    "type": "java://org.auraframework.throwable.quickfix.QuickFixException"
   },
   {
    "name": "cause",
    "type": "String",
    "default": ""
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.exception.location != null}"
   },
   {
    "istrue": "{! v.cause != ''}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.exception.quickFixes}",
    "var": "quickFix"
   }
  ],
  "cmp.auradev.quickfixbutton": [
   {
    "quickfix": "{!quickFix}",
    "showui": "{!c.showUI}"
   }
  ]
 },
 "cmp.auradev.quickFixTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extends": "aura:template"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "doctype",
    "value": ""
   },
   {
    "attribute": "title",
    "value": "Aura Quick Fix"
   },
   {
    "attribute": "extraStyleTags"
   }
  ]
 },
 "cmp.auradev.removeAttributeDefQuickFix": {
  "cmp.aura.component": [
   {
    "extends": "auradev:quickFix"
   }
  ]
 },
 "cmp.auradev.removeBodyDefQuickFix": {
  "cmp.aura.component": [
   {
    "extends": "auradev:quickFix"
   }
  ]
 },
 "cmp.auradev.saveApplication": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "def",
    "type": "java://org.auraframework.def.ApplicationDef"
   }
  ]
 },
 "cmp.auradev.saveComponent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "def",
    "type": "java://org.auraframework.def.ComponentDef"
   }
  ]
 },
 "cmp.auradev.saveComponentJava": {
  "cmp.aura.component": [
   {
    "render": "server",
    "template": "auradev:blankTemplate"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "def",
    "type": "java://org.auraframework.def.ComponentDef"
   }
  ]
 },
 "cmp.auradev.saveStyle": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "def",
    "type": "java://org.auraframework.def.StyleDef"
   }
  ]
 },
 "cmp.auradev.saveTheme": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "def",
    "type": "java://org.auraframework.def.ComponentDef"
   }
  ]
 },
 "cmp.auradev.showDependencies": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.component.auradev.ShowDependenciesModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "component",
    "default": "aura:application"
   }
  ],
  "cmp.auradev.dependencyitem": [
   {
    "error": "{!false}",
    "descriptor": "Descriptor",
    "type": "Type",
    "uid": "UID"
   },
   {
    "error": "{!item.error}",
    "descriptor": "{!item.descriptor}",
    "type": "{!item.type}",
    "uid": "{!item.uid}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.items}",
    "var": "item"
   }
  ]
 },
 "cmp.auradev.testDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "model": "java://org.auraframework.component.auradev.TestDataProviderModel",
    "controller": "java://org.auraframework.component.auradev.TestDataProviderController",
    "description": "A test data provider."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.auradev.testDataProvider2": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "controller": "java://org.auraframework.component.auradev.TestDataProvider2Controller",
    "description": "A test data provider."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.auradocs.about": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auradocs.api": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auradocs.apiParam": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "symbol",
    "type": "Object"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.symbol.type.names}",
    "var": "name",
    "indexvar": "index"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!name != ''}"
   },
   {
    "istrue": "{!index != (v.symbol.type.names.length - 1)}"
   }
  ],
  "cmp.aura.unescapedhtml": [
   {
    "value": "{!v.symbol.description}"
   }
  ]
 },
 "cmp.auradocs.apiParams": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "params",
    "type": "Object[]"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.params}",
    "var": "param"
   }
  ],
  "cmp.auradocs.apiparam": [
   {
    "symbol": "{!param}"
   }
  ]
 },
 "cmp.auradocs.apiSymbol": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "symbol",
    "type": "Object"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.symbol.params}",
    "var": "param"
   },
   {
    "items": "{!param.type.names}",
    "var": "name",
    "indexvar": "index"
   },
   {
    "items": "{!v.symbol.returns[0].type.names}",
    "var": "name",
    "indexvar": "index"
   },
   {
    "items": "{!v.symbol.returns[0].type.names}",
    "var": "name",
    "indexvar": "index"
   },
   {
    "items": "{!v.symbol.exceptions}",
    "var": "ex"
   },
   {
    "items": "{!ex.type.names}",
    "var": "name",
    "indexvar": "index"
   },
   {
    "items": "{!v.symbol.examples}",
    "var": "ex"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!name != ''}"
   },
   {
    "istrue": "{!index != (param.type.names.length - 1)}"
   },
   {
    "istrue": "{!v.symbol.returns && v.symbol.returns.length>0}"
   },
   {
    "istrue": "{!index != (v.symbol.returns[0].type.names.length - 1)}"
   },
   {
    "istrue": "{!v.symbol.params.length > 0}"
   },
   {
    "istrue": "{!v.symbol.returns && v.symbol.returns.length>0}"
   },
   {
    "istrue": "{!index != (v.symbol.returns[0].type.names.length - 1)}"
   },
   {
    "istrue": "{!v.symbol.exceptions && v.symbol.exceptions.length>0}"
   },
   {
    "istrue": "{!index != (ex.type.names.length - 1)}"
   },
   {
    "istrue": "{!v.symbol.examples && v.symbol.examples.length>0}"
   }
  ],
  "cmp.aura.unescapedhtml": [
   {
    "value": "{!v.symbol.classDesc + v.symbol.description}"
   },
   {
    "value": "{!v.symbol.returns[0].description}"
   },
   {
    "value": "{!ex.description}"
   },
   {
    "value": "{!ex}"
   }
  ],
  "cmp.auradocs.apiparams": [
   {
    "params": "{!v.symbol.params}"
   }
  ]
 },
 "cmp.auradocs.apiSymbols": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String"
   },
   {
    "name": "symbols",
    "type": "Object[]"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.symbols}",
    "var": "symbol"
   },
   {
    "items": "{!v.symbols}",
    "var": "symbol"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!symbol.access != 'private'}"
   },
   {
    "istrue": "{!symbol.access != 'private'}"
   }
  ],
  "cmp.auradocs.apisymbol": [
   {
    "symbol": "{!symbol}"
   }
  ]
 },
 "cmp.auradocs.apiTopic": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:topicPanel",
    "model": "java://org.auraframework.docs.ApiTopicModel"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "title",
    "value": "{!m.title}"
   },
   {
    "attribute": "subtitle"
   },
   {
    "attribute": "example"
   }
  ],
  "cmp.auradocs.apisymbols": [
   {
    "title": "Methods",
    "symbols": "{!m.symbol.methods}"
   },
   {
    "title": "Fields",
    "symbols": "{!m.symbol.properties}"
   }
  ]
 },
 "cmp.auradocs.codeblock": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auradocs.contentsNode": {
  "cmp.aura.component": [
   {
    "extends": "ui:treeNode"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "text",
    "type": "String"
   },
   {
    "name": "id",
    "type": "String"
   },
   {
    "name": "class",
    "type": "String"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "href",
    "value": "{!v.id !=null ? ('#help?topic=' + v.id) : null}"
   },
   {
    "attribute": "title",
    "value": "{!v.text}"
   }
  ]
 },
 "cmp.auradocs.def": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:defLayout",
    "model": "java://org.auraframework.docs.ComponentDefModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "descriptor",
    "type": "String",
    "required": "true"
   },
   {
    "name": "defType",
    "type": "String",
    "default": "component"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "scrollContentClass",
    "value": "scrollContent"
   },
   {
    "attribute": "title",
    "value": "{!m.namespace + ':' + m.name}"
   },
   {
    "attribute": "subtitle"
   },
   {
    "attribute": "labels"
   },
   {
    "attribute": "description"
   },
   {
    "attribute": "status"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!m.type != null}"
   },
   {
    "istrue": "{!m.abstract}"
   },
   {
    "istrue": "{!m.abstract}"
   },
   {
    "istrue": "{!m.super != null}"
   },
   {
    "istrue": "{!m.interfaces.length > 0}"
   },
   {
    "istrue": "{!m.description != null}"
   },
   {
    "istrue": "{!m.support != null}"
   },
   {
    "istrue": "{!m.documentation != null && m.documentation.descriptions.length > 0}"
   },
   {
    "istrue": "{!m.attributes.length > 0}"
   },
   {
    "istrue": "{!m.handledEvents.length > 0}"
   },
   {
    "istrue": "{!m.events.length > 0}"
   },
   {
    "istrue": "{!m.showSource}"
   }
  ],
  "cmp.ui.stamp": [
   {
    "severity": "inverse"
   },
   {
    "severity": "inverse"
   },
   {
    "severity": "{!m.support=='PROTO'?'important':m.support=='DEPRECATED'?'inverse':m.support=='BETA'?'warning':m.support=='GA'?'success':''}"
   }
  ],
  "cmp.ui.message": [
   {
    "severity": "info"
   },
   {
    "severity": "info"
   }
  ],
  "cmp.auradocs.deflink": [
   {
    "descriptor": "{!m.super}",
    "deftype": "{!m.defType}"
   },
   {
    "descriptor": "{!intf}",
    "deftype": "interface"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.interfaces}",
    "var": "intf"
   },
   {
    "items": "{!m.defs}",
    "var": "def"
   },
   {
    "items": "{!m.includeDefs}",
    "var": "def"
   }
  ],
  "cmp.ui.tabset": [
   {
    "class": "subtabs"
   }
  ],
  "cmp.auradocs.stretchtab": [
   {
    "title": "Overview"
   },
   {
    "title": "Dependencies"
   },
   {
    "title": "Examples"
   }
  ],
  "cmp.auradocs.defdescription": [
   {
    "descriptions": "{!m.documentation.descriptions}"
   }
  ],
  "cmp.auradocs.defmemberlist": [
   {
    "title": "Attributes",
    "list": "{!m.attributes}"
   },
   {
    "title": "Handled Events",
    "list": "{!m.handledEvents}"
   },
   {
    "title": "Events",
    "list": "{!m.events}"
   }
  ],
  "cmp.auradocs.stretcheditorpanel": [
   {
    "title": "Source",
    "descriptor": "{!v.descriptor}",
    "deftype": "{!v.defType}"
   },
   {
    "title": "{!def.name}",
    "descriptor": "{!def.descriptor}",
    "deftype": "{!def.defType}",
    "includedefname": "{! def.includeDefName}"
   },
   {
    "title": "{!def.includeDefName + '.js'}",
    "descriptor": "{!def.descriptor}",
    "deftype": "{!def.defType}",
    "includedefname": "{! def.includeDefName}"
   }
  ],
  "cmp.auradocs.defdependencies": [
   {
    "descriptor": "{!v.descriptor}",
    "deftype": "{!v.defType}"
   }
  ],
  "cmp.auradocs.examplesc": [
   {
    "name": "{!v.descriptor}"
   }
  ]
 },
 "cmp.auradocs.defDependencies": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.DefDependenciesModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "descriptor",
    "type": "String",
    "required": "true"
   },
   {
    "name": "defType",
    "type": "String",
    "default": "Component"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.dependencies}",
    "var": "config"
   },
   {
    "items": "{!config.list}",
    "var": "dep"
   }
  ],
  "cmp.auradocs.deflink": [
   {
    "descriptor": "{!dep.fullname}",
    "deftype": "{!dep.defType}"
   }
  ]
 },
 "cmp.auradocs.defDescription": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "descriptions",
    "type": "Object"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.descriptions}",
    "var": "desc"
   }
  ],
  "cmp.aura.unescapedhtml": [
   {
    "value": "{!desc}"
   }
  ]
 },
 "cmp.auradocs.defLayout": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String"
   },
   {
    "name": "subtitle",
    "type": "Aura.Component[]"
   },
   {
    "name": "description",
    "type": "Aura.Component[]"
   },
   {
    "name": "labels",
    "type": "Aura.Component[]"
   },
   {
    "name": "status",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.ui.block": [
   {}
  ],
  "cmp.aura.set": [
   {
    "attribute": "right"
   }
  ]
 },
 "cmp.auradocs.defLink": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "descriptor",
    "type": "String",
    "required": "true"
   },
   {
    "name": "defType",
    "type": "String",
    "default": "component"
   }
  ]
 },
 "cmp.auradocs.defMemberList": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String"
   },
   {
    "name": "list",
    "type": "Object"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.list}",
    "var": "item"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!item.name != null || item.type != null}"
   },
   {
    "istrue": "{!item.parentName != null}"
   },
   {
    "istrue": "{!item.required == true}"
   }
  ],
  "cmp.ui.message": [
   {}
  ],
  "cmp.auradocs.deflink": [
   {
    "descriptor": "{!item.parentName}",
    "deftype": "{!item.parentDefType}"
   }
  ],
  "cmp.ui.stamp": [
   {
    "severity": "important"
   }
  ]
 },
 "cmp.auradocs.defOverview": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.DefOverviewModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "descriptor",
    "type": "String",
    "required": "true"
   },
   {
    "name": "defType",
    "type": "String",
    "default": "Component"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.dependencies}",
    "var": "config"
   },
   {
    "items": "{!config.list}",
    "var": "dep"
   }
  ],
  "cmp.auradocs.descriptorlink": [
   {
    "defmodel": "{!dep}"
   }
  ]
 },
 "cmp.auradocs.demoAuraError": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:demoPanel"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "title",
    "value": "Aura Error Demos"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "controller throw",
    "press": "{!c.controllerThrow}"
   },
   {
    "label": "helper throw",
    "press": "{!c.helperThrow}"
   }
  ]
 },
 "cmp.auradocs.demoAutocomplete": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.autocomplete": [
   {
    "aura:id": "autoComplete",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeAutoCompleteMatchDone}",
    "inputchange": "{!c.handleInputChangeAutoComplete}",
    "selectlistoption": "{!c.handleSelectOptionAutoComplete}"
   },
   {
    "aura:id": "autoCompleteNoData",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeNoDataMatchDone}",
    "inputchange": "{!c.handleInputChangeNoData}",
    "selectlistoption": "{!c.handleSelectOptionNoData}"
   },
   {
    "aura:id": "autoCompleteLargeList",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeLargeListMatchDone}",
    "inputchange": "{!c.handleInputChangeLargeList}",
    "selectlistoption": "{!c.handleSelectOptionLargeList}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   }
  ],
  "cmp.auradocs.demoautocompleteprovider": [
   {},
   {
    "datatype": "emptyList"
   },
   {
    "datatype": "largeList"
   }
  ],
  "cmp.ui.autocompleteoption": [
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   },
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   },
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "autoCompleteMatchSize",
    "value": ""
   },
   {
    "aura:id": "autoCompleteNoDataMatchSize",
    "value": ""
   },
   {
    "aura:id": "autoCompleteLargeListMatchSize",
    "value": ""
   }
  ]
 },
 "cmp.auradocs.demoAutocompleteProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "description": "A test data provider to test autocomplete component.",
    "model": "java://org.auraframework.docs.demoModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "dataType",
    "type": "String"
   }
  ]
 },
 "cmp.auradocs.demoCarousel": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.carousel": [
   {
    "width": "300"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "pageComponents"
   }
  ],
  "cmp.ui.carouselpage": [
   {},
   {}
  ]
 },
 "cmp.auradocs.demoCss": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.applyCSS}",
    "label": "Add Style"
   },
   {
    "press": "{!c.removeCSS}",
    "label": "Remove Style"
   }
  ]
 },
 "cmp.auradocs.demoDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "model": "java://org.auraframework.component.auradev.TestDataProviderModel",
    "controller": "java://org.auraframework.component.auradev.TestDataProviderController",
    "description": "A test data provider."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.auradocs.demoDialog": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.dialogmanager": [
   {}
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.showDialog}",
    "label": "Open Dialog"
   },
   {
    "label": "Maybe",
    "press": "{!c.hideDialog}"
   }
  ],
  "cmp.ui.dialog": [
   {
    "aura:id": "overlay",
    "clickouttoclose": "false",
    "width": "small",
    "title": "Overlay Demo",
    "description": "This is a demo of the ui:dialog component."
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "buttons"
   }
  ],
  "cmp.ui.dialogbuttons": [
   {
    "aura:id": "buttons",
    "defaultbuttons": "both"
   }
  ]
 },
 "cmp.auradocs.demoEvents": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.block": [
   {}
  ],
  "cmp.aura.set": [
   {
    "attribute": "left"
   },
   {
    "attribute": "right"
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "class": "box",
    "aura:id": "boxy",
    "value": "Work your magic here",
    "type": "textarea",
    "labelposition": "top",
    "mousedown": "{!c.inspMouseDown}",
    "mouseup": "{!c.inspMouseUp}",
    "focus": "{!c.inspFocus}",
    "blur": "{!c.inspBlur}",
    "dblclick": "{!c.inspDblClick}",
    "mouseout": "{!c.inspMouseout}",
    "mouseover": "{!c.inspMouseover}",
    "keypress": "{!c.inspKey}",
    "select": "{!c.inspSelect}",
    "cut": "{!c.inspCut}",
    "copy": "{!c.inspCopy}",
    "paste": "{!c.inspPaste}"
   }
  ],
  "cmp.ui.label": [
   {
    "label": "Events",
    "for": "outputValue",
    "class": "eventsLabel"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "clearButton",
    "buttontitle": "Clear",
    "class": "clearButton",
    "label": "Clear",
    "press": "{!c.clearEvents}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputValue",
    "class": "outputValue",
    "value": ""
   }
  ]
 },
 "cmp.auradocs.demoForm": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "myDate",
    "type": "Date",
    "default": "2013-02-28"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "textI",
    "label": "ui:inputText",
    "value": "text input"
   },
   {
    "aura:id": "keyup",
    "label": "ui:inputText with events",
    "class": "keyup",
    "value": "Click here with left or right mouse button",
    "updateon": "keyup",
    "keypress": "{!c.inspectKeyEvent}",
    "mousedown": "{!c.inspectMouseEvent}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Read input",
    "press": "{!c.getInput}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "textO",
    "value": "ui:outputText"
   },
   {
    "aura:id": "outputValue",
    "class": "outputValue",
    "value": ""
   }
  ],
  "cmp.ui.inputphone": [
   {
    "label": "ui:inputPhone",
    "placeholder": "000-000-0000"
   }
  ],
  "cmp.ui.inputemail": [
   {
    "label": "ui:inputEmail",
    "value": "email field in disabled state",
    "disabled": "true"
   }
  ],
  "cmp.ui.inputsecret": [
   {
    "label": "ui:inputSecret",
    "value": "secret field"
   }
  ],
  "cmp.ui.inputurl": [
   {
    "label": "ui:inputURL",
    "value": "http://"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "label": "ui:outputURL demo",
    "value": "/auradocs"
   }
  ],
  "cmp.ui.label": [
   {
    "for": "dateInput",
    "label": "ui:inputDate"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "aura:id": "dateInput",
    "value": "{!v.myDate}",
    "mouseup": "{!c.getDate}",
    "displaydatepicker": "true",
    "labelposition": "top"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "label": "ui:inputNumber",
    "value": "42"
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "label": "ui:inputTextArea",
    "cols": "10",
    "value": "This is a String."
   }
  ],
  "cmp.ui.outputrichtext": [
   {
    "label": "ui:outputRichText",
    "value": "<p>This is a paragraph rendered by <span style=\"color:red;\" >ui:outputRichText</span>.</p>"
   }
  ]
 },
 "cmp.auradocs.demoFriendlyError": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:demoPanel"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "title",
    "value": "Aura Friendly Error Demos"
   },
   {
    "attribute": "buttons"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:systemError",
    "action": "{!c.showErrorDialog}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "user friendly throw",
    "press": "{!c.friendlyErrorThrow}"
   },
   {
    "label": "OK",
    "press": "{!c.hideErrorDialog}"
   }
  ],
  "cmp.ui.dialogmanager": [
   {}
  ],
  "cmp.ui.dialog": [
   {
    "aura:id": "errorOverlay",
    "clickouttoclose": "false",
    "width": "small",
    "title": "Friendly Error Demo",
    "description": "display an error dialog when button [user friendly throw] is pressed"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "errorText",
    "value": ""
   }
  ],
  "cmp.ui.dialogbuttons": [
   {
    "aura:id": "buttons"
   }
  ]
 },
 "cmp.auradocs.demoInputRT": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputrichtext": [
   {
    "aura:id": "inputRT",
    "label": "Rich Text Demo",
    "value": "<script>test</script> <b>rich text</b>"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "outputButton",
    "buttontitle": "Click to see what you put into the rich text field",
    "label": "Display",
    "press": "{!c.getInput}"
   }
  ],
  "cmp.ui.outputrichtext": [
   {
    "aura:id": "outputRT"
   }
  ]
 },
 "cmp.auradocs.demoLabel": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.LabelTestModel",
    "access": "global"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.iterationItems}",
    "var": "item"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "label": "{!item.label}",
    "value": "{!item.value}",
    "aura:id": "iterate"
   }
  ]
 },
 "cmp.auradocs.demoLabelDyn": {
  "cmp.aura.component": [
   {
    "render": "client",
    "access": "global"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "simplevalue1",
    "type": "Object"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.getLabel}",
    "label": "Get Label"
   }
  ]
 },
 "cmp.auradocs.demoLangLocale": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.outputdatetime": [
   {
    "value": "2013-05-07T00:17:08.997Z",
    "timezone": "Europe/Berlin",
    "langlocale": "de"
   }
  ]
 },
 "cmp.auradocs.demoList": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.scroller": [
   {
    "aura:id": "listScroller",
    "snap": "true",
    "showscrollbars": "true",
    "onpulltorefresh": "{!c.show}"
   }
  ],
  "cmp.ui.infinitelist": [
   {
    "aura:id": "listData",
    "itemvar": "item"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "footer"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.auradocs.demodataprovider": [
   {}
  ],
  "cmp.ui.button": [
   {
    "label": "Show More",
    "press": "{!c.show}"
   }
  ],
  "cmp.auradocs.demolisttemplate": [
   {
    "label": "{!item.label}"
   }
  ]
 },
 "cmp.auradocs.demoListTemplate": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String"
   }
  ]
 },
 "cmp.auradocs.demoLocale": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ]
 },
 "cmp.auradocs.demoMenu": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "status",
    "type": "String[]",
    "default": "Open, Closed, Closed Won, Any"
   }
  ],
  "cmp.ui.menu": [
   {},
   {},
   {},
   {}
  ],
  "cmp.ui.menutriggerlink": [
   {
    "aura:id": "trigger",
    "label": "Single selection with actionable menu item"
   },
   {
    "class": "checkboxMenuLabel",
    "aura:id": "checkboxMenuLabel",
    "label": "Multiple selection"
   },
   {
    "class": "radioMenuLabel",
    "aura:id": "radioMenuLabel",
    "label": "Select a status"
   },
   {
    "aura:id": "mytrigger",
    "label": "Select Menu Items"
   }
  ],
  "cmp.ui.menulist": [
   {
    "class": "actionMenu",
    "aura:id": "actionMenu"
   },
   {
    "aura:id": "checkboxMenu",
    "class": "checkboxMenu"
   },
   {
    "class": "radioMenu",
    "aura:id": "radioMenu"
   },
   {}
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.status}",
    "var": "s"
   },
   {
    "items": "{!v.status}",
    "var": "s"
   },
   {
    "items": "{!v.status}",
    "var": "s"
   }
  ],
  "cmp.ui.actionmenuitem": [
   {
    "value": "{!s}",
    "label": "{!s}",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "label": "Red",
    "click": "{!c.updateLabel}",
    "disabled": "true"
   },
   {
    "label": "Green",
    "click": "{!c.updateLabel}"
   },
   {
    "label": "Blue",
    "click": "{!c.updateLabel}"
   },
   {
    "label": "Yellow United",
    "click": "{!c.updateLabel}"
   }
  ],
  "cmp.ui.checkboxmenuitem": [
   {
    "value": "{!s}",
    "label": "{!s}"
   },
   {
    "label": "A"
   },
   {
    "label": "B"
   },
   {
    "label": "C"
   },
   {
    "label": "All"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "checkboxButton",
    "aura:id": "checkboxButton",
    "press": "{!c.getMenuSelected}",
    "label": "Check the selected menu items"
   },
   {
    "class": "radioButton",
    "aura:id": "radioButton",
    "press": "{!c.getRadioMenuSelected}",
    "label": "Check the selected menu items"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "class": "result",
    "aura:id": "result",
    "value": "Which items get selected"
   },
   {
    "class": "radioResult",
    "aura:id": "radioResult",
    "value": "Which items get selected"
   }
  ],
  "cmp.ui.radiomenuitem": [
   {
    "label": "{!s}",
    "value": "{!s}"
   },
   {
    "label": "A only"
   },
   {
    "label": "B only"
   },
   {
    "label": "C only"
   },
   {
    "label": "None"
   }
  ],
  "cmp.ui.menuitemseparator": [
   {},
   {}
  ]
 },
 "cmp.auradocs.demoMenuMeta": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.MenuTestModel",
    "access": "global"
   }
  ],
  "cmp.ui.menu": [
   {},
   {},
   {},
   {}
  ],
  "cmp.ui.menutriggerlink": [
   {
    "aura:id": "metadatatrigger",
    "label": "Snow Resorts"
   },
   {
    "class": "trigger",
    "aura:id": "trigger",
    "label": "Please pick your favorite soccer club"
   },
   {
    "class": "checkboxMenuLabel",
    "aura:id": "checkboxMenuLabel",
    "label": "NFC West Teams"
   },
   {
    "aura:id": "imageTrigger",
    "class": "imageLink",
    "label": "Tiger"
   }
  ],
  "cmp.ui.menulist": [
   {
    "menuitems": "{!m.resorts}"
   },
   {
    "class": "actionMenu",
    "menuitems": "{!m.places}",
    "menuselect": "{!c.pickPlace}"
   },
   {
    "class": "checkboxMenu",
    "aura:id": "checkboxMenu",
    "menuitems": "{!m.data}"
   },
   {
    "aura:id": "tigerMenu",
    "class": "inline",
    "menuitems": "{!m.images}",
    "menuselect": "{!c.pickTiger}"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "checkboxButton",
    "aura:id": "checkboxButton",
    "press": "{!c.getMenuSelected}",
    "label": "Check the selected menu items"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "class": "result",
    "aura:id": "result",
    "value": "Which items get selected"
   }
  ]
 },
 "cmp.auradocs.demoMessage": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.message": [
   {
    "title": "Confirmation",
    "severity": "confirm",
    "closable": "true"
   },
   {
    "title": "Information",
    "severity": "info",
    "closable": "true"
   },
   {
    "title": "Warning",
    "severity": "warning",
    "closable": "true"
   },
   {
    "title": "Error",
    "severity": "error",
    "closable": "true"
   }
  ]
 },
 "cmp.auradocs.demoModal": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.dialogmanager": [
   {}
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.showDialog}",
    "label": "Open Dialog"
   }
  ],
  "cmp.ui.dialog": [
   {
    "aura:id": "modal",
    "ismodal": "true",
    "width": "small",
    "title": "Modal Demo",
    "description": "This is a demo of the ui:dialog modal component."
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "buttons"
   }
  ],
  "cmp.ui.dialogbuttons": [
   {
    "aura:id": "buttonsModal",
    "defaultbuttons": "both"
   }
  ]
 },
 "cmp.auradocs.demoPanel": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extends": "auradocs:defLayout",
    "provider": "java://org.auraframework.docs.DemoPanelProvider, js://auradocs.demoPanel",
    "access": "global"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "demo",
    "type": "String"
   },
   {
    "name": "example",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "description"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.example.length > 0}"
   }
  ]
 },
 "cmp.auradocs.demoScroller": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.block": [
   {}
  ],
  "cmp.aura.set": [
   {
    "attribute": "left"
   },
   {
    "attribute": "right"
   }
  ],
  "cmp.ui.scroller": [
   {
    "aura:id": "pullToRefresh",
    "onpulltorefresh": "{!c.replaceBodyContent}"
   },
   {
    "showscrollbars": "true"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "content",
    "value": "This is pull-to-refresh enabled."
   }
  ]
 },
 "cmp.auradocs.demoSelect": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "class": "single",
    "aura:id": "InputSelectSingle",
    "change": "{!c.onSingleSelectChange}"
   },
   {
    "multiple": "true",
    "class": "multiple",
    "aura:id": "InputSelectMultiple",
    "change": "{!c.onMultiSelectChange}"
   },
   {
    "label": "Select me: ",
    "class": "dynamic",
    "aura:id": "InputSelectDynamic",
    "change": "{!c.onChange}"
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "text": "Any"
   },
   {
    "text": "Open",
    "value": "true"
   },
   {
    "text": "Closed"
   },
   {
    "text": "Closed Won"
   },
   {
    "text": "Prospecting"
   },
   {
    "text": "Qualification"
   },
   {
    "text": "Needs Analysis"
   },
   {
    "text": "Closed Lost"
   },
   {
    "text": "Any"
   },
   {
    "text": "Open"
   },
   {
    "text": "Closed"
   },
   {
    "text": "Closed Won"
   },
   {
    "text": "Prospecting"
   },
   {
    "text": "Qualification"
   },
   {
    "text": "Needs Analysis"
   },
   {
    "text": "Closed Lost"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "class": "result",
    "aura:id": "singleResult",
    "value": ""
   },
   {
    "class": "result",
    "aura:id": "multiResult",
    "value": ""
   },
   {
    "class": "result",
    "aura:id": "dynamicResult",
    "value": ""
   }
  ]
 },
 "cmp.auradocs.demoSpinner": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.spinner": [
   {
    "aura:id": "spinner"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.toggleSpinner}",
    "label": "Toggle Spinner"
   }
  ]
 },
 "cmp.auradocs.demoStamp": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.stamp": [
   {},
   {
    "severity": "success"
   },
   {
    "severity": "warning"
   },
   {
    "severity": "important"
   },
   {
    "severity": "info"
   },
   {
    "severity": "inverse"
   }
  ]
 },
 "cmp.auradocs.demoSubmitForm": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.SizeModel",
    "access": "global"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "myDate",
    "type": "Date",
    "default": ""
   },
   {
    "name": "sizes",
    "type": "List",
    "description": "A list of aura.components.ui.InputOption."
   },
   {
    "name": "invalidEmail",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "invalidPW",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "invalidURL",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "filled",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "label": "First Name",
    "class": "formInput",
    "aura:id": "inFName",
    "placeholder": "Jane"
   },
   {
    "label": "Last Name",
    "class": "formInput",
    "aura:id": "inLName",
    "placeholder": "Doe"
   }
  ],
  "cmp.ui.inputemail": [
   {
    "label": "E-mail",
    "class": "formInput",
    "aura:id": "inEmail",
    "placeholder": "example@example.com"
   }
  ],
  "cmp.ui.inputsecret": [
   {
    "label": "Password",
    "class": "formInput",
    "aura:id": "inPW",
    "placeholder": "at least 6 chars"
   }
  ],
  "cmp.ui.inputurl": [
   {
    "label": "Website",
    "class": "formInput",
    "aura:id": "inURL",
    "placeholder": "http://www.salesforce.com"
   }
  ],
  "cmp.ui.label": [
   {
    "class": "formLabel",
    "label": "D.O.B.",
    "for": "inDOB"
   },
   {
    "class": "formLabel",
    "label": "Appointment Time",
    "for": "inAppt"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "class": "formInput",
    "aura:id": "inDOB",
    "value": "1990-01-01",
    "displaydatepicker": "true"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "label": "Size",
    "aura:id": "inSize",
    "options": "{!m.sizes}"
   }
  ],
  "cmp.ui.inputdatetime": [
   {
    "class": "formInput",
    "aura:id": "inAppt",
    "value": "{!v.myDate}",
    "displaydatepicker": "true"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "outputButton",
    "buttontitle": "Click to see what you put into the fields",
    "class": "inBut",
    "label": "Confirm",
    "press": "{!c.getInput}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.invalidEmail}"
   },
   {
    "istrue": "{!v.invalidURL}"
   },
   {
    "istrue": "{!v.invalidPW}"
   },
   {
    "istrue": "{!!v.filled}"
   },
   {
    "istrue": "{!!v.invalidEmail && !v.invalidURL && !v.invalidPW && v.filled}"
   }
  ],
  "cmp.ui.message": [
   {
    "title": "Invalid E-mail",
    "severity": "error",
    "closable": "false",
    "visible": "true"
   },
   {
    "title": "Invalid URL",
    "severity": "error",
    "closable": "false",
    "visible": "true"
   },
   {
    "title": "Invalid password",
    "severity": "error",
    "closable": "false",
    "visible": "true"
   },
   {
    "title": "Empty fields",
    "severity": "warning",
    "closable": "false",
    "visible": "true"
   },
   {
    "title": "Success",
    "severity": "confirm",
    "closable": "true"
   }
  ],
  "cmp.ui.block": [
   {
    "class": "output"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outName",
    "value": "",
    "class": "outText"
   },
   {
    "aura:id": "outPW",
    "value": "",
    "class": "outText"
   },
   {
    "aura:id": "outSize",
    "value": "",
    "class": "outText"
   }
  ],
  "cmp.ui.outputemail": [
   {
    "label": "",
    "aura:id": "outEmail",
    "value": "Email",
    "class": "outText"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "label": "Invalid URL",
    "aura:id": "outURL",
    "value": "",
    "class": "outText"
   }
  ],
  "cmp.ui.outputdate": [
   {
    "aura:id": "outDOB",
    "value": "",
    "class": "outText"
   }
  ],
  "cmp.ui.outputdatetime": [
   {
    "aura:id": "outAppt",
    "value": "",
    "class": "outText"
   }
  ]
 },
 "cmp.auradocs.demoTab": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.tabset": [
   {
    "class": "subtabs"
   }
  ],
  "cmp.ui.tab": [
   {
    "title": "Tab 1"
   },
   {
    "title": "Tab 2",
    "active": "true"
   },
   {
    "title": "Tab 3"
   }
  ]
 },
 "cmp.auradocs.demoTable": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.TableModel",
    "access": "global"
   }
  ],
  "cmp.ui.datatable": [
   {
    "items": "{!m.data}"
   }
  ]
 },
 "cmp.auradocs.demoTodo": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.TodoModel",
    "access": "global"
   }
  ],
  "cmp.ui.block": [
   {
    "aura:id": "todosBlock",
    "class": "todosBlock"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "newTodo",
    "class": "newTodo",
    "updateon": "keyup",
    "value": "",
    "placeholder": "new to-do",
    "keypress": "{!c.createNewTodo}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "clearDone",
    "buttontitle": "Clear done",
    "class": "clearDone",
    "label": "Clear done",
    "press": "{!c.clearDone}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.items}",
    "var": "todo",
    "indexvar": "index"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "label": "{!todo.label}",
    "value": "{!todo.selected}",
    "click": "{!c.crossout}",
    "class": "line",
    "labelposition": "right"
   }
  ]
 },
 "cmp.auradocs.demoToolbar": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.toolbar": [
   {}
  ],
  "cmp.ui.button": [
   {},
   {},
   {}
  ],
  "cmp.aura.set": [
   {
    "attribute": "label",
    "value": "Button 1"
   },
   {
    "attribute": "buttonTitle",
    "value": "click me"
   },
   {
    "attribute": "label",
    "value": "Button 2"
   },
   {
    "attribute": "buttonTitle",
    "value": "click me"
   },
   {
    "attribute": "label",
    "value": "Button 3"
   },
   {
    "attribute": "buttonTitle",
    "value": "click me"
   }
  ]
 },
 "cmp.auradocs.demoTooltip": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.tooltip": [
   {
    "delay": "500",
    "fadein": "true",
    "fadeout": "true",
    "tooltipbody": "Your password should contain at least 12 characters."
   }
  ],
  "cmp.ui.label": [
   {
    "for": "input",
    "label": "Input Label"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "input"
   }
  ]
 },
 "cmp.auradocs.demoVbox": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.vbox": [
   {}
  ],
  "cmp.aura.set": [
   {
    "attribute": "north"
   },
   {
    "attribute": "south"
   }
  ]
 },
 "cmp.auradocs.demoVdatagrid": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Add row",
    "press": "{!c.addRow}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "data",
    "type": "List"
   }
  ],
  "cmp.ui.virtualdatagrid": [
   {
    "aura:id": "myData",
    "items": "{!v.data}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "headerColumns"
   },
   {
    "attribute": "columns"
   }
  ],
  "cmp.ui.datagridcolumn": [
   {
    "label": "Id",
    "name": "id"
   },
   {
    "label": "Name",
    "name": "name"
   }
  ]
 },
 "cmp.auradocs.demos": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:demoPanel"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "title",
    "value": "Aura Demos"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "value": "/auradocs#reference",
    "label": "component reference"
   },
   {
    "value": "https://github.com/forcedotcom/aura-todomvc",
    "label": "Aura TodoMVC app"
   },
   {
    "value": "https://github.com/forcedotcom/aura-note",
    "label": "Aura Note"
   }
  ]
 },
 "cmp.auradocs.demosNode": {
  "cmp.aura.component": [
   {
    "extends": "ui:treeNode"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "text",
    "type": "String"
   },
   {
    "name": "id",
    "type": "String"
   },
   {
    "name": "class",
    "type": "String"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "href",
    "value": "{!v.id !=null ? ('#demos?demo=' + v.id) : null}"
   },
   {
    "attribute": "title",
    "value": "{!v.text}"
   }
  ]
 },
 "cmp.auradocs.descriptorLink": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "defModel",
    "type": "java://org.auraframework.docs.DefModel",
    "required": "true"
   }
  ]
 },
 "cmp.auradocs.docTestRef": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.button": [
   {
    "label": "Externally Referenced!"
   }
  ]
 },
 "cmp.auradocs.doctabs": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.tabset": [
   {}
  ],
  "cmp.ui.tab": [
   {
    "title": "Docs"
   },
   {
    "title": "Components"
   }
  ],
  "cmp.auradocs.referencetree": [
   {}
  ]
 },
 "cmp.auradocs.download": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auradocs.editorPanel": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "model": "java://org.auraframework.docs.EditorPanelModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String",
    "required": "true"
   },
   {
    "name": "descriptor",
    "type": "String",
    "required": "true"
   },
   {
    "name": "defType",
    "type": "String",
    "default": "Component"
   },
   {
    "name": "includeDefName",
    "type": "String",
    "required": "false"
   },
   {
    "name": "region",
    "type": "String",
    "default": "center"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "open",
    "type": "auradocs:openDef"
   }
  ],
  "cmp.ui.tab": [
   {
    "title": "{!v.title}",
    "aura:id": "panel",
    "scroll": "true"
   }
  ]
 },
 "cmp.auradocs.empty": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auradocs.error": {
  "cmp.aura.component": [
   {
    "extends": "ui:message"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "severity",
    "value": "error"
   }
  ]
 },
 "cmp.auradocs.example": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String",
    "required": "true",
    "access": "global"
   },
   {
    "name": "description",
    "type": "String",
    "required": "true",
    "access": "global"
   },
   {
    "name": "descriptor",
    "type": "String",
    "required": "true",
    "access": "global"
   }
  ],
  "cmp.aura.unescapedhtml": [
   {
    "value": "{!v.description}"
   }
  ],
  "cmp.auradocs.viewer": [
   {
    "descriptor": "{!v.descriptor}"
   }
  ]
 },
 "cmp.auradocs.examplesTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extends": "auradocs:template",
    "style": "templateCss://auradocs.template"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "title",
    "value": "Aura Examples"
   }
  ]
 },
 "cmp.auradocs.examplesc": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.ExamplesModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String"
   }
  ],
  "cmp.aura.iteration": [
   {
    "var": "example",
    "items": "{!m.examples}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!example.label != null}"
   },
   {
    "istrue": "{!example.error != null}"
   }
  ],
  "cmp.auradocs.example": [
   {
    "label": "{!example.label}",
    "description": "{!example.description}",
    "descriptor": "{!example.ref}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ],
  "cmp.ui.message": [
   {
    "title": "{!'Error loading example for ' + example.descriptor}",
    "severity": "error"
   }
  ]
 },
 "cmp.auradocs.helloAttributes": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "whom",
    "type": "String",
    "default": "world"
   }
  ]
 },
 "cmp.auradocs.helpPanel": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "auradocs:locationChange",
    "action": "{!c.handleLocationChange}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "topic",
    "type": "String",
    "default": "welcome"
   },
   {
    "name": "topicPanel",
    "type": "Aura.Component[]"
   }
  ]
 },
 "cmp.auradocs.home": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:topicPanel"
   }
  ]
 },
 "cmp.auradocs.htmlTags": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.HtmlTagsModel"
   }
  ],
  "cmp.auradocs.topiclink": [
   {
    "topic": "access"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "value": "http://www.w3.org/TR/xhtml1/",
    "label": "XHTML"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.allowedTags}",
    "var": "tag"
   },
   {
    "items": "{!m.disallowedTags}",
    "var": "tag"
   }
  ]
 },
 "cmp.auradocs.htmlTagsTopic": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:topicPanel"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "title",
    "value": "Supported HTML Tags"
   }
  ],
  "cmp.auradocs.htmltags": [
   {}
  ]
 },
 "cmp.auradocs.info": {
  "cmp.aura.component": [
   {
    "extends": "ui:message"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "severity",
    "value": "info"
   }
  ]
 },
 "cmp.auradocs.nav": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "referenceOnly",
    "type": "boolean",
    "default": "false"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "auradocs:locationChange",
    "action": "{!c.handleLocationChange}"
   }
  ],
  "cmp.ui.image": [
   {
    "src": "/auraFW/resources/aura/images/logo.png",
    "imagetype": "informational",
    "alt": "Aura"
   },
   {
    "class": "spinner",
    "imagetype": "decorative"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.referenceOnly != true}"
   }
  ],
  "cmp.auradocs.navlink": [
   {
    "location": "help"
   },
   {
    "location": "reference"
   }
  ],
  "cmp.aurastorage.fuelgauge": [
   {
    "storagename": "actions"
   }
  ]
 },
 "cmp.auradocs.navLink": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "location",
    "type": "String",
    "required": "true"
   }
  ]
 },
 "cmp.auradocs.openTopicTree": {
  "cmp.aura.component": [
   {
    "description": "A decorator for a ui:tree that adds the attribute 'active=true' to the currently selected topic based on a mapping from the current URL location to the node with a matching href."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "layoutToken",
    "type": "String",
    "description": "The layout token that causes this topic tree to layout."
   },
   {
    "name": "catchAllHref",
    "type": "String",
    "description": "The href key to use when there is no match against the current layout"
   },
   {
    "name": "tree",
    "type": "Aura.Component",
    "description": "The ui:tree to decorate"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.tree}",
    "action": "{!c.treeChange}"
   },
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   },
   {
    "event": "auradocs:locationChange",
    "action": "{!c.handleLocationChange}"
   }
  ]
 },
 "cmp.auradocs.outputViewerc": {
  "cmp.aura.component": [
   {
    "provider": "java://org.auraframework.docs.ExampleComponentProvider",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "def",
    "type": "String"
   }
  ]
 },
 "cmp.auradocs.prefixerTopic": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:topicPanel"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "title",
    "value": "Vendor Prefixes"
   }
  ],
  "cmp.auradocs.codeblock": [
   {},
   {},
   {}
  ]
 },
 "cmp.auradocs.referenceTabTopic": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:topicPanel"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "title",
    "value": "Reference Overview"
   }
  ],
  "cmp.ui.stamp": [
   {
    "severity": "important"
   },
   {
    "severity": "inverse"
   },
   {
    "severity": "warning"
   },
   {
    "severity": "success"
   }
  ]
 },
 "cmp.auradocs.referenceTopicLink": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "topic",
    "type": "String",
    "required": "true"
   }
  ]
 },
 "cmp.auradocs.referenceTree": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.ReferenceTreeModel",
    "extends": "auradocs:sidebar"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "toolbar"
   }
  ],
  "cmp.ui.tabset": [
   {}
  ],
  "cmp.ui.tab": [
   {
    "title": "Namespace"
   },
   {
    "title": "Category"
   }
  ],
  "cmp.auradocs.opentopictree": [
   {
    "aura:id": "topicTree",
    "layouttoken": "reference",
    "catchallhref": "#reference"
   }
  ],
  "cmp.auradocs.searchfiltertree": [
   {
    "aura:id": "searchTree"
   }
  ],
  "cmp.ui.tree": [
   {
    "nodes": "{!m.tree}",
    "aura:id": "tree"
   }
  ]
 },
 "cmp.auradocs.referenceTreeSection": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String",
    "required": "true"
   },
   {
    "name": "namespaces",
    "type": "List",
    "required": "true"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.namespaces}",
    "var": "namespace"
   },
   {
    "items": "{!namespace.children}",
    "var": "def"
   }
  ]
 },
 "cmp.auradocs.sampleUnescape": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.unescapedhtml": [
   {
    "value": "<ul><li>Item 1</li><li>Item 2</li></ul>"
   }
  ]
 },
 "cmp.auradocs.searchFilterTree": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.registerevent": [
   {
    "name": "search",
    "type": "ui:searchEvent"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "search",
    "action": "{!c.handleSearch}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "tree",
    "type": "Aura.Component"
   }
  ],
  "cmp.ui.inputsearch": [
   {
    "search": "{!c.handleSearch}",
    "aura:id": "searchBox",
    "class": "searchBox",
    "placeholder": "Search"
   }
  ]
 },
 "cmp.auradocs.sidebar": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "toolbar",
    "type": "Aura.Component[]"
   }
  ]
 },
 "cmp.auradocs.simpledragdrop": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "_dropzoneContext1",
    "type": "Object"
   },
   {
    "name": "_dropzoneContext2",
    "type": "Object"
   },
   {
    "name": "_draggableContext1",
    "type": "Object"
   },
   {
    "name": "_draggableContext2",
    "type": "Object"
   },
   {
    "name": "list1",
    "type": "String[]",
    "default": "1,2,3,4,5"
   },
   {
    "name": "list2",
    "type": "String[]",
    "default": "A,B,C,D,E"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.dropzone": [
   {
    "incontextof": "{!v._dropzoneContext1}",
    "class": "sampleList",
    "drop": "{!c.handleDrop}"
   },
   {
    "incontextof": "{!v._dropzoneContext2}",
    "class": "sampleList",
    "drop": "{!c.handleDrop}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "list",
    "items": "{!v.list1}",
    "var": "item"
   },
   {
    "aura:id": "list",
    "items": "{!v.list2}",
    "var": "item"
   }
  ],
  "cmp.ui.draggable": [
   {
    "incontextof": "{!v._draggableContext1}",
    "dragend": "{!c.handleDragEnd}",
    "datatransfer": "{!item}",
    "class": "sampleCard",
    "dragclass": "dragging"
   },
   {
    "incontextof": "{!v._draggableContext2}",
    "datatransfer": "{!item}",
    "dragend": "{!c.handleDragEnd}",
    "class": "sampleCard",
    "dragclass": "dragging"
   }
  ]
 },
 "cmp.auradocs.spinnerTopic": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:topicPanel"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "title",
    "value": "Spinner"
   }
  ],
  "cmp.auradocs.viewer": [
   {
    "descriptor": "auradocs:demoSpinner"
   }
  ],
  "cmp.auradocs.info": [
   {}
  ],
  "cmp.auradocs.deflink": [
   {
    "descriptor": "ui:spinner"
   }
  ]
 },
 "cmp.auradocs.stretchEditorPanel": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:editorPanel"
   }
  ],
  "cmp.auradocs.stretchtab": [
   {
    "title": "{!v.title}",
    "aura:id": "panel",
    "scroll": "true"
   }
  ]
 },
 "cmp.auradocs.stretchTab": {
  "cmp.aura.component": [
   {
    "extends": "ui:tab"
   }
  ]
 },
 "cmp.auradocs.tableDemo": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:demoPanel"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "title",
    "value": "Dynamic Table"
   }
  ],
  "cmp.auradocs.demotable": [
   {}
  ]
 },
 "cmp.auradocs.template": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extensible": "true",
    "extends": "aura:template",
    "style": "templateCss://auradocs.template"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "extraScriptTags"
   },
   {
    "attribute": "title",
    "value": "Aura Documentation"
   },
   {
    "attribute": "extraMetaTags"
   },
   {
    "attribute": "auraPreInitBlock"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "name": "actions",
    "maxsize": "4096",
    "defaultexpiration": "3600",
    "secure": "true",
    "persistent": "false",
    "defaultautorefreshinterval": "3600",
    "debugloggingenabled": "true",
    "clearstorageoninit": "false"
   }
  ]
 },
 "cmp.auradocs.topic": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auradocs.topicExample": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.TopicExampleModel",
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "descriptor",
    "type": "String",
    "required": "true"
   },
   {
    "name": "defType",
    "type": "String",
    "default": "Component"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.defs}",
    "var": "def"
   },
   {
    "items": "{!m.includeDefs}",
    "var": "def"
   }
  ],
  "cmp.auradocs.editorpanel": [
   {
    "title": "{!def.name+' source'}",
    "descriptor": "{!def.descriptor}",
    "deftype": "{!def.defType}"
   }
  ],
  "cmp.auradocs.stretcheditorpanel": [
   {
    "title": "{!def.includeDefName + '.js'}",
    "descriptor": "{!def.descriptor}",
    "deftype": "{!def.defType}",
    "includedefname": "{! def.includeDefName}"
   }
  ]
 },
 "cmp.auradocs.topicLink": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "topic",
    "type": "String",
    "required": "true"
   }
  ]
 },
 "cmp.auradocs.topicList": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auradocs.topicPanel": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extends": "auradocs:defLayout",
    "provider": "java://org.auraframework.docs.TopicPanelProvider, js://auradocs.topicPanel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "topic",
    "type": "String"
   },
   {
    "name": "example",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "description"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.example.length > 0}"
   }
  ]
 },
 "cmp.auradocs.topics": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.docs.TopicsModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.components}",
    "var": "namespace"
   },
   {
    "items": "{!namespace.children}",
    "var": "component"
   }
  ]
 },
 "cmp.auradocs.viewer": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "access": "global"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "descriptor",
    "type": "String",
    "required": "true",
    "access": "global"
   }
  ],
  "cmp.ui.tabset": [
   {
    "class": "displayTab"
   }
  ],
  "cmp.ui.tab": [
   {
    "title": "Output"
   }
  ],
  "cmp.auradocs.topicexample": [
   {
    "descriptor": "{!v.descriptor}",
    "deftype": "component"
   }
  ]
 },
 "cmp.auradocs.warning": {
  "cmp.aura.component": [
   {
    "extends": "ui:message"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "severity",
    "value": "warning"
   }
  ]
 },
 "cmp.auradocs.welcomeTopic": {
  "cmp.aura.component": [
   {
    "extends": "auradocs:topicPanel"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "title",
    "value": "A Guide to Aura Development"
   },
   {
    "attribute": "left"
   }
  ],
  "cmp.ui.block": [
   {}
  ],
  "cmp.ui.outputurl": [
   {
    "value": "https://github.com/forcedotcom/aura/blob/master/aura_oss.pdf",
    "label": "Help",
    "target": "_blank"
   },
   {
    "value": "https://github.com/forcedotcom/aura",
    "label": "Quick Start",
    "target": "_blank"
   },
   {
    "value": "#reference",
    "label": "Reference"
   }
  ]
 },
 "cmp.aurajstest.emptyTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "description": "Used by aurajstest:inject so that TestInjectionRenderer is entirely responsible for output"
   }
  ]
 },
 "cmp.aurajstest.jstestCase": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.aurajstest.JSTestCaseModel",
    "extends": "ui:tab"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "case",
    "type": "java://org.auraframework.def.TestCaseDef"
   },
   {
    "name": "suite",
    "type": "java://org.auraframework.def.TestSuiteDef"
   },
   {
    "name": "url",
    "type": "String"
   },
   {
    "name": "status",
    "type": "String",
    "default": "spin"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "scroll",
    "value": "false"
   },
   {
    "attribute": "title",
    "value": "{!v.case.name}"
   },
   {
    "attribute": "icon"
   },
   {
    "attribute": "body"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "done",
    "type": "aurajstest:testStatus"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "onActivated",
    "action": "{!c.onActivate}"
   }
  ]
 },
 "cmp.ui.abstractDataGrid": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true",
    "implements": "ui:visible",
    "support": "PROTO",
    "description": "An abstract component that provides a basic layout for the ui:dataGrid component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "items",
    "type": "List",
    "description": "Arbitrary list of objects to iterate over. Object type to avoid expensive wrapping."
   },
   {
    "name": "itemShape",
    "type": "Object",
    "description": "Template object with null fields to describe item shape. If not set, then concrete should derive shape from columns facet."
   },
   {
    "name": "mode",
    "type": "String",
    "default": "VIEW",
    "description": "{ VIEW, VIEW_ONLY, EDIT, EDIT_ONLY }"
   },
   {
    "name": "state",
    "type": "String",
    "default": "idle",
    "description": "{ idle, loading, error }"
   },
   {
    "name": "sortable",
    "type": "Boolean",
    "default": "true",
    "description": "Toggle sorting by columns (via column header)."
   },
   {
    "name": "createable",
    "type": "Boolean",
    "default": "false",
    "description": "Describes whether the implementation should enable a creation pattern."
   },
   {
    "name": "selectAll",
    "type": "Boolean",
    "default": "false",
    "description": "All selected."
   },
   {
    "name": "selectedItems",
    "type": "List",
    "description": "A list of selected items."
   },
   {
    "name": "sortBy",
    "type": "String",
    "description": "Comma-separated list of columns predicated by a '-' for descending."
   },
   {
    "name": "dataProvider",
    "type": "Aura.Component[]",
    "description": "Facet for ui:dataProvider - responsible for fetching data."
   },
   {
    "name": "dataWriter",
    "type": "Aura.Component[]",
    "description": "Facet for ui:dataWriter - responsible for writing data. Implementation TBD."
   },
   {
    "name": "columns",
    "type": "Aura.Component[]",
    "description": "Configuration for columns."
   },
   {
    "name": "summaryRow",
    "type": "Aura.ComponentDefRef[]",
    "description": "Configuration for summary rows."
   },
   {
    "name": "actionDelegate",
    "type": "Aura.Component[]",
    "description": "Row action delegate."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "refresh",
    "type": "ui:refresh",
    "description": "Provides fresh data from the dataProvider."
   },
   {
    "name": "addRemove",
    "type": "ui:addRemove",
    "description": "Command event for grid to insert or delete items as rows."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.mode}",
    "action": "{!c.handleModeChange}"
   },
   {
    "name": "change",
    "value": "{!v.sortBy}",
    "action": "{!c.handleSortByChange}"
   },
   {
    "name": "refresh",
    "action": "{!c.handleRefresh}"
   },
   {
    "name": "addRemove",
    "action": "{!c.handleAddRemove}"
   }
  ]
 },
 "cmp.ui.abstractList": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "abstract": "true",
    "implements": "ui:visible, ui:pagingInterface",
    "support": "GA",
    "description": "An abstract component that provides a basic layout for the ui:list component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "itemTemplate",
    "type": "Aura.ComponentDefRef[]",
    "required": "true",
    "description": "A ComponentDefRef to use as the template for each generated row in the list."
   },
   {
    "name": "items",
    "type": "Object[]",
    "description": "An array of arbitrary map objects representing the rows of data in the list."
   },
   {
    "name": "itemVar",
    "type": "String",
    "required": "true",
    "description": "The name by which to refer to the current data object inside of the template for each row."
   },
   {
    "name": "dataProvider",
    "type": "Aura.Component[]",
    "required": "true",
    "description": "A list of data provider components. Use a ui:dataProvider component to provide list data."
   },
   {
    "name": "emptyListContent",
    "type": "Aura.Component[]",
    "description": "Content to be shown if the list is empty"
   },
   {
    "name": "loadingIndicator",
    "type": "Aura.Component[]",
    "description": "Content to be shown while the list is loading"
   },
   {
    "name": "header",
    "type": "Aura.Component[]",
    "description": "A facet above the rendered list, for use as a list header"
   },
   {
    "name": "footer",
    "type": "Aura.Component[]",
    "description": "A facet below the rendered list, for use as a list footer"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "triggerDataProvider",
    "type": "ui:dataProvide",
    "description": "The event fired when the data provider is triggered."
   },
   {
    "name": "listComplete",
    "type": "aura:operationComplete",
    "description": "The event fired when concrete implementations have finished their component creation."
   },
   {
    "name": "refresh",
    "type": "ui:refresh",
    "description": "The event fired when the component is refreshed."
   },
   {
    "name": "addRemove",
    "type": "ui:addRemove",
    "description": "Command event to insert or remove items"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "triggerDataProvider",
    "action": "{!c.triggerDataProvider}"
   },
   {
    "name": "refresh",
    "action": "{!c.refresh}"
   },
   {
    "name": "addRemove",
    "action": "{!c.addRemove}"
   },
   {
    "name": "init",
    "action": "{!c.init}",
    "value": "{!this}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.loadingIndicator.length == 0}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.action": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "PROTO",
    "abstract": "true",
    "description": "An abstract component that provides bubbling of events."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String",
    "description": "The name for the action-name data attribute value specified on the DOM element."
   },
   {
    "name": "label",
    "type": "String",
    "description": "The text label for the component."
   },
   {
    "name": "labelClass",
    "type": "String",
    "description": "The class for the label on the component."
   },
   {
    "name": "index",
    "type": "Integer",
    "description": "The index for the item-index data attribute value specified on the DOM element."
   },
   {
    "name": "value",
    "type": "Object",
    "description": "Use this to bind some value to the action. Must be serializable {String, Number, Boolean}."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.value}",
    "action": "{!c.handleValueChange}"
   }
  ]
 },
 "cmp.ui.actionButton": {
  "cmp.aura.component": [
   {
    "extends": "ui:action",
    "support": "PROTO",
    "description": "A button used in ui:dataGrid that enables row-level click events to bubble up to the grid."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "disabled",
    "type": "Boolean"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "{!v.label}",
    "press": "{!c.handleClick}",
    "disabled": "{!v.disabled}"
   }
  ]
 },
 "cmp.ui.actionCheckbox": {
  "cmp.aura.component": [
   {
    "extends": "ui:action",
    "description": "A checkbox used in ui:dataGrid that enables row-level click events to bubble up to the grid."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "disabled",
    "type": "Boolean"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "aura:id": "cb",
    "value": "{!v.value}",
    "click": "{!c.handleClick}",
    "label": "{!v.label}",
    "labelclass": "{!v.labelClass}",
    "disabled": "{!v.disabled}"
   }
  ]
 },
 "cmp.ui.actionDelegate": {
  "cmp.aura.component": [
   {
    "description": "Fires and handles the onaction event for the ui:dataGrid component."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "onaction",
    "type": "ui:actionEvent"
   }
  ]
 },
 "cmp.ui.actionMenuItem": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:menuItem",
    "extensible": "true",
    "description": "​A menu item that triggers an action. This component is nested in a ui:menu component."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "click",
    "action": "{!c.handleClick}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "id",
    "type": "String",
    "description": "id of the menu item"
   },
   {
    "access": "GLOBAL",
    "name": "hideMenuAfterSelected",
    "type": "Boolean",
    "default": "true",
    "description": "Set to true to hide menu after the menu item is selected."
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.body.length == 0}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.asyncComponentManager": {
  "cmp.aura.component": [
   {
    "support": "BETA",
    "description": "Manages the asynchronous initialization of components."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "maxConcurrency",
    "default": "1",
    "required": "true",
    "type": "Integer",
    "description": "Max number of components that can be loaded concurrently"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "ui:asyncComponentRegister",
    "action": "{!c.registerAsyncComponent}"
   },
   {
    "event": "ui:asyncComponentLoaded",
    "action": "{!c.asyncComponentLoadedCallback}"
   }
  ]
 },
 "cmp.ui.asyncImage": {
  "cmp.aura.component": [
   {
    "extends": "ui:image",
    "implements": "ui:asyncComponent",
    "description": "Encapsulates asynchronously loading of an image.",
    "support": "BETA"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "actualImageSrc",
    "type": "String",
    "description": "Actual image src attribute of the image"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "load",
    "type": "ui:load"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "load",
    "action": "{!c.load}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:asyncComponentLoaded",
    "type": "EVENT"
   },
   {
    "resource": "markup://ui:asyncComponentRegister",
    "type": "EVENT"
   }
  ]
 },
 "cmp.ui.autocomplete": {
  "cmp.aura.component": [
   {
    "extends": "ui:input",
    "support": "proto",
    "extensible": "true",
    "description": "Represents an input field that suggests a list of values from the data provider as you type."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "dataProvider",
    "type": "Aura.Component[]",
    "required": "true",
    "description": "A list of data provider components"
   },
   {
    "name": "emptyListContent",
    "type": "Aura.Component[]",
    "description": "Content to be shown if the list is empty"
   },
   {
    "name": "loadingIndicator",
    "type": "Aura.Component[]",
    "description": "Content to be shown while the list is loading"
   },
   {
    "name": "inputClass",
    "type": "String",
    "description": "The css class for input component."
   },
   {
    "name": "inputType",
    "type": "String",
    "default": "inputText",
    "description": "The type of input component. We support inputText and inputTextArea for now."
   },
   {
    "name": "listOption",
    "type": "Aura.ComponentDefRef[]",
    "required": "true",
    "description": "A ComponentDefRef to use as the template for each generated option in the list."
   },
   {
    "name": "optionVar",
    "type": "String",
    "required": "true",
    "description": "The name by which to refer to the current data object inside of the template for each option."
   },
   {
    "name": "placeholder",
    "type": "String",
    "default": "",
    "description": "Text that is displayed when the input field is empty, to prompt the user for a valid entry."
   },
   {
    "name": "propertyToMatch",
    "type": "String",
    "default": "label",
    "description": "The property name in the data object which is used to match typing in the input field."
   },
   {
    "name": "theme",
    "type": "String",
    "default": "default",
    "description": "Theme to apply to this component."
   },
   {
    "name": "matchFunc",
    "type": "Aura.Action",
    "description": "Overrides default list item update behavior to allow custom text matching."
   },
   {
    "name": "autocompleteButton",
    "type": "Aura.Component[]",
    "description": "Optional button to render with this component."
   },
   {
    "name": "header",
    "type": "Aura.Component[]",
    "description": "A facet above the rendered list, for use as a list header"
   },
   {
    "name": "footer",
    "type": "Aura.Component[]",
    "description": "A facet below the rendered list, for use as a list footer"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "matchDone",
    "type": "ui:matchDone",
    "description": "The event fired when the matching is done."
   },
   {
    "name": "inputChange",
    "type": "ui:inputChange",
    "description": "The event fired when the input value changes."
   },
   {
    "name": "selectListOption",
    "type": "ui:selectListOption",
    "description": "The event fired when a list option is displayed."
   },
   {
    "name": "fetchData",
    "type": "ui:fetchData",
    "description": "The event indicates we need to fetch data through a data provider."
   },
   {
    "name": "matchText",
    "type": "ui:matchText",
    "description": "The event fired when a text match occurs."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "fetchData",
    "action": "{!c.fetchData}"
   },
   {
    "name": "matchText",
    "action": "{!c.matchText}"
   },
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "labelPosition",
    "value": "hidden"
   },
   {
    "attribute": "else"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.inputType == 'inputTextArea'}"
   }
  ],
  "cmp.ui.inputtextareaforautocomplete": [
   {
    "aura:id": "input",
    "class": "{!v.inputClass+' '+v.theme}",
    "label": "{!v.label}",
    "labelclass": "{!v.labelClass}",
    "labelposition": "{!v.labelPosition}",
    "placeholder": "{!v.placeholder}",
    "updateon": "{!v.updateOn}",
    "autocompletebutton": "{!v.autocompleteButton}"
   }
  ],
  "cmp.ui.inputtextforautocomplete": [
   {
    "aura:id": "input",
    "class": "{!v.inputClass+' '+v.theme}",
    "label": "{!v.label}",
    "labelclass": "{!v.labelClass}",
    "labelposition": "{!v.labelPosition}",
    "placeholder": "{!v.placeholder}",
    "updateon": "{!v.updateOn}",
    "autocompletebutton": "{!v.autocompleteButton}"
   }
  ],
  "cmp.ui.autocompletelist": [
   {
    "aura:id": "list",
    "class": "{!v.class}",
    "dataprovider": "{!v.dataProvider}",
    "itemvar": "{!v.optionVar}",
    "itemtemplate": "{!v.listOption}",
    "emptylistcontent": "{!v.emptyListContent}",
    "loadingindicator": "{!v.loadingIndicator}",
    "header": "{!v.header}",
    "footer": "{!v.footer}",
    "theme": "{!v.theme}",
    "visible": "false",
    "role": "listbox",
    "propertytomatch": "{!v.propertyToMatch}",
    "matchdone": "{!c.handleMatchDone}",
    "selectlistoption": "{!c.handleSelectOption}",
    "updateariaattributes": "{!c.updateAriaAttributes}",
    "matchfunc": "{!v.matchFunc}"
   }
  ]
 },
 "cmp.ui.autocompleteList": {
  "cmp.aura.component": [
   {
    "extends": "ui:abstractList",
    "support": "proto",
    "description": "This component is used in ui:autocomplete to provide a list of options to the input component.To customize the list option behavior, use the selectListOption, listHighlight, and updateAriaAttributes events."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "ignoredElements",
    "type": "Object",
    "description": "The DOM elements to ignore when we handle clicking outside."
   },
   {
    "name": "keyword",
    "type": "String",
    "description": "The keyword used to match list options."
   },
   {
    "name": "propertyToMatch",
    "type": "String",
    "default": "label",
    "description": "The property name in the data object which is used to match typing in the input field."
   },
   {
    "name": "theme",
    "type": "String",
    "default": "default",
    "description": "Theme to apply to this component."
   },
   {
    "name": "matchFunc",
    "type": "Aura.Action",
    "description": "Overrides default list item update behavior to allow custom text matching."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "matchDone",
    "type": "ui:matchDone",
    "description": "The event fired when the matching is done."
   },
   {
    "name": "listHighlight",
    "type": "ui:listHighlight",
    "description": "The event fired when a list option is highlighted."
   },
   {
    "name": "matchText",
    "type": "ui:matchText",
    "description": "The event fired when a text match occurs."
   },
   {
    "name": "pressOnHighlighted",
    "type": "ui:press",
    "description": "The event fired when a highlighted option is pressed."
   },
   {
    "name": "selectListOption",
    "type": "ui:selectListOption",
    "description": "The event fired when a list option is selected."
   },
   {
    "name": "updateAriaAttributes",
    "type": "ui:updateAriaAttributes",
    "description": "The event fired when a new option is highlighted."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.visible}",
    "action": "{!c.visibleChange}"
   },
   {
    "name": "listHighlight",
    "action": "{!c.handleListHighlight}"
   },
   {
    "name": "matchText",
    "action": "{!c.matchText}"
   },
   {
    "name": "pressOnHighlighted",
    "action": "{!c.handlePressOnHighlighted}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iter",
    "items": "{!v.items}",
    "var": "{!v.itemVar}",
    "body": "{!v.itemTemplate}"
   }
  ]
 },
 "cmp.ui.autocompleteOption": {
  "cmp.aura.component": [
   {
    "extends": "ui:interactive",
    "extensible": "true",
    "support": "beta",
    "implements": "ui:autocompleteOptionTemplate",
    "description": "This component represents list options in an ui:autocomplete component. The options are displayed when an input keyword matches an item in the data provider."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "displayText",
    "type": "String",
    "description": "The displayed text string for this option."
   },
   {
    "name": "label",
    "type": "String",
    "required": "true",
    "description": "The text displayed on the component. This attribute's value is used to do matching."
   },
   {
    "name": "theme",
    "type": "String",
    "default": "default",
    "description": "Theme to apply to this component."
   },
   {
    "name": "domId",
    "type": "String",
    "default": "",
    "description": "Id of the option component's anchor"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "mouseover",
    "action": "{!c.handleMouseover}"
   },
   {
    "name": "mouseout",
    "action": "{!c.handleMouseout}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.body.length == 0}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.block": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:visible",
    "support": "GA",
    "description": "Use this component to create a two or three column layout."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "overflow",
    "type": "Boolean",
    "default": "false",
    "description": "Allows you to specify whether the <ui:block> permits overflow for its contents. Defaults to false, which means that content that overflows the boundaries of the component will be clipped."
   },
   {
    "name": "left",
    "type": "Aura.Component[]",
    "description": "The left facet of the component. Components added to left are aligned to the left side of the <ui:block>. The left facet, if set, is wrapped in a <div> tag with the CSS class \"bLeft\" for individual styling."
   },
   {
    "name": "right",
    "type": "Aura.Component[]",
    "description": "The right facet of the component. Components added to right are aligned to the right side of the <ui:block>. The right facet, if set, is wrapped in a <div> tag with the CSS class \"bRight\" for individual styling."
   },
   {
    "name": "tag",
    "type": "String",
    "default": "div",
    "description": "The HTML tag to use for this component.  Defaults to \"div\""
   }
  ],
  "cmp.aura.html": [
   {
    "tag": "{!v.tag}",
    "class": "{!v.class+(v.overflow == true||v.overflow =='true' ?' overflow':'')}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.left.length > 0}"
   },
   {
    "istrue": "{!v.right.length > 0}"
   }
  ]
 },
 "cmp.ui.button": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Represents a button element."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "buttonTitle",
    "type": "String",
    "access": "GLOBAL",
    "description": "The text displayed in a tooltip when the mouse pointer hovers over the button."
   },
   {
    "name": "buttonType",
    "type": "String",
    "default": "button",
    "access": "GLOBAL",
    "description": "Specifies the type attribute in the HTML input element. Default value is \"button\"."
   },
   {
    "name": "class",
    "type": "String",
    "default": "",
    "access": "GLOBAL",
    "description": "A CSS style to be attached to the button. This style is added in addition to base styles output by the component."
   },
   {
    "name": "label",
    "type": "String",
    "required": "true",
    "access": "GLOBAL",
    "description": "The text displayed on the button. Corresponds to the value attribute of the rendered HTML input element."
   },
   {
    "name": "labelClass",
    "type": "String",
    "default": "",
    "access": "GLOBAL",
    "description": "A CSS style to be attached to the label. This style is added in addition to base styles output by the component."
   },
   {
    "name": "labelDisplay",
    "type": "Boolean",
    "default": "true",
    "description": "Specifies whether the label is displayed. If not, we add a hidden text for accessibility purpose."
   },
   {
    "name": "iconImgSrc",
    "type": "String",
    "default": "",
    "description": "The absolute or relative URL of the icon to display on the button. The image's alt attribute is set to the value of the button’s label attribute."
   },
   {
    "name": "iconClass",
    "type": "String",
    "default": "",
    "description": "A CSS style to be attached to the button's icon. This style is added in addition to base styles output by the component."
   },
   {
    "name": "disabled",
    "type": "Boolean",
    "default": "false",
    "access": "GLOBAL",
    "description": "Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. Default value is \"false\"."
   },
   {
    "name": "accesskey",
    "type": "String",
    "default": "",
    "access": "GLOBAL",
    "description": "The keyboard access key that puts the button in focus. When the button is in focus, pressing Enter clicks the button."
   },
   {
    "name": "labelDir",
    "type": "String",
    "default": "ltr",
    "description": "The direction in which the label should be read. Possible values are \"rtl\" (right to left) and \"ltr\" (left to right). Default value is \"ltr\"."
   },
   {
    "name": "stopPropagation",
    "type": "Boolean",
    "default": "false",
    "description": "Prevents the click event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event."
   },
   {
    "name": "tabIndex",
    "type": "Integer",
    "description": "The tab index of the button element."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "keydown",
    "type": "ui:keydown",
    "description": "The controller method that runs when a key is pressed down on the button."
   },
   {
    "name": "press",
    "type": "ui:press",
    "access": "GLOBAL",
    "description": "The controller method that runs when the button is clicked. For example, press=\"{!c.showMsg}\" references the showMsg method in the controller."
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.iconImgSrc != '' || v.iconClass != ''}"
   },
   {
    "istrue": "{!v.labelDisplay}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.calendar": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "PROTO"
   }
  ]
 },
 "cmp.ui.carousel": {
  "cmp.aura.component": [
   {
    "implements": "ui:scrollerEmbeddable",
    "extensible": "true",
    "description": ""
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "height",
    "type": "Integer",
    "description": "Height of the carousel"
   },
   {
    "name": "width",
    "type": "Integer",
    "description": "Width of the carousel"
   },
   {
    "name": "pageModels",
    "type": "Object[]",
    "description": "Array of metadata component definitions to load"
   },
   {
    "name": "pageComponents",
    "type": "Aura.Component[]",
    "description": "Array of Components to inject"
   },
   {
    "name": "prefetchedTab",
    "type": "Aura.Component[]",
    "description": "If prefetchFirstTab is enabled, the provider will set the component in this parameter"
   },
   {
    "name": "isDotIndicator",
    "type": "Boolean",
    "default": "false",
    "description": "Set true to use a dot indicator rather than text"
   },
   {
    "name": "initialPage",
    "type": "String",
    "default": "0",
    "description": "Initial page to display. Can be overriden by the pageModels metadata"
   },
   {
    "name": "prefetchFirstTab",
    "type": "Boolean",
    "default": "false",
    "description": "If pageModels defined, makes the provider fetch the first page within the same request"
   },
   {
    "name": "lazyLoadTabs",
    "type": "Boolean",
    "default": "true",
    "description": "Load the remaining tabs as soon as possible. If set to false it will load them once you swipe"
   },
   {
    "name": "indicatorStateClass",
    "type": "String",
    "default": "indicator-state",
    "description": "Class name to identify the location for the indicator bar"
   },
   {
    "name": "pageScrollerPlugins",
    "type": "String",
    "default": "",
    "description": "Additional plugins to be included in each carousel page"
   },
   {
    "name": "justifyContent",
    "type": "String",
    "default": "stretch",
    "description": "Which horizontal justification to use for the page indicators. values: 'stretch' | 'leftGrowRight'"
   },
   {
    "name": "prefetchedTabIndex",
    "type": "Integer",
    "description": "If prefetchFirstTab is enabled, the provider will set this to the index of the prefetched tab"
   },
   {
    "name": "suppressIndicators",
    "type": "String",
    "default": "false",
    "description": "If true, will cause no indicator to render."
   },
   {
    "name": "isScrollable",
    "type": "Boolean",
    "default": "true",
    "description": "If true, will cause the individual pages to scroll"
   },
   {
    "name": "bindEventsToScroller",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "pageIndicatorComponent",
    "type": "Aura.Component[]",
    "description": "Component to display the tabBar. Needs to implement carouselIndicator interface"
   },
   {
    "name": "carouselPageComponent",
    "type": "Aura.ComponentDefRef[]",
    "description": "Definition of the component to hold the content of each page. Needs to implement carouselPage interface"
   }
  ],
  "cmp.ui.carouselindicator": [
   {}
  ],
  "cmp.ui.carouselpage": [
   {}
  ],
  "cmp.ui.scroller": [
   {
    "aura:id": "carousel",
    "class": "carousel-body",
    "bindeventstoscroller": "{!v.bindEventsToScroller}",
    "scroll": "horizontal",
    "enabled": "{! (v.pageModels.length > 1 || v.pageComponents.length > 1)}",
    "snap": "true",
    "lockondirection": "vertical",
    "plugins": "Indicators,Carousel",
    "snaptype": "sticky"
   }
  ]
 },
 "cmp.ui.carouselDeprecated": {
  "cmp.aura.component": [
   {
    "extends": "ui:interactive",
    "extensible": "true",
    "description": "A tabset component that enables swiping through groups of related content types in addition to standard keyboard, touch, and mouse interactions. The carousel provides page indicators by default and supports horizontal overflow of pages."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String",
    "description": "Title of the carousel"
   },
   {
    "name": "width",
    "type": "Integer",
    "description": "Width of the carousel in pixels"
   },
   {
    "name": "height",
    "type": "Integer",
    "description": "Height of the carousel in pixels"
   },
   {
    "name": "useTransition",
    "type": "Boolean",
    "default": "true",
    "description": ""
   },
   {
    "name": "pageIndicatorPosition",
    "type": "String",
    "default": "top",
    "description": "Position of the page indicator. Acceptable values are 'top' and 'bottom'. "
   },
   {
    "name": "continuousFlow",
    "type": "Boolean",
    "default": "false",
    "description": "Set to true if the carousel pages should flow continuously. The default is 'false'."
   },
   {
    "name": "defaultPage",
    "type": "Integer",
    "description": "Default page to display. Setting this will override the 'isDefault' attribute in the ui:carouselPage component."
   },
   {
    "name": "pageModels",
    "type": "Object[]",
    "description": "The model used to create a carousel page."
   },
   {
    "name": "pageComponents",
    "type": "Aura.Component[]",
    "description": "Carousel page components that is rendered as carousel pages."
   },
   {
    "name": "navigationTabs",
    "type": "Boolean",
    "default": "false",
    "description": "Enable navigational tabs on the pageIndicator"
   },
   {
    "name": "onPageChange",
    "type": "Aura.Action",
    "description": "The action invoked when the carousel changes to a different page."
   },
   {
    "name": "spinner",
    "type": "Aura.Component[]",
    "description": "Spinner component used during asynchronous loading. Must fire and handle a 'toggle' event with an isVisible attribute."
   },
   {
    "name": "priv_currentPage",
    "type": "Integer",
    "description": "PRIVATE - the currently selected page index."
   },
   {
    "name": "priv_carouselStyle",
    "type": "String",
    "description": "PRIVATE - inline style of the carousel container."
   },
   {
    "name": "priv_scrollerWidth",
    "type": "String",
    "description": "PRIVATE - the scroller width in pixels."
   },
   {
    "name": "priv_snap",
    "type": "String",
    "description": "PRIVATE - Scroller snap option."
   },
   {
    "name": "priv_scrollContentClass",
    "type": "String",
    "description": "PRIVATE - Scroller content css class."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "selectDefaultPage",
    "type": "ui:carouselPageEvent",
    "description": "The event fired when the default page is selected."
   },
   {
    "name": "pageSelected",
    "type": "ui:carouselPageEvent",
    "description": "The event fired when the page is selected."
   },
   {
    "name": "loadPage",
    "type": "ui:carouselPageEvent",
    "description": "The event fired when the page is loaded."
   },
   {
    "name": "scrollEnd",
    "type": "ui:scrollEnd",
    "description": "The event fired when the end of the scroller is reached."
   },
   {
    "name": "refreshCurrentPage",
    "type": "ui:carouselPageEvent",
    "description": "Fire this event to refresh the current carousel page."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "selectDefaultPage",
    "action": "{!c.selectDefaultPage}"
   },
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.onInit}"
   },
   {
    "name": "change",
    "value": "{!v.pageComponents}",
    "action": "{!c.onPageComponentsChanged}"
   },
   {
    "name": "refreshCurrentPage",
    "action": "{!c.onRefreshCurrentPage}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:carouselPage",
    "type": "COMPONENT"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.continuousFlow != true && v.pageIndicatorPosition == 'top'}"
   },
   {
    "istrue": "{!v.spinner.length > 0}"
   },
   {
    "istrue": "{!v.continuousFlow != true && v.pageIndicatorPosition == 'bottom'}"
   }
  ],
  "cmp.ui.carouselpageindicator": [
   {
    "navigationtabs": "{!v.navigationTabs}"
   },
   {}
  ],
  "cmp.ui.scrollerdeprecated": [
   {
    "aura:id": "scroller",
    "width": "{!v.priv_scrollerWidth}",
    "class": "scroll-container",
    "hscroll": "true",
    "vscroll": "false",
    "onscrollmove": "{!c.onScrollMove}",
    "onscrollend": "{!c.onScrollEnd}",
    "refreshed": "{!c.onScrollerRefreshed}",
    "snap": "{!v.priv_snap}",
    "scrollcontentclass": "{!v.priv_scrollContentClass}",
    "bindeventstoscroller": "true",
    "usetransition": "{!v.useTransition}"
   }
  ]
 },
 "cmp.ui.carouselIndicator": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "pageModels",
    "type": "Object[]",
    "description": "TODO"
   },
   {
    "name": "pageComponents",
    "type": "Object[]",
    "description": "TODO"
   },
   {
    "name": "justifyContent",
    "type": "String",
    "description": "Which horizontal justification to use for the page indicators. Valid values are 'stretch', 'leftGrowRight'. Default is 'stretch'."
   },
   {
    "name": "isDotIndicator",
    "type": "Boolean",
    "default": "false",
    "description": "Set to true to use dot indicators rather than text."
   },
   {
    "name": "_calculatedStyles",
    "type": "String",
    "description": ""
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "pagerClicked",
    "type": "ui:pagerClicked",
    "description": "The event fired when the pager is clicked"
   }
  ]
 },
 "cmp.ui.carouselPage": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "content",
    "type": "Object",
    "description": ""
   },
   {
    "name": "pageIndex",
    "type": "Integer",
    "description": ""
   },
   {
    "name": "scrollerPlugins",
    "type": "String",
    "description": "Additional scroller plugins to be used (comma separated with no spaces betweeen them (scroller bug as of 8/6/2014))"
   },
   {
    "name": "isContentLoaded",
    "type": "Boolean",
    "default": "false",
    "description": ""
   },
   {
    "name": "isScrollable",
    "type": "Boolean",
    "default": "true",
    "description": "If false will prevent the page from scrolling."
   },
   {
    "name": "placeholder",
    "type": "Aura.ComponentDefRef[]"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.ui.label": [
   {}
  ],
  "cmp.ui.scroller": [
   {
    "aura:id": "scroller",
    "bindeventstoscroller": "true",
    "canshowmore": "true",
    "onpulltoshowmore": "{!c.handleShowMore}",
    "enabled": "{! v.isScrollable}",
    "lockondirection": "horizontal"
   }
  ]
 },
 "cmp.ui.carouselPageDeprecated": {
  "cmp.aura.component": [
   {
    "extends": "ui:interactive",
    "extensible": "true",
    "description": "A scrollable page in a ui:carousel component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String",
    "description": "Title of the page"
   },
   {
    "name": "isCacheable",
    "default": "true",
    "type": "Boolean",
    "description": "Indicates whether the page content is cacheable on client or not."
   },
   {
    "name": "isDefault",
    "default": "false",
    "type": "Boolean",
    "description": "Determines if this is the default page to display."
   },
   {
    "name": "pageModel",
    "type": "Object",
    "description": "The model that is used to create components dynamically."
   },
   {
    "name": "pageIndex",
    "type": "Integer",
    "description": "The index of this page."
   },
   {
    "name": "isSelected",
    "type": "Boolean",
    "default": "false",
    "description": "Indicates whether the page is selected or not."
   },
   {
    "name": "parent",
    "type": "Aura.Component[]",
    "description": "The page container."
   },
   {
    "name": "priv_width",
    "type": "Integer",
    "description": "PRIVATE - Width of the page in pixels. This value is inherited from the ui:carousel 'width' attribute."
   },
   {
    "name": "priv_height",
    "type": "Integer",
    "description": "PRIVATE - Height of the page in pixels. This value is inherited from the ui:carousel 'height' attribute."
   },
   {
    "name": "priv_pageStyle",
    "type": "String",
    "description": "PRIVATE"
   },
   {
    "name": "priv_pageId",
    "type": "String",
    "description": "PRIVATE"
   },
   {
    "name": "priv_visible",
    "type": "Boolean",
    "description": "Indicates page is visible or not."
   },
   {
    "name": "priv_continuousFlow",
    "type": "Boolean",
    "description": "Indicates carousel can flow continuously or not."
   },
   {
    "name": "priv_snap",
    "type": "String",
    "description": "PRIVATE - Scroller snap option."
   },
   {
    "name": "showPage",
    "type": "Aura.Action"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "pageSelected",
    "type": "ui:carouselPageEvent",
    "description": "The event fired when the carousel page is selected."
   },
   {
    "name": "update",
    "type": "ui:carouselPageEvent",
    "description": "The event fired when the carousel page is updated."
   },
   {
    "name": "show",
    "type": "ui:carouselPageEvent",
    "description": "The event fired when the carousel page is displayed."
   },
   {
    "name": "hide",
    "type": "ui:carouselPageEvent",
    "description": "The event fired when the carousel page is hidden."
   },
   {
    "name": "updateSize",
    "type": "ui:carouselPageEvent",
    "description": "The event fired when the carousel page is resized."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "pageSelected",
    "action": "{!c.onPageSelected}"
   },
   {
    "name": "update",
    "action": "{!c.onPageUpdate}"
   },
   {
    "name": "show",
    "action": "{!c.onPageShow}"
   },
   {
    "name": "hide",
    "action": "{!c.onPageHide}"
   },
   {
    "name": "updateSize",
    "action": "{!c.onUpdateSize}"
   },
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.onInit}"
   }
  ]
 },
 "cmp.ui.carouselPageIndicator": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "A container for ui:carouselPageIndicatorItem components. This component is not displayed if the carousel uses a continuous flow."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "pageComponents",
    "type": "Aura.Component[]",
    "description": "The page components in the carousel"
   },
   {
    "name": "currentPage",
    "type": "Integer",
    "description": "The current page of the pager."
   },
   {
    "name": "navigationTabs",
    "type": "Boolean",
    "default": "false",
    "description": "Enables navigation tabs"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "pagerClicked",
    "type": "ui:pagerClicked",
    "description": "The event fired when the page indicator is clicked."
   },
   {
    "name": "pagerKeyed",
    "type": "ui:pagerKeyed",
    "description": "The event fired when the page indicator is keyed."
   },
   {
    "name": "pageSelected",
    "type": "ui:carouselPageEvent",
    "description": "The event fired when the carousel page is selected."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "pageSelected",
    "action": "{!c.onPageSelected}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.pageComponents.length > 1}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.pageComponents}",
    "var": "page",
    "indexvar": "index"
   }
  ],
  "cmp.ui.carouselpageindicatoritem": [
   {
    "aura:id": "indicatorItems",
    "priv_pagecomponent": "{!page}",
    "pageindex": "{!index + 1}",
    "pagerkeyed": "{!c.keyHandler}",
    "pagerclicked": "{!c.clickHandler}",
    "navigationtab": "{!v.navigationTabs}"
   }
  ]
 },
 "cmp.ui.carouselPageIndicatorItem": {
  "cmp.aura.component": [
   {
    "extends": "ui:interactive",
    "extensible": "true",
    "description": "A carousel page indicator item which enables tabbing through the carousel pages. This component is used in a ui:carouselPageIndicator component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "pageIndex",
    "type": "Integer",
    "description": "The index of the page this component belongs to."
   },
   {
    "name": "title",
    "type": "String",
    "description": "The title of the page."
   },
   {
    "name": "label",
    "type": "String",
    "description": "The label of the page."
   },
   {
    "name": "navigationTab",
    "type": "Boolean",
    "default": "false",
    "description": "Navigation Tabs instead of labels"
   },
   {
    "name": "priv_id",
    "type": "String",
    "description": "The id of the item"
   },
   {
    "name": "priv_ariaSelected",
    "type": "Boolean",
    "default": "false",
    "description": "PRIVATE - aria-selected boolean"
   },
   {
    "name": "priv_ariaControlId",
    "type": "String",
    "description": "PRIVATE - Aria control ID."
   },
   {
    "name": "priv_tabIndex",
    "type": "Integer",
    "default": "-1",
    "description": "PRIVATE - tab index"
   },
   {
    "name": "priv_pageComponent",
    "type": "Object",
    "description": "PRIVATE - Carousel page component."
   },
   {
    "name": "priv_selectedClass",
    "type": "String",
    "description": "PRIVATE - CSS class for the selected indicator item."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "pagerClicked",
    "type": "ui:pagerClicked",
    "description": "The event fired when the pager is clicked."
   },
   {
    "name": "pagerKeyed",
    "type": "ui:pagerKeyed",
    "description": "The event fired when the pager is keyed."
   },
   {
    "name": "pageSelected",
    "type": "ui:carouselPageEvent",
    "description": "The event fired when the page is selected."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.onInit}"
   },
   {
    "name": "pageSelected",
    "action": "{!c.onPageSelected}"
   },
   {
    "name": "click",
    "action": "{!c.clickHandler}"
   }
  ]
 },
 "cmp.ui.checkboxMenuItem": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:menuItem",
    "extensible": "true",
    "description": "​A menu item with a checkbox that supports multiple selection and can be used to invoke an action. This component is nested in a ui:menu component."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "click",
    "action": "{!c.handleClick}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.body.length == 0}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.column": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "abstract": "true",
    "extends": "ui:listViewColumn",
    "provider": "java://org.auraframework.component.ui.ListViewColumnProvider,js://ui.listViewColumn",
    "support": "GA",
    "description": "A column template used to define layout behavior in ui:listView."
   }
  ]
 },
 "cmp.ui.dataGrid": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "ui:abstractDataGrid",
    "support": "PROTO",
    "description": "Represents a table containing dynamic rows of data with inline edit support"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "summary",
    "type": "String"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "updateRowAttributes",
    "type": "ui:updateGridRow"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "updateRowAttributes",
    "action": "{!c.handleUpdateRowAttrs}"
   },
   {
    "name": "change",
    "value": "{!v.items}",
    "action": "{!c.handleItemsChange}",
    "description": "This lives here due to a bug in value objects."
   },
   {
    "name": "change",
    "value": "{!v.columns}",
    "action": "{!c.handleColumnsChange}"
   }
  ]
 },
 "cmp.ui.dataGridActionColumn": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "PROTO",
    "description": "A column of actionable buttons or links in ui:dataGrid"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String"
   },
   {
    "name": "label",
    "type": "String"
   },
   {
    "name": "class",
    "type": "String"
   },
   {
    "name": "scope",
    "type": "String",
    "default": "col",
    "description": "{ col, row, colgroup, rowgroup }"
   },
   {
    "name": "header",
    "type": "Aura.Component[]"
   },
   {
    "name": "outputComponent",
    "type": "Aura.ComponentDefRef[]"
   },
   {
    "name": "body",
    "type": "Aura.ComponentDefRef[]"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ]
 },
 "cmp.ui.dataGridColumn": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible",
    "support": "PROTO",
    "description": "A column of data in ui:dataGrid"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String",
    "description": "Api name or field name on item. Can use dot notation."
   },
   {
    "name": "label",
    "type": "String",
    "description": "The text label displayed in column header."
   },
   {
    "name": "type",
    "type": "String",
    "description": "Data type."
   },
   {
    "name": "sortable",
    "type": "Boolean"
   },
   {
    "name": "disabled",
    "type": "Boolean",
    "default": "false",
    "description": "Sets whether the column header's interactions should be disabled"
   },
   {
    "name": "required",
    "type": "Boolean",
    "default": "false",
    "description": "Required field in current layout."
   },
   {
    "name": "direction",
    "type": "String",
    "description": "{ '', ascending, descending }"
   },
   {
    "name": "initialDirectionOnSort",
    "type": "String",
    "default": "descending",
    "description": "The initial sort direction when user clicks on the column header: {ascending, descending}"
   },
   {
    "name": "ascLabel",
    "type": "String",
    "default": "Ascending",
    "description": "Accessibility label to use when column is ascending"
   },
   {
    "name": "descLabel",
    "type": "String",
    "default": "Descending",
    "description": "Accessibility label to use when column is descending"
   },
   {
    "name": "order",
    "type": "Integer",
    "default": "0",
    "description": "The ordering of the sort (non-zero applies to multilevel sort only)."
   },
   {
    "name": "scope",
    "type": "String",
    "default": "col",
    "description": "{ col, row, colgroup, rowgroup }"
   },
   {
    "name": "onsortchange",
    "type": "Aura.Action"
   },
   {
    "name": "outputComponent",
    "type": "Aura.ComponentDefRef[]",
    "description": "Used by cells to override render output. Default value is wired to item's name field."
   }
  ],
  "cmp.ui.outputtext": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.disabled}",
    "action": "{!c.handleDisabledChange}"
   },
   {
    "name": "change",
    "value": "{!v.name}",
    "action": "{!c.updateNameRef}",
    "description": "Handles a change to the name attribute by updating the wiring between the component and the name attribute."
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.sortable}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.dataGridSelectionColumn": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataGridActionColumn",
    "description": "A column of checkboxes for individual and multiple row selection in ui:dataGrid"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "selectAll",
    "type": "Boolean",
    "description": "Allows grid to control 'selectAll' visual state."
   },
   {
    "name": "outputComponent",
    "type": "Aura.ComponentDefRef[]"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "header"
   }
  ],
  "cmp.ui.actioncheckbox": [
   {
    "name": "dataGrid:select",
    "value": "{!v.selectAll}",
    "label": "Select all rows",
    "labelclass": "assistiveText"
   },
   {
    "name": "dataGrid:select",
    "value": "{!selected}",
    "index": "{!index}",
    "label": "Select row",
    "labelclass": "assistiveText",
    "disabled": "{!disabled}"
   }
  ]
 },
 "cmp.ui.dataGridSummaryCell": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:visible",
    "support": "PROTO",
    "description": "A value rendered in the table footer that computes a given column in ui:dataGrid"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "column",
    "type": "String",
    "description": "ApiName of column."
   },
   {
    "name": "type",
    "type": "String",
    "description": "{ SUM, AVG, MIN, MAX }"
   },
   {
    "name": "items",
    "type": "List"
   },
   {
    "name": "value",
    "type": "Integer"
   },
   {
    "name": "outputComponent",
    "type": "Aura.ComponentDefRef[]",
    "description": "Facet for rendering of value."
   },
   {
    "name": "priv_outputComponent",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.ui.outputtext": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.items}",
    "action": "{!c.handleItemsChange}"
   }
  ]
 },
 "cmp.ui.dataProvider": {
  "cmp.aura.component": [
   {
    "implements": "ui:dataProviderInterface,ui:pagingInterface,ui:sortingInterface,ui:searchInterface",
    "abstract": "true",
    "description": "A generic list data provider"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "provide",
    "type": "ui:dataProvide",
    "description": "The event fired when the list is intialized."
   },
   {
    "name": "onchange",
    "type": "ui:dataChanged",
    "description": "The event fired when the list data changes."
   },
   {
    "name": "error",
    "type": "ui:dataProvideError",
    "description": "The event fired when there is an error during data fetching."
   }
  ]
 },
 "cmp.ui.dataTable": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "PROTO",
    "description": "A table that displays an item of data per row, which is defined by iterating over the set of data. The body of <ui:dataTable> contains one or more <ui:dataTableRow> components."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String",
    "default": "",
    "description": "The CSS style used to display the table."
   },
   {
    "name": "items",
    "type": "Object[]",
    "description": "The items to be iterated over and processed."
   },
   {
    "name": "noDataText",
    "type": "String",
    "default": "No data found.",
    "description": "The text to display when no data is found. Default value is “No data found.”"
   },
   {
    "name": "headerValues",
    "type": "String[]",
    "description": "The text that appears in the header row of the table."
   },
   {
    "name": "striped",
    "type": "Boolean",
    "default": "false",
    "description": "Specifies whether or not the rows should be striped.  Defaults to 'false'."
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.items.length > 0}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ],
  "cmp.ui.message": [
   {
    "severity": "info"
   }
  ]
 },
 "cmp.ui.dataTableColumn": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "PROTO",
    "description": "A column in a table. A <ui:dataTableColumn> component must be a child of a <ui:dataTableRow> component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String",
    "default": "",
    "description": "The CSS style used to display the column in the table."
   },
   {
    "name": "scope",
    "type": "String",
    "description": "Identifies whether a cell is a header for a column, row, or group of columns or rows. Valid options: col, row, colgroup, rowgroup"
   },
   {
    "name": "headerValue",
    "type": "String",
    "description": "The text that appears in the column header."
   }
  ]
 },
 "cmp.ui.dataTableRow": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "PROTO",
    "description": "A row in a table. Must be used inside a <dataTable> component and can be used to nest <ui:dataTableColumn>."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "rowPress",
    "type": "ui:rowPress",
    "description": "The event fired when the row is pressed down. The element that is clicked on is checked before the event is fired."
   }
  ]
 },
 "cmp.ui.dataWriter": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "items",
    "type": "List",
    "description": "{ record: {...}, operation: SAVE/DELETE } }"
   },
   {
    "name": "defaultFields",
    "type": "Map",
    "description": "Map of default values to apply to every record."
   },
   {
    "name": "sync",
    "type": "Boolean",
    "default": "false",
    "description": "Should changes to items immediately write."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "write",
    "type": "ui:write",
    "description": "Command event to invoke writing."
   },
   {
    "name": "onsuccess",
    "type": "ui:response",
    "description": "Event fired on write success."
   },
   {
    "name": "onerror",
    "type": "ui:response",
    "description": "Event fired on write error."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.items}",
    "action": "{!c.handleItemsChange}"
   },
   {
    "name": "write",
    "action": "{!c.handleWrite}"
   }
  ]
 },
 "cmp.ui.datePicker": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:visible",
    "description": "Represents a date picker, which can be used in input components such as ui:inputDate and ui:inputDateTime."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:panelPositioningLib",
    "property": "lib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "hasTime",
    "type": "Boolean",
    "default": "false",
    "description": "Indicate if the parent datePicker component supports time picker."
   },
   {
    "name": "hours",
    "type": "Integer",
    "description": "The hour value of a date object, which is always in 24 hour format."
   },
   {
    "name": "is24HourFormat",
    "type": "Boolean",
    "default": "true",
    "description": "Indicate if it is set to 24 hour or 12-hour with am/pm."
   },
   {
    "name": "maxYear",
    "type": "Integer",
    "description": "The maximal year for year selection. Only on mobile. The default is the current year plus 30."
   },
   {
    "name": "minYear",
    "type": "Integer",
    "description": "The minimum year for year selection. Only on mobile. The default is the current year minus 100."
   },
   {
    "name": "minutes",
    "type": "Integer",
    "description": "The minute value of a date object."
   },
   {
    "name": "value",
    "type": "String",
    "description": "A date string corresponding to a calendar day in the format yyyy-mm-dd."
   },
   {
    "name": "visible",
    "type": "Boolean",
    "default": "false",
    "description": "Indicates if the date picker is displayed. Defaults to false, which hides the date picker."
   },
   {
    "name": "_yearListInitialized",
    "type": "Boolean",
    "default": "false",
    "description": "Indicates if the year list is initialized or not."
   },
   {
    "name": "managed",
    "type": "Boolean",
    "default": "false",
    "description": "Indicates whether this component is managed by ui:datePickerManager. Defaults to 'false'."
   },
   {
    "name": "referenceElement",
    "type": "Object",
    "description": "The reference node which this datePicker should be positioned to. Usually it is a inputDate element."
   },
   {
    "name": "showToday",
    "type": "Boolean",
    "default": "true",
    "description": "Indicates whether a Today link should display at the bottom. If there is a time portion, the Today link wouldn't show up even this is set to true."
   },
   {
    "name": "hideOnSelect",
    "type": "Boolean",
    "default": "true",
    "description": "Close the datePicker after a date is selected"
   },
   {
    "name": "setFocus",
    "type": "Boolean",
    "default": "true",
    "description": "Control if we should focus any date when we render the month."
   },
   {
    "name": "titleHeadingLevel",
    "type": "String",
    "description": "The heading level for the title. The default is h2."
   },
   {
    "name": "rangeStart",
    "type": "String",
    "description": "Start date of the range in the format yyyy-mm-dd"
   },
   {
    "name": "rangeEnd",
    "type": "String",
    "description": "End date of the range in the format yyyy-mm-dd"
   },
   {
    "name": "rangeClass",
    "type": "String",
    "description": "A CSS class to be applied when a range is selected"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "highlightRange",
    "action": "{!c.highlightRange}",
    "access": "PUBLIC",
    "description": "highlight the dates between rangeStart and rangeEnd inclusive"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "selectDate",
    "type": "ui:selectDate",
    "description": "The event fired when a date is selected."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.hasTime}"
   },
   {
    "istrue": "{!$Browser.formFactor != 'DESKTOP'}"
   },
   {
    "istrue": "{!$Browser.formFactor == 'DESKTOP'}"
   },
   {
    "istrue": "{!v.hasTime}"
   },
   {
    "istrue": "{!v.showToday}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "monthTitle",
    "value": ""
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   }
  ],
  "cmp.ui.datepickergrid": [
   {
    "aura:id": "grid",
    "hastime": "{!v.hasTime}",
    "setfocus": "{!v.setFocus}",
    "hide": "{!c.hide}",
    "selectdate": "{!c.selectDate}",
    "updatecalendartitle": "{!c.updateCalendarTitle}"
   }
  ],
  "cmp.ui.timepicker": [
   {
    "aura:id": "time",
    "is24hourformat": "{!v.is24HourFormat}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "today",
    "press": "{!c.selectToday}",
    "keydown": "{!c.handleTabToday}",
    "class": "calToday",
    "label": "Today"
   }
  ]
 },
 "cmp.ui.datePickerGrid": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "Provides the monthly grid view in a ui:datePicker component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String",
    "description": "A CSS style to be attached to the component."
   },
   {
    "name": "date",
    "type": "Integer",
    "description": "The currently highlighted date."
   },
   {
    "name": "hasTime",
    "type": "Boolean",
    "default": "false",
    "description": "Indicate if the parent datePicker component supports time picker."
   },
   {
    "name": "month",
    "type": "Integer",
    "description": "The currently rendered month."
   },
   {
    "name": "year",
    "type": "Integer",
    "description": "The currently rendered year."
   },
   {
    "name": "selectedDate",
    "type": "Date",
    "description": "The selected date."
   },
   {
    "name": "setFocus",
    "type": "Boolean",
    "default": "true",
    "description": "Control if we should focus any date when we render the month."
   },
   {
    "name": "rangeStart",
    "type": "String",
    "description": "Start date of a range to be highlighted"
   },
   {
    "name": "rangeEnd",
    "type": "String",
    "description": "End date of a range to be highlighted"
   },
   {
    "name": "rangeClass",
    "type": "String",
    "default": "highlight",
    "description": "A CSS class to be applied when a range is selected"
   },
   {
    "name": "_setFocus",
    "type": "Boolean",
    "default": "true",
    "description": "The internal state of setFocus."
   },
   {
    "name": "_namesOfWeekdays",
    "type": "List",
    "description": "The names of the week days based on locale."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "hide",
    "type": "ui:change",
    "description": "The event fired when the date picker is hidden from view."
   },
   {
    "name": "focus",
    "type": "ui:focus",
    "description": "The event fired when a date is focused."
   },
   {
    "name": "selectDate",
    "type": "ui:selectDate",
    "description": "The event fired when a date is selected."
   },
   {
    "name": "updateCalendar",
    "type": "ui:updateCalendar",
    "description": "The event fired when the calendar is updated."
   },
   {
    "name": "updateCalendarTitle",
    "type": "ui:updateCalendarTitle",
    "description": "The event fired when the calendar month and year are updated."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "focus",
    "action": "{!c.focus}"
   },
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   },
   {
    "name": "updateCalendar",
    "action": "{!c.updateCalendar}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v._namesOfWeekdays}",
    "var": "day"
   }
  ],
  "cmp.ui.dayinmonthcell": [
   {
    "aura:id": "0",
    "label": "0"
   },
   {
    "aura:id": "1",
    "label": "0"
   },
   {
    "aura:id": "2",
    "label": "0"
   },
   {
    "aura:id": "3",
    "label": "0"
   },
   {
    "aura:id": "4",
    "label": "0"
   },
   {
    "aura:id": "5",
    "label": "0"
   },
   {
    "aura:id": "6",
    "label": "0"
   },
   {
    "aura:id": "7",
    "label": "0"
   },
   {
    "aura:id": "8",
    "label": "0"
   },
   {
    "aura:id": "9",
    "label": "0"
   },
   {
    "aura:id": "10",
    "label": "0"
   },
   {
    "aura:id": "11",
    "label": "0"
   },
   {
    "aura:id": "12",
    "label": "0"
   },
   {
    "aura:id": "13",
    "label": "0"
   },
   {
    "aura:id": "14",
    "label": "0"
   },
   {
    "aura:id": "15",
    "label": "0"
   },
   {
    "aura:id": "16",
    "label": "0"
   },
   {
    "aura:id": "17",
    "label": "0"
   },
   {
    "aura:id": "18",
    "label": "0"
   },
   {
    "aura:id": "19",
    "label": "0"
   },
   {
    "aura:id": "20",
    "label": "0"
   },
   {
    "aura:id": "21",
    "label": "0"
   },
   {
    "aura:id": "22",
    "label": "0"
   },
   {
    "aura:id": "23",
    "label": "0"
   },
   {
    "aura:id": "24",
    "label": "0"
   },
   {
    "aura:id": "25",
    "label": "0"
   },
   {
    "aura:id": "26",
    "label": "0"
   },
   {
    "aura:id": "27",
    "label": "0"
   },
   {
    "aura:id": "28",
    "label": "0"
   },
   {
    "aura:id": "29",
    "label": "0"
   },
   {
    "aura:id": "30",
    "label": "0"
   },
   {
    "aura:id": "31",
    "label": "0"
   },
   {
    "aura:id": "32",
    "label": "0"
   },
   {
    "aura:id": "33",
    "label": "0"
   },
   {
    "aura:id": "34",
    "label": "0"
   },
   {
    "aura:id": "35",
    "label": "0"
   },
   {
    "aura:id": "36",
    "label": "0"
   },
   {
    "aura:id": "37",
    "label": "0"
   },
   {
    "aura:id": "38",
    "label": "0"
   },
   {
    "aura:id": "39",
    "label": "0"
   },
   {
    "aura:id": "40",
    "label": "0"
   },
   {
    "aura:id": "41",
    "label": "0"
   }
  ]
 },
 "cmp.ui.datePickerManager": {
  "cmp.aura.component": [
   {
    "description": "Represents a date picker manager that renders a single date picker for multiple date input components."
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "ui:showDatePicker",
    "action": "{!c.handleShowDatePicker}"
   }
  ],
  "cmp.ui.datepicker": [
   {
    "aura:id": "datePicker",
    "managed": "true",
    "selectdate": "{!c.handleDateSelected}"
   }
  ]
 },
 "cmp.ui.dayInMonthCell": {
  "cmp.aura.component": [
   {
    "extends": "ui:interactive",
    "extensible": "true",
    "description": "Provides the date in a ui:datePickerGrid component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "ariaSelected",
    "type": "Boolean",
    "default": "false",
    "description": "The date highlighted."
   },
   {
    "name": "tabIndex",
    "type": "Integer",
    "default": "-1",
    "description": "The tab index of the anchor element."
   },
   {
    "name": "value",
    "type": "Date",
    "description": "The date this component renders."
   }
  ]
 },
 "cmp.ui.dialog": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "GA",
    "description": "A dialog window used for overlays or modals."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "ariaRole",
    "type": "String",
    "default": "dialog",
    "description": "The value of the dialog's ARIA role attribute. Valid values are 'dialog' and 'alertdialog'. The default is 'dialog'."
   },
   {
    "name": "autoFocus",
    "type": "Boolean",
    "default": "{!true}",
    "description": "Automatically focus on the first focusable element when the dialog is displayed. The default is 'true'."
   },
   {
    "name": "buttons",
    "type": "Aura.Component[]",
    "description": "Buttons that should be displayed at the bottom of the dialog (e.g., 'Cancel', 'OK', etc.). This attribute must be of type ui:dialogButtons."
   },
   {
    "name": "clickOutToClose",
    "type": "Boolean",
    "default": "{!true}",
    "description": "Specifies if the dialog should be closed when any element outside the dialog is clicked. The default is 'true'."
   },
   {
    "name": "description",
    "type": "String",
    "description": "Instructional information about the purpose of the dialog. This text will not be visible on-screen, but still readable by assistive technologies. Required for accessibility.",
    "required": "true"
   },
   {
    "name": "isModal",
    "type": "Boolean",
    "default": "{!false}",
    "description": "Whether or not the dialog is modal. Modal dialogs do not allow any interaction with other page elements until the dialog is dealt with. Non-modal dialogs allow interactivity with other parts of the page, even when the dialog is open. The default is 'false'."
   },
   {
    "name": "title",
    "type": "String",
    "description": "The title displayed in the dialog's header. Required for accessibility.",
    "required": "true"
   },
   {
    "name": "width",
    "type": "String",
    "default": "medium",
    "description": "The width of the dialog. Valid values are 'small', 'medium', 'large' (which equal 310px, 620px, and 940px, respectively), and 'auto', which sizes based on the contents of the dialog. Note that 'auto' will only work properly when the 'isModal' attribute is set to 'false'. The default is 'medium'."
   },
   {
    "name": "closeClass",
    "type": "String",
    "description": "Additional CSS classes to apply to the dialog close button, located in the upper right corner of the dialog window."
   },
   {
    "name": "closeLabel",
    "type": "String",
    "default": "×",
    "description": "The label of the dialog close button, located in the upper right corner of the dialog window."
   },
   {
    "name": "closeTitle",
    "type": "String",
    "default": "Close this window",
    "description": "The title attribute of the dialog close button, located in the upper right corner of the dialog window."
   },
   {
    "name": "dialogClass",
    "type": "String",
    "description": "Additional CSS classes to apply to the dialog's outermost <div> wrapper."
   },
   {
    "name": "maskClass",
    "type": "String",
    "description": "Additional CSS classes to apply to the window mask located behind a modal dialog."
   },
   {
    "name": "_handlerConfig",
    "type": "Object",
    "description": "PRIVATE ATTRIBUTE - DO NOT SET | Reference to the event handlers necessary for interactivity."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "close",
    "type": "ui:closeDialog",
    "description": "Event fired when the dialog window requests to close itself."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.isModal}"
   },
   {
    "istrue": "{!v.buttons.length > 0}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "closeButton",
    "class": "{!'close ' + v.closeClass}",
    "label": "{!v.closeLabel}",
    "buttontitle": "{!v.closeTitle}",
    "press": "{!c.close}"
   }
  ]
 },
 "cmp.ui.dialogButtons": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "GA",
    "description": "A facet of ui:dialog to hold any buttons displayed at the bottom of the dialog window. This component comes with two default buttons, 'OK' and 'Cancel'. You can use zero or more of the default buttons, and/or provide your own custom buttons in this component's body."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "defaultButtons",
    "type": "String",
    "default": "none",
    "description": "Which default buttons to include (if any). Valid values are 'confirm', 'cancel', 'both', or 'none'. Default is 'none'. If you choose to use default and custom buttons together, custom buttons will always appear between the default cancel and default confirm buttons."
   },
   {
    "name": "confirmClass",
    "type": "String",
    "description": "Additional CSS classes to apply to the default confirm button."
   },
   {
    "name": "confirmLabel",
    "type": "String",
    "default": "OK",
    "description": "The label of the default confirm button."
   },
   {
    "name": "confirmTitle",
    "type": "String",
    "default": "Click to confirm",
    "description": "The title attribute of the default confirm button."
   },
   {
    "name": "cancelClass",
    "type": "String",
    "description": "Additional CSS classes to apply to the default cancel button."
   },
   {
    "name": "cancelLabel",
    "type": "String",
    "default": "Cancel",
    "description": "The label of the default cancel button."
   },
   {
    "name": "cancelTitle",
    "type": "String",
    "default": "Click to cancel",
    "description": "The title attribute of the default cancel button."
   },
   {
    "name": "_parentDialog",
    "type": "Object",
    "description": "PRIVATE ATTRIBUTE - DO NOT SET | Reference to the parent ui:dialog component."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.defaultButtons == 'cancel' || v.defaultButtons == 'both'}"
   },
   {
    "istrue": "{!v.defaultButtons == 'confirm' || v.defaultButtons == 'both'}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "cancelButton",
    "class": "{!v.cancelClass}",
    "label": "{!v.cancelLabel}",
    "buttontitle": "{!v.cancelTitle}",
    "press": "{!c.cancel}"
   },
   {
    "aura:id": "confirmButton",
    "class": "{!v.confirmClass}",
    "label": "{!v.confirmLabel}",
    "buttontitle": "{!v.confirmTitle}",
    "press": "{!c.confirm}"
   }
  ]
 },
 "cmp.ui.dialogManager": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "GA",
    "description": "Manages all instances of ui:dialog in an application, by handling visibility and all DOM events. One (and only one) instance of this component is required if you wish to use the ui:dialog component. We recommend putting the ui:dialogManager component at the end of your .app file."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "_activeDialog",
    "type": "Object",
    "description": "PRIVATE ATTRIBUTE | DO NOT SET -- Reference to the currently active (i.e., open) ui:dialog component."
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "ui:openDialog",
    "action": "{!c.openDialog}",
    "description": "Activates a single ui:dialog component"
   },
   {
    "event": "ui:closeDialog",
    "action": "{!c.closeDialog}",
    "description": "Deactivates a single ui:dialog component."
   }
  ]
 },
 "cmp.ui.dragAndDropAccessibility": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true",
    "support": "PROTO",
    "description": "A drag and drop accessibility component."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:dragAndDropLib",
    "property": "lib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "draggables",
    "type": "Aura.Component[]",
    "access": "private",
    "description": "Dropzone components to be rendered as menuItem."
   },
   {
    "name": "draggables",
    "type": "Aura.Component[]",
    "required": "true",
    "description": "Draggable components that are being dragged. Must be of type ui:draggable."
   },
   {
    "name": "target",
    "type": "Object",
    "required": "true",
    "description": "The event target in which accessibility element should be relative to."
   }
  ],
  "cmp.aura.method": [
   {
    "name": "startDragAndDrop",
    "action": "{!c.startDragAndDrop}",
    "access": "public"
   }
  ]
 },
 "cmp.ui.dragAndDropAccessibilityMenu": {
  "cmp.aura.component": [
   {
    "extends": "ui:dragAndDropAccessibility",
    "support": "PROTO",
    "description": "A drag and drop accessibility component."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:panelPositioningLib",
    "property": "positioningLib",
    "description": "Library to help position accessibility menu"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String",
    "default": "",
    "description": "Additional CSS style to be attached to this component."
   },
   {
    "name": "draggables",
    "type": "Aura.Component[]",
    "access": "private",
    "description": "Currently active draggable components."
   },
   {
    "name": "dropzoneMenu",
    "type": "List",
    "access": "private",
    "description": "Dropzone components to be rendered as menuItem."
   }
  ],
  "cmp.ui.menu": [
   {
    "aura:id": "menu",
    "class": "{!v.class}"
   }
  ],
  "cmp.ui.menulist": [
   {
    "aura:id": "menuList",
    "attachtobody": "true",
    "menufocuschange": "{!c.handleMenuFocusChange}",
    "menucollapse": "{!c.handleMenuCollapse}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.dropzoneMenu}",
    "var": "menu"
   }
  ],
  "cmp.ui.actionmenuitem": [
   {
    "value": "{!menu.value}",
    "label": "{!menu.label}",
    "menuselect": "{!c.handleMenuSelect}"
   }
  ]
 },
 "cmp.ui.draggable": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:hasContextComponent",
    "support": "PROTO",
    "description": "A draggable component in drag and drop operation."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:dragAndDropLib",
    "property": "lib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "type",
    "type": "String",
    "default": "move",
    "description": "Operation type: can be either copy, link, or move."
   },
   {
    "name": "dataTransfer",
    "type": "Map",
    "description": "A Map<String, String> of data to be transferred during drag and drop operation. The key could be MIME type or some custom type."
   },
   {
    "name": "class",
    "type": "String",
    "default": "",
    "description": "Additional CSS style to be attached to this component."
   },
   {
    "name": "dragClass",
    "type": "String",
    "default": "",
    "description": "Additional CSS style to be attached to this component while it's being dragged."
   },
   {
    "name": "dragAccessibilityClass",
    "type": "String",
    "default": "",
    "description": "Additional CSS style to be attached to this component while it's being dragged in accessibility mode. It's defaulted to dragClass attribute if it's unspecified."
   },
   {
    "name": "dragImageClass",
    "type": "String",
    "default": "",
    "description": "Additional CSS style to be attached to drag image. Note that different browsers will render differently."
   },
   {
    "name": "disable",
    "type": "Boolean",
    "default": "false",
    "description": "Set to true to disable draggable or false otherwise."
   },
   {
    "name": "ariaGrabbed",
    "type": "boolean",
    "default": "false",
    "access": "private",
    "description": "Indicate a draggable component."
   },
   {
    "name": "accessibilityComponent",
    "type": "String",
    "description": "Accessibility component's global Id for this draggable component. Must be of type ui:dragAndDropAccessibility."
   },
   {
    "name": "isSuccessful",
    "type": "Boolean",
    "default": "true",
    "description": "Set to true if drop is performed or false if it's aborted."
   },
   {
    "name": "isValid",
    "type": "Boolean",
    "default": "true",
    "description": "Set to true if dragEnd is performed or false if it's aborted."
   },
   {
    "name": "isInAccessibilityMode",
    "type": "Boolean",
    "default": "true",
    "description": "Set to true if drag and drop operation is initiated in accessibility mode, i.e. through keyboard interaction."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "dragStart",
    "type": "ui:dragEvent",
    "description": "Event fired when user starts dragging this component."
   },
   {
    "name": "dragEnd",
    "type": "ui:dragEvent",
    "description": "Event fired when this drag operation is being ended."
   },
   {
    "name": "dropComplete",
    "type": "ui:dragEvent",
    "description": "Event fired when drop operation is completed."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "dropComplete",
    "action": "{!c.handleDropComplete}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "setDropStatus",
    "action": "{!c.setDropStatus}",
    "access": "public"
   },
   {
    "name": "fireDragEnd",
    "action": "{!c.fireDragEnd}",
    "access": "public"
   }
  ]
 },
 "cmp.ui.dropzone": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:hasContextComponent",
    "support": "PROTO",
    "description": "Component that could be a drop target in drag and drop operation."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:dragAndDropLib",
    "property": "lib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "types",
    "type": "String[]",
    "default": "move",
    "description": "Supported operation types: can be either copy, link, or move."
   },
   {
    "name": "dragOverInterval",
    "type": "Integer",
    "default": "500",
    "description": "Interval in milliseconds for how often dragOver event will be fired."
   },
   {
    "name": "class",
    "type": "String",
    "default": "",
    "description": "Additional CSS style to be attached to the component."
   },
   {
    "name": "dragOverClass",
    "type": "String",
    "default": "",
    "description": "Additional CSS style to be attached to this component while it's being dragged over."
   },
   {
    "name": "dragOverAccessibilityClass",
    "type": "String",
    "default": "",
    "description": "Additional CSS style to be attached to this component while it's being dragged over in accessibility mode. It's defaulted to dragOverClass attribute if it's unspecified."
   },
   {
    "name": "label",
    "type": "String",
    "description": "Label for this component. It's primarily used for accessibility."
   },
   {
    "name": "ariaDropEffect",
    "type": "String",
    "default": "none",
    "access": "private",
    "description": "Indicate what operation this component is capable of receiving."
   },
   {
    "name": "isInAccessibilityMode",
    "type": "Boolean",
    "default": "true",
    "description": "Set to true if drag and drop operation is initiated in accessibility mode, i.e. through keyboard interaction."
   },
   {
    "name": "isInAccessibilityMode",
    "type": "Boolean",
    "default": "true",
    "description": "Set to true if drag and drop operation is initiated in accessibility mode, i.e. through keyboard interaction."
   },
   {
    "name": "dragComponents",
    "type": "Aura.Component[]",
    "required": "true",
    "description": "The drag components that are dropped."
   },
   {
    "name": "isInAccessibilityMode",
    "type": "Boolean",
    "default": "true",
    "description": "Set to true if drag and drop operation is initiated in accessibility mode, i.e. through keyboard interaction."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "dragEnter",
    "type": "ui:dragEvent",
    "description": "Event fired when a dragged component enters this drop target."
   },
   {
    "name": "dragOver",
    "type": "ui:dragEvent",
    "description": "Event fired when a dragged component is hovered over this drop target."
   },
   {
    "name": "dragLeave",
    "type": "ui:dragEvent",
    "description": "Event fired when a dragged component leaves this drop target."
   },
   {
    "name": "drop",
    "type": "ui:dragEvent",
    "description": "Event fired when a component is dropped on this drop target."
   }
  ],
  "cmp.aura.method": [
   {
    "name": "enterDragOperation",
    "action": "{!c.enterDragOperation}",
    "access": "public"
   },
   {
    "name": "exitDragOperation",
    "action": "{!c.exitDragOperation}",
    "access": "public"
   },
   {
    "name": "fireDragEnter",
    "action": "{!c.fireDragEnter}",
    "access": "public"
   },
   {
    "name": "fireDragLeave",
    "action": "{!c.fireDragLeave}",
    "access": "public"
   },
   {
    "name": "fireDrop",
    "action": "{!c.fireDrop}",
    "access": "public"
   }
  ]
 },
 "cmp.ui.fieldLabel": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "PROTO",
    "description": "The label displayed on a field component."
   }
  ]
 },
 "cmp.ui.header": {
  "cmp.aura.component": [
   {
    "extends": "ui:block"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "tag",
    "value": "header"
   },
   {
    "attribute": "class",
    "value": "{!($Browser.isAndroid ? 'android ' + v.class : v.class)}"
   }
  ]
 },
 "cmp.ui.image": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "GA",
    "description": "An image that is rendered as an HTML <img> element. Use the alt attribute if imageType=\"informational\"."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String",
    "description": "Title for the image."
   },
   {
    "name": "imageType",
    "type": "String",
    "default": "informational",
    "description": "The type of image. Accepted values: informational or decorative."
   },
   {
    "name": "src",
    "type": "String",
    "default": "/auraFW/resources/aura/s.gif",
    "description": "The absolute or relative URL of the image."
   },
   {
    "name": "class",
    "type": "String",
    "description": "The CSS style used to display the image."
   },
   {
    "name": "href",
    "type": "String",
    "description": "The URL that the image directs to when clicked."
   },
   {
    "name": "linkClass",
    "type": "String",
    "description": "The CSS style used to display the URL link."
   },
   {
    "name": "alt",
    "type": "String",
    "default": "",
    "description": "The alternate text description of the image. If imageType=\"informational\", the alt attribute is required. Otherwise, it is not required if imageType=\"decorative\"."
   },
   {
    "name": "target",
    "type": "String",
    "default": "_self",
    "description": "The target URL to display when the image is clicked. Default value is “_self”. Valid options: _blank, _parent, _top, _self"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "onload",
    "type": "ui:response",
    "description": "Event fired when the image is done loading, passes the image loaded to the event."
   },
   {
    "name": "onerror",
    "type": "ui:response",
    "description": "Event fired when an error occurs while loading the image."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ]
 },
 "cmp.ui.infiniteList": {
  "cmp.aura.component": [
   {
    "extends": "ui:abstractList",
    "implements": "ui:scrollerEmbeddable",
    "support": "GA",
    "description": "A list component that iterates over and displays the items in the ui:dataProvider component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "enableRowSwipe",
    "type": "Boolean",
    "default": "false",
    "description": "Toggles touch event handlers to open and close rows."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "onRowOpen",
    "type": "ui:openRow",
    "description": "Fired when a row is swiped open."
   },
   {
    "name": "onRowClose",
    "type": "ui:closeRow",
    "description": "Fired when a row is swiped closed."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "showMore",
    "action": "{!c.showMore}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.items}",
    "var": "{!v.itemVar}",
    "template": "{!v.itemTemplate}",
    "iterationcomplete": "{!c.iterationComplete}"
   }
  ]
 },
 "cmp.ui.infiniteListRow": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String"
   },
   {
    "name": "swipeBody",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "open",
    "type": "ui:open"
   },
   {
    "name": "close",
    "type": "ui:close"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "open",
    "action": "{!c.handleOpen}"
   },
   {
    "name": "close",
    "action": "{!c.handleClose}"
   }
  ]
 },
 "cmp.ui.input": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "abstract": "true",
    "implements": "ui:visible, ui:uiEvents",
    "description": "An abstract class that is extended by input components such as ui:inputCheckbox and ui:inputText.",
    "support": "GA"
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:eventLib",
    "property": "lib"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:label",
    "type": "COMPONENT"
   },
   {
    "resource": "markup://ui:inputDefaultError",
    "type": "COMPONENT"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "disableDoubleClicks",
    "type": "Boolean",
    "default": "false",
    "description": "Disables double clicking the component within 350ms"
   },
   {
    "name": "showErrors",
    "type": "Boolean",
    "default": "true",
    "description": "Show the error component"
   },
   {
    "name": "errors",
    "type": "Object[]",
    "description": "The list of errors to be displayed."
   },
   {
    "name": "errorComponent",
    "type": "Aura.Component[]",
    "description": "A component that displays any error messages, such as validation errors, associated with the input field."
   },
   {
    "name": "type",
    "type": "String",
    "description": "Specifies the input type. Possible values: button, checkbox, file, hidden, image, password, radio, reset, submit, text, textarea. Corresponds to the type attribute of the rendered HTML input element. Override type in a component that extends this component to set it to a different HTML input type."
   },
   {
    "name": "required",
    "type": "Boolean",
    "default": "false",
    "access": "GLOBAL",
    "description": "Specifies whether the input is required. Default value is \"false\"."
   },
   {
    "name": "updateOn",
    "type": "String",
    "default": "change",
    "access": "GLOBAL",
    "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change\"."
   },
   {
    "name": "value",
    "type": "String",
    "access": "GLOBAL",
    "description": "The value currently in the input field."
   },
   {
    "name": "label",
    "type": "String",
    "access": "GLOBAL",
    "description": "The text of the label component"
   },
   {
    "name": "labelClass",
    "type": "String",
    "default": "",
    "access": "GLOBAL",
    "description": "The CSS class of the label component"
   },
   {
    "name": "labelPosition",
    "type": "String",
    "default": "left",
    "description": "The position in which the label should be displayed. Possible values are \"left\", \"top\", \"right\", \"bottom\", and \"hidden\". Default value is \"left\"."
   },
   {
    "name": "labelTitle",
    "type": "String",
    "description": "The text displayed in a tooltip when the mouse pointer hovers over the button."
   },
   {
    "name": "requiredIndicatorClass",
    "type": "String",
    "default": "",
    "access": "GLOBAL",
    "description": "The CSS class of the required indicator component"
   },
   {
    "name": "disabled",
    "type": "Boolean",
    "default": "false",
    "access": "GLOBAL",
    "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\"."
   },
   {
    "name": "domId",
    "type": "String",
    "description": "DOM id of the input element. By default, this attribute resolved to the globalId of the component to avoid id collision."
   },
   {
    "name": "requiredIndicator",
    "type": "Aura.Component[]",
    "description": "A component that displays the indicator for the required field."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "change",
    "type": "ui:change",
    "access": "GLOBAL",
    "description": "The event fired when the user changes the content of the input."
   },
   {
    "name": "copy",
    "type": "ui:copy",
    "access": "GLOBAL",
    "description": "The event fired when the user copies content to the clipboard."
   },
   {
    "name": "cut",
    "type": "ui:cut",
    "access": "GLOBAL",
    "description": "The event fired when the user cuts content to the clipboard."
   },
   {
    "name": "paste",
    "type": "ui:paste",
    "access": "GLOBAL",
    "description": "The event fired when the user pastes content from the clipboard."
   },
   {
    "name": "onError",
    "type": "ui:validationError",
    "access": "GLOBAL",
    "description": "The event fired when there are any validation errors on the component."
   },
   {
    "name": "onClearErrors",
    "type": "ui:clearErrors",
    "access": "GLOBAL",
    "description": "The event fired when any validation errors should be cleared."
   },
   {
    "name": "updateError",
    "type": "ui:updateError",
    "description": "The event fired to trigger the default error component and messages (deprecated)."
   },
   {
    "name": "input",
    "type": "ui:inputEvent",
    "description": "The event fired when the user enters an input."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "updateError",
    "action": "{!c.updateError}"
   },
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.errors}",
    "action": "{!c.updateError}"
   },
   {
    "name": "change",
    "value": "{!v.label}",
    "action": "{!c.handleLabelChange}"
   },
   {
    "name": "change",
    "value": "{!v.labelPosition}",
    "action": "{!c.handleLabelPositionChange}"
   }
  ]
 },
 "cmp.ui.inputCheckbox": {
  "cmp.aura.component": [
   {
    "extends": "ui:input",
    "implements": "ui:inputBaseOption",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Represents a checkbox. Its behavior can be configured using events such as click and change."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "updateOn",
    "type": "String",
    "access": "GLOBAL",
    "default": "change,click",
    "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value is \"change,click\"."
   }
  ]
 },
 "cmp.ui.inputCurrency": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:input",
    "implements": "ui:inputNumberComponent,ui:inputTextComponent",
    "extensible": "true",
    "description": "An input field for entering a currency."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:inputNumberLibrary",
    "property": "inputNumberLibrary"
   }
  ]
 },
 "cmp.ui.inputDate": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:input",
    "implements": "ui:inputDateComponent",
    "extensible": "true",
    "description": "An input field for entering a date."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "placeholder",
    "type": "String",
    "description": "The hint for the date input format. Set during init based on the 'format' value."
   },
   {
    "name": "loadDatePicker",
    "type": "Boolean",
    "default": "true",
    "description": "Set to true to load the date picker. Defaults to 'true'."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   },
   {
    "name": "openPicker",
    "action": "{!c.openDatePicker}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "openPicker",
    "type": "ui:openPicker"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!$Browser.isPhone || $Browser.isTablet}"
   },
   {
    "istrue": "{!v.displayDatePicker}"
   },
   {
    "istrue": "{! v.loadDatePicker }"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ],
  "cmp.ui.datepicker": [
   {
    "aura:id": "datePicker",
    "selectdate": "{!c.setValue}",
    "showtoday": "{!$Browser.isPhone || $Browser.isTablet}"
   }
  ]
 },
 "cmp.ui.inputDateRange": {
  "cmp.aura.component": [
   {
    "support": "BETA",
    "extensible": "true",
    "extends": "ui:input",
    "implements": "ui:inputDateComponent",
    "description": "A component for entering a date range."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "startInputPlaceholder",
    "type": "String",
    "description": "The hint for the start date input. If empty, will be set based on the 'format' value."
   },
   {
    "name": "endInputPlaceholder",
    "type": "String",
    "description": "The hint for the end date input. If empty, will be set based on the 'format' value."
   },
   {
    "name": "startDate",
    "type": "String",
    "description": "Start date in the format yyyy-mm-dd."
   },
   {
    "name": "endDate",
    "type": "String",
    "description": "End date in the format yyyy-mm-dd."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.displayDatePicker}"
   },
   {
    "istrue": "{!v.displayDatePicker}"
   }
  ],
  "cmp.ui.datepicker": [
   {
    "aura:id": "datePicker",
    "selectdate": "{!c.setValue}",
    "hideonselect": "false",
    "showtoday": "false"
   }
  ]
 },
 "cmp.ui.inputDateTime": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:input",
    "implements": "ui:inputDateComponent",
    "extensible": "true",
    "controller": "java://org.auraframework.impl.controller.TimeZoneInfoController",
    "description": "An input field for entering a date and time."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "access": "GLOBAL",
    "description": "The input value of the date/time."
   },
   {
    "name": "placeholder",
    "type": "String",
    "description": "The text that is displayed by default. Set during init based on the 'format' value."
   },
   {
    "name": "timezone",
    "type": "String",
    "description": "The timezone ID, for example, America/Los_Angeles."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   },
   {
    "name": "openPicker",
    "action": "{!c.openDatePicker}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "openPicker",
    "type": "ui:openPicker"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!$Browser.isPhone || $Browser.isTablet}"
   },
   {
    "istrue": "{!and(v.displayDatePicker, !v.disabled)}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ],
  "cmp.ui.datepicker": [
   {
    "aura:id": "datePicker",
    "selectdate": "{!c.setValue}",
    "hastime": "true"
   }
  ]
 },
 "cmp.ui.inputDateTrigger": {
  "cmp.aura.component": [
   {
    "extends": "ui:inputDate",
    "description": "Represents a date input component that can be used with the date picker manager, ui:datePickerManager."
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:showDatePicker",
    "type": "EVENT"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "displayDatePicker",
    "value": "true"
   },
   {
    "attribute": "loadDatePicker",
    "value": "false"
   }
  ]
 },
 "cmp.ui.inputDefaultError": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extensible": "true",
    "implements": "ui:visible",
    "description": "The default implementation of field-level errors, which iterates over the value and displays the message."
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "value",
    "type": "String[]",
    "description": "The list of errors strings to be displayed."
   },
   {
    "name": "errors",
    "type": "Object[]",
    "description": "The list of errors objects to be displayed."
   },
   {
    "name": "domId",
    "type": "String",
    "description": "DOM id of the list of errors. By default, this attribute resolved to the globalId of the component to avoid id collision."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{! !empty(v.value) || !empty(v.errors)}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.value}",
    "var": "message"
   },
   {
    "items": "{!v.errors}",
    "var": "error"
   }
  ]
 },
 "cmp.ui.inputEmail": {
  "cmp.aura.component": [
   {
    "extends": "ui:input",
    "implements": "ui:inputTextComponent",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Represents an input field for entering an email address."
   }
  ]
 },
 "cmp.ui.inputFile": {
  "cmp.aura.component": [
   {
    "extends": "ui:input",
    "extensible": "true",
    "support": "PROTO",
    "description": "An HTML input element for specifying or uploading a file."
   }
  ],
  "cmp.ui.underconstruction": [
   {}
  ]
 },
 "cmp.ui.inputNumber": {
  "cmp.aura.component": [
   {
    "extends": "ui:input",
    "implements": "ui:inputNumberComponent,ui:inputTextComponent",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "An input field for entering a number, taking advantage of client input assistance and validation when available."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:inputNumberLibrary",
    "property": "inputNumberLibrary"
   }
  ]
 },
 "cmp.ui.inputOption": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extends": "ui:input",
    "implements": "ui:inputBaseOption",
    "provider": "java://org.auraframework.component.ui.InputOptionProvider",
    "support": "GA",
    "description": "An abstract component for input options with type checkbox, radio, or selectOption."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "type",
    "type": "String",
    "default": "selectOption",
    "description": "The input type. Default value is “selectOption”. Possible values: checkbox, radio, selectOption."
   }
  ]
 },
 "cmp.ui.inputPercent": {
  "cmp.aura.component": [
   {
    "extends": "ui:input",
    "implements": "ui:inputNumberComponent,ui:inputTextComponent",
    "extensible": "true",
    "support": "GA",
    "description": "An input field for entering a percentage."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:inputNumberLibrary",
    "property": "inputNumberLibrary"
   }
  ]
 },
 "cmp.ui.inputPhone": {
  "cmp.aura.component": [
   {
    "extends": "ui:input",
    "implements": "ui:inputTextComponent",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Represents an input field for entering a telephone number."
   }
  ]
 },
 "cmp.ui.inputRadio": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:input",
    "implements": "ui:inputBaseOption",
    "extensible": "true",
    "description": "The radio button used in the input."
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "disabled",
    "type": "Boolean",
    "default": "false",
    "description": "Specifies whether this radio button should be displayed in a disabled state. Disabled radio buttons can't be clicked. Default value is \"false\"."
   }
  ]
 },
 "cmp.ui.inputRange": {
  "cmp.aura.component": [
   {
    "extends": "ui:inputNumber",
    "extensible": "true",
    "support": "BETA",
    "description": "The range used in the input."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "min",
    "type": "Integer",
    "default": "0",
    "description": "Specifies the minimum integer allowed. Default value is “0”."
   },
   {
    "name": "max",
    "type": "Integer",
    "default": "100",
    "description": "Specifies the maximum integer allowed. Default value is “100”."
   },
   {
    "name": "step",
    "type": "Integer",
    "default": "1",
    "description": "Specifies the allowed integer intervals. Default value is “1”."
   },
   {
    "name": "value",
    "type": "Integer",
    "default": "0",
    "description": "The input value of the integer."
   }
  ]
 },
 "cmp.ui.inputRichText": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:inputTextArea",
    "extensible": "true",
    "description": "An input field for entering rich text."
   }
  ],
  "cmp.aura.clientlibrary": [
   {
    "name": "CkEditor",
    "type": "JS"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "toolbar",
    "type": "String",
    "default": "basic",
    "description": "Specify the toolbar config to be used. Possible values: standard, full, email and custom. Default value is \"basic\". Custom config can be added in inputRichTextHelper"
   },
   {
    "name": "customToolbarConfig",
    "type": "Object",
    "description": "A custom configuration for the toolbar"
   },
   {
    "name": "toolbarLocation",
    "type": "String",
    "default": "top",
    "description": "Location of the toolbar. Possible options are \"top\" and \"bottom\"."
   },
   {
    "access": "GLOBAL",
    "name": "width",
    "type": "String",
    "description": "The editor UI outer width. This can be an integer, for pixel sizes, or any CSS-defined unit. If isRichText is set to false, use the cols attribute instead."
   },
   {
    "access": "GLOBAL",
    "name": "height",
    "type": "String",
    "default": "200",
    "description": "The height of the editing area (that includes the editor content). This can be an integer, for pixel sizes, or any CSS-defined length unit."
   },
   {
    "name": "isRichText",
    "type": "Boolean",
    "default": "true",
    "description": "Indicates if the input is in rich text or plain text. If set to false, a text area replaces the rich text editor."
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "ui:toggleRichText",
    "action": "{!c.toggle}",
    "description": "Handler for ui:toggleRichText event"
   }
  ]
 },
 "cmp.ui.inputSearch": {
  "cmp.aura.component": [
   {
    "extends": "ui:input",
    "implements": "ui:inputTextComponent",
    "extensible": "true",
    "support": "GA",
    "description": "This component displays an input field suitable for entering a search string."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "updateOn",
    "type": "String",
    "default": "search,change",
    "description": "Updates the component's value binding if the updateOn attribute is set to the handled event. Default value for ui:inputSearch is \"search\"."
   },
   {
    "name": "type",
    "type": "String",
    "default": "search",
    "description": "The input type of the string. Default value is \"search\"."
   },
   {
    "name": "placeholder",
    "type": "String",
    "default": "Search",
    "description": "Text that is displayed when the field is empty, to prompt the user for a valid search string. Default value is \"Search\"."
   },
   {
    "name": "showClear",
    "type": "Boolean",
    "default": "false",
    "description": "Boolean value indicate if we should show the search clear button. Default value is \"false\"."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "search",
    "type": "ui:searchEvent",
    "description": "The event fired when the user runs a search."
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.showClear}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "clearSearchTermButton",
    "class": "{!v.value ? 'clear' : 'hide clear'}",
    "label": "clear",
    "labeldisplay": "false",
    "press": "{!c.clearSearchTerm}"
   }
  ]
 },
 "cmp.ui.inputSecret": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:input",
    "implements": "ui:inputTextComponent",
    "extensible": "true",
    "description": "An input field for entering secret text with type password."
   }
  ]
 },
 "cmp.ui.inputSelect": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:input",
    "extensible": "true",
    "description": "Represents a drop-down list with options."
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "options",
    "type": "List",
    "description": "A list of aura.components.ui.InputOption."
   },
   {
    "name": "name",
    "type": "String",
    "description": "The name of the component."
   },
   {
    "access": "GLOBAL",
    "name": "multiple",
    "type": "Boolean",
    "default": "false",
    "description": "Specifies whether the input is a multiple select. Default value is “false”."
   },
   {
    "name": "size",
    "type": "Integer",
    "default": "1",
    "description": "The number of options displayed at one time. Default value is “1”."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   },
   {
    "name": "change",
    "value": "{!v.value}",
    "action": "{!c.valueChange}"
   },
   {
    "name": "change",
    "value": "{!v.options}",
    "action": "{!c.optionsChange}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!and(v.options.length eq 0, v.body.length gt 0)}"
   }
  ]
 },
 "cmp.ui.inputSelectOption": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:interactive",
    "implements": "ui:inputBaseOption",
    "extensible": "true",
    "description": "An HTML option element that is nested in a <ui:inputSelect> element. Denotes the available options in the list."
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.label == '' || v.label == null || v.label == undefined}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.inputSelectOptionGroup": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "GA",
    "description": "An HTML optgroup element that groups related options in a <ui:inputSelect> element."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String",
    "description": "The CSS style used to display the option group."
   },
   {
    "name": "label",
    "type": "String",
    "description": "The text displayed on the option group."
   }
  ]
 },
 "cmp.ui.inputText": {
  "cmp.aura.component": [
   {
    "extends": "ui:input",
    "implements": "ui:inputTextComponent",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Represents an input field suitable for entering a single line of free-form text."
   }
  ]
 },
 "cmp.ui.inputTextArea": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:input",
    "extensible": "true",
    "description": "An HTML textarea element that can be editable or read-only. Scroll bars may not appear on Chrome browsers in Android devices, but you can select focus in the textarea to activate scrolling."
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "rows",
    "type": "Integer",
    "default": "2",
    "description": "The height of the text area, which is defined by the number of rows to display at a time. Default value is “2”."
   },
   {
    "access": "GLOBAL",
    "name": "cols",
    "type": "Integer",
    "default": "20",
    "description": "The width of the text area, which is defined by the number of characters to display in a single row at a time. Default value is “20”."
   },
   {
    "access": "GLOBAL",
    "name": "readonly",
    "type": "Boolean",
    "default": "false",
    "description": "Specifies whether the text area should be rendered as read-only. Default value is “false”."
   },
   {
    "access": "GLOBAL",
    "name": "placeholder",
    "type": "String",
    "default": "",
    "description": "The text that is displayed by default."
   },
   {
    "access": "GLOBAL",
    "name": "resizable",
    "type": "Boolean",
    "default": "true",
    "description": "Specifies whether or not the textarea should be resizable.  Defaults to true."
   },
   {
    "access": "GLOBAL",
    "name": "maxlength",
    "type": "Integer",
    "description": "The maximum number of characters that can be typed into the input field. Corresponds to the maxlength attribute of the rendered HTML textarea element."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.value}",
    "action": "{!c.valueChange}"
   }
  ]
 },
 "cmp.ui.inputTextAreaForAutocomplete": {
  "cmp.aura.component": [
   {
    "extends": "ui:inputTextArea",
    "extensible": "true",
    "support": "proto",
    "description": "This component is used as input text area in a ui:autocomplete component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "autocompleteButton",
    "type": "Aura.Component[]",
    "description": "Optional button to render with this component."
   },
   {
    "name": "ariaExpanded",
    "type": "String",
    "default": "false",
    "description": "Whether the autocomplete list is expanded"
   },
   {
    "name": "ariaActiveDescendant",
    "type": "String",
    "default": "",
    "description": "The ID of the active descendant option"
   }
  ]
 },
 "cmp.ui.inputTextForAutocomplete": {
  "cmp.aura.component": [
   {
    "extends": "ui:input",
    "implements": "ui:inputTextComponent",
    "extensible": "true",
    "support": "proto",
    "description": "This component is used as input text in a ui:autocomplete component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "autocompleteButton",
    "type": "Aura.Component[]",
    "description": "Optional button to render with this component."
   },
   {
    "name": "ariaExpanded",
    "type": "String",
    "default": "false",
    "description": "Whether the autocomplete list is expanded"
   },
   {
    "name": "ariaActiveDescendant",
    "type": "String",
    "default": "",
    "description": "The ID of the active descendant option"
   }
  ]
 },
 "cmp.ui.inputURL": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:input",
    "implements": "ui:inputTextComponent",
    "extensible": "true",
    "description": "An input field for entering a URL."
   }
  ]
 },
 "cmp.ui.interactive": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "abstract": "true",
    "implements": "ui:visible",
    "description": "An abstract component which capsulates common events.",
    "support": "GA"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "disabled",
    "type": "Boolean",
    "access": "GLOBAL",
    "default": "false",
    "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\"."
   },
   {
    "name": "disableDoubleClicks",
    "type": "Boolean",
    "default": "false",
    "description": "Disables double clicking the component within 350ms"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "blur",
    "type": "ui:blur",
    "access": "GLOBAL",
    "description": "The event fired when the user moves off from the component."
   },
   {
    "name": "focus",
    "type": "ui:focus",
    "access": "GLOBAL",
    "description": "The event fired when the user focuses on the component."
   },
   {
    "name": "keydown",
    "type": "ui:keydown",
    "access": "GLOBAL",
    "description": "The event fired when the user presses a keyboard key on the component."
   },
   {
    "name": "keypress",
    "type": "ui:keypress",
    "access": "GLOBAL",
    "description": "The event fired when the user presses or holds down a keyboard key on the component."
   },
   {
    "name": "keyup",
    "type": "ui:keyup",
    "access": "GLOBAL",
    "description": "The event fired when the user releases a keyboard key on the component."
   },
   {
    "name": "select",
    "type": "ui:select",
    "access": "GLOBAL",
    "description": "The event fired when the user selects some text."
   }
  ]
 },
 "cmp.ui.label": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "The label displayed on an input component. To bind a label to an input component, use the for attribute."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String",
    "description": "The text of the label."
   },
   {
    "name": "title",
    "type": "String",
    "description": "The text displayed in a tooltip when the mouse pointer hovers over the button."
   },
   {
    "name": "class",
    "type": "String",
    "description": "A CSS style to be attached to the label."
   },
   {
    "name": "labelDisplay",
    "default": "true",
    "type": "Boolean",
    "description": "Specifies whether the label is displayed. If not, we add a hidden text for accessibility purpose."
   },
   {
    "name": "for",
    "type": "Object",
    "description": "Specified to indicate a component with which the label is to be associated. This attribute can accept raw string, localId, globalId, or the component object. If the value is resolved to a component, the global id of the component will be used in the output."
   },
   {
    "name": "requiredIndicator",
    "type": "Aura.Component[]",
    "description": "A component that displays the indicator for the required field. "
   }
  ]
 },
 "cmp.ui.list": {
  "cmp.aura.component": [
   {
    "extends": "ui:abstractList",
    "support": "proto",
    "description": "A list component that iterates over and displays the items in the ui:dataProvider component."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.items}",
    "var": "{!v.itemVar}",
    "template": "{!v.itemTemplate}",
    "iterationcomplete": "{!c.iterationComplete}"
   }
  ]
 },
 "cmp.ui.listSorter": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "This component provides the user selected items with sort order based on the data from the data provider."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "dataProvider",
    "type": "Aura.Component[]",
    "description": "A list of data provider components. Use a ui:dataProvider component to provide list data."
   },
   {
    "name": "class",
    "type": "String",
    "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component."
   },
   {
    "name": "title",
    "type": "String",
    "default": "Sort",
    "description": "The title of this component."
   },
   {
    "name": "cancelLabel",
    "type": "String",
    "default": "Cancel",
    "description": "The label for the cancel button."
   },
   {
    "name": "applyLabel",
    "type": "String",
    "default": "Apply",
    "description": "The label for the apply button."
   },
   {
    "name": "visible",
    "type": "Boolean",
    "default": "false",
    "description": "Controls the visibility of the component."
   },
   {
    "name": "items",
    "type": "Object[]",
    "description": "An array of arbitrary map objects representing the rows of data in the list."
   },
   {
    "name": "defaultSelectedItems",
    "type": "Object",
    "description": "Default selected row item."
   },
   {
    "name": "triggerLabel",
    "type": "String",
    "description": "The text displayed on the trigger component."
   },
   {
    "name": "ascendingLabel",
    "type": "String",
    "default": "Ascending",
    "description": "Assistive text label for the ascending button"
   },
   {
    "name": "descendingLabel",
    "type": "String",
    "default": "Descending",
    "description": "Assistive text label for the descending button"
   },
   {
    "name": "trigger",
    "type": "Aura.Component[]",
    "description": "Trigger component"
   },
   {
    "name": "modal",
    "type": "Boolean",
    "default": "true",
    "description": "Determines whether the component is a modal dialog."
   },
   {
    "name": "rowVar",
    "type": "String",
    "description": "The name by which to refer to the current data object inside of the sorter for each sorter row."
   },
   {
    "name": "rowDef",
    "type": "Aura.ComponentDefRef[]",
    "description": "Component definition to use for each row in the list sorter"
   },
   {
    "name": "onApply",
    "type": "Aura.Action",
    "description": "The action invoked when the user click on the apply button. The selected items are passed in as the argument. If the sort order is descending, the prefix '-' is appended to the the item."
   },
   {
    "name": "onOpen",
    "type": "Aura.Action",
    "description": "The action invoked when the user click on the trigger to open the sorter component."
   },
   {
    "name": "onCancel",
    "type": "Aura.Action",
    "description": "The action invoked when the user click on the cancel button or hit ESC key to close the listSorter component."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "refresh",
    "type": "ui:refresh"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.visible}",
    "action": "{!c.onVisible}"
   },
   {
    "name": "refresh",
    "action": "{!c.refresh}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:menuTriggerLink",
    "type": "COMPONENT"
   }
  ],
  "cmp.ui.menu": [
   {
    "aura:id": "sorterMenu",
    "class": "sorterMenu"
   }
  ],
  "cmp.ui.menulist": [
   {
    "aura:id": "sorterMenuList",
    "manualposition": "{!modal ? false : true}",
    "closeontabkey": "false",
    "visible": "{!v.visible}",
    "class": "sorterMenuList scrollable",
    "menuselect": "{!c.onMenuSelected}",
    "menuexpand": "{!c.onMenuExpand}",
    "menucollapse": "{!c.onMenuCollapse}",
    "closeonclickoutside": "false"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.items}",
    "var": "{!v.rowVar}",
    "body": "{!v.rowDef}",
    "iterationcomplete": "{!c.iterationComplete}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.modal}"
   }
  ]
 },
 "cmp.ui.listView": {
  "cmp.aura.component": [
   {
    "implements": "ui:elementInterface",
    "extensible": "true",
    "support": "GA",
    "description": "Deprecated. A column based listview with comprehensive event support."
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "ui:listView*"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "id",
    "type": "String",
    "default": "default",
    "description": "The unique id of the listview instance."
   },
   {
    "name": "alternateRowClass",
    "type": "String",
    "required": "false",
    "description": "Optional. The css class to use for alternating rows."
   },
   {
    "name": "blockSize",
    "type": "Integer",
    "default": "50",
    "description": "The size of the initial block of rows to render."
   },
   {
    "name": "columns",
    "type": "List",
    "description": "Read-only. Gets the list of column components that are generated based on the supplied or generated column templates."
   },
   {
    "name": "dataColumns",
    "type": "List",
    "description": "Read-only. Gets the list of column components corresponding to the fields describing data that are generated based on the supplied or generated column templates."
   },
   {
    "name": "dataTemplates",
    "type": "List",
    "description": "Read-only. Gets the list of specified or generated column templates corresponding to the fields describing data."
   },
   {
    "name": "emptyMessage",
    "type": "String",
    "default": "No records to display.",
    "description": "The message to display when no items are specified."
   },
   {
    "name": "footer",
    "type": "Aura.Component[]",
    "description": "Optional. A facet wherein to specify tfoot level components. Care should be taken to match the columns described in dataColumns."
   },
   {
    "name": "items",
    "type": "List",
    "description": "Gets or sets the list of items to display in the listView."
   },
   {
    "name": "rowClass",
    "type": "String",
    "description": "Optional. The css class to use for rows."
   },
   {
    "name": "rowTooltip",
    "type": "String",
    "description": "The tooltip to display when hovering over rows. Accepts delayed attribute expansion of the form {#v.item}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "oncolumnsready",
    "type": "ui:listViewEvent",
    "description": "The event that fires when all column templates have been processed and the columns, dataColumns and dataTemplates attributes are all available."
   },
   {
    "name": "onitemsready",
    "type": "ui:listViewEvent",
    "description": "The event that fires when all item rows have been processed, column types instantiated, data formatters run, and the corresponding component trees have been generated."
   },
   {
    "name": "oncellclick",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell is clicked."
   },
   {
    "name": "onheaderclick",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell is clicked."
   },
   {
    "name": "onrowclick",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row is clicked."
   },
   {
    "name": "onclick",
    "type": "ui:listViewEvent",
    "description": "The event that fires when the table is clicked."
   },
   {
    "name": "oncelldblclick",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell is double clicked."
   },
   {
    "name": "onheaderdblclick",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell is double clicked."
   },
   {
    "name": "onrowdblclick",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row is double clicked."
   },
   {
    "name": "ondblclick",
    "type": "ui:listViewEvent",
    "description": "The event that fires when the table is double clicked."
   },
   {
    "name": "oncellmousedown",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell mousedown occurs."
   },
   {
    "name": "onheadermousedown",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell mousedown occurs."
   },
   {
    "name": "onrowmousedown",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row mousedown occurs."
   },
   {
    "name": "onmousedown",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a table mousedown occurs."
   },
   {
    "name": "oncellmouseup",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell mouseup occurs."
   },
   {
    "name": "onheadermouseup",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell mouseup occurs."
   },
   {
    "name": "onrowmouseup",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row mouseup occurs."
   },
   {
    "name": "onmouseup",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a table mouseup occurs."
   },
   {
    "name": "oncellmouseover",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell mouseover occurs."
   },
   {
    "name": "onheadermouseover",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell mouseover occurs."
   },
   {
    "name": "onrowmouseover",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row mouseover occurs."
   },
   {
    "name": "onmouseover",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a table mouseover occurs."
   },
   {
    "name": "oncellmouseout",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell mouseout occurs."
   },
   {
    "name": "onheadermouseout",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell mouseout occurs."
   },
   {
    "name": "onrowmouseout",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row mouseout occurs."
   },
   {
    "name": "onmouseout",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a table mouseout occurs."
   },
   {
    "name": "oncellkeydown",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell keydown occurs."
   },
   {
    "name": "onheaderkeydown",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell keydown occurs."
   },
   {
    "name": "onrowkeydown",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row keydown occurs."
   },
   {
    "name": "onkeydown",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a table keydown occurs."
   },
   {
    "name": "oncellkeyup",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell keyup occurs."
   },
   {
    "name": "onheaderkeyup",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell keyup occurs."
   },
   {
    "name": "onrowkeyup",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row keyup occurs."
   },
   {
    "name": "onkeyup",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a table keyup occurs."
   },
   {
    "name": "oncellkeypress",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell keypress occurs."
   },
   {
    "name": "onheaderkeypress",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell keypress occurs."
   },
   {
    "name": "onrowkeypress",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row keypress occurs."
   },
   {
    "name": "onkeypress",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a table keypress occurs."
   },
   {
    "name": "oncelltouchstart",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell touchstart occurs."
   },
   {
    "name": "onheadertouchstart",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell touchstart occurs."
   },
   {
    "name": "onrowtouchstart",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row touchstart occurs."
   },
   {
    "name": "ontouchstart",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a table touchstart occurs."
   },
   {
    "name": "oncelltouchmove",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell touchmove occurs."
   },
   {
    "name": "onheadertouchmove",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell touchmove occurs."
   },
   {
    "name": "onrowtouchmove",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row touchmove occurs."
   },
   {
    "name": "ontouchmove",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a table touchmove occurs."
   },
   {
    "name": "oncelltouchend",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a data cell touchend occurs."
   },
   {
    "name": "onheadertouchend",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a header cell touchend occurs."
   },
   {
    "name": "onrowtouchend",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a row touchend occurs."
   },
   {
    "name": "ontouchend",
    "type": "ui:listViewEvent",
    "description": "The event that fires when a table touchend occurs."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.body}",
    "action": "{!c.buildList}"
   },
   {
    "name": "change",
    "value": "{!v.emptyText}",
    "action": "{!c.buildList}"
   },
   {
    "name": "change",
    "value": "{!v.id}",
    "action": "{!c.buildList}"
   },
   {
    "name": "change",
    "value": "{!v.items}",
    "action": "{!c.buildList}"
   },
   {
    "name": "change",
    "value": "{!v.class}",
    "action": "{!c.buildList}"
   }
  ]
 },
 "cmp.ui.listViewColumn": {
  "cmp.aura.component": [
   {
    "implements": "ui:elementInterface,ui:listViewColumnInterface",
    "abstract": "true",
    "extensible": "true",
    "provider": "java://org.auraframework.component.ui.ListViewColumnProvider,js://ui.listViewColumn",
    "support": "GA",
    "description": "An abstract column template component, used to specify column display information in ui:listView."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "column",
    "type": "Object",
    "description": "Read only. Gets the template used to define this column field."
   },
   {
    "name": "index",
    "type": "Integer",
    "description": "Read only. Gets the index of the item being used to populate this column field."
   },
   {
    "name": "item",
    "type": "Object",
    "description": "Read only. Gets the item being used to populate this column field."
   },
   {
    "name": "scope",
    "type": "String",
    "default": "col",
    "description": "Gets or sets the scope of this column field."
   },
   {
    "name": "type",
    "type": "String",
    "description": "The concrete type of the column. Accepted values are 'Checkbox', 'Email', 'Header', 'Html', 'Index', 'Link', 'Text', or any namespaced component descriptor, e.g. ns:CustomColumn."
   }
  ]
 },
 "cmp.ui.listViewColumnCell": {
  "cmp.aura.component": [
   {
    "extends": "ui:listViewColumn",
    "extensible": "true",
    "support": "GA",
    "description": "A simple column template definition, describes a barebones table data cell."
   }
  ]
 },
 "cmp.ui.listViewColumnCheckbox": {
  "cmp.aura.component": [
   {
    "extends": "ui:listViewColumnCell",
    "extensible": "true",
    "support": "GA",
    "description": "A checkbox column template definition, describes a checkbox in a table data cell."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String",
    "default": "",
    "description": "The label text by which to refer to the checkbox."
   },
   {
    "name": "labelClass",
    "type": "String",
    "default": "",
    "description": "The css class to apply to the label element."
   },
   {
    "name": "checked",
    "type": "Boolean",
    "default": "false",
    "description": "The checked state of the checkbox."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "onchange",
    "type": "ui:listViewEvent",
    "description": "The event fired when the checkbox selection is changed."
   }
  ]
 },
 "cmp.ui.listViewColumnEmail": {
  "cmp.aura.component": [
   {
    "extends": "ui:listViewColumnCell",
    "extensible": "true",
    "support": "GA",
    "description": "An email column template definition, describes an email mailto: link reference in a table data cell."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "text",
    "type": "String",
    "default": "",
    "description": "The text of the hyperlink. Defaults to the url provided, if not set."
   },
   {
    "name": "url",
    "type": "String",
    "default": "",
    "description": "The url to link to. Defaults to the body of the component, if not set."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "onclick",
    "type": "ui:listViewEvent",
    "description": "The event that fires when the hyperlink is clicked."
   }
  ]
 },
 "cmp.ui.listViewColumnHeader": {
  "cmp.aura.component": [
   {
    "extends": "ui:listViewColumn",
    "extensible": "true",
    "support": "GA",
    "description": "A simple column template definition, describes a barebones table header cell."
   }
  ]
 },
 "cmp.ui.listViewColumnHtml": {
  "cmp.aura.component": [
   {
    "extends": "ui:listViewColumnCell",
    "extensible": "true",
    "support": "GA",
    "description": "An html column template definition, describes unescaped markup in a table data cell."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "markup",
    "type": "Object",
    "description": "Sets the markup for this cell."
   }
  ],
  "cmp.aura.unescapedhtml": [
   {
    "value": "{!v.markup}"
   }
  ]
 },
 "cmp.ui.listViewColumnIndex": {
  "cmp.aura.component": [
   {
    "extends": "ui:listViewColumnCell",
    "extensible": "true",
    "support": "GA",
    "description": "An index column template definition, describes the (one-based) number of the current item being processed in a table data cell."
   }
  ]
 },
 "cmp.ui.listViewColumnLink": {
  "cmp.aura.component": [
   {
    "extends": "ui:listViewColumnCell",
    "extensible": "true",
    "support": "GA",
    "description": "A link column template definition, describes a hyperlink reference in a table data cell."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "target",
    "type": "String",
    "default": "_self",
    "description": "The name of the target window or frame which the link should navigate into."
   },
   {
    "name": "text",
    "type": "String",
    "default": "",
    "description": "The text of the hyperlink. Defaults to the url provided, if not set."
   },
   {
    "name": "url",
    "type": "String",
    "default": "",
    "description": "The url to link to. Defaults to the body of the component, if not set."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "onclick",
    "type": "ui:listViewEvent",
    "description": "The event that fires when the hyperlink is clicked."
   }
  ]
 },
 "cmp.ui.listViewRow": {
  "cmp.aura.component": [
   {
    "implements": "ui:elementInterface",
    "extensible": "true",
    "support": "GA",
    "description": "A basic row component used by the listView."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "index",
    "type": "Integer",
    "description": "The index of the item currently being processed."
   },
   {
    "name": "item",
    "type": "Object",
    "description": "The item currently being processed."
   }
  ]
 },
 "cmp.ui.manifest": {
  "cmp.aura.component": [
   {
    "template": "auradev:blankTemplate",
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "lastMod",
    "type": "String",
    "default": ""
   },
   {
    "name": "resourceURLs",
    "type": "String",
    "default": ""
   }
  ]
 },
 "cmp.ui.menu": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extensible": "true",
    "implements": "ui:visible",
    "extends": "ui:popup",
    "description": "A dropdown menu list with a trigger that controls its visibility. Need to provide a menuTriggerLink and menuList component."
   }
  ]
 },
 "cmp.ui.menuItem": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extensible": "true",
    "abstract": "true",
    "extends": "ui:interactive",
    "provider": "js://ui.menuItem",
    "description": "A UI menu item in a ui:menuList component."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "menuSelect",
    "type": "ui:menuSelect",
    "description": "The event that is fired when the menu item is selected."
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "selected",
    "type": "Boolean",
    "default": "false",
    "description": "The status of the menu item. True means this menu item is selected; False is not selected."
   },
   {
    "access": "GLOBAL",
    "name": "type",
    "type": "String",
    "description": "The concrete type of the menu item. Accepted values are 'action', 'checkbox', 'radio', 'separator' or any namespaced component descriptor, e.g. ns:xxxxmenuItem."
   },
   {
    "access": "GLOBAL",
    "name": "hideMenuAfterSelected",
    "type": "Boolean",
    "default": "false",
    "description": "Set to true to hide menu after the menu item is selected."
   },
   {
    "access": "GLOBAL",
    "name": "label",
    "type": "String",
    "description": "The text displayed on the component."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "mouseover",
    "action": "{!c.handleMouseover}"
   }
  ]
 },
 "cmp.ui.menuItemSeparator": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extensible": "true",
    "implements": "ui:visible",
    "description": "A menu separator to divide menu items, such as ui:radioMenuItem, and used in a ui:menuList component."
   }
  ]
 },
 "cmp.ui.menuList": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extensible": "true",
    "implements": "ui:visible",
    "extends": "ui:popupTarget",
    "description": "A menu component that can contain menu items: ui:actionMenuItem, ui:checkboxMenuItem, and ui:radioMenuItem, and a separator component ui:menuItemSeparator. This component can be nested in a ui:menu component and can be used together with a ui:menuTriggerLink component, which triggers the menu items."
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "menuItems",
    "type": "List",
    "description": "A list of menu items set explicitly using instances of the Java class: aura.​components.​ui.MenuItem."
   },
   {
    "access": "GLOBAL",
    "name": "visible",
    "type": "Boolean",
    "default": "{!false}",
    "description": "Controls the visibility of the menu. The default is false, which hides the menu."
   },
   {
    "name": "focusItemIndex",
    "type": "Integer",
    "default": "0",
    "description": "The index of the item which should be on focus when the menu displays. 0 means the first item and -1 refers to the last."
   },
   {
    "name": "focusTrigger",
    "type": "Aura.Action",
    "description": "The action is invoked to set focus to the menu trigger."
   },
   {
    "name": "childMenuItems",
    "type": "Aura.Component[]",
    "description": "a read-only attribute pointing to child components."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "access": "GLOBAL",
    "name": "menuCollapse",
    "type": "ui:collapse",
    "description": "The event fired when the menu list collapses."
   },
   {
    "access": "GLOBAL",
    "name": "menuExpand",
    "type": "ui:expand",
    "description": "The event fired when the menu list displays."
   },
   {
    "access": "GLOBAL",
    "name": "menuSelect",
    "type": "ui:menuSelect",
    "description": "The event fired when the user select a menu item."
   },
   {
    "access": "GLOBAL",
    "name": "menuFocusChange",
    "type": "ui:menuFocusChange",
    "description": "The event fired when the menu list focus changed from one menuItem to another menuItem."
   },
   {
    "name": "refresh",
    "type": "ui:refresh",
    "description": "Fire this event to refresh the menuList."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "refresh",
    "action": "{!c.update}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.menuItems}",
    "var": "item"
   }
  ],
  "cmp.ui.menuitem": [
   {
    "aura:id": "item",
    "class": "{!item.className}",
    "disabled": "{!item.disabled}",
    "label": "{!item.label}",
    "selected": "{!item.selected}",
    "type": "{!item.type}",
    "value": "{!item.value}"
   }
  ]
 },
 "cmp.ui.menuTrigger": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extensible": "true",
    "extends": "ui:popupTrigger",
    "description": "A trigger that expands and collapses a menu, used in a ui:menu component."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "access": "GLOBAL",
    "name": "menuTriggerPress",
    "type": "ui:menuTriggerPress",
    "description": "The event that is fired when the trigger is clicked."
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "trigger"
   }
  ]
 },
 "cmp.ui.menuTriggerLink": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extensible": "true",
    "extends": "ui:menuTrigger",
    "description": "A link that triggers a dropdown menu."
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "label",
    "type": "String",
    "description": "The text displayed on the component."
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.body.length == 0}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.message": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extensible": "true",
    "implements": "ui:visible",
    "description": "Represents a message of varying severity levels"
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "title",
    "type": "String",
    "description": "The title text for the message."
   },
   {
    "access": "GLOBAL",
    "name": "severity",
    "type": "String",
    "default": "message",
    "description": "The severity of the message. Possible values:  message (default), confirm, info, warning, error"
   },
   {
    "access": "GLOBAL",
    "name": "closable",
    "type": "Boolean",
    "default": "false",
    "description": "Specifies whether to display an 'x' that will close the alert when clicked. Default value is 'false'."
   }
  ],
  "cmp.ui.block": [
   {}
  ],
  "cmp.aura.set": [
   {
    "attribute": "right"
   },
   {
    "attribute": "left"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.closable}"
   },
   {
    "istrue": "{!v.title && v.title !=''}"
   },
   {
    "istrue": "{!v.body.length > 0}"
   }
  ],
  "cmp.ui.image": [
   {
    "aura:id": "messageIcon",
    "class": "icon",
    "alt": "{!v.severity}"
   }
  ]
 },
 "cmp.ui.modal": {
  "cmp.aura.component": [
   {
    "implements": "ui:panelType",
    "extensible": "true"
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:panelLib",
    "property": "lib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String",
    "description": "The title of the dialog window"
   },
   {
    "name": "titleDisplay",
    "type": "Boolean",
    "default": "true",
    "description": "The title of the window can be shown/hidden for accessibility"
   },
   {
    "name": "class",
    "type": "String",
    "description": "CSS class"
   },
   {
    "name": "startOfDialogLabel",
    "type": "String",
    "default": "Start of Dialog",
    "description": "Accessibility label that indicates the start of the dialog"
   },
   {
    "name": "showCloseButton",
    "type": "Boolean",
    "default": "true",
    "description": "Adds a close button in top right corner of the dialog"
   },
   {
    "name": "closeDialogLabel",
    "type": "String",
    "default": "Close",
    "description": "Close dialog button label"
   },
   {
    "name": "useTransition",
    "type": "Boolean",
    "default": "true",
    "description": "Use css transition when showing or hiding the panel."
   },
   {
    "name": "animation",
    "type": "String",
    "default": "center",
    "description": "Adds animation to the dialog"
   },
   {
    "name": "closeAnimation",
    "type": "String",
    "description": "Adds animation to the dialog"
   },
   {
    "name": "autoFocus",
    "type": "Boolean",
    "default": "true",
    "description": "Sets initial focus on the first item in the panel"
   },
   {
    "name": "closeButton",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "notify",
    "event": "ui:notify",
    "action": "{!c.onNotify}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://aura:unescapedHtml",
    "type": "COMPONENT"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!!empty(v.title)}"
   }
  ]
 },
 "cmp.ui.output": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true",
    "extends": "ui:interactive",
    "description": "The base component of most output components.",
    "support": "GA"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "Object",
    "required": "true",
    "access": "GLOBAL",
    "description": "The value displayed when the output is rendered."
   }
  ]
 },
 "cmp.ui.outputCheckbox": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Displays a checkbox in a checked or unchecked state."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "Boolean",
    "required": "true",
    "access": "GLOBAL",
    "description": "Specifies whether the checkbox is checked."
   },
   {
    "name": "altChecked",
    "type": "String",
    "default": "checkbox checked",
    "access": "GLOBAL",
    "description": "The alternate text description when the checkbox is checked. Default value is “checkbox checked”."
   },
   {
    "name": "altUnchecked",
    "type": "String",
    "default": "checkbox unchecked",
    "access": "GLOBAL",
    "description": "The alternate text description when the checkbox is unchecked. Default value is “checkbox unchecked”."
   }
  ],
  "cmp.ui.image": [
   {
    "class": "{!v.value == true ? v.class + ' checked' : v.class + ' unchecked'}",
    "aura:id": "img1",
    "alt": "{!v.value == true ? v.altChecked : v.altUnchecked}"
   }
  ]
 },
 "cmp.ui.outputCurrency": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "implements": "ui:visible",
    "extensible": "true",
    "description": "Displays the currency in the default or specified format, such as with specific currency code or decimal places."
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "value",
    "type": "Decimal",
    "required": "true",
    "description": "The output value of the currency, which is defined as type Decimal."
   },
   {
    "access": "GLOBAL",
    "name": "format",
    "type": "String",
    "description": "The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the default format based on the browser's locale will be used."
   },
   {
    "access": "GLOBAL",
    "name": "currencyCode",
    "type": "String",
    "description": "The ISO 4217 currency code specified as a String, e.g. “USD”."
   },
   {
    "access": "GLOBAL",
    "name": "currencySymbol",
    "type": "String",
    "description": "The currency symbol specified as a String."
   }
  ]
 },
 "cmp.ui.outputDate": {
  "cmp.aura.component": [
   {
    "implements": "ui:outputDateComponent, ui:visible",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Displays a date in the default or specified format based on the user's locale."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "required": "true",
    "access": "GLOBAL",
    "description": "The output value of the date. It should be a date string in ISO-8601 format (YYYY-MM-DD)."
   }
  ]
 },
 "cmp.ui.outputDateTime": {
  "cmp.aura.component": [
   {
    "implements": "ui:outputDateComponent, ui:visible",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Displays a date, time in a specified or default format based on the user's locale."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "timezone",
    "type": "String",
    "default": "{!$Locale.timezone}",
    "access": "GLOBAL",
    "description": "The timezone ID, for example, America/Los_Angeles."
   },
   {
    "name": "value",
    "type": "String",
    "required": "true",
    "access": "GLOBAL",
    "description": "An ISO8601-formatted string representing a date time."
   }
  ]
 },
 "cmp.ui.outputEmail": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Displays an email address in an HTML anchor (<a>) element. The leading and trailing space are trimmed."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:eventLib",
    "property": "lib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "required": "true",
    "access": "GLOBAL",
    "description": "The output value of the email"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ]
 },
 "cmp.ui.outputLabel": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible",
    "extensible": "true",
    "support": "BETA",
    "description": "Displays an element label as specified by the value attribute."
   }
  ]
 },
 "cmp.ui.outputMultiSelect": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible",
    "extensible": "true",
    "support": "GA",
    "description": "Displays multiple values from a list of options."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String[]",
    "required": "true",
    "description": "An array of string values representing the selected options."
   },
   {
    "name": "delimiter",
    "type": "String",
    "default": "; ",
    "description": "The symbol or character used to separate the selected options. Default value is “; ”."
   }
  ]
 },
 "cmp.ui.outputNumber": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Displays the number in the default or specified format. Supports up to 18 digits before the decimal place."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "Decimal",
    "required": "true",
    "access": "GLOBAL",
    "description": "The number displayed when this component is rendered."
   },
   {
    "name": "format",
    "type": "String",
    "access": "GLOBAL",
    "description": "The format of the number. For example, format=“.00” displays the number followed by two decimal places. If not specified, the Locale default format will be used."
   }
  ]
 },
 "cmp.ui.outputPercent": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible",
    "extensible": "true",
    "support": "GA",
    "description": "Displays the percentage in the default or specified format with the user's locale."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "Decimal",
    "required": "true",
    "description": "The percentage displayed when this component is rendered."
   },
   {
    "name": "format",
    "type": "String",
    "description": "The format of the percent of type String."
   },
   {
    "name": "valueScale",
    "type": "Integer",
    "default": "0",
    "description": "Displays the result output, multiplying the value attribute with (10^valueScale) * 100%."
   }
  ]
 },
 "cmp.ui.outputPhone": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "implements": "ui:visible",
    "extensible": "true",
    "support": "GA",
    "description": "Displays the phone number in a URL link format."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:eventLib",
    "property": "lib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "value",
    "type": "String",
    "required": "true",
    "description": "The phone number displayed when this component is rendered."
   }
  ]
 },
 "cmp.ui.outputRadio": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible",
    "extensible": "true",
    "support": "PROTO",
    "description": "Displays a radio button based on the value attribute."
   }
  ],
  "cmp.ui.underconstruction": [
   {}
  ]
 },
 "cmp.ui.outputRichText": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "implements": "ui:visible",
    "extensible": "true",
    "description": "Displays richly-formatted text including tags such as paragraph, image, and hyperlink, as specified in the value attribute."
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "value",
    "type": "String",
    "description": "The richly-formatted text used for output."
   },
   {
    "name": "supportedTags",
    "type": "String",
    "description": "A list of supported HTML tag names separated by comma; the list is stored in the helper file of this component. Certain tags, such as <script>, are removed. The default value is used if it is not specified."
   }
  ],
  "cmp.aura.unescapedhtml": [
   {
    "value": "{!v.value}"
   }
  ]
 },
 "cmp.ui.outputSelect": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible",
    "extensible": "true",
    "support": "GA",
    "description": "Displays a list of options based on the value attribute."
   }
  ]
 },
 "cmp.ui.outputText": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible",
    "extensible": "true",
    "support": "GA",
    "access": "GLOBAL",
    "description": "Displays text as specified by the value attribute."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:eventLib",
    "property": "lib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "required": "true",
    "access": "GLOBAL",
    "description": "The text displayed when this component is rendered."
   }
  ]
 },
 "cmp.ui.outputTextArea": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "implements": "ui:visible",
    "extensible": "true",
    "description": "Displays the text area as specified by the value attribute."
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "value",
    "type": "String",
    "required": "true",
    "description": "The text to display."
   }
  ]
 },
 "cmp.ui.outputURL": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "implements": "ui:visible",
    "extensible": "true",
    "description": "Displays a link to a URL as specified by the value attribute, rendered on a given text (label attribute) and image, if any."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:eventLib",
    "property": "lib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "iconClass",
    "type": "String",
    "description": "The CSS style used to display the icon or image."
   },
   {
    "access": "GLOBAL",
    "name": "title",
    "type": "String",
    "default": "",
    "description": "The text to display as a tooltip when the mouse pointer hovers over this component."
   },
   {
    "access": "GLOBAL",
    "name": "value",
    "type": "String",
    "required": "true",
    "description": "The text displayed when this component is rendered."
   },
   {
    "access": "GLOBAL",
    "name": "target",
    "type": "String",
    "description": "The target destination where this rendered component is displayed. Possible values: _blank, _parent, _self, _top"
   },
   {
    "access": "GLOBAL",
    "name": "alt",
    "type": "String",
    "description": "The alternate text description for image (used when there is no label)"
   },
   {
    "access": "GLOBAL",
    "name": "label",
    "type": "String",
    "description": "The text displayed on the component."
   },
   {
    "access": "GLOBAL",
    "name": "disabled",
    "type": "Boolean",
    "default": "false",
    "description": "Specifies whether the component should be displayed in a disabled state. Default value is \"false\"."
   },
   {
    "name": "stopPropagation",
    "type": "Boolean",
    "default": "false",
    "description": "Prevents the click event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event."
   },
   {
    "name": "fixURL",
    "type": "Boolean",
    "default": "false",
    "description": "If true prepends 'http://' to links that don't specify a protocol nor start with '/'"
   },
   {
    "name": "stopNavigation",
    "type": "Boolean",
    "default": "false",
    "description": "Prevents navigation to specified URL on click if true."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "click",
    "type": "ui:click",
    "access": "GLOBAL",
    "description": "The event fired when the user clicks on the component."
   }
  ]
 },
 "cmp.ui.pager": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible, ui:pagingInterface",
    "abstract": "true",
    "extensible": "true",
    "provider": "java://org.auraframework.component.ui.PagerProvider,js://ui.pager",
    "support": "GA",
    "description": "An abstract pager component, used to specify common behavior across implementations."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "onPageChange",
    "type": "ui:pagerEvent",
    "description": "The event that is fired when a concrete pager triggers a paging event."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.updateCalculatedFields}"
   },
   {
    "name": "change",
    "value": "{!v.currentPage}",
    "action": "{!c.updateCalculatedFields}"
   },
   {
    "name": "change",
    "value": "{!v.pageSize}",
    "action": "{!c.updateCalculatedFields}"
   },
   {
    "name": "change",
    "value": "{!v.totalItems}",
    "action": "{!c.updateCalculatedFields}"
   }
  ]
 },
 "cmp.ui.pagerJumpToPage": {
  "cmp.aura.component": [
   {
    "extends": "ui:pager",
    "extensible": "true",
    "support": "GA",
    "description": "A pager implementation that allows the user to navigate to any page between 1 and pageCount."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "Labels_Page",
    "type": "String",
    "default": "Page ",
    "description": "The text to display in the label before the page input."
   },
   {
    "name": "Labels_Of",
    "type": "String",
    "default": " of ",
    "description": "The text to display in the label between the page input and pageCount."
   }
  ]
 },
 "cmp.ui.pagerNextPrevious": {
  "cmp.aura.component": [
   {
    "extends": "ui:pager",
    "extensible": "true",
    "support": "GA",
    "description": "A pager implementation that allows the user to navigate sequentially between pages or jump to the first or last page."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "Labels_First",
    "type": "String",
    "default": "First",
    "description": "The text to display in the label of the link used to jump to the first page."
   },
   {
    "name": "Labels_Last",
    "type": "String",
    "default": "Last",
    "description": "The text to display in the label of the link used to jump to the last page."
   },
   {
    "name": "Labels_Next",
    "type": "String",
    "default": "Next",
    "description": "The text to display in the label of the link used to jump to the next page."
   },
   {
    "name": "Labels_Previous",
    "type": "String",
    "default": "Previous",
    "description": "The text to display in the label of the link used to jump to the previous page."
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.currentPage le 1}"
   },
   {
    "istrue": "{!v.currentPage le 1}"
   },
   {
    "istrue": "{!v.currentPage == v.pageCount}"
   },
   {
    "istrue": "{!v.currentPage == v.pageCount}"
   }
  ]
 },
 "cmp.ui.pagerPageInfo": {
  "cmp.aura.component": [
   {
    "extends": "ui:pager",
    "extensible": "true",
    "support": "GA",
    "description": "A purely presentational pager implementation, used to display the current and total items."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "Labels_Of",
    "type": "String",
    "default": " of ",
    "description": "The text to display between the endItem and totalItems."
   },
   {
    "name": "Labels_To",
    "type": "String",
    "default": " - ",
    "description": "The text to display between the startItem and endItem."
   }
  ]
 },
 "cmp.ui.pagerPageSize": {
  "cmp.aura.component": [
   {
    "extends": "ui:pager",
    "extensible": "true",
    "support": "GA",
    "description": "A pager implementation that allows the user to change the size of pages in items."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "Labels_All",
    "type": "String",
    "default": "All",
    "description": "The text to display in the option to show all items."
   },
   {
    "name": "Labels_Records",
    "type": "String",
    "default": "Records per page: ",
    "description": "The text to display in the label before the pageSize input."
   }
  ],
  "cmp.ui.inputselect": [
   {
    "label": "{!v.Labels_Records}",
    "value": "{!v.pageSize}",
    "change": "{!c.changePageSize}"
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "label": "10",
    "text": "10"
   },
   {
    "label": "25",
    "text": "25"
   },
   {
    "label": "50",
    "text": "50"
   },
   {
    "label": "100",
    "text": "100"
   },
   {
    "label": "200",
    "text": "200"
   }
  ]
 },
 "cmp.ui.panel": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:panelType",
    "description": "A panel for dialogs. Use only one instance of ui:panelManager to manage your modal or non-modal dialogs."
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:panelLib",
    "property": "lib"
   },
   {
    "library": "ui:panelPositioningLib",
    "property": "positioningLib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String",
    "description": "The title of the dialog window"
   },
   {
    "name": "class",
    "type": "String",
    "description": "CSS class"
   },
   {
    "name": "titleDisplay",
    "type": "Boolean",
    "default": "true",
    "description": "The title of the window can be shown/hidden for accessibility"
   },
   {
    "name": "startOfDialogLabel",
    "type": "String",
    "default": "Start of Dialog",
    "description": "Accessibility label that indicates the start of the dialog"
   },
   {
    "name": "closeOnClickOut",
    "type": "Boolean",
    "default": "false",
    "description": "Adds a listener to close the dialog when a user clicks outside the dialog"
   },
   {
    "name": "closeAction",
    "type": "Object",
    "description": "Overrides default close action (which is destroy) on click outside, tab out and Esc key press. The action is called with two parameters: panel component and one of 'closeOnEsc', 'closeOnTabOut' or 'closeOnClickOut'"
   },
   {
    "name": "showCloseButton",
    "type": "Boolean",
    "default": "true",
    "description": "Adds a close button in top right corner of the dialog"
   },
   {
    "name": "closeDialogLabel",
    "type": "String",
    "default": "Close",
    "description": "Close dialog button label"
   },
   {
    "name": "useTransition",
    "type": "Boolean",
    "default": "true",
    "description": "Use css transition when showing or hiding the panel"
   },
   {
    "name": "animation",
    "type": "String",
    "default": "bottom",
    "description": "Adds animation to the dialog"
   },
   {
    "name": "closeAnimation",
    "type": "String",
    "description": "Adds a different animation for closing the panel"
   },
   {
    "name": "autoFocus",
    "type": "Boolean",
    "default": "true",
    "description": "Sets the panel as the first focusable element"
   },
   {
    "name": "referenceElementSelector",
    "type": "String",
    "description": "A selector representing the reference element to position relative to. If the selector resolves to mutiple elements the first one will be used."
   },
   {
    "name": "referenceElement",
    "type": "Object",
    "description": "The reference node to which this dialog should be positioned."
   },
   {
    "name": "direction",
    "type": "String",
    "default": "north",
    "description": "The direction to position the panel"
   },
   {
    "name": "showPointer",
    "type": "Boolean",
    "default": "false",
    "description": "Show a pointer that points to the referenceElement"
   },
   {
    "name": "closeButton",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "notify",
    "event": "ui:notify",
    "action": "{!c.onNotify}",
    "description": "Enables panel manager and panels to communicate"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://aura:unescapedHtml",
    "type": "COMPONENT"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!!empty(v.title)}"
   },
   {
    "istrue": "{!v.showPointer}"
   }
  ]
 },
 "cmp.ui.panelDialog": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "A panel for dialogs. Use only one instance of ui:panelManager to manage your modal or non-modal dialogs."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "closeOnClickOut",
    "type": "Boolean",
    "default": "false",
    "description": "Adds a listener to close the dialog when a user clicks outside the dialog"
   },
   {
    "name": "showCloseButton",
    "type": "Boolean",
    "default": "true",
    "description": "Adds a close button in top right corner of the dialog"
   },
   {
    "name": "closeAction",
    "type": "Aura.Action",
    "default": "{!c.hide}",
    "description": "Close Aura Action function"
   },
   {
    "name": "class",
    "type": "String",
    "default": "",
    "description": "Adds CSS classes to the dialog"
   },
   {
    "name": "animation",
    "type": "String",
    "default": "bottom",
    "description": "Adds animation to the dialog"
   },
   {
    "name": "title",
    "type": "String",
    "description": "The title of the dialog window"
   },
   {
    "name": "startOfDialogLabel",
    "type": "String",
    "default": "Start of Dialog",
    "description": "Accessibility label that indicates the start of the dialog"
   },
   {
    "name": "closeDialogLabel",
    "type": "String",
    "default": "Close",
    "description": "Close dialog button label"
   },
   {
    "name": "detail",
    "type": "String",
    "description": "The description of the dialog window"
   },
   {
    "name": "icon",
    "type": "Aura.Component[]",
    "description": "The icon for the dialog"
   },
   {
    "name": "isVisible",
    "type": "Boolean",
    "default": "false",
    "description": "Displays dialog on render"
   },
   {
    "name": "autoFocus",
    "type": "Boolean",
    "default": "true",
    "description": "Focuses automatically on the first focusable element"
   },
   {
    "name": "titleDisplay",
    "type": "Boolean",
    "default": "true",
    "description": "The title of the window can be shown/hidden for accessibility"
   },
   {
    "name": "isTransient",
    "type": "Boolean",
    "default": "true",
    "description": "Indicates if the dialog is one-time use and should be destroyed when hidden"
   },
   {
    "name": "isModal",
    "type": "Boolean",
    "default": "false",
    "description": "Indicates if this dialog is modal"
   },
   {
    "name": "referenceElement",
    "type": "Object",
    "description": "The reference node to which this dialog should be positioned"
   },
   {
    "name": "callbacks",
    "type": "Object",
    "description": "Option callbacks that can be set when creating a new panel through the panelManager."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "panelDoneRendering",
    "type": "ui:panelDoneRendering"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:panelTransitionBegin",
    "type": "EVENT"
   },
   {
    "resource": "markup://ui:panelTransitionEnd",
    "type": "EVENT"
   },
   {
    "resource": "markup://ui:updateSize",
    "type": "EVENT"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.isModal}"
   },
   {
    "istrue": "{!v.showCloseButton}"
   }
  ],
  "cmp.ui.header": [
   {
    "class": "titleBar modalWindow"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{! v.title != '' && v.title != null}"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "closeBtn",
    "press": "{!c.close}",
    "label": "{!v.closeDialogLabel}",
    "buttontitle": "{!v.closeDialogLabel}",
    "labeldisplay": "false"
   }
  ]
 },
 "cmp.ui.panelManager": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "A panel manager that instantiates and handles panels."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String",
    "default": "one",
    "description": "The class that's added to the div tag of the panel container."
   },
   {
    "name": "cancelButtonLabel",
    "type": "String",
    "default": "Cancel",
    "description": "The label on the Cancel button on an overlay panel. The default label is Cancel."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "event": "ui:openPanel",
    "action": "{!c.openPanel}",
    "description": "The event fired when a panel is opened."
   },
   {
    "event": "ui:closePanel",
    "action": "{!c.closePanel}",
    "description": "The event fired when a panel is closed."
   },
   {
    "event": "ui:updatePanel",
    "action": "{!c.updatePanel}",
    "description": "The event fired when a panel is updated."
   },
   {
    "event": "ui:panelTransitionBegin",
    "action": "{!c._onPanelTransitionBegin}",
    "description": "The event fired when a panel transition is started."
   },
   {
    "event": "ui:panelTransitionEnd",
    "action": "{!c._onPanelTransitionEnd}",
    "description": "The event fired when a panel transition is ended."
   },
   {
    "event": "ui:panelDestroy",
    "action": "{!c.destroyAllPanels}",
    "description": "The event fired when all panels are destroyed from the DOM."
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:panelDialog"
   },
   {
    "resource": "markup://ui:hidePanel",
    "type": "EVENT"
   },
   {
    "resource": "markup://ui:button",
    "type": "COMPONENT"
   }
  ]
 },
 "cmp.ui.panelManager2": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "Panel manager 2"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "registeredPanels",
    "type": "Aura.ComponentDefRef[]",
    "description": "A list of managed panels"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "notify",
    "event": "ui:notify",
    "action": "{!c.handleNotify}"
   },
   {
    "event": "ui:createPanel",
    "action": "{!c.createPanel}"
   },
   {
    "event": "ui:destroyPanel",
    "action": "{!c.destroyPanel}"
   },
   {
    "event": "ui:getActivePanel",
    "action": "{!c.getActivePanel}"
   }
  ]
 },
 "cmp.ui.pill": {
  "cmp.aura.component": [
   {
    "support": "PROTO",
    "implements": "ui:visible, ui:focusable",
    "description": "A UI pill in a ui:pillContainer component"
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:eventLib",
    "property": "lib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String",
    "description": "The text displayed in the pill"
   },
   {
    "name": "id",
    "type": "String",
    "description": "The id of the object the pill represents"
   },
   {
    "name": "showDelete",
    "type": "Boolean",
    "default": "true",
    "description": "Show delete icon inside pill"
   },
   {
    "name": "iconUrl",
    "type": "String",
    "description": "The url for the icon"
   },
   {
    "name": "accessibleDeleteLabel",
    "type": "String",
    "default": "Remove pill",
    "description": "The accessible label for the close icon."
   },
   {
    "name": "maxCharacters",
    "type": "Integer",
    "default": "30",
    "description": "The maximum number of characters displayed in a pill."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "onHandledEvent",
    "type": "ui:response",
    "description": "The event fired when the user interactions with this component which it should be handled by the pillContainer (i.e left and right arrow, Enter, and Backspace)"
   },
   {
    "name": "keydown",
    "type": "ui:keydown",
    "access": "GLOBAL",
    "description": "The event fired when the user presses a keyboard key on the component."
   },
   {
    "name": "blur",
    "type": "ui:blur",
    "access": "GLOBAL",
    "description": "The event fired when the user moves off from the component."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "keydown",
    "action": "{!c.handleInteraction}"
   },
   {
    "name": "blur",
    "action": "{!c.onBlur}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!!empty(v.iconUrl)}"
   },
   {
    "istrue": "{!v.showDelete}"
   }
  ],
  "cmp.ui.image": [
   {
    "aura:id": "icon",
    "src": "{!v.iconUrl}",
    "class": "pillIcon",
    "imagetype": "decorative",
    "onerror": "{!c.onIconError}"
   }
  ]
 },
 "cmp.ui.pillContainer": {
  "cmp.aura.component": [
   {
    "description": "A container for ui:pill",
    "extensible": "true",
    "support": "PROTO"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "items",
    "type": "List"
   },
   {
    "name": "maxAllowed",
    "type": "Integer",
    "default": "10",
    "description": "Max pills this container should have."
   },
   {
    "name": "maxCharactersInPill",
    "type": "Integer",
    "default": "30",
    "description": "The maximum number of characters displayed in a pill."
   },
   {
    "name": "maxLines",
    "type": "Integer",
    "default": "0",
    "description": "Maximum lines to show. Hidden lines can be expanded. Use 0 to disable."
   },
   {
    "name": "focusOnInput",
    "type": "Boolean",
    "default": "true",
    "description": "Focus on input box when the component is created."
   },
   {
    "name": "allowRemove",
    "type": "Boolean",
    "default": "true",
    "description": "Allows deleting pills from container."
   },
   {
    "name": "pillInput",
    "type": "Aura.Component[]",
    "description": "An input component that will be added to the end of the list of pills"
   },
   {
    "name": "showMoreLabel",
    "type": "String",
    "default": "Show More ▾",
    "description": "The label for the show more button"
   },
   {
    "name": "pillFlavor",
    "type": "String",
    "default": "default"
   },
   {
    "name": "items",
    "type": "List"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "pillInserted",
    "type": "ui:response",
    "description": "Event fired when a pill is inserted in this container."
   },
   {
    "name": "pillRemoved",
    "type": "ui:response",
    "description": "Event fired when a pill is removed from this container."
   }
  ],
  "cmp.aura.method": [
   {
    "name": "insertItems",
    "description": "The method called to add new items. Takes in an array of object [{name:'name', id:'id'}, ...]"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.items}",
    "var": "item",
    "iterationcomplete": "{!c.pillIterationComplete}",
    "aura:id": "pills"
   }
  ],
  "cmp.ui.pill": [
   {
    "aura:id": "pill",
    "aura:flavor": "{!v.pillFlavor}",
    "iconurl": "{!item.icon.url}",
    "label": "{!item.label}",
    "id": "{!item.id}",
    "showdelete": "{!v.allowRemove}",
    "maxcharacters": "{!v.maxCharactersInPill}",
    "onhandledevent": "{!c.handlePillEvent}"
   }
  ]
 },
 "cmp.ui.pillContainerAutoComplete": {
  "cmp.aura.component": [
   {
    "extends": "ui:autocomplete",
    "implements": "ui:pillContainerInput",
    "description": "Auto complete component for use in a ui:pillContainer",
    "extensible": "true",
    "support": "PROTO"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "allowNew",
    "type": "Boolean",
    "default": "true",
    "description": "Allows new items to be added that are not returned from the data provider"
   },
   {
    "name": "parameters",
    "type": "List"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "updateParameters",
    "description": "Updates additional parameters used to filter data. Parameters is a list of name/value pairs [{name:'',value:''}]"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ]
 },
 "cmp.ui.pillContainerAutoCompleteOption": {
  "cmp.aura.component": [
   {
    "extends": "ui:autocompleteOption",
    "description": "Auto complete component for use in a ui:pillContainer",
    "extensible": "true",
    "support": "PROTO"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "iconUrl",
    "type": "String",
    "default": "true"
   }
  ],
  "cmp.ui.image": [
   {
    "src": "{!v.iconUrl}",
    "class": "optionIcon",
    "imagetype": "decorative"
   }
  ]
 },
 "cmp.ui.popup": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:visible",
    "description": "A popup with a trigger that controls its visibility. This is a base component for ui:menu and ui:panelDialog.",
    "support": "GA"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "popupTriggerPress",
    "type": "ui:popupTriggerPress",
    "description": "The event fired when the popup trigger is pressed. Other components may also fire this event to simulate a trigger press."
   },
   {
    "name": "popupTargetShow",
    "type": "ui:popupTargetShow",
    "description": "The trigger fires this event to show the target. Other components may also fire this event to show the target."
   },
   {
    "name": "popupTargetHide",
    "type": "ui:popupTargetHide",
    "description": "The trigger fires this event to hide the target. Other components may also fire this event to hide the target."
   },
   {
    "name": "popupKeyboardEvent",
    "type": "ui:popupKeyboardEvent",
    "description": "The event fired when a user interacts with a popup via the keyboard."
   },
   {
    "name": "refresh",
    "type": "ui:refresh",
    "description": "Fire this event to refresh the popup"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   },
   {
    "name": "popupTriggerPress",
    "action": "{!c.onTriggerPress}"
   },
   {
    "name": "popupTargetShow",
    "action": "{!c.onTargetShow}"
   },
   {
    "name": "popupTargetHide",
    "action": "{!c.onTargetHide}"
   },
   {
    "name": "popupKeyboardEvent",
    "action": "{!c.onKeyboardEvent}"
   },
   {
    "name": "refresh",
    "action": "{!c.onRefresh}"
   }
  ]
 },
 "cmp.ui.popupTarget": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:visible",
    "description": "A container that is displayed in response to a trigger event. If used in a mobile context, it is recommended that curtain be set to true to prevent nested iframes from consuming the closeOnClickOutside event.",
    "support": "GA"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "visible",
    "type": "Boolean",
    "default": "false",
    "description": "Controls the visibility of the popup target. The default is false, which hides the menu."
   },
   {
    "access": "GLOBAL",
    "name": "closeOnTabKey",
    "type": "Boolean",
    "default": "true",
    "description": "Indicates whether to close the target list on tab key or not."
   },
   {
    "access": "GLOBAL",
    "name": "autoPosition",
    "type": "Boolean",
    "default": "true",
    "description": "Move the popup target up when there is not enough space at the bottom to display. Note: even if autoPosition is set to false, popup will still position the menu relative to the trigger. To override default positioning, use manualPosition attribute."
   },
   {
    "name": "manualPosition",
    "type": "Boolean",
    "default": "false",
    "description": "Flag to override auto position."
   },
   {
    "name": "attachToBody",
    "type": "Boolean",
    "default": "false",
    "description": "Move the target up to HTML body level to make sure it is not blocked by others. "
   },
   {
    "name": "referenceElement",
    "type": "Object",
    "description": "The reference node which this target list should be positioned to. Usually it is a trigger element."
   },
   {
    "access": "GLOBAL",
    "name": "curtain",
    "type": "Boolean",
    "default": "false",
    "description": "Whether or not to apply an overlay under the target."
   },
   {
    "access": "GLOBAL",
    "name": "closeOnClickOutside",
    "type": "Boolean",
    "default": "true",
    "description": "Close target when user clicks or taps outside of the target"
   },
   {
    "name": "closeOnClickInside",
    "type": "Boolean",
    "default": "false",
    "description": "Close target when user clicks or taps inside of the target"
   },
   {
    "name": "preTransitionClass",
    "type": "String",
    "default": "",
    "description": "This CSS class is initially applied to the target then removed prior to toggling the visible class. This is to allow for CSS transitions."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "popupCollapse",
    "type": "ui:collapse",
    "description": "The event fired when the popup target list collapses."
   },
   {
    "name": "popupExpand",
    "type": "ui:expand",
    "description": "The event fired when the popup target list displays."
   },
   {
    "name": "popupKeyboardEvent",
    "type": "ui:popupKeyboardEvent",
    "description": "The event fired when the user interacts with the popup using the keyboard."
   },
   {
    "name": "doClose",
    "type": "ui:collapse",
    "description": "Tell the target to close itself."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "popupKeyboardEvent",
    "action": "{!c.handleKeyboardEvent}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{! v.attachToBody && v.curtain}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.popupTrigger": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "ui:interactive",
    "description": "A trigger that expands and collapses a menu, used in a ui:menu component.",
    "support": "GA"
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "title",
    "type": "String",
    "default": "",
    "description": "The text to display as a tooltip when the mouse pointer hovers over this component."
   },
   {
    "name": "trigger",
    "type": "Aura.Component[]",
    "description": "Used to override the default HTML and trigger event handling. If used, developer must trigger show/hide events for popup target since v.trigger is not wrapped in a link tag, it is wrapped in a plain div."
   },
   {
    "name": "stopClickPropagation",
    "type": "Boolean",
    "default": "false",
    "description": "Prevents the click event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "popupTriggerPress",
    "type": "ui:popupTriggerPress",
    "description": "The event fired when a popup trigger is pressed."
   },
   {
    "name": "popupTargetShow",
    "type": "ui:popupTargetShow",
    "description": "The trigger fires this event to show the target."
   },
   {
    "name": "popupTargetHide",
    "type": "ui:popupTargetHide",
    "description": "The trigger fires this event to hide the target."
   },
   {
    "name": "popupKeyboardEvent",
    "type": "ui:popupKeyboardEvent",
    "description": "The event fired when a user interacts with a popup via the keyboard."
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "ui:popupTargetToggle",
    "action": "{!c.onPopupToggle}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "triggerInteraction"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.trigger.length > 0}"
   },
   {
    "istrue": "{!v.label != null}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.radioMenuItem": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "GA",
    "extends": "ui:menuItem",
    "extensible": "true",
    "description": "​A menu item with a radio button that indicates a mutually exclusive selection and can be used to invoke an action. This component is nested in a ui:menu component."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "click",
    "action": "{!c.handleClick}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.body.length == 0}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.radioToggleMenuItem": {
  "cmp.aura.component": [
   {
    "extends": "ui:radioMenuItem",
    "support": "BETA",
    "description": "​A menu item that indicates a mutually exclusive selection + toggle state. This component is nested in a ui:menu component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "isAscending",
    "type": "Boolean",
    "default": "true",
    "description": "Component can be either in a true or false set (independent of being selected)"
   },
   {
    "name": "ascLabel",
    "type": "String",
    "default": "Ascending",
    "description": "Label for ascending state"
   },
   {
    "name": "descLabel",
    "type": "String",
    "default": "Descending",
    "description": "Label for descending state"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.isAscending}",
    "action": "{!c.updateDirection}"
   }
  ]
 },
 "cmp.ui.resizeObserver": {
  "cmp.aura.component": [
   {
    "support": "BETA",
    "description": "Detects a window resize or orientation change event and runs the updateSize controller method. Ensures the order of component composition."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "onresize",
    "type": "Aura.Action",
    "description": "The action that is run on resize."
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "ui:updateSize",
    "action": "{!c.updateSize}",
    "description": "The event fired when a component is resized."
   },
   {
    "event": "aura:doneWaiting",
    "action": "{!c.updateSize}",
    "description": "The event fired when the client is done waiting for a response to a server request."
   }
  ]
 },
 "cmp.ui.scroller": {
  "cmp.aura.component": [
   {
    "support": "BETA",
    "extensible": "true",
    "description": "A scrollable view with scroll bars and pull-to-refresh support"
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:scrollerLib",
    "property": "lib"
   },
   {
    "library": "ui:scopedScroll",
    "property": "scopedScroll"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "scroll",
    "type": "String",
    "default": "vertical",
    "description": "Defines the scroll direction. The string values can be either horizontal, vertical or bidirectional"
   },
   {
    "name": "enabled",
    "type": "Boolean",
    "default": "true",
    "description": "Sets the default state of the scroller"
   },
   {
    "name": "useCSSTransition",
    "type": "Boolean",
    "description": "Denotes whether to use css transitions. By default scroller will decide depending on the platform"
   },
   {
    "name": "useNativeScroller",
    "type": "Boolean",
    "default": "false",
    "description": "Leverage native scrolling"
   },
   {
    "name": "preventNestedScroll",
    "type": "Boolean",
    "default": "false",
    "description": "(If useNative: true) Prevents any parent nested scroller to scroll by default"
   },
   {
    "name": "preventDefaultOnMove",
    "type": "Boolean",
    "default": "false",
    "description": "preventDefault native events on mouse move"
   },
   {
    "name": "debounce",
    "type": "Boolean",
    "default": "false",
    "description": "Separate the gesture move from the animation"
   },
   {
    "name": "snap",
    "type": "Boolean",
    "default": "false",
    "description": "Enable snap behaviour on the scroller (adds the Snap plugins to the scroller)"
   },
   {
    "name": "endless",
    "type": "Boolean",
    "default": "false",
    "description": "Activates the endless plugin (gpuOptimization needs to be enable for this)"
   },
   {
    "name": "snapType",
    "type": "String",
    "default": "soft",
    "description": "Snap type. Values: sticky | soft"
   },
   {
    "name": "plugins",
    "type": "String",
    "default": "",
    "description": "The list of plugins to add"
   },
   {
    "name": "gpuOptimization",
    "type": "Boolean",
    "default": "false",
    "description": "Activate Surface Mannager to create GPU accelerate surfaces for better performace."
   },
   {
    "name": "bindEventsToScroller",
    "type": "Boolean",
    "default": "false",
    "description": "Binds mouse or touch events to the scroller DOM container, otherwise will be attached to the window object"
   },
   {
    "name": "showScrollbars",
    "type": "Boolean",
    "default": "false",
    "description": "Enable scrollbars"
   },
   {
    "name": "canShowMore",
    "type": "Boolean",
    "description": "Whether this scroller can be invoked to show more content"
   },
   {
    "name": "canRefresh",
    "type": "Boolean",
    "description": "Whether this scroller can be invoked to refresh its content"
   },
   {
    "name": "width",
    "type": "Integer",
    "description": "The width of the scroll area in pixels"
   },
   {
    "name": "height",
    "type": "Integer",
    "description": "The height of the scroll area in pixels"
   },
   {
    "name": "itemWidth",
    "type": "Integer",
    "description": "The width of the scroll area in pixels"
   },
   {
    "name": "itemHeight",
    "type": "Integer",
    "description": "The height of the scroll area in pixels"
   },
   {
    "name": "class",
    "type": "String",
    "description": "A CSS style to be attached to the scroll area"
   },
   {
    "name": "scrollContentClass",
    "type": "String",
    "description": "A CSS style to be attached to the scroll content area"
   },
   {
    "name": "minThreshold",
    "type": "Integer",
    "default": "5",
    "description": ""
   },
   {
    "name": "minDirectionThreshold",
    "type": "Integer",
    "default": "1",
    "description": ""
   },
   {
    "name": "lockOnDirection",
    "type": "String",
    "description": ""
   },
   {
    "name": "onBeforeScrollStart",
    "type": "Aura.Action",
    "description": "The action invoked before the user starts scrolling"
   },
   {
    "name": "onScrollStart",
    "type": "Aura.Action",
    "description": "The action invoked when the scroll starts"
   },
   {
    "name": "onScrollEnd",
    "type": "Aura.Action",
    "description": "The action invoked when scroller stops"
   },
   {
    "name": "onScrollMove",
    "type": "Aura.Action",
    "description": "The action invoked when scrolling"
   },
   {
    "name": "onPullToShowMore",
    "type": "Aura.Action",
    "description": "The action invoked when the user pulls from the bottom to load more"
   },
   {
    "name": "onPullToRefresh",
    "type": "Aura.Action",
    "description": "The action invoked when the user pulls to refresh the scroller area"
   },
   {
    "name": "infiniteLoading",
    "type": "Boolean",
    "description": "Enable Infinite loading (adds the infinite loading plugin to the scroller)"
   },
   {
    "name": "infiniteLoadingThreshold",
    "type": "Integer",
    "description": "Callback invoked When the user scrolls to this many pixels from the bottom"
   },
   {
    "name": "infiniteLoadingDataProvider",
    "type": "Aura.Action",
    "description": "The action invoked when the user has reached the end of the scrolling area"
   },
   {
    "name": "pullToShowMoreClick",
    "type": "String",
    "default": "Tap to show more",
    "description": "The text before the user pulls clicks to refresh content"
   },
   {
    "name": "pullToShowMorePull",
    "type": "String",
    "default": "Pull up to show more...",
    "description": "The text before the user pulls to show more content"
   },
   {
    "name": "pullToShowMoreRelease",
    "type": "String",
    "default": "Release to show more...",
    "description": "The text when the user pulls to show more content in the scroller area"
   },
   {
    "name": "pullToShowMoreUpdating",
    "type": "String",
    "default": "Updating...",
    "description": "The text to display while the scroller component is updating"
   },
   {
    "name": "pullToShowMoreSubtitle",
    "type": "String",
    "default": "",
    "description": "The text to display in the bottom cell"
   },
   {
    "name": "pullToShowMoreError",
    "type": "String",
    "default": "Error on Pull to load more",
    "description": "The text to display while the scroller component is updating"
   },
   {
    "name": "pullToRefreshClick",
    "type": "String",
    "default": "Tap to refresh",
    "description": "The text to display in the top cell before the user clicks to refresh the page"
   },
   {
    "name": "pullToRefreshPull",
    "type": "String",
    "default": "Pull down to refresh...",
    "description": "The text to display in the top cell before the user pulls to refresh the page"
   },
   {
    "name": "pullToRefreshRelease",
    "type": "String",
    "default": "Release to refresh...",
    "description": "The text to display in the revealed area above the scroller"
   },
   {
    "name": "pullToRefreshUpdating",
    "type": "String",
    "default": "Loading...",
    "description": "The text to display while the scroller component is updating"
   },
   {
    "name": "pullToRefreshError",
    "type": "String",
    "default": "Error on Pull to refresh",
    "description": "The text to display in the top cell when the user pulls and there is an error"
   },
   {
    "name": "pullToRefreshSubtitle",
    "type": "String",
    "default": "",
    "description": "The text to display in the top cell when the user pulls the scroller area to refresh the content"
   },
   {
    "name": "scrollButtonUp",
    "type": "String",
    "default": "Page Up",
    "description": "The text to display in the Page Up button."
   },
   {
    "name": "scrollButtonDown",
    "type": "String",
    "default": "Page Down",
    "description": "The text to display in the Page Down button."
   },
   {
    "name": "scrollButtonLeft",
    "type": "String",
    "default": "Page Left",
    "description": "The text to display in the Page Left button."
   },
   {
    "name": "scrollButtonRight",
    "type": "String",
    "default": "Page Right",
    "description": "The text to display in the Page Right button."
   },
   {
    "name": "supportVoiceOver",
    "type": "Boolean",
    "default": "true",
    "description": "If set to true and Global.isVoiceOver is also true, user can scroll the content by clicking on the up or down button."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "scrollTo",
    "type": "ui:scrollTo",
    "description": "The event fired when the scroller should move to a new destination"
   },
   {
    "name": "scrollBy",
    "type": "ui:scrollBy",
    "description": "The event fired when the scroller should move to a new destination relative to its current position"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "scrollTo",
    "action": "{!c.scrollTo}",
    "description": "Catches the event fired when the scroller should move to a new destination"
   },
   {
    "name": "scrollBy",
    "action": "{!c.scrollBy}",
    "description": "Catches the event fired when the scroller should move to a new destination relative to its current position"
   },
   {
    "name": "change",
    "value": "{!v.canRefresh}",
    "action": "{!c.handleCanRefreshChange}",
    "description": "Handler called when the canShowMore attribute changes"
   },
   {
    "name": "change",
    "value": "{!v.canShowMore}",
    "action": "{!c.handleCanShowMoreChange}",
    "description": "Handler called when the canShowMore attribute changes"
   },
   {
    "name": "change",
    "value": "{!$Global.isVoiceOver}",
    "action": "{!c.handleVoiceOverChange}",
    "description": "Handler called when Global.isVoiceOver changes."
   },
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.resizeobserver": [
   {
    "onresize": "{!c.refresh}"
   }
  ]
 },
 "cmp.ui.scrollerDeprecated": {
  "cmp.aura.component": [
   {
    "support": "DEPRECATED",
    "description": "Deprecated and replaced by ui:scroller."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "hScroll",
    "type": "Boolean",
    "default": "false",
    "description": "Enables horizontal scrolling on the component. Default value is \"false\"."
   },
   {
    "name": "vScroll",
    "type": "Boolean",
    "default": "true",
    "description": "Enables vertical scrolling on the component. Default value is \"true\"."
   },
   {
    "name": "showScrollbars",
    "type": "Boolean",
    "default": "true",
    "description": "Shows or hides scroll bars. Default value is \"true\", which shows the scroll bars."
   },
   {
    "name": "enabled",
    "type": "Boolean",
    "default": "true",
    "description": "Displays the scroller in an enabled state. Default value is \"true\"."
   },
   {
    "name": "useTransform",
    "type": "Boolean",
    "default": "true",
    "description": "Denotes whether to use transform scrollers and usually used with nested scrollers. Default value is \"true\"."
   },
   {
    "name": "useTransition",
    "type": "Boolean",
    "default": "true",
    "description": "Denotes whether to use css transition. Default value is \"false\"."
   },
   {
    "name": "snap",
    "type": "String",
    "description": "The CSS style used to display the snap area. Locks the scroller to predefined positions."
   },
   {
    "name": "width",
    "type": "String",
    "description": "The width of the scroll area in pixels (px) or percentage (%). Default value is \"100px\"."
   },
   {
    "name": "class",
    "type": "String",
    "description": "A CSS style to be attached to the scroll area. This style is added in addition to base styles output by the component."
   },
   {
    "name": "scrollContentClass",
    "type": "String",
    "description": "A CSS style to be attached to the scroll content area. This style is added in addition to base styles output by the component."
   },
   {
    "name": "onBeforeScrollStart",
    "type": "Aura.Action",
    "description": "The action invoked before the user starts scrolling."
   },
   {
    "name": "onScrollStart",
    "type": "Aura.Action",
    "description": "The action invoked when the user starts scrolling."
   },
   {
    "name": "onScrollEnd",
    "type": "Aura.Action",
    "description": "The action invoked when the user stops scrolling."
   },
   {
    "name": "onScrollMove",
    "type": "Aura.Action",
    "description": "The action invoked when the user is scrolling."
   },
   {
    "name": "onScrollToBottom",
    "type": "Aura.Action",
    "description": "The action invoked when the user has reached the end of the scrolling area."
   },
   {
    "name": "scrollToBottomThreshold",
    "type": "Integer",
    "default": "10",
    "description": "When the user scrolls to this many pixels from the bottom of the scrollable area, the onScrollToBottom action is called."
   },
   {
    "name": "onPullToShowMore",
    "type": "Aura.Action",
    "description": "The action invoked when the user pulls from the bottom to load more.  The spacebar or Enter key also triggers a refresh."
   },
   {
    "name": "pullToShowMorePull",
    "type": "String",
    "default": "Pull up to show more...",
    "description": "The text to display in the bottom cell before the user pulls to show more content. Default value is \"Pull up to show more...\"."
   },
   {
    "name": "pullToShowMoreRelease",
    "type": "String",
    "default": "Release to show more...",
    "description": "The text to display in the revealed area below the scroller contents when the user pulls to show more content in the scroller area, but has not yet released the pull. Default value is \"Release to show more...\"."
   },
   {
    "name": "pullToShowMoreUpdating",
    "type": "String",
    "default": "Loading...",
    "description": "The text to display while the scroller component is updating after the user pulls to show more content in the scroller. Default value is \"Loading...\"."
   },
   {
    "name": "pullToShowMoreSubtitle",
    "type": "String",
    "description": "The text to display in the bottom cell when the user pulls the scroller area to show more content."
   },
   {
    "name": "canShowMore",
    "type": "Boolean",
    "default": "true",
    "description": "Whether this scroller can be invoked to show more content. Defaults to true."
   },
   {
    "name": "onPullToRefresh",
    "type": "Aura.Action",
    "description": "The action invoked when the user pulls to refresh the scroller area.  The spacebar or Enter key also triggers a refresh."
   },
   {
    "name": "pullToRefreshPull",
    "type": "String",
    "default": "Pull down to refresh...",
    "description": "The text to display in the top cell before the user pulls to refresh the page. Default value is \"Pull down to refresh...\"."
   },
   {
    "name": "pullToRefreshRelease",
    "type": "String",
    "default": "Release to refresh...",
    "description": "The text to display in the revealed area above the scroller contents when the user pulls to refresh the scroller area, but has not yet released the pull. Default value is \"Release to refresh...\"."
   },
   {
    "name": "pullToRefreshUpdating",
    "type": "String",
    "default": "Loading...",
    "description": "The text to display while the scroller component is updating after the user pulls to refresh the scroller. Default value is \"Loading...\"."
   },
   {
    "name": "pullToRefreshSubtitle",
    "type": "String",
    "description": "The text to display in the top cell when the user pulls the scroller area to refresh the content."
   },
   {
    "name": "canRefresh",
    "type": "Boolean",
    "default": "true",
    "description": "Whether this scroller can be invoked to refresh its content. Defaults to true."
   },
   {
    "name": "extendedPullContent",
    "type": "Aura.Component[]",
    "description": "Add additional hidden content to be shown just above the starting scroll position"
   },
   {
    "name": "stopEventPropagation",
    "type": "Boolean",
    "default": "false",
    "description": "Disables DOM event propagation. (This probably isn't something you want to enable.)"
   },
   {
    "name": "checkDOMChanges",
    "type": "Boolean",
    "default": "false",
    "description": "Refresh the scroller after DOM changes."
   },
   {
    "name": "bindEventsToScroller",
    "type": "Boolean",
    "default": "false",
    "description": "Set to true to bind the mouse or touch events to the scroller DOM element, otherwise, bind to the window object."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "refreshed",
    "type": "ui:scrollerRefreshed",
    "description": "The event fired when the scroller is refreshed."
   },
   {
    "name": "scrollTo",
    "type": "ui:scrollTo",
    "description": "The event fired when the scroller should move to a new destination."
   },
   {
    "name": "scrollBy",
    "type": "ui:scrollBy",
    "description": "The event fired when the scroller should move to a new destination relative to its current position."
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:locationChange",
    "action": "{!c.locationChange}",
    "description": "The event fired when a location change occurs."
   },
   {
    "name": "scrollTo",
    "action": "{!c.scrollTo}",
    "description": "Catches the event fired when the scroller should move to a new destination."
   },
   {
    "name": "scrollBy",
    "action": "{!c.scrollBy}",
    "description": "Catches the event fired when the scroller should move to a new destination relative to its current position."
   },
   {
    "name": "change",
    "value": "{!v.canShowMore}",
    "action": "{!c.handleCanShowMoreChange}"
   }
  ],
  "cmp.ui.resizeobserver": [
   {
    "onresize": "{!c.refresh}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.onPullToRefresh != null && v.canRefresh}"
   },
   {
    "istrue": "{!v.extendedPullContent != null && v.extendedPullContent.length > 0}"
   },
   {
    "istrue": "{!v.onPullToShowMore != null && v.canShowMore}"
   }
  ]
 },
 "cmp.ui.spinner": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "support": "BETA",
    "description": "A loading spinner to be used while the real component body is being loaded"
   }
  ],
  "cmp.aura.attribute": [
   {
    "access": "GLOBAL",
    "name": "isVisible",
    "type": "Boolean",
    "default": "true",
    "description": "Specifies whether or not this spinner should be visible. Defaults to true."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "access": "GLOBAL",
    "name": "toggle",
    "type": "ui:toggleLoadingIndicator",
    "description": "The event fired when the spinner is toggled."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "toggle",
    "action": "{!c.toggleSpinner}"
   }
  ],
  "cmp.ui.image": [
   {
    "class": "spinner-img",
    "src": "/auraFW/resources/aura/images/spinner.gif",
    "alt": "Loading"
   }
  ]
 },
 "cmp.ui.stamp": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:visible",
    "support": "beta",
    "description": "A decorated stamp containing text"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "severity",
    "type": "String",
    "description": "The severity with which to decorate this stamp.  Accepted values: success, warning, important, info, inverse"
   },
   {
    "name": "title",
    "type": "String",
    "description": "The title text for the stamp."
   },
   {
    "name": "onclick",
    "type": "Aura.Action",
    "description": "The controller method that runs when the stamp is clicked."
   }
  ]
 },
 "cmp.ui.tab": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "GA",
    "description": "A single tab that is nested in a ui:tabset component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String",
    "description": ""
   },
   {
    "name": "title",
    "type": "String",
    "description": "The text to display as a tooltip when the mouse hovers over the tab."
   },
   {
    "name": "name",
    "type": "String",
    "description": "The internal name of the tab that can be referenced to."
   },
   {
    "name": "icon",
    "type": "Aura.Component[]",
    "description": "The graphical image displayed on the tab."
   },
   {
    "name": "scroll",
    "type": "Boolean",
    "description": "Specified whether scrolling is enabled (true) or not (false) on the tab.",
    "default": "false"
   },
   {
    "name": "active",
    "type": "Boolean",
    "description": "Specifies whether a tab is active (true) or not (false)."
   },
   {
    "name": "iconClass",
    "type": "String",
    "description": "The CSS style used to display the icon on the tab."
   },
   {
    "name": "closable",
    "type": "Boolean",
    "description": "Specifies whether to display an 'x' that will close the tab when clicked"
   },
   {
    "name": "ariaControlId",
    "type": "String",
    "description": "Force the aria-controls attribute to point to this ID. Use only when trying to override default behaviour."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "beforeActivate",
    "type": "ui:tabsetEvent",
    "description": "The event is triggered before the tab is activated. Can be canceled to prevent the tab from activating."
   },
   {
    "name": "onActivated",
    "type": "ui:tabsetEvent",
    "description": "The event fired when the tab is activated."
   },
   {
    "name": "setActive",
    "type": "ui:tabsetEvent",
    "description": "The event fired from ui:tabset to set this tab as active or deactive."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "setActive",
    "action": "{!c.setActive}"
   }
  ]
 },
 "cmp.ui.tabBar": {
  "cmp.aura.component": [
   {
    "description": "A list wrapper for tabs in a ui:tabset component"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "tabs",
    "type": "List",
    "description": "List of tab configurations."
   },
   {
    "name": "class",
    "type": "String",
    "description": "CSS class"
   },
   {
    "name": "useOverflowMenu",
    "type": "Boolean",
    "default": "false",
    "description": "Determines whether the tab bar should use an overflow menu. If true, and the total width of the tab items exceeds the specified bar width, a menu will be shown that includes the tabs that do not fit. Use in conjunction with barWidth and tabItemWidth"
   },
   {
    "name": "overflowLabel",
    "type": "String",
    "default": "More",
    "description": "Label to use for the overflow menu trigger."
   },
   {
    "name": "barWidth",
    "type": "Integer",
    "description": "Max fixed width of the tab bar, in pixels. Used for calculating how many tabs overflow. This attribute should reflect the width applied by the CSS."
   },
   {
    "name": "tabItemWidth",
    "type": "Integer",
    "description": "Fixed width of each tab item, in pixels. Used for calculating how many tabs overflow. This attribute should reflect the width applied by the CSS."
   },
   {
    "name": "overflowData",
    "type": "Object",
    "access": "PRIVATE",
    "description": "Internal object used to store overflow information"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "setActive",
    "type": "ui:tabsetEvent",
    "description": "This event is fired from parent component to activate a tab item."
   },
   {
    "name": "addTab",
    "type": "ui:tabsetEvent",
    "description": "This event is fired from parent component to add a tab item."
   },
   {
    "name": "closeTab",
    "type": "ui:tabsetEvent",
    "description": "This event is fired from parent component to close a tab item."
   },
   {
    "name": "onTabClosed",
    "type": "ui:tabsetEvent",
    "description": "This event is fired when the close icon is clicked."
   },
   {
    "name": "onTabActivated",
    "type": "ui:tabsetEvent",
    "description": "This event is fired when the tab item is clicked."
   },
   {
    "name": "onTabHover",
    "type": "ui:onTabHover",
    "description": "The event is fired when the mouse moves over a tab or when a tab is put into focus."
   },
   {
    "name": "onTabUnhover",
    "type": "ui:onTabHover",
    "description": "The event is fired when the mouse moves off of a tab or when focus is moved away from a tab."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "setActive",
    "action": "{!c.setActive}"
   },
   {
    "name": "addTab",
    "action": "{!c.addTab}"
   },
   {
    "name": "closeTab",
    "action": "{!c.closeTab}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:tabItem"
   },
   {
    "resource": "markup://ui:tabOverflowMenuItem"
   },
   {
    "resource": "markup://aura:html",
    "type": "COMPONENT"
   },
   {
    "resource": "markup://ui:updateSize",
    "type": "EVENT"
   }
  ]
 },
 "cmp.ui.tabItem": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "A tab that is rendered by the ui:tabBar component"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String",
    "description": "The class to apply to the tab item"
   },
   {
    "name": "title",
    "type": "String",
    "description": "The text to display on the tab."
   },
   {
    "name": "name",
    "type": "String",
    "description": "The internal name of the tab that can be referenced to."
   },
   {
    "name": "icon",
    "type": "Aura.Component[]",
    "description": "The graphical image displayed on the tab."
   },
   {
    "name": "active",
    "type": "Boolean",
    "description": "Specifies whether a tab is active (true) or not (false)."
   },
   {
    "name": "hidden",
    "type": "Boolean",
    "description": "Specifies whether a tab is hidden (true) or not (false)."
   },
   {
    "name": "iconClass",
    "type": "String",
    "description": "The CSS style used to display the icon on the tab."
   },
   {
    "name": "closable",
    "type": "Boolean",
    "default": "false",
    "description": "Specifies whether to display an 'x' that will close the tab when clicked. Default value is 'false'."
   },
   {
    "name": "ariaControlId",
    "type": "String",
    "description": "Internal use for aria-controls attribute."
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "activateTab",
    "type": "ui:tabsetEvent",
    "description": "The event is fired to activate the tab."
   },
   {
    "name": "onActivate",
    "type": "ui:tabsetEvent",
    "description": "The event is fired when the tab is clicked to activate."
   },
   {
    "name": "onClose",
    "type": "ui:tabsetEvent",
    "description": "The event is fired when the close icon is clicked to close the tab."
   },
   {
    "name": "onTabHover",
    "type": "ui:onTabHover",
    "description": "The event is fired when the mouse moves over a tab or when a tab is put into focus."
   },
   {
    "name": "onTabUnhover",
    "type": "ui:onTabHover",
    "description": "The event is fired when the mouse moves off of a tab or when focus is moved away from a tab."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "activateTab",
    "action": "{!c.activateTab}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.closable}"
   }
  ]
 },
 "cmp.ui.tabOverflowMenuItem": {
  "cmp.aura.component": [
   {
    "description": "A tab that is rendered by the ui:tabBar component for its overflow menu"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String",
    "description": "The class to apply to the tab item"
   },
   {
    "name": "title",
    "type": "String",
    "description": "The text to display on the tab."
   },
   {
    "name": "icon",
    "type": "Aura.Component[]",
    "description": "The graphical image displayed on the tab."
   },
   {
    "name": "active",
    "type": "Boolean",
    "description": "Specifies whether a tab is active (true) or not (false)."
   },
   {
    "name": "iconClass",
    "type": "String",
    "description": "The CSS style used to display the icon on the tab."
   },
   {
    "name": "ariaControlId",
    "type": "String",
    "description": "Internal use for aria-controls attribute."
   },
   {
    "name": "menuItems",
    "type": "Object[]",
    "description": "List of objects that represent the menu items to be generated. Should be of the form {id: String, label: String}"
   },
   {
    "name": "menuItemCache",
    "type": "Object",
    "access": "PRIVATE"
   },
   {
    "name": "focusedItemName",
    "type": "String",
    "access": "PRIVATE"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "activateTab",
    "type": "ui:tabsetEvent",
    "description": "The event is fired to activate the tab."
   },
   {
    "name": "onTabHover",
    "type": "ui:onTabHover",
    "description": "The event is fired when the mouse moves over a tab or when a tab is put into focus."
   },
   {
    "name": "onTabUnhover",
    "type": "ui:onTabHover",
    "description": "The event is fired when the mouse moves off of a tab or when focus is moved away from a tab."
   },
   {
    "name": "onTabSelection",
    "type": "ui:tabsetEvent",
    "description": "The event is fired when a tab from the overflow menu is selected."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "activateTab",
    "action": "{!c.activateMenu}"
   },
   {
    "name": "change",
    "value": "{!v.menuItems}",
    "action": "{!c.updateMenuItems}"
   }
  ],
  "cmp.ui.menu": [
   {
    "aura:id": "menu"
   }
  ],
  "cmp.ui.menutrigger": [
   {
    "aura:id": "trigger"
   }
  ],
  "cmp.ui.taboverflowmenulist": [
   {
    "aura:id": "menuList",
    "menufocuschange": "{!c.focusChange}",
    "menucollapse": "{!c.onCollapse}",
    "forwardwrap": "{!c.handleForwardWrap}",
    "reversewrap": "{!c.handleReverseWrap}"
   }
  ]
 },
 "cmp.ui.tabOverflowMenuList": {
  "cmp.aura.component": [
   {
    "extends": "ui:menuList",
    "description": "An extension of ui:menuList to add custom keyboard interactions for a tab overflow menu"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "access": "PUBLIC",
    "name": "forwardWrap",
    "type": "ui:collapse",
    "description": "The event fired when the menu list attempts a forward wrap due to a key press."
   },
   {
    "access": "PUBLIC",
    "name": "reverseWrap",
    "type": "ui:collapse",
    "description": "The event fired when the menu list attempts a reverse wrap due to a key press."
   }
  ]
 },
 "cmp.ui.tabset": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:visible",
    "support": "GA",
    "description": "A tab set that displays a list of tabs in an unordered list."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "tabs",
    "type": "List",
    "description": "The collection of objects to construct tabs."
   },
   {
    "name": "tabItems",
    "access": "private",
    "type": "List",
    "description": "Use internally for passing a list of tab items to ui:tabBar component."
   },
   {
    "name": "class",
    "type": "String",
    "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by the component."
   },
   {
    "name": "lazyRenderTabs",
    "type": "Boolean",
    "default": "false",
    "description": "If true, contained ui:tab components are rendered only when they are activated."
   },
   {
    "name": "useOverflowMenu",
    "type": "Boolean",
    "default": "false",
    "description": ""
   },
   {
    "name": "barWidth",
    "type": "Integer",
    "description": ""
   },
   {
    "name": "tabItemWidth",
    "type": "Integer",
    "description": ""
   },
   {
    "name": "overflowLabel",
    "type": "String",
    "default": "More",
    "description": ""
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "addTab",
    "type": "ui:tabsetEvent",
    "description": "Add new tab to the component."
   },
   {
    "name": "removeTab",
    "type": "ui:tabsetEvent",
    "description": "Remove a tab from the component."
   },
   {
    "name": "activateTab",
    "type": "ui:tabsetEvent",
    "description": "Activate a tab."
   },
   {
    "name": "getActiveTab",
    "type": "ui:tabsetEvent",
    "description": "Get the currently active tab."
   },
   {
    "name": "beforeActivate",
    "type": "ui:tabsetEvent",
    "description": "The event is triggered before the tab is activated. Can be canceled to prevent the tab from activating."
   },
   {
    "name": "onActivate",
    "type": "ui:tabsetEvent",
    "description": "The event is triggered when the tab is activated."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.onInit}"
   },
   {
    "name": "addTab",
    "action": "{!c.addTab}"
   },
   {
    "name": "removeTab",
    "action": "{!c.removeTab}"
   },
   {
    "name": "activateTab",
    "action": "{!c.activateTab}"
   },
   {
    "name": "getActiveTab",
    "action": "{!c.getActiveTab}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:tab",
    "type": "COMPONENT"
   },
   {
    "resource": "markup://ui:tabItem",
    "type": "COMPONENT"
   }
  ],
  "cmp.ui.tabbar": [
   {
    "aura:id": "tabBar",
    "tabs": "{!v.tabItems}",
    "ontabactivated": "{!c.onTabActivated}",
    "ontabclosed": "{!c.onTabClosed}",
    "useoverflowmenu": "{!v.useOverflowMenu}",
    "barwidth": "{!v.barWidth}",
    "tabitemwidth": "{!v.tabItemWidth}",
    "overflowlabel": "{!v.overflowLabel}"
   }
  ]
 },
 "cmp.ui.timePicker": {
  "cmp.aura.component": [
   {
    "implements": "ui:visible",
    "description": "A time picker which can be used in datePicker to select both date and time"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "hours",
    "type": "Integer",
    "default": "12",
    "description": "The hour value."
   },
   {
    "name": "is24HourFormat",
    "type": "Boolean",
    "default": "true",
    "description": "Indicate if it is set to 24 hour or 12-hour with am/pm."
   },
   {
    "name": "isValid",
    "type": "Boolean",
    "default": "true",
    "description": "Indicate if the valid hour and minute values are inputed."
   },
   {
    "name": "minutes",
    "type": "Integer",
    "default": "0",
    "description": "The miniue value."
   },
   {
    "name": "visible",
    "type": "Boolean",
    "default": "false",
    "description": "Indicates if this time picker is displayed. Defaults to false, which hides this time picker."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.label": [
   {
    "label": "hours",
    "for": "hours",
    "labeldisplay": "false"
   },
   {
    "label": "minutes",
    "for": "minutes",
    "labeldisplay": "false"
   },
   {
    "label": "period",
    "for": "ampm",
    "labeldisplay": "false"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "type": "number",
    "aura:id": "hours",
    "class": "input-hours",
    "change": "{!c.updateHours}"
   },
   {
    "type": "number",
    "aura:id": "minutes",
    "class": "input-minutes",
    "change": "{!c.updateMinutes}"
   }
  ],
  "cmp.ui.image": [
   {
    "class": "time-separator",
    "imagetype": "decorative",
    "src": "/auraFW/resources/aura/images/time-separator.png"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.is24HourFormat != true}"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "aura:id": "ampm",
    "class": "ampm",
    "change": "{!c.updateAmpm}"
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "aura:id": "amOpt",
    "label": "AM",
    "text": "am"
   },
   {
    "aura:id": "pmOpt",
    "label": "PM",
    "text": "pm"
   }
  ],
  "cmp.ui.inputdefaulterror": [
   {
    "aura:id": "hourError",
    "class": "hide"
   },
   {
    "aura:id": "minuteError",
    "class": "hide"
   }
  ]
 },
 "cmp.ui.toolbar": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "BETA",
    "description": "A horizontal toolbar that is displayed as an HTML menu element."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String",
    "description": "The CSS style used to display the toolbar component."
   }
  ]
 },
 "cmp.ui.tooltip": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.import": [
   {
    "library": "ui:panelPositioningLib",
    "property": "lib"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "tooltipBody",
    "type": "String",
    "access": "INTERNAL",
    "default": "false",
    "description": "The message to display in the tooltip"
   },
   {
    "name": "disabled",
    "type": "Boolean",
    "access": "INTERNAL",
    "default": "false",
    "description": "Specifies whether the tooltip is disabled. The default is \"false\"."
   },
   {
    "access": "INTERNAL",
    "name": "advanced",
    "type": "Boolean",
    "default": "false",
    "description": "Determines if the tooltip uses JavaScript positioning. The default is \"false\". Setting it to false creates the tooltip using CSS only."
   },
   {
    "access": "INTERNAL",
    "name": "trigger",
    "type": "String",
    "default": "hover",
    "description": "TThe event that toggles the tooltip. Valid values are \"focus\", \"click\", \"hover\", and \"none\". The default is \"hover\". Only \"focus\" and \"click\" are keyboard accessible."
   },
   {
    "name": "triggerClass",
    "type": "String",
    "access": "INTERNAL",
    "description": "The CSS class for the trigger element"
   },
   {
    "name": "isVisible",
    "access": "INTERNAL",
    "type": "Boolean",
    "description": "Specifies whether the tooltip is visible. The default is \"false\".",
    "default": "false"
   },
   {
    "name": "fadeOut",
    "access": "INTERNAL",
    "default": "0",
    "type": "Boolean",
    "description": "Fade out"
   },
   {
    "name": "fadeIn",
    "access": "INTERNAL",
    "default": "0",
    "type": "Boolean",
    "description": "Fade in"
   },
   {
    "name": "fadeOutDuration",
    "access": "INTERNAL",
    "default": "0",
    "type": "Integer",
    "description": "Fade out duration in ms"
   },
   {
    "name": "fadeInDuration",
    "access": "INTERNAL",
    "default": "0",
    "type": "Integer",
    "description": "Fade in duration in ms"
   },
   {
    "name": "delay",
    "default": "0",
    "access": "INTERNAL",
    "type": "Integer",
    "description": "Appearance delay in ms"
   },
   {
    "name": "class",
    "type": "String",
    "access": "INTERNAL",
    "default": "",
    "description": "A CSS style to be attached to the tooltip. This style is added in addition to base styles output by the component."
   },
   {
    "name": "tabIndex",
    "type": "Integer",
    "access": "INTERNAL",
    "description": "The tab index for the trigger, REQUIRED if the trigger is focus and there are no focusable elements in the body"
   },
   {
    "name": "direction",
    "type": "String",
    "access": "INTERNAL",
    "default": "north",
    "description": "The direction in which the tooltip should go. Valid values are \"north\", \"south\", \"west\", and \"east\". The default is \"north\"."
   },
   {
    "name": "domId",
    "type": "String",
    "access": "INTERNAL",
    "description": "DOM id of the input element. By default, this attribute resolved to the globalId of the component to avoid id collision."
   }
  ],
  "cmp.aura.method": [
   {
    "name": "show",
    "access": "INTERNAL"
   },
   {
    "name": "hide",
    "access": "INTERNAL"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.advanced}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.tree": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "DEPRECATED"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "nodes",
    "type": "java://List<aura.components.ui.TreeNode>"
   },
   {
    "name": "class",
    "type": "String",
    "default": ""
   },
   {
    "name": "activeNode",
    "type": "Aura.Component",
    "description": "When the activeNode is set on a tree, its active attribute is set to true."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.activeNode}",
    "action": "{!c.onActiveNodeChange}"
   },
   {
    "name": "getChildren",
    "action": "{!c.getChildren}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "getChildren",
    "type": "ui:getChildren"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.nodes}",
    "var": "node"
   }
  ],
  "cmp.ui.treenode": [
   {
    "item": "{!node}",
    "aura:id": "modelNode",
    "hidden": "false"
   }
  ]
 },
 "cmp.ui.treeNode": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:visitable"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "href",
    "type": "String",
    "description": "For a leaf node, the link associated with the element. Unsupported for non-leaf nodes."
   },
   {
    "name": "title",
    "type": "String",
    "description": "The label to display in the UI."
   },
   {
    "name": "leafClass",
    "type": "String",
    "description": "A custom class to apply if the node is a leaf"
   },
   {
    "name": "class",
    "type": "String",
    "description": "A custom class to apply to this node"
   },
   {
    "name": "expanded",
    "type": "Boolean",
    "default": "false",
    "description": "The expansion state of the node. Changing this is a no-op for leaf nodes."
   },
   {
    "name": "active",
    "type": "Boolean",
    "description": "The active state of the node. If true, then this node's <li> will have the DOM attribute active='true' and the node will scroll into view if necessary. "
   },
   {
    "name": "hidden",
    "type": "Boolean",
    "default": "false",
    "description": "Controls whether this node should render into the DOM. Currently unsupported."
   },
   {
    "name": "item",
    "type": "java://org.auraframework.components.ui.TreeNode",
    "description": "For nodes generated via a server-side model, the dictionary representing the TreeNode object."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "traverse",
    "action": "{!c.traverse}"
   },
   {
    "name": "makeVisitor",
    "action": "{!c.makeVisitor}"
   },
   {
    "name": "getChildren",
    "action": "{!c.getChildren}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "getChildren",
    "type": "ui:getChildren"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!!v.hidden}"
   },
   {
    "istrue": "{!v.item.href != null || v.href != null}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.item.children}",
    "var": "child"
   }
  ],
  "cmp.ui.treenode": [
   {
    "item": "{!child}",
    "aura:id": "modelNode"
   }
  ]
 },
 "cmp.ui.underConstruction": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "GA",
    "description": "Displays “Unsupported” if the short attribute is set to true."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "short",
    "type": "Boolean",
    "default": "false",
    "description": "A short message that displays “Unsupported” if true, or “This field isn't currently supported.” otherwise. "
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.short}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ui.vbox": {
  "cmp.aura.component": [
   {
    "support": "BETA",
    "description": "This container component creates a vertical box area on a page with simple wrapper HTML."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "north",
    "type": "Aura.Component[]",
    "description": "The top facet of the component."
   },
   {
    "name": "south",
    "type": "Aura.Component[]",
    "description": "The bottom facet of the component."
   },
   {
    "name": "centerClass",
    "type": "String",
    "description": "A CSS style to be attached to the component. This style is added in addition to base styles output by <ui:vbox>."
   }
  ]
 },
 "cmp.ui.virtualDataGrid": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "support": "PROTO",
    "description": ""
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "sortBy",
    "type": "String",
    "description": "Comma-separated list of columns predicated by a '-' for descending."
   },
   {
    "name": "items",
    "type": "Object"
   },
   {
    "name": "sortBy",
    "type": "String"
   },
   {
    "name": "class",
    "type": "String",
    "description": "CSS class to be applied to the table element"
   },
   {
    "name": "items",
    "type": "List",
    "description": "A list of objects representing the rows of data in the grid"
   },
   {
    "name": "headerColumns",
    "type": "Aura.Component[]",
    "description": "Components used as the header elements of the table"
   },
   {
    "name": "columns",
    "type": "Aura.ComponentDefRef[]",
    "description": "Components used as the template for each row"
   },
   {
    "name": "columnsEdit",
    "type": "Aura.ComponentDefRef[]"
   },
   {
    "name": "dataModel",
    "type": "Aura.Component[]",
    "description": "Optional component to provide data for the grid"
   },
   {
    "name": "_dirty",
    "type": "Integer",
    "description": "Internal attribute for evaluating whether the grid should be rerendered"
   },
   {
    "name": "itemVar",
    "type": "String",
    "default": "item",
    "description": "The name of the variable to use for each item inside the grid"
   },
   {
    "name": "_sortBy",
    "type": "String",
    "default": "",
    "description": "Sort order of the data in the grid. Name of column, predicated by a '-' for descending."
   },
   {
    "name": "fixedHeader",
    "type": "Boolean",
    "default": "false",
    "description": "Specifies whether the grid should use CSS to fix the header's position and scroll the table body"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "refresh",
    "action": "{!c.handleRefresh}"
   },
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.items}",
    "action": "{!c.handleItemsChange}"
   },
   {
    "name": "change",
    "value": "{!v.columns}",
    "action": "{!c.handleColumnsChange}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "refresh",
    "type": "ui:refresh",
    "description": "Provides fresh data from the dataProvider."
   },
   {
    "name": "onsort",
    "type": "ui:sort"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "appendItems"
   },
   {
    "name": "sort"
   }
  ]
 },
 "cmp.ui.virtualList": {
  "cmp.aura.component": [
   {
    "implements": "ui:scrollerEmbeddable",
    "support": "BETA",
    "description": "Aura Virtual List"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "_dirty",
    "type": "Integer",
    "description": "Internal attribute for evaluating dirtyness"
   },
   {
    "name": "itemTemplate",
    "type": "Aura.ComponentDefRef[]",
    "required": "true",
    "description": ""
   },
   {
    "name": "items",
    "type": "Object[]"
   },
   {
    "name": "forceRender",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "itemVar",
    "type": "String",
    "required": "true",
    "description": "name for the variable to iterate"
   },
   {
    "name": "dataProvider",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "rerenderList"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.items}",
    "action": "{!c.handleItemsChange}"
   }
  ]
 },
 "cmp.uiExamples.autocompleteDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "size",
    "type": "Integer",
    "default": "10"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.uiExamples.autocompleteExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "autocompleteValue",
    "type": "String"
   },
   {
    "name": "autocompleteExtendedOptsValue",
    "type": "String"
   },
   {
    "name": "classes",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Press",
    "press": "{!c.changeClasses}"
   }
  ],
  "cmp.ui.label": [
   {
    "class": "fieldLabel",
    "label": "Selected Value"
   },
   {
    "class": "fieldLabel",
    "label": "Selected Value"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!v.autocompleteValue}",
    "class": "{!'output ' + (v.classes ? '' : 'stuff')}"
   },
   {
    "value": "{!v.autocompleteExtendedOptsValue}",
    "class": "{!'output ' + (v.classes ? '' : 'stuff')}"
   }
  ],
  "cmp.ui.autocomplete": [
   {
    "aura:id": "autocomplete",
    "inputclass": "autocomplete",
    "optionvar": "row",
    "matchdone": "{!c.handleMatch}",
    "inputchange": "{!c.handleInput}",
    "selectlistoption": "{!c.handleSelection}",
    "label": "Autocomplete"
   },
   {
    "aura:id": "autocompleteExtendedOpts",
    "inputclass": "autocomplete",
    "optionvar": "row",
    "matchdone": "{!c.handleMatch}",
    "inputchange": "{!c.handleInput}",
    "selectlistoption": "{!c.handleSelection}",
    "label": "Autocomplete"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   }
  ],
  "cmp.uiexamples.autocompletedataprovider": [
   {},
   {}
  ],
  "cmp.ui.autocompleteoption": [
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   }
  ],
  "cmp.uiexamples.autocompleteoptionexampleextended": [
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   }
  ]
 },
 "cmp.uiExamples.autocompleteOptionExample": {
  "cmp.aura.component": [
   {
    "extends": "ui:autocompleteOption",
    "support": "beta",
    "extensible": "true",
    "description": "This component provides a custom representation of a list item in an ui:autocomplete component."
   }
  ]
 },
 "cmp.uiExamples.autocompleteOptionExampleExtended": {
  "cmp.aura.component": [
   {
    "extends": "uiExamples:autocompleteOptionExample",
    "support": "beta",
    "description": "This component provides a custom representation of a list item in an ui:autocomplete component."
   }
  ]
 },
 "cmp.uiExamples.buttonExample": {
  "cmp.aura.component": [
   {
    "access": "global"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "name",
    "label": "Enter Name:",
    "placeholder": "Your Name"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "button",
    "buttontitle": "Click to see what you put into the field",
    "class": "button",
    "label": "Click me",
    "press": "{!c.getInput}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outName",
    "value": "",
    "class": "text"
   }
  ]
 },
 "cmp.uiExamples.checkbox": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "myBool",
    "type": "Boolean",
    "default": "true"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "aura:id": "checkbox",
    "label": "Select?",
    "change": "{!c.onCheck}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "class": "result",
    "aura:id": "checkResult",
    "value": "false"
   }
  ],
  "cmp.ui.outputcheckbox": [
   {
    "aura:id": "output",
    "value": "{!v.myBool}"
   }
  ]
 },
 "cmp.uiExamples.currency": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputcurrency": [
   {
    "aura:id": "amount",
    "label": "Amount",
    "class": "field",
    "value": "50"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "btn",
    "label": "Submit",
    "press": "{!c.setOutput}"
   }
  ],
  "cmp.ui.outputcurrency": [
   {
    "aura:id": "oCurrency",
    "value": ""
   }
  ]
 },
 "cmp.uiExamples.dataGridDynamicColumns": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "sortBy",
    "type": "String"
   },
   {
    "name": "pageSize",
    "type": "Integer",
    "default": "14"
   },
   {
    "name": "currentPage",
    "type": "Integer",
    "default": "1"
   },
   {
    "name": "totalItems",
    "type": "Integer"
   },
   {
    "name": "index",
    "type": "Integer"
   },
   {
    "name": "count",
    "type": "Integer"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.currentPage}",
    "action": "{!c.handleCurrentPageChange}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Init Base Columns",
    "press": "{!c.initColumns}"
   },
   {
    "label": "Insert Columns",
    "press": "{!c.insertNewColumns}"
   },
   {
    "label": "Change 6th Column",
    "press": "{!c.switchColumn}"
   },
   {
    "label": "Remove Columns",
    "press": "{!c.removeColumns}"
   },
   {
    "label": "Re-fire datagrid's provide",
    "press": "{!c.replaceData}"
   },
   {
    "label": "Fire Data Provider With Empty Data",
    "press": "{!c.emptyData}"
   }
  ],
  "cmp.ui.datagrid": [
   {
    "aura:id": "grid",
    "sortby": "{!v.sortBy}",
    "summary": "Assorted Data for testing"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   }
  ],
  "cmp.uiexamples.datagridkitchensinkdataprovider": [
   {
    "aura:id": "data",
    "sortby": "{!v.sortBy}",
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.ui.pagernextprevious": [
   {
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.ui.pagerpageinfo": [
   {
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalitems": "{!v.totalItems}"
   }
  ]
 },
 "cmp.uiExamples.dataGridKitchenSink": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "mode",
    "type": "String",
    "default": "VIEW"
   },
   {
    "name": "sortBy",
    "type": "String"
   },
   {
    "name": "pageSize",
    "type": "Integer",
    "default": "10"
   },
   {
    "name": "currentPage",
    "type": "Integer",
    "default": "1"
   },
   {
    "name": "totalItems",
    "type": "Integer",
    "default": "100"
   },
   {
    "name": "index",
    "type": "Integer"
   },
   {
    "name": "count",
    "type": "Integer"
   },
   {
    "name": "className",
    "type": "String"
   },
   {
    "name": "rowIndex",
    "type": "Integer"
   },
   {
    "name": "gridItems",
    "type": "List"
   },
   {
    "name": "gridSelectedItems",
    "type": "List"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.currentPage}",
    "action": "{!c.handleCurrentPageChange}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "mode",
    "class": "kitchenButton",
    "label": "{!v.mode}",
    "press": "{!c.handleModePress}"
   },
   {
    "class": "kitchenButton",
    "label": "Add row",
    "press": "{!c.handleAddRow}"
   },
   {
    "class": "kitchenButton",
    "label": "Insert",
    "press": "{!c.handleInsert}"
   },
   {
    "class": "kitchenButton",
    "label": "Remove",
    "press": "{!c.handleRemove}"
   },
   {
    "class": "kitchenButton",
    "label": "Change Columns",
    "press": "{!c.switchColumn}"
   },
   {
    "class": "kitchenButton",
    "label": "Disable Row",
    "press": "{!c.disableRow}"
   },
   {
    "class": "kitchenButton",
    "label": "Enable Row",
    "press": "{!c.enableRow}"
   },
   {
    "class": "kitchenButton",
    "label": "Add Class",
    "press": "{!c.addClass}"
   },
   {
    "class": "kitchenButton",
    "label": "Remove Class",
    "press": "{!c.removeClass}"
   },
   {
    "class": "kitchenButton",
    "label": "Toggle Class",
    "press": "{!c.toggleClass}"
   },
   {
    "label": "Re-fire datagrid's provide",
    "press": "{!c.replaceData}"
   },
   {
    "label": "Fire Data Provider With Empty Data",
    "press": "{!c.emptyData}"
   },
   {
    "label": "Spit Out Items",
    "press": "{!c.spit}"
   },
   {
    "label": "Grab Selected",
    "press": "{!c.getSelected}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "placeholder": "index",
    "value": "{!v.index}"
   },
   {
    "placeholder": "count",
    "value": "{!v.count}"
   },
   {
    "placeholder": "row index",
    "value": "{!v.rowIndex}"
   },
   {
    "placeholder": "class",
    "value": "{!v.className}"
   }
  ],
  "cmp.ui.datagrid": [
   {
    "aura:id": "grid",
    "mode": "{!v.mode}",
    "sortby": "{!v.sortBy}",
    "summary": "Assorted Data for testing"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "columns"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "actionDelegate"
   },
   {
    "attribute": "left"
   },
   {
    "attribute": "right"
   }
  ],
  "cmp.ui.datagridselectioncolumn": [
   {}
  ],
  "cmp.ui.datagridcolumn": [
   {
    "label": "Id",
    "name": "id",
    "sortable": "true",
    "asclabel": "ASC",
    "desclabel": "DSC"
   },
   {
    "label": "Subject",
    "name": "subject"
   },
   {
    "label": "Name",
    "name": "who.name"
   },
   {
    "label": "Related To",
    "name": "what.name"
   },
   {
    "label": "Due Date",
    "name": "activityDate"
   }
  ],
  "cmp.ui.datagridactioncolumn": [
   {
    "label": "Actions"
   }
  ],
  "cmp.ui.actionbutton": [
   {
    "name": "disable",
    "label": "Disable",
    "index": "{!index}",
    "disabled": "{!disabled}"
   },
   {
    "name": "enable",
    "label": "Enable",
    "index": "{!index}",
    "disabled": "{!!disabled}"
   },
   {
    "name": "toggleClass",
    "label": "Toggle Class",
    "index": "{!index}",
    "disabled": "{!disabled}"
   }
  ],
  "cmp.uiexamples.datagridkitchensinkdataprovider": [
   {
    "aura:id": "data",
    "sortby": "{!v.sortBy}",
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.ui.actiondelegate": [
   {
    "onaction": "{!c.handleAction}"
   }
  ],
  "cmp.ui.pagernextprevious": [
   {
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.ui.pagerpageinfo": [
   {
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.ui.block": [
   {}
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "items",
    "var": "item",
    "items": "{!v.gridItems}"
   },
   {
    "aura:id": "selectedItems",
    "var": "item",
    "items": "{!v.gridSelectedItems}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!item.id + ':' + item.subject + ':' + item.who.name + ':' + item.what.name + ':' + item.activityDate}"
   },
   {
    "value": "{!item.id + ':' + item.subject + ':' + item.who.name + ':' + item.what.name + ':' + item.activityDate}"
   }
  ]
 },
 "cmp.uiExamples.dataGridKitchenSinkDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "sortBy",
    "type": "String"
   },
   {
    "name": "empty",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "throwError",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "provide",
    "action": "{!c.handleProvide}"
   }
  ]
 },
 "cmp.uiExamples.dataProviderExample": {
  "cmp.aura.component": [
   {
    "implements": "ui:pagingInterface, ui:scrollerEmbeddable",
    "access": "global"
   }
  ],
  "cmp.ui.list": [
   {
    "aura:id": "list",
    "itemvar": "row",
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.uiexamples.infinitedataprovider": [
   {
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   }
  ]
 },
 "cmp.uiExamples.date": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "today",
    "type": "Date",
    "default": ""
   }
  ],
  "cmp.ui.inputdate": [
   {
    "aura:id": "expdate",
    "label": "Today's Date",
    "class": "field",
    "value": "{!v.today}",
    "displaydatepicker": "true"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "btn",
    "label": "Submit",
    "press": "{!c.setOutput}"
   }
  ],
  "cmp.ui.outputdate": [
   {
    "aura:id": "oDate",
    "value": ""
   }
  ]
 },
 "cmp.uiExamples.datePicker": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "selectedDate",
    "type": "Date"
   }
  ],
  "cmp.ui.datepicker": [
   {
    "aura:id": "datePicker",
    "visible": "true",
    "selectdate": "{!c.handleSelectedDate}"
   }
  ],
  "cmp.ui.inputdatetrigger": [
   {},
   {},
   {},
   {},
   {}
  ],
  "cmp.ui.datepickermanager": [
   {}
  ]
 },
 "cmp.uiExamples.datetime": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "today",
    "type": "Date",
    "default": ""
   }
  ],
  "cmp.ui.inputdatetime": [
   {
    "aura:id": "today",
    "label": "Time",
    "class": "field",
    "value": "",
    "displaydatepicker": "true"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "btn",
    "label": "Submit",
    "press": "{!c.setOutput}"
   }
  ],
  "cmp.ui.outputdatetime": [
   {
    "aura:id": "oDateTime",
    "value": ""
   }
  ]
 },
 "cmp.uiExamples.detailPopover": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.block": [
   {}
  ],
  "cmp.aura.set": [
   {
    "attribute": "left"
   },
   {
    "attribute": "right"
   }
  ]
 },
 "cmp.uiExamples.dragAndDropExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "_context1",
    "access": "private",
    "type": "Object"
   },
   {
    "name": "_context2",
    "access": "private",
    "type": "Object"
   },
   {
    "name": "_context3",
    "access": "private",
    "type": "Object"
   },
   {
    "name": "_accessibilityComponent",
    "access": "private",
    "type": "String"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.draganddropaccessibilitymenu": [
   {
    "aura:id": "accessibilityComponent"
   }
  ],
  "cmp.ui.dropzone": [
   {
    "incontextof": "{!v._context1}",
    "label": "List A",
    "types": "move,copy",
    "class": "sampleList",
    "dragoverclass": "dragOver",
    "drop": "{!c.handleDrop}"
   },
   {
    "incontextof": "{!v._context2}",
    "label": "List B",
    "types": "move",
    "class": "sampleList",
    "dragoverclass": "dragOver",
    "drop": "{!c.handleDrop}"
   },
   {
    "incontextof": "{!v._context3}",
    "label": "List C",
    "types": "copy",
    "class": "sampleList",
    "dragoverclass": "dragOver",
    "drop": "{!c.handleDrop}"
   }
  ],
  "cmp.ui.infinitelist": [
   {
    "aura:id": "list",
    "itemvar": "item"
   },
   {
    "aura:id": "list",
    "itemvar": "item"
   },
   {
    "aura:id": "list",
    "itemvar": "item"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "header"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "header"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "header"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.ui.outputlabel": [
   {
    "value": "Move & Copy Dropzone"
   },
   {
    "value": "Move Dropzone"
   },
   {
    "value": "Copy Dropzone"
   }
  ],
  "cmp.uiexamples.draganddropprovider": [
   {
    "prefix": "Acme (move)",
    "count": "5"
   },
   {
    "prefix": "Foo (move)",
    "count": "3"
   },
   {
    "prefix": "Bar (copy)",
    "count": "4"
   }
  ],
  "cmp.ui.draggable": [
   {
    "incontextof": "{!v._context1}",
    "datatransfer": "{!item}",
    "type": "move",
    "dragend": "{!c.handleDragEnd}",
    "class": "sampleCard",
    "dragclass": "dragging",
    "dragimageclass": "dragImage",
    "accessibilitycomponent": "{!v._accessibilityComponent}"
   },
   {
    "incontextof": "{!v._context2}",
    "datatransfer": "{!item}",
    "type": "move",
    "dragend": "{!c.handleDragEnd}",
    "class": "sampleCard",
    "dragclass": "dragging",
    "accessibilitycomponent": "{!v._accessibilityComponent}"
   },
   {
    "incontextof": "{!v._context3}",
    "datatransfer": "{!item}",
    "type": "copy",
    "dragend": "{!c.handleDragEnd}",
    "class": "sampleCard",
    "dragclass": "dragging",
    "accessibilitycomponent": "{!v._accessibilityComponent}"
   }
  ]
 },
 "cmp.uiExamples.dragAndDropProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "prefix",
    "type": "String",
    "default": "Acme"
   },
   {
    "name": "count",
    "type": "Integer",
    "default": "5"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.uiExamples.email": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputemail": [
   {
    "aura:id": "email",
    "label": "Email",
    "class": "field",
    "value": "manager@email.com"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "btn",
    "label": "Submit",
    "press": "{!c.setOutput}"
   }
  ],
  "cmp.ui.outputemail": [
   {
    "aura:id": "oEmail",
    "value": "Email"
   }
  ]
 },
 "cmp.uiExamples.infiniteDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "listType",
    "type": "String"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.uiExamples.infiniteList": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.uiexamples.mobileviewport": [
   {}
  ],
  "cmp.ui.scroller": [
   {
    "onpulltorefresh": "{!c.handleRefresh}",
    "onpulltoshowmore": "{!c.handleShowMore}"
   }
  ],
  "cmp.ui.infinitelist": [
   {
    "aura:id": "list",
    "itemvar": "item",
    "enablerowswipe": "true"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "dataProvider"
   }
  ],
  "cmp.uiexamples.infinitelistrow": [
   {
    "item": "{!item}"
   }
  ],
  "cmp.uiexamples.infinitelistdataprovider": [
   {}
  ]
 },
 "cmp.uiExamples.infiniteListDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "model": "js://uiExamples.infiniteListDataProvider"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.handleProvide}"
   }
  ]
 },
 "cmp.uiExamples.infiniteListRow": {
  "cmp.aura.component": [
   {
    "extends": "ui:infiniteListRow"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "item",
    "type": "Object"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "swipeBody"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Edit",
    "press": "{!c.handleEdit}"
   },
   {
    "label": "Delete"
   }
  ]
 },
 "cmp.uiExamples.inputExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "today",
    "type": "Date",
    "default": ""
   },
   {
    "name": "deadline",
    "type": "Date"
   },
   {
    "name": "display",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "name",
    "label": "Expense",
    "class": "field",
    "value": "My Expense",
    "required": "true"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "aura:id": "num",
    "label": "Org Code",
    "class": "field",
    "value": "123",
    "required": "true"
   }
  ],
  "cmp.ui.inputsecret": [
   {
    "aura:id": "secret",
    "label": "Pin",
    "class": "field",
    "value": "123456"
   }
  ],
  "cmp.ui.inputemail": [
   {
    "aura:id": "email",
    "label": "Approver's Email",
    "class": "field",
    "value": "manager@email.com"
   }
  ],
  "cmp.ui.inputphone": [
   {
    "aura:id": "phone",
    "label": "Approver's Phone",
    "class": "field",
    "value": "415-123-4567"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "aura:id": "expdate",
    "label": "Expense Date",
    "class": "field",
    "value": "{!v.today}",
    "displaydatepicker": "true"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "aura:id": "reimbursed",
    "label": "Reimbursed?",
    "value": "true"
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "aura:id": "comments",
    "label": "Comments",
    "value": "My comments",
    "rows": "5"
   }
  ],
  "cmp.ui.inputurl": [
   {
    "aura:id": "url",
    "label": "Venue URL",
    "class": "field",
    "value": "http://www.myURL.com"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "btn",
    "label": "Submit",
    "press": "{!c.setOutput}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "oName",
    "value": "Click Submit to see the input values.",
    "class": "output"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.display}"
   }
  ],
  "cmp.ui.outputnumber": [
   {
    "aura:id": "oNumber",
    "value": ""
   }
  ],
  "cmp.ui.outputemail": [
   {
    "aura:id": "oEmail",
    "value": "Email"
   }
  ],
  "cmp.ui.outputphone": [
   {
    "aura:id": "oPhone",
    "value": ""
   }
  ],
  "cmp.ui.outputdate": [
   {
    "aura:id": "oDate",
    "value": ""
   }
  ],
  "cmp.ui.outputdatetime": [
   {
    "aura:id": "oDateTime",
    "value": "",
    "format": "MMM dd, yyyy hh:mm:ss A"
   }
  ],
  "cmp.ui.outputcheckbox": [
   {
    "aura:id": "oCheckbox",
    "value": ""
   }
  ],
  "cmp.ui.outputtextarea": [
   {
    "aura:id": "oTextarea",
    "value": ""
   }
  ],
  "cmp.ui.outputurl": [
   {
    "aura:id": "oURL",
    "value": ""
   }
  ]
 },
 "cmp.uiExamples.inputNumberExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputnumber": [
   {
    "aura:id": "inputCmp",
    "label": "Enter a number: "
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Submit",
    "press": "{!c.validate}"
   }
  ],
  "cmp.ui.outputnumber": [
   {
    "aura:id": "outNum",
    "value": ""
   }
  ]
 },
 "cmp.uiExamples.inputTextExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "color",
    "label": "Enter some text: ",
    "placeholder": "Blue"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Validate",
    "press": "{!c.checkInput}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outColor",
    "value": "",
    "class": "text"
   }
  ]
 },
 "cmp.uiExamples.iterationExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.iteration": [
   {
    "items": "1,2,3,4,5",
    "var": "item"
   }
  ]
 },
 "cmp.uiExamples.libraryExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.import": [
   {
    "library": "uiExamples:libraryExternal",
    "property": "libraryDoc"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "this",
    "action": "{!c.initialize}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "message",
    "default": "Error",
    "type": "String",
    "description": "Displays library invocation message."
   }
  ]
 },
 "cmp.uiExamples.mobileViewport": {
  "cmp.aura.component": [
   {
    "description": "A component to remove the boilerplate neccessary for a mobile demo."
   }
  ]
 },
 "cmp.uiExamples.modalContent": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.uiExamples.outputExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "myText",
    "type": "String",
    "default": "A string waiting to change."
   },
   {
    "name": "myNum",
    "type": "Decimal",
    "default": "10.10"
   },
   {
    "name": "myCurr",
    "type": "Decimal",
    "default": "50000"
   },
   {
    "name": "myBool",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "myDate",
    "type": "Date",
    "default": "2014-09-29"
   },
   {
    "name": "myDateTime",
    "type": "Date",
    "default": "2014-09-29T00:17:08z"
   },
   {
    "name": "myTextArea",
    "type": "String",
    "default": "This is a string"
   },
   {
    "name": "myURL",
    "type": "String",
    "default": "http://www.google.com"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Change",
    "press": "{!c.change}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!v.myText}",
    "label": "outputText"
   }
  ],
  "cmp.ui.outputnumber": [
   {
    "value": "{!v.myNum}",
    "format": ".00"
   }
  ],
  "cmp.ui.outputcurrency": [
   {
    "aura:id": "curr",
    "value": "{!v.myCurr}"
   }
  ],
  "cmp.ui.outputcheckbox": [
   {
    "value": "{!v.myBool}"
   }
  ],
  "cmp.ui.outputdate": [
   {
    "value": "{!v.myDate}"
   }
  ],
  "cmp.ui.outputdatetime": [
   {
    "value": "{!v.myDateTime}"
   }
  ],
  "cmp.ui.outputemail": [
   {
    "value": "abc@email.com",
    "label": "abc@email.com"
   }
  ],
  "cmp.ui.outputphone": [
   {
    "value": "415-123-4567"
   }
  ],
  "cmp.ui.outputtextarea": [
   {
    "value": "{!v.myTextArea}",
    "label": "my output"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "value": "{!v.myURL}",
    "label": "{!v.myURL}"
   }
  ]
 },
 "cmp.uiExamples.panelContent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "class",
    "type": "String",
    "default": ""
   }
  ]
 },
 "cmp.uiExamples.panelDialogExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.showNonModal}",
    "aura:id": "detailTrigger",
    "label": "Show Non-Modal Dialog"
   },
   {
    "press": "{!c.showModal}",
    "aura:id": "forModal",
    "label": "Show Modal Dialog"
   }
  ],
  "cmp.ui.panelmanager": [
   {}
  ]
 },
 "cmp.uiExamples.panelFooter": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.button": [
   {
    "class": "flat-btn",
    "label": "open new panel",
    "press": "{!c.openNewPanel}"
   },
   {
    "class": "flat-btn",
    "label": "Cancel"
   },
   {
    "class": "flat-btn",
    "label": "Save"
   }
  ]
 },
 "cmp.uiExamples.panelHeader": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.registerevent": [
   {
    "name": "notify",
    "type": "ui:notify"
   }
  ]
 },
 "cmp.uiExamples.panelPositioningExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:panelPositioningLib",
    "property": "lib"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "btn",
    "label": "North",
    "press": "{!c.goNorth}"
   },
   {
    "class": "btn",
    "label": "South",
    "press": "{!c.goSouth}"
   },
   {
    "class": "btn",
    "label": "East",
    "press": "{!c.goEast}"
   },
   {
    "class": "btn",
    "label": "West",
    "press": "{!c.goWest}"
   },
   {
    "class": "btn",
    "label": "Destroy all Constraints",
    "press": "{!c.destroy}"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "aura:id": "stayinwindow",
    "label": "Stay in window?",
    "value": "true",
    "change": "{!c.toggleBox}"
   }
  ]
 },
 "cmp.uiExamples.phone": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputphone": [
   {
    "aura:id": "phone",
    "label": "Phone Number",
    "class": "field",
    "value": "415-123-4567"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "btn",
    "label": "Submit",
    "press": "{!c.setOutput}"
   }
  ],
  "cmp.ui.outputphone": [
   {
    "aura:id": "oPhone",
    "value": ""
   }
  ]
 },
 "cmp.uiExamples.popupExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.popup": [
   {
    "label": "trigger"
   },
   {
    "label": "trigger"
   },
   {
    "label": "trigger"
   }
  ],
  "cmp.ui.popuptrigger": [
   {},
   {},
   {}
  ],
  "cmp.ui.popuptarget": [
   {},
   {
    "attachtobody": "true",
    "closeonclickinside": "true"
   },
   {
    "attachtobody": "true",
    "curtain": "true"
   }
  ]
 },
 "cmp.uiExamples.radio": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "stages",
    "type": "String[]",
    "default": "Any,Open,Closed,Closed Won"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.stages}",
    "var": "stage"
   }
  ],
  "cmp.ui.inputradio": [
   {
    "label": "{!stage}",
    "change": "{!c.onRadio}"
   },
   {
    "aura:id": "r0",
    "name": "others",
    "label": "Prospecting",
    "change": "{!c.onGroup}"
   },
   {
    "aura:id": "r1",
    "name": "others",
    "label": "Qualification",
    "change": "{!c.onGroup}",
    "value": "true"
   },
   {
    "aura:id": "r2",
    "name": "others",
    "label": "Needs Analysis",
    "change": "{!c.onGroup}"
   },
   {
    "aura:id": "r3",
    "name": "others",
    "label": "Closed Lost",
    "change": "{!c.onGroup}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "class": "result",
    "aura:id": "radioResult",
    "value": ""
   },
   {
    "class": "result",
    "aura:id": "radioGroupResult",
    "value": ""
   }
  ]
 },
 "cmp.uiExamples.renderIfExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "display",
    "type": "Boolean",
    "default": "true"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.display}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.uiExamples.secret": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputsecret": [
   {
    "aura:id": "secret",
    "label": "Pin",
    "class": "field",
    "value": "123456"
   }
  ]
 },
 "cmp.uiExamples.tabsetExample": {
  "cmp.aura.component": [
   {
    "model": "js://uiExamples.tabsetExample"
   }
  ],
  "cmp.ui.tabset": [
   {
    "class": "tabset",
    "lazyrendertabs": "{!true}"
   },
   {
    "aura:id": "overflowTabs",
    "class": "tabset overflowTabset",
    "lazyrendertabs": "{!true}",
    "useoverflowmenu": "true",
    "barwidth": "600",
    "tabitemwidth": "200"
   },
   {
    "class": "tabset left"
   },
   {
    "class": "tabset"
   },
   {
    "aura:id": "navigationTabset",
    "class": "tabset"
   },
   {
    "class": "tabset"
   },
   {
    "aura:id": "addableTabset",
    "class": "tabset"
   },
   {
    "class": "tabset",
    "tabs": "{!m.tabs}"
   }
  ],
  "cmp.ui.tab": [
   {
    "title": "Short Text"
   },
   {
    "title": "Long Text"
   },
   {
    "title": "tab with input text"
   },
   {
    "title": "tab with iframe"
   },
   {
    "title": "Short Text"
   },
   {
    "title": "Long Text"
   },
   {
    "title": "tab with input text"
   },
   {
    "title": "tab with iframe"
   },
   {
    "title": "Side Tab 1"
   },
   {
    "title": "Side Tab 2"
   },
   {
    "title": "Side Tab 3"
   },
   {
    "title": "Side Tab 4"
   },
   {
    "title": "Tab 1"
   },
   {
    "title": "Tab 2"
   },
   {
    "title": "Tab 3",
    "active": "{!true}"
   },
   {
    "title": "Tab 4"
   },
   {
    "title": "Tab 1",
    "closable": "true"
   },
   {
    "title": "Tab 2",
    "closable": "true"
   },
   {
    "title": "Tab 3",
    "closable": "true"
   },
   {
    "title": "Tab 4",
    "closable": "true"
   },
   {
    "title": "Tab 1"
   },
   {
    "title": "Tab 2"
   },
   {
    "aura:id": "dirtyTab",
    "title": "Event Tab",
    "beforeactivate": "{!c.onBeforeActivate}"
   },
   {
    "title": "Tab Content created dynamically",
    "onactivated": "{!c.loadContent}"
   },
   {
    "title": "Tab 1"
   },
   {
    "title": "Tab 2"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "label": "My Input Text",
    "value": "",
    "placeholder": "input text here"
   },
   {
    "value": "",
    "label": "Name",
    "placeholder": "input text"
   },
   {
    "label": "My Input Text",
    "value": "",
    "placeholder": "input text here"
   },
   {
    "value": "",
    "label": "Name",
    "placeholder": "input text"
   },
   {
    "value": "",
    "label": "Name",
    "placeholder": "input text"
   },
   {
    "value": "",
    "label": "Name",
    "placeholder": "input text"
   },
   {
    "class": "tabsetInput",
    "label": "Tab Title",
    "aura:id": "inputTabTitle",
    "placeholder": "title"
   },
   {
    "class": "tabsetInput",
    "label": "Tab Name",
    "aura:id": "inputTabName",
    "placeholder": "name"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "previous",
    "press": "{!c.onPrevious}",
    "label": "Previous Tab"
   },
   {
    "class": "next",
    "press": "{!c.onNext}",
    "label": "Next Tab"
   },
   {
    "label": "Mark Event Tab Dirty",
    "press": "{!c.markDirty}"
   },
   {
    "label": "Clear Event Tab",
    "press": "{!c.clearDirty}"
   },
   {
    "label": "Add Tab",
    "press": "{!c.addTab}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "icon"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "dirtyTabTitle",
    "value": ""
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "class": "tabsetInput",
    "label": "Tab Content",
    "aura:id": "inputTabContent",
    "placeholder": "content"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "class": "tabsetInput",
    "aura:id": "inputTabClosable",
    "value": "closable"
   },
   {
    "class": "tabsetInput",
    "aura:id": "inputTabActive",
    "value": "active"
   }
  ]
 },
 "cmp.uiExamples.text": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "name",
    "label": "Enter some text",
    "class": "field",
    "value": "My Text"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "btn",
    "label": "Submit",
    "press": "{!c.setOutput}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "oName",
    "value": ""
   }
  ]
 },
 "cmp.uiExamples.textarea": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputtextarea": [
   {
    "aura:id": "comments",
    "label": "Comments",
    "value": "My comments",
    "rows": "5"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "btn",
    "label": "Submit",
    "press": "{!c.setOutput}"
   }
  ],
  "cmp.ui.outputtextarea": [
   {
    "aura:id": "oTextarea",
    "value": ""
   }
  ]
 },
 "cmp.uiExamples.tooltipExample": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.tooltip": [
   {
    "fadeinduration": "1000",
    "tooltipbody": "corpus means body"
   },
   {
    "advanced": "true",
    "triggerclass": "my-trigger-class",
    "tooltipbody": "You have to use the advanced mode in this case. Also it is very, very large and could never fit on screen in some cases. Wow, this is a lot of text! It just goes on and on and on. It is a whole entire paragraph."
   },
   {
    "advanced": "true",
    "tooltipbody": "This is another one"
   },
   {
    "tooltipbody": "Click here for more info"
   },
   {
    "disabled": "true",
    "fadeoutduration": "500",
    "triggerclass": "my-trigger-class",
    "tooltipbody": "Please?"
   },
   {
    "fadeinduration": "500",
    "triggerclass": "my-trigger-class",
    "tooltipbody": "We PROMISE we will never, ever spam you. Never, ever."
   },
   {
    "delay": "500",
    "fadeinduration": "500",
    "fadeoutduration": "500",
    "tooltipbody": "TPS reports now require a cover sheet"
   },
   {
    "advanced": "true",
    "trigger": "focus",
    "tooltipbody": "Focus will toggle this"
   },
   {
    "advanced": "true",
    "disabled": "true",
    "trigger": "focus",
    "tooltipbody": "Focus will toggle this too"
   },
   {
    "advanced": "true",
    "trigger": "none",
    "aura:id": "theTip",
    "tooltipbody": "You have to use the advanced mode in this case. Also it is very, very large and could never fit on screen in some cases. Wow, this is a lot of text! It just goes on and on and on. It is a whole entire paragraph."
   }
  ],
  "cmp.ui.inputtext": [
   {
    "placeholder": "Show tooltip on focus",
    "type": "text",
    "aura:id": "mrfocus"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "click me",
    "press": "{!c.handleClick}"
   }
  ]
 },
 "cmp.uiExamples.url": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputurl": [
   {
    "aura:id": "url",
    "label": "Venue URL",
    "class": "field",
    "value": "http://www.myURL.com"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "btn",
    "label": "Submit",
    "press": "{!c.setOutput}"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "aura:id": "oURL",
    "value": ""
   }
  ]
 },
 "cmp.uiExamples.virtualDataGridKitchenSink": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "sortBy",
    "type": "String"
   },
   {
    "name": "pageSize",
    "type": "Integer",
    "default": "10"
   },
   {
    "name": "currentPage",
    "type": "Integer",
    "default": "1"
   },
   {
    "name": "totalItems",
    "type": "Integer"
   },
   {
    "name": "index",
    "type": "Integer"
   },
   {
    "name": "count",
    "type": "Integer"
   },
   {
    "name": "className",
    "type": "String"
   },
   {
    "name": "rowIndex",
    "type": "Integer"
   },
   {
    "name": "gridItems",
    "type": "List"
   },
   {
    "name": "gridSelectedItems",
    "type": "List"
   },
   {
    "name": "provideNoData",
    "type": "Boolean"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.currentPage}",
    "action": "{!c.handleCurrentPageChange}"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "kitchenButton",
    "label": "Change Columns",
    "press": "{!c.switchColumn}"
   },
   {
    "class": "kitchenButton",
    "label": "Re-fire datagrid's provide",
    "press": "{!c.replaceData}"
   },
   {
    "class": "kitchenButton",
    "label": "Fire Data Provider With Empty Data",
    "press": "{!c.emptyData}"
   },
   {
    "label": "Spit Out Items",
    "press": "{!c.spit}"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "label": "Provide no data",
    "value": "{!v.provideNoData}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "label": "Sorting By:",
    "value": "{!v.sortBy}"
   },
   {
    "value": "{!item.id}"
   },
   {
    "value": "{!item.subject}"
   },
   {
    "value": "{!item.who.name}"
   },
   {
    "value": "{!item.what.name}"
   },
   {
    "value": "{!item.activityDate}"
   },
   {
    "value": "{!item.id + ':' + item.subject + ':' + item.who.name + ':' + item.what.name + ':' + item.activityDate}"
   }
  ],
  "cmp.ui.virtualdatagrid": [
   {
    "aura:id": "grid",
    "onsort": "{!c.onsort}",
    "fixedheader": "true"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "headerColumns"
   },
   {
    "attribute": "columns"
   },
   {
    "attribute": "dataModel"
   }
  ],
  "cmp.ui.datagridcolumn": [
   {
    "name": "id",
    "label": "Id",
    "sortable": "true"
   },
   {
    "name": "subject",
    "label": "Subject",
    "sortable": "true"
   },
   {
    "name": "who.name",
    "label": "Name"
   },
   {
    "name": "what.name",
    "label": "Related To"
   },
   {
    "name": "activityDate",
    "label": "Due Date"
   }
  ],
  "cmp.uiexamples.datagridkitchensinkdataprovider": [
   {
    "aura:id": "data",
    "sortby": "{!v.sortBy}",
    "totalitems": "2000",
    "pagesize": "2000",
    "throwerror": "{!v.provideNoData}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "items",
    "var": "item",
    "items": "{!v.gridItems}"
   }
  ]
 },
 "cmp.actionsTest.beanActionModel": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.TestControllerBean",
    "model": "java://org.auraframework.components.test.java.model.TestModelBean"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.onInit}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "counter",
    "type": "string"
   }
  ],
  "cmp.actionstest.beanactionmodelchild": [
   {
    "aura:id": "childCmp"
   }
  ]
 },
 "cmp.actionsTest.beanActionModelChild": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.TestControllerBean",
    "model": "java://org.auraframework.components.test.java.model.TestModelBean"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.onInitChild}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "childCounter",
    "type": "string"
   }
  ]
 },
 "cmp.actionsTest.chainBoundaryCases": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.impl.java.controller.ActionChainingController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "responseOrder",
    "default": ""
   },
   {
    "type": "Integer",
    "name": "callbackCount",
    "default": "0"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "press",
    "type": "ui:press"
   }
  ]
 },
 "cmp.actionsTest.chainExternalActions": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.TestController"
   }
  ],
  "cmp.actionstest.chainlocalactions": [
   {
    "aura:id": "facet"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "press",
    "type": "ui:press"
   }
  ]
 },
 "cmp.actionsTest.chainLocalActions": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.impl.java.controller.ActionChainingController",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "responseOrder",
    "default": ""
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.handleClick}",
    "label": "Add Two numbers"
   },
   {
    "press": "{!c.callServerButPassNoChainedActions}",
    "label": "Add Two numbers and pass null for chained actions parameter"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "press",
    "type": "ui:press"
   }
  ]
 },
 "cmp.actionsTest.clientAction": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.impl.java.controller.ParallelActionTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Run client action in foreground",
    "press": "{!c.clientExecuteInForeground}",
    "aura:id": "executeInForeground"
   },
   {
    "label": "Run client action in background",
    "press": "{!c.clientExecuteInBackground}",
    "aura:id": "executeInBackground"
   },
   {
    "label": "Run client action in FOREGROUND (case-sensitivity of controller method name)",
    "press": "{!c.clientExecuteInFOREGROUND}",
    "aura:id": "executeInFOREGROUND"
   }
  ]
 },
 "cmp.actionsTest.deferredServerAction": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.impl.java.controller.DeferredServerActionTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "result",
    "type": "String"
   },
   {
    "name": "error",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "simpleDeferBtn",
    "label": "simple defer",
    "press": "{!c.simpleDefer}"
   },
   {
    "aura:id": "chainedDeferBtn",
    "label": "chained defer",
    "press": "{!c.chainedDefer}"
   },
   {
    "aura:id": "errorDeferBtn",
    "label": "error defer",
    "press": "{!c.errorDefer}"
   },
   {
    "aura:id": "chainedErrorDeferBtn",
    "label": "chained error defer",
    "press": "{!c.chainedErrorDefer}"
   },
   {
    "aura:id": "callbackWrappedDeferBtn",
    "label": "callback wrapped defer",
    "press": "{!c.callbackWrappedDefer}"
   }
  ]
 },
 "cmp.actionsTest.serverAction": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.impl.java.controller.ParallelActionTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "errorMessage",
    "type": "string"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "name": "actions",
    "secure": "true",
    "debugloggingenabled": "true",
    "defaultexpiration": "60",
    "defaultautorefreshinterval": "60"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Run server action in foreground",
    "press": "{!c.cExecuteInForeground}",
    "aura:id": "executeInForeground"
   },
   {
    "label": "Run server action in foreground with return",
    "press": "{!c.cExecuteInForegroundWithReturn}",
    "aura:id": "executeInForegroundWithReturn"
   },
   {
    "label": "Run server action in background",
    "press": "{!c.cExecuteInBackground}",
    "aura:id": "executeInBackground"
   },
   {
    "label": "Run server action in background with return",
    "press": "{!c.cExecuteInBackgroundWithReturn}",
    "aura:id": "executeInBackgroundWithReturn"
   },
   {
    "label": "Run server action in foreground with error",
    "press": "{!c.cErrorInForeground}",
    "aura:id": "errorInForeground"
   }
  ]
 },
 "cmp.actionsTest.transactions": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.impl.java.controller.ParallelActionTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "transactionId",
    "type": "string",
    "default": ""
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "actionsTest:transactionsEntry",
    "type": "COMPONENT"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Set Transaction",
    "press": "{!c.setTransaction}",
    "aura:id": "setTransaction"
   },
   {
    "label": "Clear Transaction",
    "press": "{!c.clearTransaction}",
    "aura:id": "clearTransaction"
   },
   {
    "label": "Send Abortable Command",
    "press": "{!c.sendAbortable}",
    "aura:id": "sendAbortable"
   },
   {
    "label": "Send Non-Abortable Command",
    "press": "{!c.sendNonAbortable}",
    "aura:id": "sendNonAbortable"
   }
  ]
 },
 "cmp.actionsTest.transactionsEntry": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "transactionId",
    "type": "string",
    "default": ""
   },
   {
    "name": "actionId",
    "type": "string",
    "default": ""
   },
   {
    "name": "state",
    "type": "string",
    "default": ""
   }
  ]
 },
 "cmp.appCache.slate": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "output",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "button for css cache test on browsers"
   }
  ]
 },
 "cmp.appCache.unsupportedUrls": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.attributesTest.attributeTypes": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "typeMap",
    "type": "Map"
   },
   {
    "name": "typeInteger",
    "type": "Integer"
   },
   {
    "name": "typeString",
    "type": "String"
   },
   {
    "name": "typeList",
    "type": "List"
   },
   {
    "name": "typeStringList",
    "type": "String[]"
   },
   {
    "name": "typeMapList",
    "type": "Map[]"
   },
   {
    "name": "typeSet",
    "type": "Set"
   }
  ]
 },
 "cmp.attributesTest.caseInsensitiveChild": {
  "cmp.aura.component": [
   {
    "extends": "attributesTest:parent",
    "render": "client"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "SIMPLEAttribute",
    "value": "childY"
   }
  ]
 },
 "cmp.attributesTest.customAttributeType": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "pairAttr",
    "type": "java://org.auraframework.util.type.CustomPairType",
    "default": "HouseNo$300"
   }
  ]
 },
 "cmp.attributesTest.defaultValue": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "strAttributeWithNoDefaultValue"
   },
   {
    "type": "String",
    "name": "strAttributeWithDefaultValue",
    "default": "Aura"
   },
   {
    "type": "Object",
    "name": "objAttributeWithNoDefaultValue"
   },
   {
    "type": "Object",
    "name": "objAttributeWithDefaultValue",
    "default": "['red','green','blue']"
   },
   {
    "type": "Boolean[]",
    "name": "listAttributeWithNoDefaultValue"
   },
   {
    "type": "Boolean[]",
    "name": "listAttributeWithDefaultValue",
    "default": "true,false,true"
   },
   {
    "type": "Map",
    "name": "mapAttributeWithNoDefaultValue"
   },
   {
    "type": "Map",
    "name": "mapAttributeWithDefaultValue",
    "default": "{ a: 1, b: 2 }"
   },
   {
    "type": "Aura.Component[]",
    "name": "componentDefault"
   },
   {
    "type": "Boolean",
    "name": "booleanDefaultWithNoValue"
   },
   {
    "type": "Boolean",
    "name": "booleanDefaultWithStringTrue",
    "default": "true"
   },
   {
    "type": "Boolean",
    "name": "booleanDefaultWithStringFalse",
    "default": "false"
   },
   {
    "type": "Boolean",
    "name": "booleanDefaultWithLiteralExpTrue",
    "default": "{!true}"
   },
   {
    "type": "Boolean",
    "name": "booleanDefaultWithLiteralExpFalse",
    "default": "{!false}"
   },
   {
    "type": "Boolean",
    "name": "booleanDefaultWithViewExpTrue",
    "default": "{!v.booleanDefaultWithStringTrue}"
   },
   {
    "type": "Boolean",
    "name": "booleanDefaultWithViewExpFalse",
    "default": "{!!v.booleanDefaultWithStringTrue}"
   },
   {
    "type": "Date",
    "name": "dateDefaultWithNoValue"
   },
   {
    "type": "Date",
    "name": "dateDefaultWithString",
    "default": "2013-03-06"
   },
   {
    "type": "Date",
    "name": "dateDefaultWithLiteralExp",
    "default": "{!'2013-03-06'}"
   },
   {
    "type": "Date",
    "name": "dateDefaultWithTimeString",
    "default": "2013-03-06T10:17:36.789Z"
   },
   {
    "type": "Date",
    "name": "dateDefaultWithTimeLiteralExp",
    "default": "{!'2013-03-06T10:17:36.789Z'}"
   },
   {
    "type": "DateTime",
    "name": "dateTimeDefaultWithNoValue"
   },
   {
    "type": "DateTime",
    "name": "dateTimeDefaultZero",
    "default": "0"
   },
   {
    "type": "DateTime",
    "name": "dateTimeDefaultWithString",
    "default": "123456789"
   },
   {
    "type": "DateTime",
    "name": "dateTimeDefaultWithLiteralExp",
    "default": "{!123456789}"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithNoValue"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithStringPositiveInt",
    "default": "123"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithStringNegativeInt",
    "default": "-123"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithStringPositiveDecimal",
    "default": "168.34"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithStringNegativeDecimal",
    "default": "-168.34"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithLiteralExpPositiveInt",
    "default": "{!123}"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithLiteralExpNegativeInt",
    "default": "{!-123}"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithLiteralExpPositiveDecimal",
    "default": "{!168.34}"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithLiteralExpNegativeDecimal",
    "default": "{!-168.34}"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithExpView",
    "default": "{!v.decimalDefaultWithStringPositiveDecimal}"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithExpression",
    "default": "{!v.decimalDefaultWithStringPositiveDecimal + v.decimalDefaultWithLiteralExpNegativeDecimal + 0.3}"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithNoValue"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithStringPositiveInt",
    "default": "123"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithStringNegativeInt",
    "default": "-123"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithStringPositiveDecimal",
    "default": "168.34"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithStringNegativeDecimal",
    "default": "-168.34"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithLiteralExpPositiveInt",
    "default": "{!123}"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithLiteralExpNegativeInt",
    "default": "{!-123}"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithLiteralExpPositiveDecimal",
    "default": "{!168.34}"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithLiteralExpNegativeDecimal",
    "default": "{!-168.34}"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithExpView",
    "default": "{!v.doubleDefaultWithStringPositiveDecimal}"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithExpression",
    "default": "{!v.doubleDefaultWithStringPositiveDecimal + v.doubleDefaultWithLiteralExpNegativeDecimal + 0.3}"
   },
   {
    "type": "Integer",
    "name": "integerDefaultWithNoValue"
   },
   {
    "type": "Integer",
    "name": "integerDefaultWithStringPositiveInt",
    "default": "123"
   },
   {
    "type": "Integer",
    "name": "integerDefaultWithStringNegativeInt",
    "default": "-123"
   },
   {
    "type": "Integer",
    "name": "integerDefaultWithStringPositiveDecimal",
    "default": "168.34"
   },
   {
    "type": "Integer",
    "name": "integerDefaultWithLiteralExpPositiveInt",
    "default": "{!123}"
   },
   {
    "type": "Integer",
    "name": "integerDefaultWithLiteralExpNegativeInt",
    "default": "{!-123}"
   },
   {
    "type": "Integer",
    "name": "integerDefaultWithExpView",
    "default": "{!v.integerDefaultWithStringPositiveInt}"
   },
   {
    "type": "Integer",
    "name": "integerDefaultWithExpression",
    "default": "{!v.integerDefaultWithStringPositiveInt + v.integerDefaultWithLiteralExpPositiveInt + 4}"
   },
   {
    "type": "Long",
    "name": "longDefaultWithNoValue"
   },
   {
    "type": "Long",
    "name": "longDefaultWithStringPositiveInt",
    "default": "123"
   },
   {
    "type": "Long",
    "name": "longDefaultWithStringNegativeInt",
    "default": "-123"
   },
   {
    "type": "Long",
    "name": "longDefaultWithStringPositiveDecimal",
    "default": "168.34"
   },
   {
    "type": "Long",
    "name": "longDefaultWithLiteralExpPositiveInt",
    "default": "{!123}"
   },
   {
    "type": "Long",
    "name": "longDefaultWithLiteralExpNegativeInt",
    "default": "{!-123}"
   },
   {
    "type": "Long",
    "name": "longDefaultWithExpView",
    "default": "{!v.longDefaultWithStringPositiveInt}"
   },
   {
    "type": "Long",
    "name": "longDefaultWithExpression",
    "default": "{!v.longDefaultWithStringPositiveInt + v.longDefaultWithLiteralExpPositiveInt + 4}"
   },
   {
    "type": "String",
    "name": "stringDefaultWithNoValue"
   },
   {
    "type": "String",
    "name": "stringDefaultWithString",
    "default": "test string"
   },
   {
    "type": "String",
    "name": "stringDefaultWithStringEmptyString",
    "default": ""
   },
   {
    "type": "String",
    "name": "stringDefaultWithLiteralExp",
    "default": "{!'test string'}"
   },
   {
    "type": "String",
    "name": "stringDefaultWithLiteralExpEmptyString",
    "default": ""
   },
   {
    "type": "String",
    "name": "stringDefaultWithExpView",
    "default": "{!v.stringDefaultWithString}"
   },
   {
    "type": "String",
    "name": "stringDefaultWithExpression",
    "default": "{!v.stringDefaultWithString + ' bla'}"
   },
   {
    "type": "String",
    "name": "stringDefaultWithExpGVP",
    "default": "{!$Label.AuraTestLabelSection.label_for_attribute_default_value_test}"
   },
   {
    "type": "Set",
    "name": "setDefaultWithEmpty",
    "default": ""
   },
   {
    "type": "Set",
    "name": "setDefaultWithString",
    "default": "'a','b','c'"
   },
   {
    "type": "Set",
    "name": "setDefaultWithBracketString",
    "default": "[1,2,3]"
   },
   {
    "type": "Set",
    "name": "setDefaultWithStringContainBracket",
    "default": "['[1]','2','3']"
   }
  ]
 },
 "cmp.attributesTest.defaultValueChild": {
  "cmp.aura.component": [
   {
    "extends": "attributesTest:defaultValue"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "Boolean",
    "name": "booleanDefaultInherit",
    "default": "{!v.booleanDefaultWithStringTrue}"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultInherit",
    "default": "{!v.decimalDefaultWithStringPositiveDecimal}"
   },
   {
    "type": "Double",
    "name": "doubleDefaultInherit",
    "default": "{!v.doubleDefaultWithStringNegativeDecimal}"
   },
   {
    "type": "Integer",
    "name": "integerDefaultInherit",
    "default": "{!v.integerDefaultWithStringPositiveInt}"
   },
   {
    "type": "Long",
    "name": "longDefaultInherit",
    "default": "{!v.longDefaultWithStringNegativeInt}"
   },
   {
    "type": "String",
    "name": "stringDefaultInherit",
    "default": "{!v.stringDefaultWithString}"
   },
   {
    "type": "Object",
    "name": "objectDefaultInherit",
    "default": "{!v.objAttributeWithDefaultValue}"
   },
   {
    "type": "Map",
    "name": "mapDefaultInherit",
    "default": "{!v.mapAttributeWithDefaultValue}"
   },
   {
    "type": "List",
    "name": "listDefaultInherit",
    "default": "{!v.listAttributeWithDefaultValue}"
   }
  ]
 },
 "cmp.attributesTest.newCmpFromServerWDefaultAttrValues": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.attributesTest.parent": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "SimpleAttribute",
    "default": "parentY",
    "type": "String"
   }
  ]
 },
 "cmp.attributesTest.passByReference": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "stringByReference",
    "default": "default string",
    "type": "String"
   },
   {
    "name": "intByReference",
    "default": "2007",
    "type": "Integer"
   },
   {
    "name": "listByReference",
    "default": "[]",
    "type": "List"
   },
   {
    "name": "mapByReference",
    "default": "{}",
    "type": "Map"
   },
   {
    "name": "objectWithList",
    "type": "Map"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.onInit}"
   }
  ],
  "cmp.aura.label": [
   {
    "value": "{0} Members"
   },
   {
    "value": "{!$Label.AuraTestLabelSection.dynamic_label_for_test}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://attributesTest:simpleValue"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Change outer int",
    "press": "{!c.changeIntOuter}",
    "aura:id": "changeIntOuterButton"
   },
   {
    "label": "Change facet int",
    "press": "{!c.changeIntFacet}",
    "aura:id": "changeIntFacetButton"
   },
   {
    "label": "Change created cmp int",
    "press": "{!c.changeIntCreatedCmp}",
    "aura:id": "changeIntCsccButton"
   },
   {
    "label": "Change outer list",
    "press": "{!c.changeListOuter}",
    "aura:id": "changeListOuterButton"
   },
   {
    "label": "Change facet list",
    "press": "{!c.changeListFacet}",
    "aura:id": "changeListFacetButton"
   },
   {
    "label": "Append to outer list",
    "press": "{!c.appendListOuter}",
    "aura:id": "appendListOuterButton"
   },
   {
    "label": "Append to facet list",
    "press": "{!c.appendListFacet}",
    "aura:id": "appendListFacetButton"
   },
   {
    "label": "Remove item from outer list",
    "press": "{!c.removeItemListOuter}",
    "aura:id": "removeListOuterButton"
   },
   {
    "label": "Remove item from facet list",
    "press": "{!c.removeItemListFacet}",
    "aura:id": "removeListFacetButton"
   },
   {
    "label": "Change outer map",
    "press": "{!c.changeMapOuter}",
    "aura:id": "changeMapOuterButton"
   },
   {
    "label": "Change facet map",
    "press": "{!c.changeMapFacet}",
    "aura:id": "changeMapFacetButton"
   },
   {
    "label": "Append to outer map",
    "press": "{!c.appendMapOuter}",
    "aura:id": "appendMapOuterButton"
   },
   {
    "label": "Append to facet map",
    "press": "{!c.appendMapFacet}",
    "aura:id": "appendMapFacetButton"
   },
   {
    "label": "Remove item from outer map",
    "press": "{!c.removeMapOuter}",
    "aura:id": "removeMapOuterButton"
   },
   {
    "label": "Remove item from facet map",
    "press": "{!c.removeMapFacet}",
    "aura:id": "removeMapFacetButton"
   },
   {
    "label": "Create new component (by value)",
    "press": "{!c.createCmpByValue}",
    "aura:id": "createCmpByValueButton"
   },
   {
    "label": "Create new component (by reference)",
    "press": "{!c.createCmpByReference}",
    "aura:id": "createCmpByReferenceButton"
   }
  ],
  "cmp.attributestest.passbyreferenceinner": [
   {
    "aura:id": "innerCmp",
    "intattribute": "{!v.intByReference}",
    "listattribute": "{!v.listByReference}",
    "mapattribute": "{!v.mapByReference}",
    "objectattribute": "{!v.objectWithList}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.objectWithList.listEntry}",
    "var": "item"
   }
  ]
 },
 "cmp.attributesTest.passByReferenceInner": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "intAttribute",
    "type": "Integer"
   },
   {
    "name": "listAttribute",
    "type": "List"
   },
   {
    "name": "mapAttribute",
    "type": "Map"
   },
   {
    "name": "objectAttribute",
    "type": "Map"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.objectAttribute.listEntry}",
    "var": "item"
   }
  ]
 },
 "cmp.attributesTest.passByValue": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.label": [
   {
    "value": "{0} Members"
   },
   {
    "value": "{#$Label.AuraTestLabelSection.dynamic_label_for_test}"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.mapValue}",
    "action": "{!c.handleMapValueChangeEvent}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "initValue",
    "type": "String"
   },
   {
    "name": "booleanValue",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "numberValue",
    "type": "Double",
    "default": "7357"
   },
   {
    "name": "stringValue",
    "type": "String",
    "default": "default string value"
   },
   {
    "name": "listValue",
    "type": "List",
    "default": "purple,blue,green"
   },
   {
    "name": "mapValue",
    "type": "Map",
    "default": "{}"
   },
   {
    "name": "changeEventTriggered",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "pairAttr",
    "type": "java://org.auraframework.util.type.CustomPairType",
    "default": "HouseNo$300"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "box",
    "items": "{#v.listValue}",
    "var": "message",
    "indexvar": "index"
   }
  ],
  "cmp.attributestest.passbyvalueinner": [
   {
    "aura:id": "innerCmp",
    "stringvalue": "{#v.stringValue}",
    "booleanvalue": "{#v.booleanValue}",
    "numbervalue": "{#v.numberValue}",
    "listvalue": "{#v.listValue}",
    "mapvalue": "{#v.mapValue}",
    "pairattr": "{#v.pairAttr}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "changeButton",
    "label": "Change Properties",
    "press": "{!c.changeProperties}"
   }
  ]
 },
 "cmp.attributesTest.passByValueInner": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.dependency": [
   {
    "resource": "auratest:renderEvent",
    "type": "EVENT"
   }
  ],
  "cmp.aura.attribute": [
   {
    "default": "0",
    "type": "Integer",
    "name": "renderCount"
   },
   {
    "default": "0",
    "type": "Integer",
    "name": "rerenderCount"
   },
   {
    "name": "booleanValue",
    "type": "Boolean"
   },
   {
    "name": "numberValue",
    "type": "Double"
   },
   {
    "name": "stringValue",
    "type": "String"
   },
   {
    "name": "listValue",
    "type": "List"
   },
   {
    "name": "mapValue",
    "type": "Map"
   },
   {
    "name": "changeEventTriggered",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "pairAttr",
    "type": "java://org.auraframework.util.type.CustomPairType"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "box",
    "items": "{!v.listValue}",
    "var": "message",
    "indexvar": "index"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.mapValue}",
    "action": "{!c.handleMapValueChangeEvent}"
   }
  ]
 },
 "cmp.attributesTest.passByValueOuter": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.attributestest.passbyvalue": [
   {
    "aura:id": "passByValueCmp",
    "mapvalue": "{!m.map}"
   }
  ]
 },
 "cmp.attributesTest.passByValue_model": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "box",
    "items": "{#m.stringList}",
    "var": "message",
    "indexvar": "index"
   }
  ],
  "cmp.attributestest.passbyvalueinner": [
   {
    "aura:id": "innerCmp",
    "stringvalue": "{#m.string}",
    "booleanvalue": "{#m.booleanFalse}",
    "numbervalue": "{#m.double}",
    "listvalue": "{#m.stringList}",
    "mapvalue": "{#m.map}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "changeButton",
    "label": "Change Properties",
    "press": "{!c.changeProperties}"
   }
  ]
 },
 "cmp.attributesTest.serializeTo": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "both",
    "type": "String",
    "serializeto": "both"
   },
   {
    "name": "server",
    "type": "String",
    "serializeto": "Server"
   },
   {
    "name": "none",
    "type": "String",
    "serializeto": "NONE"
   },
   {
    "name": "bothDefault",
    "type": "String",
    "serializeto": "both",
    "default": "public"
   },
   {
    "name": "serverDefault",
    "type": "String",
    "serializeto": "Server",
    "default": "package"
   },
   {
    "name": "noneDefault",
    "type": "String",
    "serializeto": "NONE",
    "default": "private"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "newComponent",
    "press": "{!c.newComponent}"
   }
  ]
 },
 "cmp.attributesTest.serializeToContainer": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "newComponent",
    "label": "newComponentContainer",
    "press": "{!c.newComponent}"
   }
  ]
 },
 "cmp.attributesTest.setValue": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "Aura.Component[]",
    "name": "componentDefault"
   },
   {
    "type": "Aura.Component[]",
    "name": "componentDefault2"
   },
   {
    "type": "Map",
    "name": "mapAttributeWithDefaultValue",
    "default": "{ a: 1, b: 2 }"
   },
   {
    "type": "Object",
    "name": "objAttributeWithDefaultValue",
    "default": "['red','green','blue']"
   },
   {
    "type": "List",
    "name": "listAttributeWithDefaultValue",
    "default": "['red','green','blue']"
   },
   {
    "type": "Boolean[]",
    "name": "arrayAttributeWithDefaultValue",
    "default": "[true,false,true]"
   },
   {
    "type": "Long",
    "name": "longDefaultWithStringPositiveInt",
    "default": "123"
   },
   {
    "type": "Integer",
    "name": "integerDefaultWithStringPositiveInt",
    "default": "123"
   },
   {
    "type": "Double",
    "name": "doubleDefaultWithStringPositiveInt",
    "default": "123"
   },
   {
    "type": "Decimal",
    "name": "decimalDefaultWithStringPositiveInt",
    "default": "123"
   },
   {
    "type": "DateTime",
    "name": "dateTimeDefaultWithString",
    "default": "123456789"
   },
   {
    "type": "Date",
    "name": "dateDefaultWithString",
    "default": "2013-03-06"
   },
   {
    "type": "String",
    "name": "stringDefaultWithString",
    "default": "test string"
   },
   {
    "type": "Boolean",
    "name": "booleanDefaultWithStringFalse",
    "default": "false"
   }
  ]
 },
 "cmp.attributesTest.setValueChild": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "attributesTest:setValue"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "componentDefault"
   },
   {
    "attribute": "mapAttributeWithDefaultValue",
    "value": "{ b: 2, c: 3 }"
   },
   {
    "attribute": "objAttributeWithDefaultValue",
    "value": "['grey','silver','slate']"
   },
   {
    "attribute": "listAttributeWithDefaultValue",
    "value": "['grey','silver','slate']"
   },
   {
    "attribute": "arrayAttributeWithDefaultValue",
    "value": "[false,'true',true]"
   },
   {
    "attribute": "longDefaultWithStringPositiveInt",
    "value": "9007199254740991"
   },
   {
    "attribute": "integerDefaultWithStringPositiveInt",
    "value": "2147483647"
   },
   {
    "attribute": "doubleDefaultWithStringPositiveInt",
    "value": "9007199254740991"
   },
   {
    "attribute": "decimalDefaultWithStringPositiveInt",
    "value": "9.99999999999999"
   },
   {
    "attribute": "dateTimeDefaultWithString",
    "value": "1430517159503"
   },
   {
    "attribute": "dateDefaultWithString",
    "value": "2015-02-05"
   },
   {
    "attribute": "stringDefaultWithString",
    "value": "test string2"
   },
   {
    "attribute": "booleanDefaultWithStringFalse",
    "value": "false"
   }
  ]
 },
 "cmp.attributesTest.setValueEmpty": {
  "cmp.aura.component": [
   {
    "extends": "attributesTest:setValue"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "componentDefault"
   },
   {
    "attribute": "mapAttributeWithDefaultValue",
    "value": ""
   },
   {
    "attribute": "objAttributeWithDefaultValue",
    "value": ""
   },
   {
    "attribute": "listAttributeWithDefaultValue",
    "value": ""
   },
   {
    "attribute": "arrayAttributeWithDefaultValue",
    "value": ""
   },
   {
    "attribute": "longDefaultWithStringPositiveInt",
    "value": ""
   },
   {
    "attribute": "integerDefaultWithStringPositiveInt",
    "value": ""
   },
   {
    "attribute": "doubleDefaultWithStringPositiveInt",
    "value": ""
   },
   {
    "attribute": "decimalDefaultWithStringPositiveInt",
    "value": ""
   },
   {
    "attribute": "dateTimeDefaultWithString",
    "value": ""
   },
   {
    "attribute": "dateDefaultWithString",
    "value": ""
   },
   {
    "attribute": "stringDefaultWithString",
    "value": ""
   },
   {
    "attribute": "booleanDefaultWithStringFalse",
    "value": ""
   }
  ]
 },
 "cmp.attributesTest.setValueGrandchild": {
  "cmp.aura.component": [
   {
    "extends": "attributesTest:setValueChild"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "componentDefault2"
   }
  ]
 },
 "cmp.attributesTest.simpleValue": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "strAttribute",
    "type": "String"
   },
   {
    "name": "intAttribute",
    "type": "Integer"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "button",
    "press": "{!c.increment}",
    "label": "{!v.intAttribute ? v.intAttribute : 0}"
   }
  ]
 },
 "cmp.auraStorageTest.actionsStorageTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extends": "aura:template"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "auraPreInitBlock"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "name": "actions",
    "maxsize": "4096",
    "defaultexpiration": "3600",
    "secure": "true",
    "persistent": "false"
   }
  ]
 },
 "cmp.auraStorageTest.actionsStorageTest": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "Boolean",
    "default": "false",
    "name": "actionsStorageOn"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.actionsStorageOn}"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "name": "actions"
   }
  ]
 },
 "cmp.auraStorageTest.adapterSelectionTest": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.auraStorageTest.failedStorageTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extensible": "true",
    "extends": "aura:template"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "auraPreInitBlock"
   }
  ]
 },
 "cmp.auraStorageTest.failedStorageTest": {
  "cmp.aura.component": [
   {
    "template": "auraStorageTest:failedStorageTemplate",
    "controller": "java://org.auraframework.impl.java.controller.AuraStorageTestController"
   }
  ]
 },
 "cmp.auraStorageTest.fuelGaugeTestStub": {
  "cmp.aura.component": [
   {
    "render": "client",
    "template": "auraStorageTest:namedStorageTemplate"
   }
  ],
  "cmp.aurastorage.fuelgauge": [
   {
    "storagename": "actions",
    "aura:id": "actionsGauge"
   },
   {
    "storagename": "savings",
    "aura:id": "savingsGauge"
   },
   {
    "storagename": "checking",
    "aura:id": "checkingGauge1"
   },
   {
    "storagename": "checking",
    "aura:id": "checkingGauge2"
   },
   {
    "storagename": "bogus",
    "aura:id": "bogusGauge"
   },
   {
    "storagename": "",
    "aura:id": "noName"
   }
  ]
 },
 "cmp.auraStorageTest.indexedDBCmp": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "key",
    "type": "String",
    "default": "default key"
   },
   {
    "name": "value",
    "type": "String",
    "default": "default value"
   },
   {
    "name": "return",
    "type": "String",
    "default": "No value"
   },
   {
    "name": "status",
    "type": "String",
    "default": "Waiting"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "addToStorage",
    "action": "c.addToStorage"
   },
   {
    "name": "getFromStorage",
    "action": "c.getFromStorage"
   },
   {
    "name": "resetStorage",
    "action": "c.resetStorage"
   },
   {
    "name": "deleteStorage",
    "action": "c.deleteStorage"
   }
  ]
 },
 "cmp.auraStorageTest.indexedDBtemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extends": "aura:template"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "auraPreInitBlock"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "name": "actions",
    "maxsize": "4096",
    "clearstorageoninit": "false",
    "defaultexpiration": "3600",
    "debugloggingenabled": "true",
    "secure": "false",
    "persistent": "true"
   }
  ]
 },
 "cmp.auraStorageTest.initTest": {
  "cmp.aura.component": [
   {
    "render": "client",
    "extensible": "true",
    "controller": "java://org.auraframework.impl.java.controller.AuraStorageTestController",
    "implements": "auraStorage:refreshObserver"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "uitest:hasModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "clearStorageOnInit",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "defaultExpiration",
    "type": "Integer",
    "default": "50"
   },
   {
    "name": "defaultAutoRefreshInterval",
    "type": "Integer",
    "default": "60"
   },
   {
    "name": "requireUseStorageQueryParam",
    "type": "Boolean"
   },
   {
    "name": "persistent",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "version",
    "type": "String",
    "default": ""
   },
   {
    "name": "host",
    "type": "String",
    "default": ""
   },
   {
    "name": "actionStatus",
    "type": "String",
    "default": ""
   },
   {
    "name": "dupNamedStorage",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "debugloggingenabled": "true",
    "name": "actions",
    "secure": "true",
    "persistent": "{!v.persistent}",
    "clearstorageoninit": "{!v.clearStorageOnInit}",
    "defaultexpiration": "{!v.defaultExpiration}",
    "defaultautorefreshinterval": "{!v.defaultAutoRefreshInterval}",
    "requireusestoragequeryparam": "{!v.requireUseStorageQueryParam}",
    "version": "{!v.version}"
   },
   {
    "name": "defaultAdapter"
   },
   {
    "name": "dupNamedStorage",
    "maxsize": "9999",
    "aura:id": "dupNamedStorage1"
   },
   {
    "name": "dupNamedStorage",
    "maxsize": "6666",
    "aura:id": "dupNamedStorage2"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Run action at Server Always",
    "press": "{!c.forceActionAtServer}",
    "aura:id": "ForceActionAtServer"
   },
   {
    "label": "Run action at Server and mark as storable",
    "press": "{!c.runActionAtServerAndStore}",
    "aura:id": "RunActionAndStore"
   },
   {
    "label": "Re-run action and verify cached response",
    "press": "{!c.fetchActionFromStorage}"
   },
   {
    "label": "Reset all counter",
    "press": "{!c.resetCounters}"
   },
   {
    "aura:id": "TestConnectionButton",
    "label": "test connection",
    "press": "{!c.testConnection}"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:doneWaiting",
    "action": "{!c.doneWaiting}"
   },
   {
    "event": "aura:waiting",
    "action": "{!c.waiting}"
   },
   {
    "name": "refreshBegin",
    "action": "{!c.refreshBegin}"
   },
   {
    "name": "refreshEnd",
    "action": "{!c.refreshEnd}"
   },
   {
    "event": "auraStorage:modified",
    "action": "{!c.storageModified}"
   },
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.setHost}"
   },
   {
    "name": "change",
    "value": "{!v.host}",
    "action": "{!c.setHost}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inputHost",
    "value": "{!v.host}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.dupNamedStorage}"
   }
  ]
 },
 "cmp.auraStorageTest.memoryAdapterTest": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auraStorageTest.namedStorageTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extends": "aura:template"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "auraPreInitBlock"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "name": "actions",
    "persistent": "false",
    "secure": "false",
    "maxsize": "9999"
   },
   {
    "name": "savings",
    "persistent": "false",
    "secure": "true",
    "maxsize": "6666"
   },
   {
    "name": "checking",
    "maxsize": "7777"
   }
  ]
 },
 "cmp.auraStorageTest.namedStorageTest": {
  "cmp.aura.component": [
   {
    "render": "client",
    "template": "auraStorageTest:namedStorageTemplate"
   }
  ]
 },
 "cmp.auraStorageTest.newComponent": {
  "cmp.aura.component": [
   {
    "render": "client",
    "controller": "java://org.auraframework.impl.java.controller.AuraStorageTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "defaultExpiration",
    "type": "Integer",
    "default": "50"
   },
   {
    "name": "defaultAutoRefreshInterval",
    "type": "Integer",
    "default": "60"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "debugloggingenabled": "true",
    "name": "actions",
    "secure": "true",
    "defaultexpiration": "{!v.defaultExpiration}",
    "defaultautorefreshinterval": "{!v.defaultAutoRefreshInterval}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Get Team and Players (Store Response)",
    "press": "{!c.getRosterFromStorage}"
   },
   {
    "label": "Get Team(From Stored Response)",
    "press": "{!c.getTeamFromStorage}"
   },
   {
    "label": "Get Players(From Store Response)",
    "press": "{!c.getPlayersFromStorage}"
   },
   {
    "label": "Get Team and Players",
    "press": "{!c.getRoster}"
   },
   {
    "label": "Get Team",
    "press": "{!c.getTeam}"
   },
   {
    "label": "Get Players",
    "press": "{!c.getPlayers}"
   },
   {
    "label": "Reset all counter",
    "press": "{!c.resetCounters}"
   }
  ]
 },
 "cmp.auraStorageTest.playerFacet": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.PlayerFacetModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String"
   },
   {
    "name": "nickName",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Who am I?",
    "press": "{!c.revealMe}",
    "aura:id": "button"
   }
  ]
 },
 "cmp.auraStorageTest.serverStorableTest": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.impl.java.controller.ServerStorableActionController",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "responseOrder",
    "default": ""
   },
   {
    "name": "defaultExpiration",
    "type": "Integer",
    "default": "60"
   },
   {
    "name": "defaultAutoRefreshInterval",
    "type": "Integer",
    "default": "60"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "name": "actions",
    "secure": "true",
    "debugloggingenabled": "true",
    "defaultexpiration": "{!v.defaultExpiration}",
    "defaultautorefreshinterval": "{!v.defaultAutoRefreshInterval}"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.handleClick}",
    "aura:id": "button",
    "label": "Get a stored action from the server"
   }
  ]
 },
 "cmp.auraStorageTest.teamFacet": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TeamFacetModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String"
   },
   {
    "name": "city",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Who are we?",
    "press": "{!c.revealMe}",
    "aura:id": "button"
   }
  ]
 },
 "cmp.auratest.access": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "description": "An abstract component that provides a basic layout for the ui:list component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "currentTest",
    "type": "String"
   },
   {
    "name": "Private",
    "type": "String",
    "access": "PRIVATE",
    "description": "private",
    "default": "PRIVATE"
   },
   {
    "name": "Public",
    "type": "String",
    "access": "PUBLIC",
    "description": "private",
    "default": "PUBLIC"
   },
   {
    "name": "Internal",
    "type": "String",
    "access": "INTERNAL",
    "description": "private",
    "default": "INTERNAL"
   },
   {
    "name": "Global",
    "type": "String",
    "access": "GLOBAL",
    "description": "private",
    "default": "GLOBAL"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "globalGlobalEvent",
    "type": "auraTest:accessGlobalEvent",
    "access": "GLOBAL"
   },
   {
    "name": "internalGlobalEvent",
    "type": "auraTest:accessGlobalEvent",
    "access": "INTERNAL"
   },
   {
    "name": "privateGlobalEvent",
    "type": "auraTest:accessGlobalEvent",
    "access": "PRIVATE"
   },
   {
    "name": "globalInternalEvent",
    "type": "auraTest:accessInternalEvent",
    "access": "GLOBAL"
   },
   {
    "name": "internalInternalEvent",
    "type": "auraTest:accessInternalEvent",
    "access": "INTERNAL"
   },
   {
    "name": "privateInternalEvent",
    "type": "auraTest:accessInternalEvent",
    "access": "PRIVATE"
   },
   {
    "name": "globalPrivateEvent",
    "type": "auraTest:accessPrivateEvent",
    "access": "GLOBAL"
   },
   {
    "name": "internalPrivateEvent",
    "type": "auraTest:accessPrivateEvent",
    "access": "INTERNAL"
   },
   {
    "name": "privatePrivateEvent",
    "type": "auraTest:accessPrivateEvent",
    "access": "PRIVATE"
   }
  ],
  "cmp.test.accessattributes": [
   {
    "aura:id": "remote"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "testAttributes",
    "label": "testAttributeAccess",
    "press": "{!c.testAttributeAccess}"
   },
   {
    "aura:id": "testRemoteAttributes",
    "label": "testAttributeAccess",
    "press": "{!c.testRemoteAttributeAccess}"
   },
   {
    "aura:id": "testEvent",
    "label": "testEventAccess",
    "press": "{!c.testEventAccess}"
   },
   {
    "aura:id": "testComponent",
    "label": "testComponentAccess",
    "press": "{!c.testComponentAccess}"
   }
  ]
 },
 "cmp.auratest.aisAsyncTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extends": "aura:integrationServiceTemplate"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "extraScriptTags"
   }
  ]
 },
 "cmp.auratest.auraMethod": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "auratest:auraMethodInterface"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "outputStringAttr",
    "type": "String",
    "default": "default outputStringAttr"
   },
   {
    "name": "stringAttr",
    "type": "String",
    "default": "default string"
   },
   {
    "name": "stringAttr",
    "type": "String",
    "default": "default string"
   },
   {
    "name": "stringAttr2",
    "type": "String",
    "default": "default string2"
   },
   {
    "name": "stringAttrParent",
    "type": "String",
    "default": "default string in Parent"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "hasAttr"
   },
   {
    "name": "noAttr"
   },
   {
    "name": "withActionHasAttr",
    "action": "c.funcHasAttr"
   },
   {
    "name": "withActionNoAttr",
    "action": "c.funcNoAttr"
   },
   {
    "name": "methodFromInterface"
   },
   {
    "name": "methodInParent"
   }
  ]
 },
 "cmp.auratest.auraMethodChild": {
  "cmp.aura.component": [
   {
    "extends": "auratest:auraMethod"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "methodInParent"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "stringAttrChild",
    "type": "String",
    "default": "default string in Child"
   }
  ]
 },
 "cmp.auratest.auraMethodContainer": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.auratest.auramethod": [
   {
    "aura:id": "auraMethod"
   }
  ],
  "cmp.auratest.auramethodchild": [
   {
    "aura:id": "auraMethodChild"
   }
  ]
 },
 "cmp.auratest.auraMethodError": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "render",
    "action": "c.blank"
   }
  ]
 },
 "cmp.auratest.auraMethodProvider": {
  "cmp.aura.component": [
   {
    "provider": "js://auratest.auraMethodProvider"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://auratest:auraMethod",
    "type": "COMPONENT"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "auraMethodProviderMethod"
   },
   {
    "name": "noAttr"
   }
  ]
 },
 "cmp.auratest.baseInputTest": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "cmpType",
    "type": "string"
   },
   {
    "name": "ref",
    "type": "Object"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "submitBtn",
    "label": "submit",
    "press": "{!c.submit}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputValue",
    "value": ""
   }
  ]
 },
 "cmp.auratest.cmpBackRefTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "true"
   },
   {
    "istrue": "false"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "left"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "burriedOutputText",
    "value": "column-1"
   }
  ],
  "cmp.ui.block": [
   {
    "aura:id": "blockCmp"
   }
  ]
 },
 "cmp.auratest.componentClassChild": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "auratest:componentClassParent",
    "provider": "js://auratest.componentClassChild"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "errorOutFromHelper_Child",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "errorOutFromRender_Child",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "errorOutFromAfterRender_Child",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "errorOutFromReRender_Child",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "errorOutFromUnRender_Child",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "value",
    "type": "String"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.value}",
    "action": "{!c.valueChange}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "setValue",
    "action": "{!c.setValue}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "ChildButton",
    "aura:id": "button",
    "press": "{!c.clientAction}",
    "class": "uiButtonChild"
   }
  ]
 },
 "cmp.auratest.componentClassClientProvider": {
  "cmp.aura.component": [
   {
    "implements": "auratest:componentClassProvidable",
    "provider": "js://auratest.componentClassClientProvider"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://auratest:componentClassGrandChildServerProvider",
    "type": "COMPONENT"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "{!v.id+'ClientProviderButton'}",
    "aura:id": "button",
    "press": "{!c.clientAction}"
   }
  ]
 },
 "cmp.auratest.componentClassGrandChildClientProvider": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "auratest:componentClassChild",
    "provider": "js://auratest.componentClassGrandChildClientProvider"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.value}",
    "action": "{!c.valueChange}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "setValue",
    "action": "{!c.setValue}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "GrandChildClientProviderButton",
    "aura:id": "button",
    "press": "{!c.clientAction}",
    "class": "uiButtonGrandChildClientProvider"
   }
  ]
 },
 "cmp.auratest.componentClassGrandChildServerProvider": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "auratest:componentClassChild"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.value}",
    "action": "{!c.valueChange}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "setValue",
    "action": "{!c.setValue}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "GrandChildServerProviderButton",
    "aura:id": "button",
    "press": "{!c.clientAction}"
   }
  ]
 },
 "cmp.auratest.componentClassLifecycleTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "testParent",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testParentInIteration",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testChild",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testChildInIteration",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testGrandChildServer",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testGrandChildServerInIteration",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testGrandChildClient",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testGrandChildClientInIteration",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testServerProviderGrandChildClientProvider",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testClientProviderGrandChildClientProvider",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testClientProviderGrandChildClientProviderInIteration",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testServerProviderGrandChildClientProviderInIteration",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testServerProviderClientProviderGrandChildClientProvider",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testServerProviderClientProviderGrandChildClientProviderInIteration",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testServerProviderGrandChildServerProvider",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testClientProviderGrandChildServerProvider",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testServerProviderGrandChildServerProviderInIteration",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testClientProviderGrandChildServerProviderInIteration",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testServerProviderClientProviderGrandChildServerProvider",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "testServerProviderClientProviderGrandChildServerProviderInIteration",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "shouldRender",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "shouldCreate",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "iterationItems",
    "type": "List",
    "default": ""
   },
   {
    "name": "iterationForceServer",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "cmpDef",
    "type": "String",
    "default": "markup://auratest:componentClassParent"
   },
   {
    "name": "errorOutFrom",
    "type": "String",
    "default": "errorOutFromRender_Parent"
   },
   {
    "name": "logFilter",
    "type": "String"
   }
  ],
  "cmp.auratest.logpanel": [
   {
    "aura:id": "logPanel",
    "filter": "{!v.logFilter}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.shouldCreate}"
   },
   {
    "istrue": "{!v.testParent}"
   },
   {
    "istrue": "{!v.testChild}"
   },
   {
    "istrue": "{!v.testGrandChildServer}"
   },
   {
    "istrue": "{!v.testServerProviderGrandChildServerProvider}"
   },
   {
    "istrue": "{!v.testGrandChildClient}"
   },
   {
    "istrue": "{!v.testServerProviderGrandChildClientProvider}"
   },
   {
    "istrue": "{!v.testClientProviderGrandChildServerProvider}"
   },
   {
    "istrue": "{!v.testClientProviderGrandChildClientProvider}"
   },
   {
    "istrue": "{!v.testServerProviderClientProviderGrandChildClientProvider}"
   },
   {
    "istrue": "{!v.testServerProviderClientProviderGrandChildServerProvider}"
   },
   {
    "istrue": "{!v.testParentInIteration}"
   },
   {
    "istrue": "{!v.testChildInIteration}"
   },
   {
    "istrue": "{!v.testGrandChildServerInIteration}"
   },
   {
    "istrue": "{!v.testGrandChildClientInIteration}"
   },
   {
    "istrue": "{!v.testClientProviderGrandChildClientProviderInIteration}"
   },
   {
    "istrue": "{!v.testServerProviderGrandChildClientProviderInIteration}"
   },
   {
    "istrue": "{!v.testClientProviderGrandChildServerProviderInIteration}"
   },
   {
    "istrue": "{!v.testServerProviderGrandChildServerProviderInIteration}"
   },
   {
    "istrue": "{!v.testServerProviderClientProviderGrandChildServerProviderInIteration}"
   },
   {
    "istrue": "{!v.testServerProviderClientProviderGrandChildClientProviderInIteration}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.shouldRender}"
   }
  ],
  "cmp.auratest.componentclassparent": [
   {
    "aura:id": "Parent",
    "id": "Parent"
   },
   {
    "aura:id": "ParentInIteration",
    "id": "ParentInIteration"
   }
  ],
  "cmp.auratest.componentclasschild": [
   {
    "aura:id": "Child",
    "id": "Child"
   },
   {
    "aura:id": "ChildInIteration",
    "id": "ChildInIteration"
   }
  ],
  "cmp.auratest.componentclassgrandchildserverprovider": [
   {
    "aura:id": "GrandChildServerProvider",
    "id": "GrandChildServerProvider"
   },
   {
    "aura:id": "GrandChildServerProviderInIteration",
    "id": "GrandChildServerProviderInIteration"
   }
  ],
  "cmp.auratest.componentclassserverprovider": [
   {
    "aura:id": "ServerProviderGrandChildServerProvider",
    "requestdescriptor": "auratest:componentClassGrandChildServerProvider",
    "requestattributes": "{'id':'ServerProviderGrandChildServerProvider'}"
   },
   {
    "aura:id": "ServerProviderGrandChildClientProvider",
    "requestdescriptor": "auratest:componentClassGrandChildClientProvider",
    "requestattributes": "{'id':'ServerProviderGrandChildClientProvider'}"
   },
   {
    "aura:id": "ServerProviderClientProviderGrandChildClientProvider",
    "requestdescriptor": "auratest:componentClassClientProvider",
    "requestattributes": "{'requestDescriptor':'auratest:componentClassGrandChildClientProvider','requestAttributes':{'id':'ServerProviderClientProviderGrandChildClientProvider'}}"
   },
   {
    "aura:id": "ServerProviderClientProviderGrandChildServerProvider",
    "requestdescriptor": "auratest:componentClassClientProvider",
    "requestattributes": "{'requestDescriptor':'auratest:componentClassGrandChildServerProvider','requestAttributes':{'id':'ServerProviderClientProviderGrandChildServerProvider'}}"
   },
   {
    "aura:id": "ServerProviderGrandChildClientProviderInIteration",
    "requestdescriptor": "auratest:componentClassGrandChildClientProvider",
    "requestattributes": "{'id':'ServerProviderGrandChildClientProviderInIteration'}"
   },
   {
    "aura:id": "ServerProviderGrandChildServerProviderInIteration",
    "requestdescriptor": "auratest:componentClassGrandChildServerProvider",
    "requestattributes": "{'id':'ServerProviderGrandChildServerProviderInIteration'}"
   },
   {
    "aura:id": "ServerProviderClientProviderGrandChildServerProviderInIteration",
    "requestdescriptor": "auratest:componentClassClientProvider",
    "requestattributes": "{'requestDescriptor':'auratest:componentClassGrandChildServerProvider','requestAttributes':{'id':'ServerProviderClientProviderGrandChildServerProviderInIteration'}}"
   },
   {
    "aura:id": "ServerProviderClientProviderGrandChildClientProviderInIteration",
    "requestdescriptor": "auratest:componentClassClientProvider",
    "requestattributes": "{'requestDescriptor':'auratest:componentClassGrandChildClientProvider','requestAttributes':{'id':'ServerProviderClientProviderGrandChildClientProviderInIteration'}}"
   }
  ],
  "cmp.auratest.componentclassgrandchildclientprovider": [
   {
    "aura:id": "GrandChildClientProvider",
    "id": "GrandChildClientProvider"
   },
   {
    "aura:id": "GrandChildClientProviderInIteration",
    "id": "GrandChildClientProviderInIteration"
   }
  ],
  "cmp.auratest.componentclassclientprovider": [
   {
    "aura:id": "ClientProviderGrandChildServerProvider",
    "requestdescriptor": "auratest:componentClassGrandChildServerProvider",
    "requestattributes": "{'id':'ClientProviderGrandChildServerProvider'}"
   },
   {
    "aura:id": "ClientProviderGrandChildClientProvider",
    "requestdescriptor": "auratest:componentClassGrandChildClientProvider",
    "requestattributes": "{'id':'ClientProviderGrandChildClientProvider'}"
   },
   {
    "aura:id": "ClientProvidedGrandChildClientProviderInIteration",
    "requestdescriptor": "auratest:componentClassGrandChildClientProvider",
    "requestattributes": "{'id':'ClientProvidedGrandChildClientProviderInIteration'}"
   },
   {
    "aura:id": "ClientProviderGrandChildServerProviderInIteration",
    "requestdescriptor": "auratest:componentClassGrandChildServerProvider",
    "requestattributes": "{'id':'ClientProviderGrandChildServerProviderInIteration'}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.iterationItems}",
    "var": "x",
    "forceserver": "{!v.iterationForceServer}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "createCmp and push to client div",
    "aura:id": "button_newCmp",
    "press": "{!c.createCmp}",
    "class": "uiButton_createCmp"
   }
  ]
 },
 "cmp.auratest.componentClassParent": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "auratest:componentClassProvidable",
    "provider": "js://auratest.componentClassParent",
    "controller": "java://org.auraframework.impl.java.controller.CCController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "id",
    "type": "String"
   },
   {
    "name": "value",
    "type": "String",
    "default": ""
   },
   {
    "name": "errorOutFromHelper_Parent",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "errorOutFromRender_Parent",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "errorOutFromAfterRender_Parent",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "errorOutFromReRender_Parent",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "errorOutFromUnRender_Parent",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "value",
    "type": "String"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.value}",
    "action": "{!c.valueChange}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "setValue",
    "action": "{!c.setValue}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "ParentButton",
    "aura:id": "button",
    "press": "{!c.clientAction}",
    "class": "uiButtonParent"
   }
  ],
  "cmp.aura.text": [
   {
    "value": "{!v.value}"
   }
  ]
 },
 "cmp.auratest.componentClassSerialization": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.impl.java.controller.TestSerializeAbsentLayout"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "makeRequestToServer",
    "action": "c.makeRequestToServer"
   }
  ]
 },
 "cmp.auratest.componentClassServerProvider": {
  "cmp.aura.component": [
   {
    "implements": "auratest:componentClassProvidable",
    "provider": "java://org.auraframework.impl.java.provider.CCProvider"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "{!v.id+'ServerProviderButton'}",
    "aura:id": "button",
    "press": "{!c.clientAction}"
   }
  ]
 },
 "cmp.auratest.componentClassServerProviderIteration": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "iterationForceServer",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "shouldCreate1",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "shouldCreate2",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "shouldCreate3",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "shouldCreate4",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "iterationItems",
    "type": "List",
    "default": "one,two,three"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.shouldCreate1}"
   },
   {
    "istrue": "{!v.shouldCreate4}"
   },
   {
    "istrue": "{!v.shouldCreate3}"
   },
   {
    "istrue": "{!v.shouldCreate4}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.shouldCreate2}"
   }
  ],
  "cmp.auratest.componentclassgrandchildclientprovider": [
   {
    "aura:id": "GrandChildClientProvider",
    "id": "GrandChildClientProvider"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.iterationItems}",
    "var": "x",
    "forceserver": "{!v.iterationForceServer}"
   }
  ],
  "cmp.auratest.componentclassserverprovider": [
   {
    "aura:id": "ServerProviderGrandChildClientProviderInIteration",
    "requestdescriptor": "auratest:componentClassGrandChildClientProvider",
    "requestattributes": "{'id':'ServerProviderGrandChildClientProviderInIteration'}"
   },
   {
    "aura:id": "ServerProviderGrandChildClientProviderInIteration",
    "requestdescriptor": "auratest:componentClassGrandChildClientProvider",
    "requestattributes": "{'id':'ServerProviderGrandChildClientProviderInIteration'}"
   }
  ]
 },
 "cmp.auratest.componentInstanceOf": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.auratest.testinterfaceimpl": [
   {
    "aura:id": "basic"
   }
  ],
  "cmp.auratest.testinterfacechildimpl": [
   {
    "aura:id": "child"
   }
  ],
  "cmp.auratest.testinterfacegrandchildimpl": [
   {
    "aura:id": "grandchild"
   }
  ],
  "cmp.auratest.testinterfacechildimplchild": [
   {
    "aura:id": "stepchild"
   }
  ],
  "cmp.auratest.testinterfacechildimplgrandchild": [
   {
    "aura:id": "stepgrandchild"
   }
  ],
  "cmp.auratest.testinterfacemultipleimpl": [
   {
    "aura:id": "multiple"
   }
  ],
  "cmp.auratest.test_component_nomodel": [
   {
    "aura:id": "none"
   }
  ]
 },
 "cmp.auratest.context": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://auratest:test_button"
   }
  ]
 },
 "cmp.auratest.createAttributeQuickFix": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.auratest.createattributequickfix_child": [
   {
    "foo": "bar"
   }
  ]
 },
 "cmp.auratest.createInnerCmpQuickFixCmp": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.auratest.innercmpthatdoesntexist": [
   {}
  ]
 },
 "cmp.auratest.eventCounter": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "auratest:renderEvent",
    "type": "EVENT"
   }
  ],
  "cmp.aura.attribute": [
   {
    "default": "0",
    "type": "Integer",
    "name": "renderCount"
   },
   {
    "default": "0",
    "type": "Integer",
    "name": "rerenderCount"
   },
   {
    "default": "0",
    "type": "Integer",
    "name": "unrenderCount"
   },
   {
    "type": "String",
    "name": "passthrough"
   },
   {
    "type": "Object",
    "name": "passthroughObj"
   },
   {
    "default": "0",
    "type": "Integer",
    "name": "dirty"
   }
  ]
 },
 "cmp.auratest.fastClickDomEvents": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "outterEvent",
    "type": "String",
    "default": ""
   },
   {
    "name": "middleEvent",
    "type": "String",
    "default": ""
   },
   {
    "name": "innerEvent",
    "type": "String",
    "default": ""
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "This is the outter area"
   },
   {
    "value": "This is the middle area"
   },
   {
    "value": "This is the inner area"
   },
   {
    "value": "{!v.outterEvent}"
   },
   {
    "value": "{!v.middleEvent}"
   },
   {
    "value": "{!v.innerEvent}"
   }
  ],
  "cmp.ui.inputradio": [
   {
    "aura:id": "maleRadio",
    "name": "gender",
    "value": "male",
    "label": "Male"
   },
   {
    "aura:id": "femaleRadio",
    "name": "gender",
    "value": "female",
    "label": "Female"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "clearBtn",
    "label": "clear",
    "press": "{!c.clearOutput}"
   }
  ]
 },
 "cmp.auratest.html": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "clickCount",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "classValue",
    "type": "String"
   },
   {
    "name": "mouseOverEvent",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "mouseOutEvent",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "type",
    "default": "text",
    "type": "String"
   },
   {
    "name": "style",
    "default": "color:blue",
    "type": "String"
   },
   {
    "name": "dataName",
    "default": "textElement",
    "type": "String"
   },
   {
    "name": "href",
    "default": "http://bazinga.com/",
    "type": "String"
   }
  ],
  "cmp.ui.image": [
   {
    "aura:id": "img",
    "src": "/auraFW/resources/aura/s.gif",
    "imagetype": "informational",
    "alt": "Aura"
   }
  ]
 },
 "cmp.auratest.htmlComponent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.html": [
   {
    "tag": "a",
    "href": "www.salesforce.com",
    "aura:id": "atag"
   },
   {
    "tag": "a",
    "abc": "www.salesforce.com",
    "aura:id": "atagInvalidAttr"
   },
   {
    "tag": "a",
    "aura:id": "noAttr"
   },
   {
    "aura:id": "undefinedTag",
    "tag": "{!v.attr}"
   },
   {
    "aura:id": "notag",
    "href": "www.salesforce.com"
   }
  ],
  "cmp.aura.attribute": [
   {
    "default": "false",
    "name": "testUndefinedTagAttr",
    "type": "Boolean"
   },
   {
    "default": "false",
    "name": "testNoTagAttr",
    "type": "Boolean"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.testUndefinedTagAttr}"
   },
   {
    "istrue": "{!v.testNoTagAttr}"
   }
  ]
 },
 "cmp.auratest.htmlEntity": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.text": [
   {
    "aura:id": "gt",
    "value": ">"
   },
   {
    "aura:id": "lt",
    "value": "<"
   },
   {
    "aura:id": "amp",
    "value": "&"
   },
   {
    "aura:id": "apos",
    "value": "'"
   },
   {
    "aura:id": "quot",
    "value": "\""
   },
   {
    "aura:id": "nbsp",
    "value": "C D"
   },
   {
    "aura:id": "ensp",
    "value": " "
   },
   {
    "aura:id": "emsp",
    "value": " "
   },
   {
    "aura:id": "mdash",
    "value": "—"
   },
   {
    "aura:id": "copy",
    "value": "©"
   },
   {
    "aura:id": "trade",
    "value": "™"
   },
   {
    "aura:id": "reg",
    "value": "®"
   },
   {
    "aura:id": "laquo",
    "value": "«"
   },
   {
    "aura:id": "deg",
    "value": "°"
   },
   {
    "aura:id": "acute",
    "value": "´"
   },
   {
    "aura:id": "raquo",
    "value": "»"
   },
   {
    "aura:id": "cent",
    "value": "¢"
   },
   {
    "aura:id": "euro",
    "value": "€"
   },
   {
    "aura:id": "yen",
    "value": "¥"
   },
   {
    "aura:id": "pound",
    "value": "£"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "class": "gt",
    "aura:id": "gt",
    "value": "{!'>'}"
   },
   {
    "class": "lt",
    "aura:id": "lt",
    "value": "{!'<'}"
   },
   {
    "class": "amp",
    "aura:id": "amp",
    "value": "{!'&'}"
   },
   {
    "class": "apos",
    "aura:id": "apos",
    "value": "{!'\\''}"
   },
   {
    "class": "quot",
    "aura:id": "quot",
    "value": "{!'\"'}"
   },
   {
    "class": "nbsp",
    "aura:id": "nbsp",
    "value": "{!'C D'}"
   },
   {
    "class": "ensp",
    "aura:id": "ensp",
    "value": "{!' '}"
   },
   {
    "class": "emsp",
    "aura:id": "emsp",
    "value": "{!' '}"
   },
   {
    "class": "mdash",
    "aura:id": "mdash",
    "value": "{!'—'}"
   },
   {
    "class": "copy",
    "aura:id": "copy",
    "value": "{!'©'}"
   },
   {
    "class": "trade",
    "aura:id": "trade",
    "value": "{!'™'}"
   },
   {
    "class": "reg",
    "aura:id": "reg",
    "value": "{!'®'}"
   },
   {
    "class": "laquo",
    "aura:id": "laquo",
    "value": "{!'«'}"
   },
   {
    "class": "deg",
    "aura:id": "deg",
    "value": "{!'°'}"
   },
   {
    "class": "acute",
    "aura:id": "acute",
    "value": "{!'´'}"
   },
   {
    "class": "raquo",
    "aura:id": "raquo",
    "value": "{!'»'}"
   },
   {
    "class": "cent",
    "aura:id": "cent",
    "value": "{!'¢'}"
   },
   {
    "class": "euro",
    "aura:id": "euro",
    "value": "{!'€'}"
   },
   {
    "class": "yen",
    "aura:id": "yen",
    "value": "{!'¥'}"
   },
   {
    "class": "pound",
    "aura:id": "pound",
    "value": "{!'£'}"
   }
  ]
 },
 "cmp.auratest.invalidCss": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auratest.jsmock": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController",
    "provider": "java://org.auraframework.test.java.provider.EmptyConfigProvider"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "name": "actions",
    "secure": "true",
    "debugloggingenabled": "true",
    "defaultexpiration": "60",
    "defaultautorefreshinterval": "60"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "providedAttribute",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "trigger",
    "press": "{!c.getServerString}",
    "label": "get a string"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.stringList}",
    "var": "x",
    "start": "{!m.integer}",
    "end": "{!m.integerString}"
   }
  ]
 },
 "cmp.auratest.label": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   },
   {
    "name": "string",
    "type": "String",
    "default": "test"
   },
   {
    "name": "boolean",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "double",
    "type": "double",
    "default": "20"
   },
   {
    "name": "undef",
    "type": "Object"
   },
   {
    "name": "noll",
    "type": "Object"
   }
  ],
  "cmp.aura.label": [
   {
    "value": "{!v.value}"
   },
   {
    "value": "{!v.value}"
   },
   {
    "value": "{!v.value}"
   },
   {
    "value": "home"
   },
   {
    "value": "{!v.value}"
   },
   {
    "value": "login"
   },
   {
    "value": "{!v.value}"
   },
   {
    "value": "{!v.string + v.value}"
   },
   {
    "value": "{!v.value}"
   },
   {
    "value": "{!v.value}"
   },
   {
    "value": "{!v.value}"
   },
   {
    "value": "{!v.value}"
   },
   {
    "value": "{!v.value}"
   },
   {
    "value": "{!v.value}"
   },
   {
    "value": "{!v.value}"
   }
  ]
 },
 "cmp.auratest.logPanel": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "logs",
    "type": "List",
    "default": "",
    "description": "display copy of filtered logs"
   },
   {
    "name": "filter",
    "type": "String",
    "description": "output log entries matching this regex, only the first capturing group if found"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "clear",
    "action": "{!c.clear}"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.filter}",
    "action": "{!c.filter}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "clear logs",
    "press": "{!c.clear}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "value": "{!v.filter}",
    "placeholder": "filter regexp"
   }
  ]
 },
 "cmp.auratest.parseError": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.auratest.test_button": [
   {
    "press": "{!c.handleclick}",
    "label": "click"
   }
  ]
 },
 "cmp.auratest.require": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "version"
   },
   {
    "type": "Boolean",
    "name": "cmpExist"
   },
   {
    "type": "String",
    "name": "versionInRender"
   },
   {
    "type": "String",
    "name": "versionInAfterRender"
   },
   {
    "type": "String",
    "name": "versionInRerender"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!2.0 == version}"
   },
   {
    "istrue": "{!version > 1}"
   }
  ],
  "cmp.aura.text": [
   {
    "aura:id": "boundVersionExpression",
    "value": "{!version}"
   },
   {
    "aura:id": "unboundVersionExpression",
    "value": "{#version}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "updateVersionFromGetVersionMethod",
    "action": "{!c.updateVersionFromGetVersionMethod}"
   },
   {
    "name": "updateVersionByComponentValueProvider",
    "action": "{!c.updateVersionByComponentValueProvider}"
   },
   {
    "name": "udpateWithBoundVersionExpression",
    "action": "{!c.udpateWithBoundVersionExpression}"
   },
   {
    "name": "udpateWithUnboundVersionExpression",
    "action": "{!c.udpateWithUnboundVersionExpression}"
   },
   {
    "name": "updateWithEqualsComponentExist",
    "action": "{!c.updateWithEqualsComponentExist}"
   },
   {
    "name": "updateWithInequalityComparisonComponentExist",
    "action": "{!c.updateWithInequalityComparisonComponentExist}"
   },
   {
    "name": "updateVersionIfLargerThanOne",
    "action": "{!c.updateVersionIfLargerThanOne}"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ]
 },
 "cmp.auratest.requireConsumer": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "Aura.Component",
    "name": "consumedCmp"
   },
   {
    "type": "String",
    "name": "versionInConsumedCmp",
    "default": "default"
   },
   {
    "type": "Boolean",
    "name": "actionDone",
    "default": "false"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "updateWithVersionInConsumedComponentInTest",
    "action": "{!c.updateWithVersionInConsumedComponentInTest}"
   },
   {
    "name": "updateWithVersionInConsumedComponent",
    "action": "{!c.updateWithVersionInConsumedComponent}"
   },
   {
    "name": "fireTestComponentVersionEvent",
    "action": "{!c.fireTestComponentVersionEvent}"
   }
  ],
  "cmp.aura.require": [
   {
    "namespace": "test",
    "version": "123456.0"
   },
   {
    "namespace": "componentTest",
    "version": "3.0"
   }
  ],
  "cmp.test.require": [
   {
    "aura:id": "testCmp",
    "versionevt": "{!c.updateVersionFromVersionEvent}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "versionEvt",
    "type": "auratest:testEvent"
   }
  ]
 },
 "cmp.auratest.requireWithModel": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.VersionTestController",
    "model": "java://org.auraframework.impl.java.model.VersionTestModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "Boolean",
    "name": "actionDone",
    "default": "false"
   },
   {
    "type": "String",
    "name": "version"
   }
  ],
  "cmp.aura.text": [
   {
    "aura:id": "versionFromModel",
    "value": "{!m.version}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "updateVersionFromClientController",
    "action": "{!c.updateVersionFromClientController}"
   },
   {
    "name": "updateVersionFromServerController",
    "action": "{!c.updateVersionFromServerController}"
   },
   {
    "name": "updateVersionFromServerModel",
    "action": "{!c.updateVersionFromServerModel}"
   },
   {
    "name": "fireVersionEvent",
    "action": "{!c.fireVersionEvent}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "versionEvt",
    "type": "auratest:testEvent"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "versionEvt",
    "action": "{!c.updateVersionFromServerController}"
   }
  ]
 },
 "cmp.auratest.rerenderAbstract": {
  "cmp.aura.component": [
   {
    "implements": "auratest:rerenderInterface",
    "abstract": "true",
    "extensible": "true",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "toggleAbstract",
    "type": "Boolean"
   }
  ],
  "cmp.auratest.rerendercounter": [
   {
    "aura:id": "counter"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "v.abstract",
    "press": "{!c.toggleAbstract}",
    "aura:id": "toggleAbstract"
   },
   {
    "label": "m.abstract",
    "press": "{!c.toggleAbstractModel}",
    "aura:id": "toggleAbstractModel"
   },
   {
    "label": "v.interface",
    "press": "{!c.toggleInterface}",
    "aura:id": "toggleInterface"
   }
  ]
 },
 "cmp.auratest.rerenderChild": {
  "cmp.aura.component": [
   {
    "extends": "auratest:rerenderParent"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String"
   },
   {
    "name": "toggleChild",
    "type": "Boolean"
   },
   {
    "name": "ownRenderCounter",
    "type": "Integer",
    "default": "0"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!v.title}",
    "aura:id": "title"
   }
  ],
  "cmp.auratest.rerendercounter": [
   {
    "aura:id": "counter"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "v.child",
    "press": "{!c.toggleChild}",
    "aura:id": "toggleChild"
   }
  ]
 },
 "cmp.auratest.rerenderCounter": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "default": "0",
    "type": "Integer",
    "name": "count"
   }
  ]
 },
 "cmp.auratest.rerenderParent": {
  "cmp.aura.component": [
   {
    "extends": "auratest:rerenderAbstract",
    "extensible": "true",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "toggleParent",
    "type": "Boolean"
   }
  ],
  "cmp.auratest.rerendercounter": [
   {
    "aura:id": "counter"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "v.parent",
    "press": "{!c.toggleParent}",
    "aura:id": "toggleParent"
   },
   {
    "label": "m.parent",
    "press": "{!c.toggleParentModel}",
    "aura:id": "toggleParentModel"
   }
  ]
 },
 "cmp.auratest.testComponent1": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "auratest:testInterface",
    "extends": "auratest:testComponent3",
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "myString",
    "type": "String",
    "default": "Default String"
   }
  ],
  "cmp.auratest.testcomponent2": [
   {
    "myinteger": "1"
   }
  ]
 },
 "cmp.auratest.testComponent2": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "myInteger",
    "type": "Integer",
    "default": "5",
    "required": "true"
   }
  ]
 },
 "cmp.auratest.testComponent3": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "myBoolean",
    "type": "Boolean",
    "default": "True"
   }
  ]
 },
 "cmp.auratest.testForEachDefChild": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "numbers",
    "type": "Account"
   }
  ]
 },
 "cmp.auratest.testInterfaceChildImpl": {
  "cmp.aura.component": [
   {
    "implements": "auratest:testInterfaceChild",
    "extensible": "true"
   }
  ]
 },
 "cmp.auratest.testInterfaceChildImplChild": {
  "cmp.aura.component": [
   {
    "extends": "auratest:testInterfaceChildImpl",
    "implements": "auratest:testInterface2",
    "extensible": "true"
   }
  ]
 },
 "cmp.auratest.testInterfaceChildImplGrandchild": {
  "cmp.aura.component": [
   {
    "extends": "auratest:testInterfaceChildImplChild"
   }
  ]
 },
 "cmp.auratest.testInterfaceGrandchildImpl": {
  "cmp.aura.component": [
   {
    "implements": "auratest:testInterfaceGrandchild"
   }
  ]
 },
 "cmp.auratest.testInterfaceImpl": {
  "cmp.aura.component": [
   {
    "implements": "auratest:testInterface"
   }
  ]
 },
 "cmp.auratest.testInterfaceMultipleImpl": {
  "cmp.aura.component": [
   {
    "implements": "auratest:testInterface,auratest:testInterface2,auratest:test_Instantiate_Interface"
   }
  ]
 },
 "cmp.auratest.testModelThatThrows": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestModelThrowsInGetter"
   }
  ]
 },
 "cmp.auratest.testModelThatThrowsInRenderer": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestModelThrowsInGetter"
   }
  ]
 },
 "cmp.auratest.testPerfRunnerContainer": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.test.testsetrunner.TestSetRunnerModel",
    "controller": "java://org.auraframework.test.testsetrunner.TestSetRunnerController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "scope",
    "type": "String"
   },
   {
    "name": "keyword",
    "type": "String"
   }
  ]
 },
 "cmp.auratest.test_Abstract": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true"
   }
  ]
 },
 "cmp.auratest.test_Abstract_Impl": {
  "cmp.aura.component": [
   {
    "extends": "auratest:test_Abstract"
   }
  ]
 },
 "cmp.auratest.test_BrowserInfo": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.auratest.test_Component_NoModel": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.auratest.test_CompoundCntrlr": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.auratest.test_button": [
   {
    "label": "Click me to Trigger Controller Action(client and server action have similar names)",
    "class": "button1",
    "press": "{!c.similarActionNames}"
   },
   {
    "label": "Click me to Trigger Controller Action(client and server action have dissimilar names)",
    "class": "button2",
    "press": "{!c.dissimilarActionNames}"
   },
   {
    "label": "Click me to Trigger Controller Action(Ideal scenario)",
    "class": "button3",
    "press": "{!c.anotherActionName}"
   }
  ]
 },
 "cmp.auratest.test_CompoundFormula_NonString": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "NameString",
    "type": "String",
    "default": "Aura"
   },
   {
    "name": "Acc",
    "type": "Account"
   }
  ],
  "cmp.auratest.test_button": [
   {
    "label": "{!v.NameString + !v.Acc}"
   }
  ]
 },
 "cmp.auratest.test_HtmlEntities": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.auratest.test_InfiniteListButton": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "item",
    "type": "Object",
    "required": "true"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "myButton",
    "label": "{! v.item.isClosed ? ('isClosed-true' + ' ' + v.item.Id): ('isClose-false' +  ' ' + v.item.Id) }",
    "press": "{!c.toggle}"
   }
  ]
 },
 "cmp.auratest.test_InfiniteListCscc": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.button": [
   {
    "label": "add item",
    "aura:id": "addItem",
    "press": "{!c.add}"
   }
  ],
  "cmp.ui.infinitelist": [
   {
    "aura:id": "list",
    "itemvar": "item"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.auratest.test_infinitelistdataprovider": [
   {}
  ],
  "cmp.auratest.test_infinitelistbutton": [
   {
    "aura:id": "aButton",
    "item": "{!item}"
   }
  ]
 },
 "cmp.auratest.test_InfiniteListDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "model": "java://org.auraframework.components.test.java.model.test_InfiniteListCsccModel"
   }
  ]
 },
 "cmp.auratest.test_Instantiate_Component": {
  "cmp.aura.component": [
   {
    "implements": "auratest:test_Instantiate_Interface"
   }
  ]
 },
 "cmp.auratest.test_Labels_Concatenation": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auratest.test_Labels_NonExisting": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.auratest.test_button": [
   {
    "label": "{!$Label.Buttons.doesNotExist}",
    "class": "doesNotExist"
   }
  ]
 },
 "cmp.auratest.test_Labels_Positive": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "labelSection",
    "type": "String",
    "default": "AccountSplashr"
   }
  ],
  "cmp.auratest.test_button": [
   {
    "label": "{!$Label.AccountSplash.title}",
    "class": "SectionKey"
   },
   {
    "label": "{!$Label.AccSalesTeam.salesTeam}",
    "class": "SectionKeyWithGrammar"
   },
   {
    "label": "{!$Label.Home.casesSolutionsButton}",
    "class": "SectionKeyWithEscapedHTML"
   }
  ],
  "cmp.aura.label": [
   {
    "value": "{!$Label.ViralInvite.viralInviteSubjectGroup}"
   },
   {
    "value": "{!$Label.Page_RecordTypeSelect.pageTitle}"
   },
   {
    "value": "{!$Label.Page_RecordTypeSelect.pageTitle}"
   },
   {
    "value": "{!$Label.ViralInvite.viralInviteSubjectGroup}"
   }
  ]
 },
 "cmp.auratest.test_Model_Child2": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auratest.test_Model_Parent": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "model": "java://org.auraframework.components.test.java.model.TestReinitializeModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "attrInParent",
    "type": "String",
    "default": "default attribute in Parent"
   }
  ]
 },
 "cmp.auratest.test_NumberFormatting": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.auratest.test_Relationship_Query": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.account.contacts}",
    "var": "i"
   }
  ],
  "cmp.auratest.test_relationship_query1": [
   {
    "contactattr": "{!i}"
   }
  ]
 },
 "cmp.auratest.test_Relationship_Query1": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "Contact",
    "name": "contactAttr"
   }
  ],
  "cmp.auratest.test_relationship_query2": [
   {
    "contactid": "{!v.contactAttr.id}"
   }
  ]
 },
 "cmp.auratest.test_Relationship_Query2": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "Id",
    "name": "contactId"
   }
  ]
 },
 "cmp.auratest.test_TokenValidation": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.auratest.test_button": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String"
   },
   {
    "name": "class",
    "type": "String"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "press",
    "type": "auratest:test_press"
   }
  ]
 },
 "cmp.auratest.test_css_a": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "content",
    "type": "String",
    "default": "Component A"
   }
  ],
  "cmp.auratest.test_css_b": [
   {
    "content": "{!v.content}",
    "aura:id": "b"
   }
  ],
  "cmp.auratest.test_css_c": [
   {
    "content": "{!v.content}",
    "aura:id": "c"
   }
  ]
 },
 "cmp.auratest.test_css_b": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "content",
    "type": "String",
    "default": "Component B"
   }
  ],
  "cmp.auratest.test_css_c": [
   {
    "content": "{!v.content}"
   }
  ]
 },
 "cmp.auratest.test_css_c": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "content",
    "type": "String",
    "default": "Component C"
   }
  ],
  "cmp.auratest.test_css_d": [
   {
    "content": "{!v.content}"
   }
  ]
 },
 "cmp.auratest.test_css_child": {
  "cmp.aura.component": [
   {
    "extends": "auratest:test_css_parent"
   }
  ]
 },
 "cmp.auratest.test_css_d": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "content",
    "type": "String",
    "default": "Component D"
   }
  ]
 },
 "cmp.auratest.test_css_grandParent": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ]
 },
 "cmp.auratest.test_css_parent": {
  "cmp.aura.component": [
   {
    "extends": "auratest:test_css_grandParent",
    "extensible": "true"
   }
  ]
 },
 "cmp.auratest.text": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   },
   {
    "name": "truncate",
    "type": "Integer"
   },
   {
    "name": "ellipsis",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "truncateByWord",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.aura.text": [
   {
    "value": "{!v.value}",
    "truncate": "{!v.truncate}",
    "ellipsis": "{!v.ellipsis}",
    "truncatebyword": "{!v.truncateByWord}"
   }
  ]
 },
 "cmp.auratest.unescapedHtml": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "toggle",
    "label": "toggle",
    "press": "{!c.toggleValue}"
   }
  ],
  "cmp.aura.unescapedhtml": [
   {
    "aura:id": "null",
    "value": "{!false || null}"
   },
   {
    "aura:id": "value",
    "value": "{!v.value}"
   }
  ]
 },
 "cmp.auratest.unrender": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "auratest:renderEvent",
    "action": "{!c.logRenderEvent}"
   }
  ],
  "cmp.auratest.unrendercomponent": [
   {
    "aura:id": "alone",
    "name": "alone"
   },
   {
    "aura:id": "root",
    "name": "root"
   },
   {
    "name": "nested"
   }
  ]
 },
 "cmp.auratest.unrenderComponent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String"
   }
  ]
 },
 "cmp.auratest.versioningSuper": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "versionInSuperCmp",
    "default": "default"
   }
  ]
 },
 "cmp.clientApiTest.arrayIndexOf": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "array",
    "type": "String[]",
    "default": "red,green,blue,green,yellow"
   }
  ]
 },
 "cmp.clientApiTest.assertTest": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.clientApiTest.auraWarningTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.onInit}"
   }
  ]
 },
 "cmp.clientApiTest.cssStyleTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inputText",
    "value": "in one component"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputText",
    "value": "out the other"
   }
  ],
  "cmp.test.testvalidcss": [
   {}
  ]
 },
 "cmp.clientApiTest.errorTest": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.clientApiTest.eventBinding": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "focusEvent",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "blurEvent",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "clickCount",
    "type": "Integer",
    "default": "0"
   }
  ]
 },
 "cmp.clientApiTest.jsonMethodExposure": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.clientApiTest.removeElement": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.clientApiTest.timeoutCallback": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.clientApiTest.utilTests": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.clientLibraryTest.testChild": {
  "cmp.aura.component": [
   {
    "extends": "clientLibraryTest:testParent"
   }
  ],
  "cmp.aura.clientlibrary": [
   {
    "name": "child",
    "url": "http://likeaboss.com/child.js",
    "type": "JS"
   },
   {
    "name": "duplicate",
    "url": "http://likeaboss.com/duplicate.js",
    "type": "JS"
   },
   {
    "url": "http://likeaboss.com/mode.js",
    "type": "JS",
    "modes": "CADENCE"
   }
  ]
 },
 "cmp.clientLibraryTest.testFacet": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.clientlibrary": [
   {
    "name": "facet",
    "url": "http://likeaboss.com/facet.js",
    "type": "JS"
   },
   {
    "name": "duplicate",
    "url": "http://likeaboss.com/duplicate.js",
    "type": "JS"
   },
   {
    "url": "http://likeaboss.com/mode.js",
    "type": "JS",
    "modes": "DEV"
   }
  ]
 },
 "cmp.clientLibraryTest.testInterfaceImpl1": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.clientlibrary": [
   {
    "name": "interfaceImpl1",
    "url": "http://likeaboss.com/interfaceImpl1.js",
    "type": "JS"
   }
  ]
 },
 "cmp.clientLibraryTest.testInterfaceImpl2": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.clientlibrary": [
   {
    "name": "interfaceImpl2",
    "url": "http://likeaboss.com/interfaceImpl2.js",
    "type": "JS"
   }
  ]
 },
 "cmp.clientLibraryTest.testParent": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.clientlibrary": [
   {
    "name": "parent",
    "url": "http://likeaboss.com/parent.js",
    "type": "JS"
   },
   {
    "name": "duplicate",
    "url": "http://likeaboss.com/duplicate.js",
    "type": "JS"
   },
   {
    "url": "http://likeaboss.com/mode.js",
    "type": "JS",
    "modes": "STATS"
   }
  ]
 },
 "cmp.clientServiceTest.enqueueAction": {
  "cmp.aura.component": [
   {
    "render": "client",
    "controller": "java://org.auraframework.impl.java.controller.AuraStorageTestController"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "debugloggingenabled": "true",
    "name": "actions",
    "secure": "true",
    "persistent": "false",
    "clearstorageoninit": "true",
    "defaultexpiration": "50",
    "defaultautorefreshinterval": "0"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "log",
    "type": "List",
    "default": ""
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.log}",
    "var": "i"
   }
  ]
 },
 "cmp.clientServiceTest.resetToken": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aurastorage.init": [
   {
    "debugloggingenabled": "false",
    "name": "actions",
    "secure": "true",
    "persistent": "false",
    "clearstorageoninit": "true",
    "defaultexpiration": "50",
    "defaultautorefreshinterval": "60"
   }
  ]
 },
 "cmp.clientServiceTest.runActions": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ]
 },
 "cmp.cmpQueryLanguage.query": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "provider:*"
   }
  ]
 },
 "cmp.componentTest.appendComponent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "descriptor",
    "type": "String",
    "default": "aura:text"
   },
   {
    "name": "value",
    "type": "String",
    "default": "hi"
   },
   {
    "name": "output",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "value": "{!v.descriptor}",
    "label": "descriptor: ",
    "size": "50"
   },
   {
    "value": "{!v.value}",
    "label": "value: ",
    "size": "50"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "trigger",
    "label": "append",
    "press": "{!c.appendComponent}"
   }
  ]
 },
 "cmp.componentTest.associateElement": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.impl.java.controller.TestController"
   }
  ]
 },
 "cmp.componentTest.builderContainer": {
  "cmp.aura.component": [
   {
    "provider": "java://org.auraframework.components.builder.BuilderComponentProvider"
   }
  ]
 },
 "cmp.componentTest.builderInjected": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.componentTest.builderStaticContainer": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.componenttest.builderinjected": [
   {}
  ]
 },
 "cmp.componentTest.clientComponent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "outputValue",
    "type": "String",
    "default": "initial"
   }
  ]
 },
 "cmp.componentTest.cmpWithDestroyHandler": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "destroy",
    "value": "{!this}",
    "action": "{!c.doDestroy}"
   }
  ]
 },
 "cmp.componentTest.cmpWithDestroyHandlerWrapper": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "destroy",
    "value": "{!this}",
    "action": "{!c.doDestroy}"
   }
  ],
  "cmp.componenttest.cmpwithdestroyhandler": [
   {
    "aura:id": "cmpWithDestroyHandler"
   }
  ]
 },
 "cmp.componentTest.componentBodyWithChanges": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "colors",
    "type": "List",
    "default": "purple,blue,green,yellow,orange,red"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "buttonAddBefore",
    "label": "Add before",
    "press": "{!c.addBefore}"
   },
   {
    "aura:id": "buttonAddInside",
    "label": "Add inside",
    "press": "{!c.addInside}"
   },
   {
    "aura:id": "buttonAddAfter",
    "label": "Add after",
    "press": "{!c.addAfter}"
   }
  ]
 },
 "cmp.componentTest.createComponent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "handledEvent",
    "type": "Boolean",
    "default": "false"
   }
  ]
 },
 "cmp.componentTest.destroy": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "cmpDestroyed",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "childCmpDestroyed",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "cmpAttribute",
    "type": "Aura.Component"
   },
   {
    "name": "cmpArrayAttribute",
    "type": "Aura.Component[]"
   },
   {
    "name": "objWithDestroy",
    "type": "Object"
   }
  ],
  "cmp.componenttest.hasbody": [
   {
    "aura:id": "outerFacet"
   }
  ],
  "cmp.aura.text": [
   {
    "aura:id": "textInOuterFacet",
    "value": "Outer Facet"
   },
   {
    "aura:id": "textInInnerFacet",
    "value": "Inner Facet"
   }
  ],
  "cmp.componenttest.stubcomponent": [
   {
    "aura:id": "innerFacet1"
   },
   {
    "aura:id": "innerFacet2"
   }
  ],
  "cmp.componenttest.informfacetofparent": [
   {
    "aura:id": "informFacet"
   }
  ],
  "cmp.componenttest.knowparent": [
   {
    "aura:id": "knowParent"
   }
  ],
  "cmp.componenttest.cmpwithdestroyhandlerwrapper": [
   {
    "aura:id": "cmpWithDestroyHandlerWrapper"
   }
  ]
 },
 "cmp.componentTest.findUsingInstanceOf": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.componenttest.stubcomponent": [
   {
    "aura:id": "anyCmpAsStub"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Parrot",
    "aura:id": "parrot"
   },
   {
    "label": "Peacock",
    "aura:id": "peacock"
   }
  ],
  "cmp.aura.text": [
   {
    "value": "Parakeet",
    "aura:id": "parrot"
   }
  ]
 },
 "cmp.componentTest.findWithDefRefs": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "singleElement",
    "type": "Aura.ComponentDefRef[]"
   },
   {
    "name": "dupElement",
    "type": "Aura.ComponentDefRef[]"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Tiger",
    "aura:id": "tiger"
   },
   {
    "label": "Lion",
    "aura:id": "lion"
   },
   {
    "label": "Lioness",
    "aura:id": "lion"
   },
   {
    "label": "Parrot",
    "aura:id": "parrot"
   },
   {
    "label": "Peacock",
    "aura:id": "peacock"
   }
  ],
  "cmp.aura.text": [
   {
    "value": "Cub",
    "aura:id": "lion"
   },
   {
    "value": "Parakeet",
    "aura:id": "parrot"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!true}",
    "aura:id": "singleElement",
    "body": "{!v.singleElement}"
   },
   {
    "istrue": "{!true}",
    "aura:id": "dupElement",
    "body": "{!v.dupElement}"
   }
  ]
 },
 "cmp.componentTest.getComponent": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "cmpGlobalId",
    "type": "String",
    "default": ""
   }
  ],
  "cmp.aura.text": [
   {
    "aura:id": "auraText",
    "value": "aura text"
   },
   {
    "aura:id": "innerText",
    "value": "inner text"
   },
   {
    "aura:id": "destroyedComponent",
    "value": "value"
   }
  ]
 },
 "cmp.componentTest.hasBody": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.componentTest.hasModel": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   },
   {
    "name": "headerComponents",
    "type": "Aura.Component[]"
   },
   {
    "name": "innerComponents",
    "type": "Aura.Component[]"
   },
   {
    "name": "footerComponents",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.componenttest.hasbody": [
   {
    "aura:id": "footerbody"
   }
  ]
 },
 "cmp.componentTest.informFacetOfParent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ]
 },
 "cmp.componentTest.knowParent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "parent",
    "type": "Aura.Component[]"
   }
  ]
 },
 "cmp.componentTest.labelTest": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "pattern",
    "type": "String",
    "default": "{0}"
   },
   {
    "name": "date",
    "type": "Date",
    "default": "2015-09-08"
   },
   {
    "name": "userId",
    "type": "String",
    "default": "FEED-BOBO-BEEF"
   },
   {
    "name": "userName",
    "type": "String",
    "default": "Chris Bobo"
   }
  ],
  "cmp.aura.label": [
   {
    "value": "{!v.pattern}"
   }
  ],
  "cmp.ui.outputdate": [
   {
    "value": "{!v.date}"
   },
   {
    "value": "{!v.date}"
   }
  ]
 },
 "cmp.componentTest.renderNestedComponents": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.componenttest.hasbody": [
   {
    "aura:id": "outer"
   },
   {
    "aura:id": "inner"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "Hello!"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "outer Spanish",
    "label": "Hola",
    "press": "{!c.press}"
   },
   {
    "aura:id": "outer French",
    "label": "Bonjour",
    "press": "{!c.press}"
   },
   {
    "aura:id": "inner Spanish",
    "label": "Hola",
    "press": "{!c.press}"
   },
   {
    "aura:id": "inner French",
    "label": "Bonjour",
    "press": "{!c.press}"
   }
  ]
 },
 "cmp.componentTest.require": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "version",
    "default": "default"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "updateVersion",
    "action": "{!c.updateVersion}"
   }
  ]
 },
 "cmp.componentTest.simpleExtends": {
  "cmp.aura.component": [
   {
    "extends": "ui:interactive"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "title",
    "type": "String"
   }
  ],
  "cmp.aura.expression": [
   {
    "aura:id": "title",
    "value": "{!v.title}"
   }
  ]
 },
 "cmp.componentTest.stubComponent": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.componentTest.throwError": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "throwErrorFromRender",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "throwErrorFromReRender",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "throwErrorFromUnRender",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "outputValue",
    "type": "String",
    "default": "initial"
   },
   {
    "name": "throwErrorInnerFromRender",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "throwErrorInnerFromReRender",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "throwErrorInnerFromUnRender",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "newCmp",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.componenttest.throwerrorinner": [
   {
    "aura:id": "innerCmp",
    "throwerrorfromrender": "{!v.throwErrorInnerFromRender}",
    "throwerrorfromrerender": "{!v.throwErrorInnerFromReRender}",
    "throwerrorfromunrender": "{!v.throwErrorInnerFromUnRender}"
   }
  ]
 },
 "cmp.componentTest.throwErrorInner": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "throwErrorFromRender",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "throwErrorFromReRender",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "throwErrorFromUnRender",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "outputValue",
    "type": "String",
    "default": "initial"
   }
  ]
 },
 "cmp.componentTest.toJSON": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.componentTest.usesBody": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.componenttest.hasbody": [
   {
    "aura:id": "outer"
   },
   {
    "aura:id": "inner"
   }
  ]
 },
 "cmp.componentTest.versionInServer": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.VersionTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "Boolean",
    "name": "actionDone",
    "default": "false"
   },
   {
    "type": "String",
    "name": "version"
   }
  ],
  "cmp.auratest.requirewithmodel": [
   {
    "aura:id": "auratest_requireWithModel"
   }
  ],
  "cmp.auratest.requireconsumer": [
   {
    "aura:id": "auratest_requireConsumer"
   }
  ],
  "cmp.aura.require": [
   {
    "namespace": "auratest",
    "version": "2.0"
   }
  ]
 },
 "cmp.componentTest.versioning": {
  "cmp.aura.component": [
   {
    "render": "client",
    "extends": "auratest:versioningSuper"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "version"
   },
   {
    "type": "Boolean",
    "name": "actionDone",
    "default": "false"
   }
  ],
  "cmp.auratest.require": [
   {
    "aura:id": "auratestCmp"
   }
  ],
  "cmp.componenttest.require": [
   {
    "aura:id": "sameNamespaceCmp"
   }
  ],
  "cmp.test.require": [
   {
    "aura:id": "noVersionRequiredCmp"
   }
  ],
  "cmp.auratest.requireconsumer": [
   {
    "aura:id": "requireConsumerInAuraTest"
   }
  ],
  "cmp.test.requireconsumer": [
   {
    "aura:id": "requireConsumerInTest"
   }
  ],
  "cmp.aura.require": [
   {
    "namespace": "auratest",
    "version": "2.0"
   }
  ]
 },
 "cmp.definitionServiceImplTest.targetComponent": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.docstest.searchFilterTreeTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.auradocs.SearchFilterTreeTestModel"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.auradocs.searchfiltertree": [
   {
    "aura:id": "searchTree"
   }
  ],
  "cmp.ui.tree": [
   {
    "aura:id": "tree"
   }
  ],
  "cmp.ui.treenode": [
   {
    "aura:id": "root",
    "title": "root"
   },
   {
    "aura:id": "iota",
    "href": "#iota",
    "title": "Iota is lonely"
   },
   {
    "aura:id": "A",
    "title": "A"
   },
   {
    "aura:id": "mu",
    "href": "#mu",
    "title": "Moo cows"
   },
   {
    "aura:id": "B",
    "title": "VHS or Beta?"
   },
   {
    "aura:id": "lambda",
    "href": "#lambda",
    "title": "Lambda is after moo"
   },
   {
    "aura:id": "D",
    "title": "D"
   },
   {
    "aura:id": "gamma",
    "href": "#gamma",
    "title": "Gamma rays"
   },
   {
    "aura:id": "G",
    "title": "G has Rho as a child"
   },
   {
    "aura:id": "pi",
    "href": "#pi",
    "title": "Pi is delicious"
   },
   {
    "aura:id": "rho",
    "href": "#rho",
    "title": "Rho Rho Rho your boat"
   },
   {
    "aura:id": "tau",
    "href": "#tau",
    "title": "Some argue Tau is better than Pi"
   },
   {
    "aura:id": "E",
    "title": "E"
   },
   {
    "aura:id": "alpha",
    "href": "#alpha",
    "title": "The alpha and the omega"
   },
   {
    "aura:id": "beta",
    "href": "#beta",
    "title": "Beta means Ship it"
   },
   {
    "aura:id": "F",
    "title": "F"
   },
   {
    "aura:id": "H",
    "title": "H"
   },
   {
    "aura:id": "chi",
    "href": "#chi",
    "title": "Tea"
   },
   {
    "aura:id": "psi",
    "href": "#psi",
    "title": "Pressure Bars"
   },
   {
    "aura:id": "omega",
    "href": "#omega",
    "title": "Where's alpha?"
   },
   {
    "aura:id": "C",
    "title": "C is lonely"
   },
   {
    "aura:id": "secondRoot",
    "title": "secondRoot"
   },
   {
    "aura:id": "foo",
    "href": "#foo",
    "title": "foo"
   },
   {
    "aura:id": "bar",
    "href": "#bar",
    "title": "bar"
   }
  ]
 },
 "cmp.expressionTest.arrayValue": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "first",
    "type": "Object[]"
   },
   {
    "name": "second",
    "type": "Object[]"
   },
   {
    "name": "firstArrayLen",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "secondArrayLen",
    "type": "Integer",
    "default": "0"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.first}",
    "action": "{!c.onChange1}"
   },
   {
    "name": "change",
    "value": "{!v.second}",
    "action": "{!c.onChange2}"
   }
  ],
  "cmp.expressiontest.arrays": [
   {
    "aura:id": "innerCmp",
    "passedinarray": "{!v.first}"
   }
  ]
 },
 "cmp.expressionTest.arrays": {
  "cmp.aura.component": [
   {
    "extends": "expressionTest:suite",
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "isNotSet",
    "type": "String[]"
   },
   {
    "name": "stringArray",
    "type": "String[]",
    "default": "one,two,three"
   },
   {
    "name": "arrayAsObject",
    "type": "Object"
   },
   {
    "name": "componentArray",
    "type": "Aura.Component[]"
   },
   {
    "name": "passedInArray",
    "type": "Object[]",
    "default": "['a','b','c']"
   },
   {
    "name": "passedInArrayLength",
    "type": "Integer",
    "default": "0"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.passedInArray}",
    "action": "{!c.onPassedInArrayLengthChange}"
   }
  ],
  "cmp.expressiontest.test": [
   {
    "expression": "{!m.stringArray}",
    "exprtext": "m.stringArray",
    "expected": "['red','green','blue']"
   },
   {
    "expression": "{!m.stringArray[0]}",
    "exprtext": "m.stringArray[0]",
    "expected": "'red'"
   },
   {
    "expression": "{!m.stringArray[1]}",
    "exprtext": "m.stringArray[1]",
    "expected": "'green'"
   },
   {
    "expression": "{!m.stringArray[2]=='blue'}",
    "exprtext": "m.stringArray[2]=='blue'",
    "expected": "true"
   },
   {
    "expression": "{!m.stringArray[2]=='BLUE'}",
    "exprtext": "m.stringArray[2]=='BLUE'",
    "expected": "false"
   },
   {
    "expression": "{!m.stringArray.length}",
    "exprtext": "m.stringArray.length",
    "expected": "3"
   },
   {
    "expression": "{!m.stringArray.length > 3}",
    "exprtext": "m.stringArray.length > 3",
    "expected": "false"
   },
   {
    "expression": "{!m.stringArray.length <= 3}",
    "exprtext": "m.stringArray.length <= 3",
    "expected": "true"
   },
   {
    "expression": "{!m.stringArray[3]}",
    "exprtext": "m.stringArray[3]",
    "expected": "undefined"
   },
   {
    "expression": "{!v.componentArray.length}",
    "exprtext": "v.componentArray.length",
    "expected": "4"
   },
   {
    "expression": "{!v.componentArray.length > 2}",
    "exprtext": "v.componentArray.length > 2",
    "expected": "true"
   },
   {
    "expression": "{!v.stringArray}",
    "exprtext": "v.stringArray",
    "expected": "['one','two','three']"
   },
   {
    "expression": "{!v.stringArray[2]}",
    "exprtext": "v.stringArray[2]",
    "expected": "'three'"
   },
   {
    "expression": "{!v.stringArray.length}",
    "exprtext": "v.stringArray.length",
    "expected": "3"
   },
   {
    "expression": "{!v.isNotSet}",
    "exprtext": "v.isNotSet",
    "expected": "[]"
   },
   {
    "expression": "{!v.isNotSet.length}",
    "exprtext": "v.isNotSet.length",
    "expected": "0"
   },
   {
    "expression": "{!v.isNotSet[0]}",
    "exprtext": "v.isNotSet[0]",
    "expected": "undefined"
   },
   {
    "expression": "{!m.emptyArray}",
    "exprtext": "m.emptyArray",
    "expected": "[]"
   },
   {
    "expression": "{!m.emptyArray.length}",
    "exprtext": "m.emptyArray.length",
    "expected": "0"
   },
   {
    "expression": "{!m.emptyArray[0]}",
    "exprtext": "m.emptyArray[0]",
    "expected": "undefined"
   },
   {
    "expression": "{!m.stringList}",
    "exprtext": "m.stringList",
    "expected": "['one','two','three']"
   },
   {
    "expression": "{!m.stringList[0]}",
    "exprtext": "m.stringList[0]",
    "expected": "'one'"
   },
   {
    "expression": "{!m.stringList[0] + ' chance'}",
    "exprtext": "m.stringList[0]",
    "expected": "'one chance'"
   },
   {
    "expression": "{!m.stringList.length}",
    "exprtext": "m.stringList.length",
    "expected": "3"
   },
   {
    "expression": "{!m.stringList.length == 3}",
    "exprtext": "m.stringList.length == 3",
    "expected": "true"
   },
   {
    "expression": "{!m.stringList[4]}",
    "exprtext": "m.stringList[4]",
    "expected": "undefined"
   },
   {
    "expression": "{!m.emptyList}",
    "exprtext": "m.emptyList",
    "expected": "[]"
   },
   {
    "expression": "{!m.emptyList.length}",
    "exprtext": "m.emptyList.length",
    "expected": "0"
   },
   {
    "expression": "{!m.emptyList[0]}",
    "exprtext": "m.emptyList[0]",
    "expected": "undefined"
   },
   {
    "expression": "{!m.listOfList}",
    "exprtext": "m.listOfList",
    "expected": "[['one','two','three'],['un','do','tres'],['ek','do','theen']]"
   },
   {
    "expression": "{!m.listOfList.length}",
    "exprtext": "m.listOfList.length",
    "expected": "3"
   },
   {
    "expression": "{!m.listOfList[1][0]}",
    "exprtext": "m.listOfList[1][0]",
    "expected": "'un'"
   },
   {
    "expression": "{!m.listOfList[1].length}",
    "exprtext": "m.listOfList[1].length",
    "expected": "3"
   },
   {
    "expression": "{!m.stringMultiArray}",
    "exprtext": "m.stringMultiArray",
    "expected": "[[['one'],['two','three']],[],[['a','b'],[]]]"
   },
   {
    "expression": "{!m.stringMultiArray.length}",
    "exprtext": "m.stringMultiArray.length",
    "expected": "3"
   },
   {
    "expression": "{!m.stringMultiArray[0]}",
    "exprtext": "m.stringMultiArray[0]",
    "expected": "[['one'],['two','three']]"
   },
   {
    "expression": "{!m.stringMultiArray[0].length}",
    "exprtext": "m.stringMultiArray[0].length",
    "expected": "2"
   },
   {
    "expression": "{!m.stringMultiArray[0][0]}",
    "exprtext": "m.stringMultiArray[0][0]",
    "expected": "['one']"
   },
   {
    "expression": "{!m.stringMultiArray[0][0][0]}",
    "exprtext": "m.stringMultiArray[0][0][0]",
    "expected": "'one'"
   },
   {
    "expression": "{!m.stringMultiArray[1]}",
    "exprtext": "m.stringMultiArray[1]",
    "expected": "[]"
   },
   {
    "expression": "{!m.stringMultiArray[1].length}",
    "exprtext": "m.stringMultiArray[1].length",
    "expected": "0"
   },
   {
    "expression": "{!true && m.stringArray}",
    "exprtext": "true && m.stringArray",
    "expected": "['red','green','blue']"
   },
   {
    "expression": "{!m.stringList || true}",
    "exprtext": "m.stringList || true",
    "expected": "['one','two','three']"
   },
   {
    "expression": "{!m.stringArray - 1}",
    "exprtext": "m.stringArray - 1",
    "expected": "NaN"
   },
   {
    "expression": "{!2 * m.stringArray}",
    "exprtext": "2 * m.stringArray",
    "expected": "NaN"
   },
   {
    "expression": "{!m.stringArray / 2}",
    "exprtext": "m.stringArray / 2",
    "expected": "NaN"
   },
   {
    "expression": "{!3 % m.stringArray}",
    "exprtext": "3 % m.stringArray",
    "expected": "NaN"
   },
   {
    "expression": "{!m.stringArray > -1}",
    "exprtext": "m.stringArray > -1",
    "expected": "false"
   },
   {
    "expression": "{!m.stringArray >= -1}",
    "exprtext": "m.stringArray >= -1",
    "expected": "false"
   },
   {
    "expression": "{!m.stringArray < 0}",
    "exprtext": "m.stringArray < 0",
    "expected": "false"
   },
   {
    "expression": "{!m.stringArray <= 0}",
    "exprtext": "m.stringArray <= 0",
    "expected": "false"
   },
   {
    "expression": "{!-m.stringArray}",
    "exprtext": "-m.stringArray",
    "expected": "NaN"
   },
   {
    "expression": "{!abs(m.stringArray)}",
    "exprtext": "abs(m.stringArray)",
    "expected": "NaN"
   }
  ]
 },
 "cmp.expressionTest.bodyAttribute": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.button": [
   {
    "label": "Clear Body of Simple Cmp",
    "press": "{!c.clearSimpleCmpBody}",
    "aura:id": "clearSimpleCmpBody"
   },
   {
    "label": "Set Body of Simple Cmp",
    "press": "{!c.setSimpleCmpBody}",
    "aura:id": "setSimpleCmpBody"
   },
   {
    "label": "Keep one and add to Body of Simple Cmp",
    "press": "{!c.addSimpleCmpBody}",
    "aura:id": "addSimpleCmpBody"
   },
   {
    "label": "Clear Body of Simple Cmp",
    "press": "{!c.clearSimpleCmpBody}",
    "aura:id": "clearBodyFromSimpleCmp"
   },
   {
    "label": "Clear Body of Custom Cmp",
    "press": "{!c.clearCustomCmpBody}",
    "aura:id": "clearCustomCmpBody"
   },
   {
    "label": "Set Body of Custom Cmp",
    "press": "{!c.setCustomCmpBody}",
    "aura:id": "setCustomCmpBody"
   },
   {
    "label": "Keep one and add to Body of Custom Cmp",
    "press": "{!c.addCustomCmpBody}",
    "aura:id": "addCustomCmpBody"
   },
   {
    "label": "Clear Body of Custom Cmp",
    "press": "{!c.clearCustomCmpBody}",
    "aura:id": "clearBodyFromCustomCmp"
   }
  ],
  "cmp.expressiontest.bodyattributeoffacet": [
   {
    "aura:id": "customCmp"
   }
  ]
 },
 "cmp.expressionTest.bodyAttributeOfFacet": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.expressionTest.byValue": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "initValue",
    "type": "String"
   },
   {
    "name": "booleanValue",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "numberValue",
    "type": "Double",
    "default": "7357"
   },
   {
    "name": "stringValue",
    "type": "String",
    "default": "default string value"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "changeButton",
    "label": "Change Properties",
    "press": "{!c.changeProperties}"
   }
  ]
 },
 "cmp.expressionTest.functions": {
  "cmp.aura.component": [
   {
    "extends": "expressionTest:suite",
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "integer",
    "type": "integer"
   },
   {
    "name": "double",
    "type": "double"
   },
   {
    "name": "doubleString",
    "type": "String"
   },
   {
    "name": "string",
    "type": "String"
   },
   {
    "name": "emptyString",
    "type": "String"
   },
   {
    "name": "Infinity",
    "type": "double"
   },
   {
    "name": "NegativeInfinity",
    "type": "double"
   },
   {
    "name": "NaN",
    "type": "double"
   },
   {
    "name": "object",
    "type": "Object"
   }
  ],
  "cmp.expressiontest.test": [
   {
    "expression": "{!v.integer}",
    "exprtext": "v.integer",
    "expected": "7"
   },
   {
    "expression": "{!v.double}",
    "exprtext": "v.double",
    "expected": "3.1"
   },
   {
    "expression": "{!v.doubleString}",
    "exprtext": "v.doubleString",
    "expected": "'2.1'"
   },
   {
    "expression": "{!v.string}",
    "exprtext": "v.string",
    "expected": "'Component'"
   },
   {
    "expression": "{!v.emptyString}",
    "exprtext": "v.emptyString",
    "expected": "''"
   },
   {
    "expression": "{!v.Infinity}",
    "exprtext": "v.Infinity",
    "expected": "Infinity"
   },
   {
    "expression": "{!v.NegativeInfinity}",
    "exprtext": "v.NegativeInfinity",
    "expected": "-Infinity"
   },
   {
    "expression": "{!v.NaN}",
    "exprtext": "v.NaN",
    "expected": "NaN"
   },
   {
    "expression": "{!m.date}",
    "exprtext": "m.date",
    "expected": "'2004-09-23T16:30:00.000Z'"
   },
   {
    "expression": "{!true == false}",
    "exprtext": "true == false",
    "expected": "false"
   },
   {
    "expression": "{!false eq false}",
    "exprtext": "false eq false",
    "expected": "true"
   },
   {
    "expression": "{!equals(false, false)}",
    "exprtext": "equals(false, false)",
    "expected": "true"
   },
   {
    "expression": "{!2 == '2'}",
    "exprtext": "2 == '2'",
    "expected": "false"
   },
   {
    "expression": "{!'' == false}",
    "exprtext": "'' == false",
    "expected": "false"
   },
   {
    "expression": "{!(1/0) == (2/0)}",
    "exprtext": "(1/0) == (2/0)",
    "expected": "true"
   },
   {
    "expression": "{!m.integer == 411}",
    "exprtext": "m.integer == 411",
    "expected": "true"
   },
   {
    "expression": "{!m.integerString == 511}",
    "exprtext": "m.integerString == 511",
    "expected": "false"
   },
   {
    "expression": "{!m.integerString == '511'}",
    "exprtext": "m.integerString == '511'",
    "expected": "true"
   },
   {
    "expression": "{!v.Infinity == v.Infinity}",
    "exprtext": "v.Infinity == v.Infinity",
    "expected": "true"
   },
   {
    "expression": "{!m.naN == v.NaN}",
    "exprtext": "m.naN == v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!m.naN == m.naN}",
    "exprtext": "m.naN == m.naN",
    "expected": "false"
   },
   {
    "expression": "{!m.date == '2004-09-23T16:30:00.000Z'}",
    "exprtext": "m.date == '2004-09-23T16:30:00.000Z'",
    "expected": "true"
   },
   {
    "expression": "{!true != false}",
    "exprtext": "true != false",
    "expected": "true"
   },
   {
    "expression": "{!m.booleanFalse ne false}",
    "exprtext": "m.booleanFalse ne false",
    "expected": "false"
   },
   {
    "expression": "{!notequals(false, m.booleanTrue)}",
    "exprtext": "notequals(false, m.booleanTrue)",
    "expected": "true"
   },
   {
    "expression": "{!2 != '2'}",
    "exprtext": "2 != '2'",
    "expected": "true"
   },
   {
    "expression": "{!0 != false}",
    "exprtext": "0 != false",
    "expected": "true"
   },
   {
    "expression": "{!v.NaN != v.NaN}",
    "exprtext": "v.NaN != v.NaN",
    "expected": "true"
   },
   {
    "expression": "{!true && false}",
    "exprtext": "true && false",
    "expected": "false"
   },
   {
    "expression": "{!and(true, m.booleanTrue)}",
    "exprtext": "and(true, m.booleanTrue)",
    "expected": "true"
   },
   {
    "expression": "{!1 && 2}",
    "exprtext": "1 && 2",
    "expected": "2"
   },
   {
    "expression": "{!0 && 2}",
    "exprtext": "0 && 2",
    "expected": "0"
   },
   {
    "expression": "{!'0' && 2}",
    "exprtext": "'0' && 2",
    "expected": "2"
   },
   {
    "expression": "{!'false' && 2}",
    "exprtext": "'false' && 2",
    "expected": "2"
   },
   {
    "expression": "{!'' && 2}",
    "exprtext": "'' && 2",
    "expected": "''"
   },
   {
    "expression": "{!v.NaN && 2}",
    "exprtext": "v.NaN && 2",
    "expected": "NaN"
   },
   {
    "expression": "{!9 && v.integer}",
    "exprtext": "9 && v.integer",
    "expected": "7"
   },
   {
    "expression": "{!9 && v.double}",
    "exprtext": "9 && v.double",
    "expected": "3.1"
   },
   {
    "expression": "{!9 && v.doubleString}",
    "exprtext": "9 && v.doubleString",
    "expected": "'2.1'"
   },
   {
    "expression": "{!9 && v.string}",
    "exprtext": "9 && v.string",
    "expected": "'Component'"
   },
   {
    "expression": "{!9 && v.emptyString}",
    "exprtext": "9 && v.emptyString",
    "expected": "''"
   },
   {
    "expression": "{!false || false}",
    "exprtext": "false || false",
    "expected": "false"
   },
   {
    "expression": "{!or(true, false)}",
    "exprtext": "or(true, false)",
    "expected": "true"
   },
   {
    "expression": "{!0 || 2}",
    "exprtext": "0 || 2",
    "expected": "2"
   },
   {
    "expression": "{!1 || 2}",
    "exprtext": "1 || 2",
    "expected": "1"
   },
   {
    "expression": "{!'0' || 2}",
    "exprtext": "'0' || 2",
    "expected": "'0'"
   },
   {
    "expression": "{!'false' || 2}",
    "exprtext": "'false' || 2",
    "expected": "'false'"
   },
   {
    "expression": "{!'' || m.double}",
    "exprtext": "'' || m.double",
    "expected": "4.1"
   },
   {
    "expression": "{!v.NaN || m.string}",
    "exprtext": "v.NaN || m.string",
    "expected": "'Model'"
   },
   {
    "expression": "{!!true}",
    "exprtext": "!true",
    "expected": "false"
   },
   {
    "expression": "{!not(false)}",
    "exprtext": "not(false)",
    "expected": "true"
   },
   {
    "expression": "{!!0}",
    "exprtext": "!0",
    "expected": "true"
   },
   {
    "expression": "{!!7}",
    "exprtext": "!7",
    "expected": "false"
   },
   {
    "expression": "{!!'0'}",
    "exprtext": "!'0'",
    "expected": "false"
   },
   {
    "expression": "{!!'false'}",
    "exprtext": "!'false'",
    "expected": "false"
   },
   {
    "expression": "{!!''}",
    "exprtext": "!''",
    "expected": "true"
   },
   {
    "expression": "{!!v.NaN}",
    "exprtext": "!v.NaN",
    "expected": "true"
   },
   {
    "expression": "{!!v.string}",
    "exprtext": "!v.string",
    "expected": "false"
   },
   {
    "expression": "{!!v.emptyString}",
    "exprtext": "!v.emptyString",
    "expected": "true"
   },
   {
    "expression": "{!true ? 'yes' : 'no'}",
    "exprtext": "true ? 'yes' : 'no'",
    "expected": "'yes'"
   },
   {
    "expression": "{!false ? 'yes' : 'no'}",
    "exprtext": "false ? 'yes' : 'no'",
    "expected": "'no'"
   },
   {
    "expression": "{!if(true, 'yes', 'no')}",
    "exprtext": "if(true, 'yes', 'no')",
    "expected": "'yes'"
   },
   {
    "expression": "{!if(false, 'yes', 'no')}",
    "exprtext": "if(false, 'yes', 'no')",
    "expected": "'no'"
   },
   {
    "expression": "{!0 ? 'yes' : 'no'}",
    "exprtext": "0 ? 'yes' : 'no'",
    "expected": "'no'"
   },
   {
    "expression": "{!2.1 ? 'yes' : 'no'}",
    "exprtext": "2.1 ? 'yes' : 'no'",
    "expected": "'yes'"
   },
   {
    "expression": "{!'0' ? 'yes' : 'no'}",
    "exprtext": "'0' ? 'yes' : 'no'",
    "expected": "'yes'"
   },
   {
    "expression": "{!'false' ? 'yes' : 'no'}",
    "exprtext": "'false' ? 'yes' : 'no'",
    "expected": "'yes'"
   },
   {
    "expression": "{!'' ? 'yes' : 'no'}",
    "exprtext": "'' ? 'yes' : 'no'",
    "expected": "'no'"
   },
   {
    "expression": "{!v.NaN ? 'yes' : 'no'}",
    "exprtext": "v.NaN ? 'yes' : 'no'",
    "expected": "'no'"
   },
   {
    "expression": "{!0 + 0}",
    "exprtext": "0 + 0",
    "expected": "0"
   },
   {
    "expression": "{!add(m.integer, 2.0)}",
    "exprtext": "add(m.integer, 2.0)",
    "expected": "413"
   },
   {
    "expression": "{!concat(4.1,v.integer)}",
    "exprtext": "concat(4.1,v.integer)",
    "expected": "11.1"
   },
   {
    "expression": "{!0 + 'x'}",
    "exprtext": "0 + 'x'",
    "expected": "'0x'"
   },
   {
    "expression": "{!'a' + v.double}",
    "exprtext": "'a' + v.double",
    "expected": "'a3.1'"
   },
   {
    "expression": "{!'a' + 'x'}",
    "exprtext": "'a' + 'x'",
    "expected": "'ax'"
   },
   {
    "expression": "{!3 + ''}",
    "exprtext": "3 + ''",
    "expected": "'3'"
   },
   {
    "expression": "{!m.emptyString + '3'}",
    "exprtext": "m.emptyString + '3'",
    "expected": "'3'"
   },
   {
    "expression": "{!'3' + '3'}",
    "exprtext": "'3' + '3'",
    "expected": "'33'"
   },
   {
    "expression": "{!v.Infinity + 2}",
    "exprtext": "v.Infinity + 2",
    "expected": "Infinity"
   },
   {
    "expression": "{!v.Infinity + v.NegativeInfinity}",
    "exprtext": "v.Infinity + v.NegativeInfinity",
    "expected": "NaN"
   },
   {
    "expression": "{!v.Infinity + 'AndBeyond'}",
    "exprtext": "v.Infinity + 'AndBeyond'",
    "expected": "'InfinityAndBeyond'"
   },
   {
    "expression": "{!'To' + v.NegativeInfinity}",
    "exprtext": "'To' + v.NegativeInfinity",
    "expected": "'To-Infinity'"
   },
   {
    "expression": "{!1 + v.NaN}",
    "exprtext": "1 + v.NaN",
    "expected": "NaN"
   },
   {
    "expression": "{!'100' + v.NaN}",
    "exprtext": "'100' + v.NaN",
    "expected": "'100NaN'"
   },
   {
    "expression": "{!m.date + 5}",
    "exprtext": "m.date + 5",
    "expected": "'2004-09-23T16:30:00.000Z5'"
   },
   {
    "expression": "{!m.date + '8'}",
    "exprtext": "m.date + '8'",
    "expected": "'2004-09-23T16:30:00.000Z8'"
   },
   {
    "expression": "{!3 - 1}",
    "exprtext": "3 - 1",
    "expected": "2"
   },
   {
    "expression": "{!sub(2, 2.0)}",
    "exprtext": "sub(2, 2.0)",
    "expected": "0"
   },
   {
    "expression": "{!subtract(4, 2)}",
    "exprtext": "subtract(4, 2)",
    "expected": "2"
   },
   {
    "expression": "{!2 - null}",
    "exprtext": "2 - null",
    "expected": "2"
   },
   {
    "expression": "{!3 - '5o'}",
    "exprtext": "3 - '5o'",
    "expected": "NaN"
   },
   {
    "expression": "{!3 - ''}",
    "exprtext": "3 - ''",
    "expected": "3"
   },
   {
    "expression": "{!'5o' - 3}",
    "exprtext": "'5o' - 3",
    "expected": "NaN"
   },
   {
    "expression": "{!'' - 3}",
    "exprtext": "'' - 3",
    "expected": "-3"
   },
   {
    "expression": "{!'5o' - '5o'}",
    "exprtext": "'5o' - '5o'",
    "expected": "NaN"
   },
   {
    "expression": "{!'' - ''}",
    "exprtext": "'' - ''",
    "expected": "0"
   },
   {
    "expression": "{!v.Infinity - 2}",
    "exprtext": "v.Infinity - 2",
    "expected": "Infinity"
   },
   {
    "expression": "{!3 - v.Infinity}",
    "exprtext": "3 - v.Infinity",
    "expected": "-Infinity"
   },
   {
    "expression": "{!3 - v.NaN}",
    "exprtext": "3 - v.NaN",
    "expected": "NaN"
   },
   {
    "expression": "{!3 - '1'}",
    "exprtext": "3 - '1'",
    "expected": "2"
   },
   {
    "expression": "{!'4' - 1}",
    "exprtext": "'4' - 1",
    "expected": "3"
   },
   {
    "expression": "{!'3' - '5'}",
    "exprtext": "'3' - '5'",
    "expected": "-2"
   },
   {
    "expression": "{!m.double - m.integerString}",
    "exprtext": "m.double - m.integerString",
    "expected": "-506.9"
   },
   {
    "expression": "{!1 * 1.1}",
    "exprtext": "1 * 1.1",
    "expected": "1.1"
   },
   {
    "expression": "{!mult(0, 3)}",
    "exprtext": "mult(0, 3)",
    "expected": "0"
   },
   {
    "expression": "{!multiply(-2, -.1)}",
    "exprtext": "multiply(-2, -.1)",
    "expected": ".2"
   },
   {
    "expression": "{!5 * '5o'}",
    "exprtext": "5 * '5o'",
    "expected": "NaN"
   },
   {
    "expression": "{!'5o' * 9}",
    "exprtext": "'5o' * 9",
    "expected": "NaN"
   },
   {
    "expression": "{!'5o' * '5o'}",
    "exprtext": "'5o' * '5o'",
    "expected": "NaN"
   },
   {
    "expression": "{!1e200 * 1e200}",
    "exprtext": "1e200 * 1e200",
    "expected": "Infinity"
   },
   {
    "expression": "{!-1e200 * 1e200}",
    "exprtext": "-1e200 * 1e200",
    "expected": "-Infinity"
   },
   {
    "expression": "{!v.Infinity * v.Infinity}",
    "exprtext": "v.Infinity * v.Infinity",
    "expected": "Infinity"
   },
   {
    "expression": "{!0 * v.Infinity}",
    "exprtext": "0 * v.Infinity",
    "expected": "NaN"
   },
   {
    "expression": "{!2 * '1.1'}",
    "exprtext": "2 * '1.1'",
    "expected": "2.2"
   },
   {
    "expression": "{!'1.3' * 4}",
    "exprtext": "'1.3' * 4",
    "expected": "5.2"
   },
   {
    "expression": "{!'7' * '3.1'}",
    "exprtext": "'7' * '3.1'",
    "expected": "21.7"
   },
   {
    "expression": "{!1 * v.NaN}",
    "exprtext": "1 * v.NaN",
    "expected": "NaN"
   },
   {
    "expression": "{!m.double * '2'}",
    "exprtext": "m.double * '2'",
    "expected": "8.2"
   },
   {
    "expression": "{!3 / 2}",
    "exprtext": "3 / 2",
    "expected": "1.5"
   },
   {
    "expression": "{!div(4, 2)}",
    "exprtext": "div(4, 2)",
    "expected": "2"
   },
   {
    "expression": "{!divide(5, 2)}",
    "exprtext": "divide(5, 2)",
    "expected": "2.5"
   },
   {
    "expression": "{!0 / 0}",
    "exprtext": "0 / 0",
    "expected": "NaN"
   },
   {
    "expression": "{!5 / 0}",
    "exprtext": "5 / 0",
    "expected": "Infinity"
   },
   {
    "expression": "{!-1 / 0}",
    "exprtext": "-1 / 0",
    "expected": "-Infinity"
   },
   {
    "expression": "{!3 / '5o'}",
    "exprtext": "3 / '5o'",
    "expected": "NaN"
   },
   {
    "expression": "{!'5o' / 3}",
    "exprtext": "'5o' / 3",
    "expected": "NaN"
   },
   {
    "expression": "{!'5o' / '5o'}",
    "exprtext": "'5o' / '5o'",
    "expected": "NaN"
   },
   {
    "expression": "{!'5.5' / '1.1'}",
    "exprtext": "'5.5' / '1.1'",
    "expected": "5"
   },
   {
    "expression": "{!5 / v.NegativeInfinity}",
    "exprtext": "5 / v.NegativeInfinity",
    "expected": "0"
   },
   {
    "expression": "{!v.Infinity / v.Infinity}",
    "exprtext": "v.Infinity / v.Infinity",
    "expected": "NaN"
   },
   {
    "expression": "{!1 / v.NaN}",
    "exprtext": "1 / v.NaN",
    "expected": "NaN"
   },
   {
    "expression": "{!m.double / '2'}",
    "exprtext": "m.double / '2'",
    "expected": "2.05"
   },
   {
    "expression": "{!23 % 4}",
    "exprtext": "23 % 4",
    "expected": "3"
   },
   {
    "expression": "{!mod(23, 4)}",
    "exprtext": "mod(23, 4)",
    "expected": "3"
   },
   {
    "expression": "{!modulus(23, 4)}",
    "exprtext": "modulus(23, 4)",
    "expected": "3"
   },
   {
    "expression": "{!3 % 0}",
    "exprtext": "3 % 0",
    "expected": "NaN"
   },
   {
    "expression": "{!0 % 3}",
    "exprtext": "0 % 3",
    "expected": "0"
   },
   {
    "expression": "{!0 % 0}",
    "exprtext": "0 % 0",
    "expected": "NaN"
   },
   {
    "expression": "{!3 % '5o'}",
    "exprtext": "3 % '5o'",
    "expected": "NaN"
   },
   {
    "expression": "{!'5o' % 3}",
    "exprtext": "'5o' % 3",
    "expected": "NaN"
   },
   {
    "expression": "{!'5o' % '5o'}",
    "exprtext": "'5o' % '5o'",
    "expected": "NaN"
   },
   {
    "expression": "{!'23' % '4'}",
    "exprtext": "'23' % '4'",
    "expected": "3"
   },
   {
    "expression": "{!3 % v.Infinity}",
    "exprtext": "3 % v.Infinity",
    "expected": "3"
   },
   {
    "expression": "{!v.Infinity % 3}",
    "exprtext": "v.Infinity % 3",
    "expected": "NaN"
   },
   {
    "expression": "{!1 % v.NaN}",
    "exprtext": "1 % v.NaN",
    "expected": "NaN"
   },
   {
    "expression": "{!m.integer % '2'}",
    "exprtext": "m.integer % '2'",
    "expected": "1"
   },
   {
    "expression": "{!5 > 2}",
    "exprtext": "5 > 2",
    "expected": "true"
   },
   {
    "expression": "{!2 gt 2}",
    "exprtext": "2 gt 2",
    "expected": "false"
   },
   {
    "expression": "{!greaterthan(3, 2)}",
    "exprtext": "greaterthan(3, 2)",
    "expected": "true"
   },
   {
    "expression": "{!9000 > '5o'}",
    "exprtext": "9000 > '5o'",
    "expected": "false"
   },
   {
    "expression": "{!'5o' > 4}",
    "exprtext": "'5o' > 4",
    "expected": "false"
   },
   {
    "expression": "{!'5o' > '4o'}",
    "exprtext": "'5o' > '4o'",
    "expected": "true"
   },
   {
    "expression": "{!'5' > '3.9'}",
    "exprtext": "'5' > '3.9'",
    "expected": "true"
   },
   {
    "expression": "{!'5b' > '5a'}",
    "exprtext": "'5b' > '5a'",
    "expected": "true"
   },
   {
    "expression": "{!'5A' > '5a'}",
    "exprtext": "'5A' > '5a'",
    "expected": "false"
   },
   {
    "expression": "{!v.Infinity > v.Infinity}",
    "exprtext": "v.Infinity > v.Infinity",
    "expected": "false"
   },
   {
    "expression": "{!true > false}",
    "exprtext": "true > false",
    "expected": "true"
   },
   {
    "expression": "{!0 > ''}",
    "exprtext": "0 > ''",
    "expected": "false"
   },
   {
    "expression": "{!true > 0}",
    "exprtext": "true > 0",
    "expected": "true"
   },
   {
    "expression": "{!true > 1}",
    "exprtext": "true > 1",
    "expected": "false"
   },
   {
    "expression": "{!v.Infinity > -v.Infinity}",
    "exprtext": "v.Infinity > -v.Infinity",
    "expected": "true"
   },
   {
    "expression": "{!0 > v.NaN}",
    "exprtext": "0 > v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!'zz' > v.NaN}",
    "exprtext": "'zz' > v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!v.Infinity > v.NaN}",
    "exprtext": "v.Infinity > v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN > 0}",
    "exprtext": "v.NaN > 0",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN > '5o'}",
    "exprtext": "v.NaN > '5o'",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN > v.Infinity}",
    "exprtext": "v.NaN > v.Infinity",
    "expected": "false"
   },
   {
    "expression": "{!m.dateLater > m.date}",
    "exprtext": "m.dateLater > m.date",
    "expected": "true"
   },
   {
    "expression": "{!m.date > m.dateLater}",
    "exprtext": "m.date > m.dateLater",
    "expected": "false"
   },
   {
    "expression": "{!m.calendarLater > m.calendar}",
    "exprtext": "m.calendarLater > m.calendar",
    "expected": "true"
   },
   {
    "expression": "{!m.calendar > m.calendarLater}",
    "exprtext": "m.calendar > m.calendarLater",
    "expected": "false"
   },
   {
    "expression": "{!m.calendar > m.date}",
    "exprtext": "m.calendar > m.date",
    "expected": "true"
   },
   {
    "expression": "{!5 >= 2}",
    "exprtext": "5 >= 2",
    "expected": "true"
   },
   {
    "expression": "{!2 ge 2}",
    "exprtext": "2 ge 2",
    "expected": "true"
   },
   {
    "expression": "{!greaterthanorequal(3, 2)}",
    "exprtext": "greaterthanorequal(3, 2)",
    "expected": "true"
   },
   {
    "expression": "{!9000 >= '5o'}",
    "exprtext": "9000 >= '5o'",
    "expected": "false"
   },
   {
    "expression": "{!'5o' >= 4}",
    "exprtext": "'5o' >= 4",
    "expected": "false"
   },
   {
    "expression": "{!'5o' >= '4o'}",
    "exprtext": "'5o' >= '4o'",
    "expected": "true"
   },
   {
    "expression": "{!'5' >= '3.9'}",
    "exprtext": "'5' >= '3.9'",
    "expected": "true"
   },
   {
    "expression": "{!'5b' >= '5a'}",
    "exprtext": "'5b' >= '5a'",
    "expected": "true"
   },
   {
    "expression": "{!'5A' >= '5a'}",
    "exprtext": "'5A' >= '5a'",
    "expected": "false"
   },
   {
    "expression": "{!v.Infinity >= v.Infinity}",
    "exprtext": "v.Infinity >= v.Infinity",
    "expected": "true"
   },
   {
    "expression": "{!true >= false}",
    "exprtext": "true >= false",
    "expected": "true"
   },
   {
    "expression": "{!0 >= ''}",
    "exprtext": "0 >= ''",
    "expected": "true"
   },
   {
    "expression": "{!true >= 0}",
    "exprtext": "true >= 0",
    "expected": "true"
   },
   {
    "expression": "{!true >= 1}",
    "exprtext": "true >= 1",
    "expected": "true"
   },
   {
    "expression": "{!v.Infinity >= -v.Infinity}",
    "exprtext": "v.Infinity >= -v.Infinity",
    "expected": "true"
   },
   {
    "expression": "{!0 >= v.NaN}",
    "exprtext": "0 >= v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!'5o' >= v.NaN}",
    "exprtext": "'5o' >= v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!'zz' >= v.NaN}",
    "exprtext": "'zz' >= v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!v.Infinity >= v.NaN}",
    "exprtext": "v.Infinity >= v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN >= 0}",
    "exprtext": "v.NaN >= 0",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN >= '5o'}",
    "exprtext": "v.NaN >= '5o'",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN >= v.Infinity}",
    "exprtext": "v.NaN >= v.Infinity",
    "expected": "false"
   },
   {
    "expression": "{!m.dateLater >= m.date}",
    "exprtext": "m.dateLater >= m.date",
    "expected": "true"
   },
   {
    "expression": "{!m.date >= m.dateLater}",
    "exprtext": "m.date >= m.dateLater",
    "expected": "false"
   },
   {
    "expression": "{!m.calendarLater >= m.calendar}",
    "exprtext": "m.calendarLater >= m.calendar",
    "expected": "true"
   },
   {
    "expression": "{!m.calendar >= m.calendarLater}",
    "exprtext": "m.calendar >= m.calendarLater",
    "expected": "false"
   },
   {
    "expression": "{!m.calendar >= m.date}",
    "exprtext": "m.calendar >= m.date",
    "expected": "true"
   },
   {
    "expression": "{!5 < 2}",
    "exprtext": "5 < 2",
    "expected": "false"
   },
   {
    "expression": "{!2 lt 2}",
    "exprtext": "2 lt 2",
    "expected": "false"
   },
   {
    "expression": "{!lessthan(3, 2)}",
    "exprtext": "lessthan(3, 2)",
    "expected": "false"
   },
   {
    "expression": "{!9000 < '5o'}",
    "exprtext": "9000 < '5o'",
    "expected": "false"
   },
   {
    "expression": "{!'5o' < 4}",
    "exprtext": "'5o' < 4",
    "expected": "false"
   },
   {
    "expression": "{!'5o' < '4o'}",
    "exprtext": "'5o' < '4o'",
    "expected": "false"
   },
   {
    "expression": "{!'5' < '3.9'}",
    "exprtext": "'5' < '3.9'",
    "expected": "false"
   },
   {
    "expression": "{!'5b' < '5a'}",
    "exprtext": "'5b' < '5a'",
    "expected": "false"
   },
   {
    "expression": "{!'5A' < '5a'}",
    "exprtext": "'5A' < '5a'",
    "expected": "true"
   },
   {
    "expression": "{!v.Infinity < v.Infinity}",
    "exprtext": "v.Infinity < v.Infinity",
    "expected": "false"
   },
   {
    "expression": "{!true < false}",
    "exprtext": "true < false",
    "expected": "false"
   },
   {
    "expression": "{!0 < ''}",
    "exprtext": "0 < ''",
    "expected": "false"
   },
   {
    "expression": "{!true < 0}",
    "exprtext": "true < 0",
    "expected": "false"
   },
   {
    "expression": "{!true < 1}",
    "exprtext": "true < 1",
    "expected": "false"
   },
   {
    "expression": "{!v.Infinity < -v.Infinity}",
    "exprtext": "v.Infinity < -v.Infinity",
    "expected": "false"
   },
   {
    "expression": "{!0 < v.NaN}",
    "exprtext": "0 < v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!'5o' < v.NaN}",
    "exprtext": "'5o' < v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!'zz' < v.NaN}",
    "exprtext": "'zz' < v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!v.Infinity < v.NaN}",
    "exprtext": "v.Infinity < v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN < 0}",
    "exprtext": "v.NaN < 0",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN < '5o'}",
    "exprtext": "v.NaN < '5o'",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN < v.Infinity}",
    "exprtext": "v.NaN < v.Infinity",
    "expected": "false"
   },
   {
    "expression": "{!m.dateLater < m.date}",
    "exprtext": "m.dateLater < m.date",
    "expected": "false"
   },
   {
    "expression": "{!m.date < m.dateLater}",
    "exprtext": "m.date < m.dateLater",
    "expected": "true"
   },
   {
    "expression": "{!m.calendarLater < m.calendar}",
    "exprtext": "m.calendarLater < m.calendar",
    "expected": "false"
   },
   {
    "expression": "{!m.calendar < m.calendarLater}",
    "exprtext": "m.calendar < m.calendarLater",
    "expected": "true"
   },
   {
    "expression": "{!m.calendar < m.date}",
    "exprtext": "m.calendar < m.date",
    "expected": "false"
   },
   {
    "expression": "{!5 <= 2}",
    "exprtext": "5 <= 2",
    "expected": "false"
   },
   {
    "expression": "{!2 le 2}",
    "exprtext": "2 le 2",
    "expected": "true"
   },
   {
    "expression": "{!lessthanorequal(3, 2)}",
    "exprtext": "lessthanorequal(3, 2)",
    "expected": "false"
   },
   {
    "expression": "{!9000 <= '5o'}",
    "exprtext": "9000 <= '5o'",
    "expected": "false"
   },
   {
    "expression": "{!'5o' <= 4}",
    "exprtext": "'5o' <= 4",
    "expected": "false"
   },
   {
    "expression": "{!'5o' <= '4o'}",
    "exprtext": "'5o' <= '4o'",
    "expected": "false"
   },
   {
    "expression": "{!'5' <= '3.9'}",
    "exprtext": "'5' <= '3.9'",
    "expected": "false"
   },
   {
    "expression": "{!'5b' <= '5a'}",
    "exprtext": "'5b' <= '5a'",
    "expected": "false"
   },
   {
    "expression": "{!'5A' <= '5a'}",
    "exprtext": "'5A' <= '5a'",
    "expected": "true"
   },
   {
    "expression": "{!v.Infinity <= v.Infinity}",
    "exprtext": "v.Infinity <= v.Infinity",
    "expected": "true"
   },
   {
    "expression": "{!true <= false}",
    "exprtext": "true <= false",
    "expected": "false"
   },
   {
    "expression": "{!0 <= ''}",
    "exprtext": "0 <= ''",
    "expected": "true"
   },
   {
    "expression": "{!true <= 0}",
    "exprtext": "true <= 0",
    "expected": "false"
   },
   {
    "expression": "{!true <= 1}",
    "exprtext": "true <= 1",
    "expected": "true"
   },
   {
    "expression": "{!v.Infinity <= -v.Infinity}",
    "exprtext": "v.Infinity <= -v.Infinity",
    "expected": "false"
   },
   {
    "expression": "{!0 <= v.NaN}",
    "exprtext": "0 <= v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!'5o' <= v.NaN}",
    "exprtext": "'5o' <= v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!'zz' <= v.NaN}",
    "exprtext": "'zz' <= v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!v.Infinity <= v.NaN}",
    "exprtext": "v.Infinity <= v.NaN",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN <= 0}",
    "exprtext": "v.NaN <= 0",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN <= '5o'}",
    "exprtext": "v.NaN <= '5o'",
    "expected": "false"
   },
   {
    "expression": "{!v.NaN <= v.Infinity}",
    "exprtext": "v.NaN <= v.Infinity",
    "expected": "false"
   },
   {
    "expression": "{!m.dateLater <= m.date}",
    "exprtext": "m.dateLater <= m.date",
    "expected": "false"
   },
   {
    "expression": "{!m.date <= m.dateLater}",
    "exprtext": "m.date <= m.dateLater",
    "expected": "true"
   },
   {
    "expression": "{!m.calendarLater <= m.calendar}",
    "exprtext": "m.calendarLater <= m.calendar",
    "expected": "false"
   },
   {
    "expression": "{!m.calendar <= m.calendarLater}",
    "exprtext": "m.calendar <= m.calendarLater",
    "expected": "true"
   },
   {
    "expression": "{!m.calendar <= m.date}",
    "exprtext": "m.calendar <= m.date",
    "expected": "false"
   },
   {
    "expression": "{!-1}",
    "exprtext": "-1",
    "expected": "-1"
   },
   {
    "expression": "{!neg(2)}",
    "exprtext": "neg(2)",
    "expected": "-2"
   },
   {
    "expression": "{!negate(3)}",
    "exprtext": "negate(3)",
    "expected": "-3"
   },
   {
    "expression": "{!negate(-3)}",
    "exprtext": "negate(-3)",
    "expected": "3"
   },
   {
    "expression": "{!-v.NaN}",
    "exprtext": "-v.NaN",
    "expected": "NaN"
   },
   {
    "expression": "{!-v.Infinity}",
    "exprtext": "-v.Infinity",
    "expected": "-Infinity"
   },
   {
    "expression": "{!-'5o'}",
    "exprtext": "-'5o'",
    "expected": "NaN"
   },
   {
    "expression": "{!-'5'}",
    "exprtext": "-'5'",
    "expected": "-5"
   },
   {
    "expression": "{!-''}",
    "exprtext": "-''",
    "expected": "0"
   },
   {
    "expression": "{!-m.double}",
    "exprtext": "-m.double",
    "expected": "-4.1"
   },
   {
    "expression": "{!abs(3)}",
    "exprtext": "abs(3)",
    "expected": "3"
   },
   {
    "expression": "{!abs(-2.1)}",
    "exprtext": "abs(-2.1)",
    "expected": "2.1"
   },
   {
    "expression": "{!abs('-5')}",
    "exprtext": "abs('-5')",
    "expected": "5"
   },
   {
    "expression": "{!abs('-5o')}",
    "exprtext": "abs('-5o')",
    "expected": "NaN"
   },
   {
    "expression": "{!abs('')}",
    "exprtext": "abs('')",
    "expected": "0"
   },
   {
    "expression": "{!abs(-v.Infinity)}",
    "exprtext": "abs(-v.Infinity)",
    "expected": "Infinity"
   },
   {
    "expression": "{!abs(m.NaN)}",
    "exprtext": "abs(m.NaN)",
    "expected": "NaN"
   },
   {
    "expression": "{!abs(v.double)}",
    "exprtext": "abs(v.double)",
    "expected": "3.1"
   },
   {
    "expression": "{!empty(null)}",
    "exprtext": "empty(null)",
    "expected": "true"
   },
   {
    "expression": "{!empty(true)}",
    "exprtext": "empty(true)",
    "expected": "false"
   },
   {
    "expression": "{!empty(false)}",
    "exprtext": "empty(false)",
    "expected": "false"
   },
   {
    "expression": "{!empty(0)}",
    "exprtext": "empty(0)",
    "expected": "false"
   },
   {
    "expression": "{!empty(0.0)}",
    "exprtext": "empty(0.0)",
    "expected": "false"
   },
   {
    "expression": "{!empty(m.integer)}",
    "exprtext": "empty(m.integer)",
    "expected": "false"
   },
   {
    "expression": "{!empty(m.double)}",
    "exprtext": "empty(m.double)",
    "expected": "false"
   },
   {
    "expression": "{!empty(v.NaN)}",
    "exprtext": "empty(v.NaN)",
    "expected": "false"
   },
   {
    "expression": "{!empty('')}",
    "exprtext": "empty('')",
    "expected": "true"
   },
   {
    "expression": "{!empty('Random')}",
    "exprtext": "empty('Random')",
    "expected": "false"
   },
   {
    "expression": "{!empty(m.stringEmpty)}",
    "exprtext": "empty(m.stringEmpty)",
    "expected": "true"
   },
   {
    "expression": "{!empty(m.string)}",
    "exprtext": "empty(m.string)",
    "expected": "false"
   },
   {
    "expression": "{!empty(m.emptyList)}",
    "exprtext": "empty(m.emptyList)",
    "expected": "true"
   },
   {
    "expression": "{!empty(m.stringList)}",
    "exprtext": "empty(m.stringList)",
    "expected": "false"
   },
   {
    "expression": "{!empty(m.objectNull)}",
    "exprtext": "empty(m.objectNull)",
    "expected": "true"
   },
   {
    "expression": "{!empty(v.object)}",
    "exprtext": "empty(v.object)",
    "expected": "true"
   },
   {
    "expression": "{!m.booleanTrue && v.string == 'Model' ? null : abs(v.Infinity) >= m.double && (m.double + m.doubleString + 1)}",
    "exprtext": "m.booleanTrue && v.string == 'Model' ? null : abs(v.Infinity) >= m.double && (m.double + m.doubleString + 1)",
    "expected": "'4.15.11'"
   },
   {
    "expression": "{!concat(abs((div(mult(4,((sub((neg(v.double)),'1.1')))),v.doubleString-.1))),' magnitude')}",
    "exprtext": "concat(abs((div(mult(4,((sub((neg(v.double)),'1.1')))),v.doubleString-.1))),' magnitude')",
    "expected": "'8.4 magnitude'"
   },
   {
    "expression": "{!if(or(m.calendar gt m.infinity,m.double*m.date lt m.emptyString),v.double/m.dateLater,7*'11'-4*2)}",
    "exprtext": "if(or(m.calendar gt m.infinity,m.double*m.date lt m.emptyString),v.double/m.dateLater,7*'11'-4*2)",
    "expected": "69"
   }
  ]
 },
 "cmp.expressionTest.mapValue": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "map",
    "type": "Map"
   },
   {
    "name": "triggers",
    "type": "Map",
    "default": "{ trigger: 'zero', triggerCount: 0, nested: { count: 0 } }"
   },
   {
    "name": "triggers2",
    "type": "Map",
    "default": "{ trigger: 'zero', triggerCount: 0, nested: { count: 1 } }"
   },
   {
    "name": "fribble",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.map}",
    "action": "{!c.onValueChange}"
   },
   {
    "name": "change",
    "value": "{!m.map}",
    "action": "{!c.onValueChange}"
   },
   {
    "name": "change",
    "value": "{!v.triggers.trigger}",
    "action": "{!c.onTriggerChange}"
   },
   {
    "name": "change",
    "value": "{!v.triggers2.trigger}",
    "action": "{!c.onTrigger2Change}"
   },
   {
    "name": "change",
    "value": "{!v.triggers2}",
    "action": "{!c.noop}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputText",
    "value": "{!m.map.subkey}"
   }
  ]
 },
 "cmp.expressionTest.null": {
  "cmp.aura.component": [
   {
    "extends": "expressionTest:suite",
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "isNull",
    "type": "String"
   }
  ],
  "cmp.expressiontest.test": [
   {
    "expression": "{!null}",
    "exprtext": "null",
    "expected": "null"
   },
   {
    "expression": "{!v.isNull}",
    "exprtext": "v.isNull",
    "expected": "null"
   },
   {
    "expression": "{!undefined}",
    "exprtext": "undefined",
    "expected": "undefined"
   },
   {
    "expression": "{!!null}",
    "exprtext": "!null",
    "expected": "true"
   },
   {
    "expression": "{!null == true}",
    "exprtext": "null == true",
    "expected": "false"
   },
   {
    "expression": "{!null == false}",
    "exprtext": "null == false",
    "expected": "false"
   },
   {
    "expression": "{!null == ''}",
    "exprtext": "null == ''",
    "expected": "false"
   },
   {
    "expression": "{!null == 0}",
    "exprtext": "null == 0",
    "expected": "false"
   },
   {
    "expression": "{!null == null}",
    "exprtext": "null == null",
    "expected": "true"
   },
   {
    "expression": "{!null == undefined}",
    "exprtext": "null == undefined",
    "expected": "true"
   },
   {
    "expression": "{!null == m.naN}",
    "exprtext": "null == m.naN",
    "expected": "false"
   },
   {
    "expression": "{!NaN == m.naN}",
    "exprtext": "NaN == m.naN",
    "expected": "false"
   },
   {
    "expression": "{!'NaN' == m.naN}",
    "exprtext": "'NaN' == m.naN",
    "expected": "false"
   },
   {
    "expression": "{!''+null/null == ''+m.naN}",
    "exprtext": "NaN == m.naN",
    "expected": "true"
   },
   {
    "expression": "{!null != null}",
    "exprtext": "null != null",
    "expected": "false"
   },
   {
    "expression": "{!null != undefined}",
    "exprtext": "null != undefined",
    "expected": "false"
   },
   {
    "expression": "{!null != m.naN}",
    "exprtext": "null != m.naN",
    "expected": "true"
   },
   {
    "expression": "{!true && null}",
    "exprtext": "true && null",
    "expected": "null"
   },
   {
    "expression": "{!null && null}",
    "exprtext": "null && null",
    "expected": "null"
   },
   {
    "expression": "{!null && true}",
    "exprtext": "null && true",
    "expected": "null"
   },
   {
    "expression": "{!false || null}",
    "exprtext": "false || null",
    "expected": "null"
   },
   {
    "expression": "{!null || true}",
    "exprtext": "null || true",
    "expected": "true"
   },
   {
    "expression": "{!null || null}",
    "exprtext": "null || null",
    "expected": "null"
   },
   {
    "expression": "{!null ? 'yes' : 'no'}",
    "exprtext": "null ? 'yes' : 'no'",
    "expected": "'no'"
   },
   {
    "expression": "{!true ? null : 'no'}",
    "exprtext": "true ? null : 'no'",
    "expected": "null"
   },
   {
    "expression": "{!false ? 'yes' : null}",
    "exprtext": "false ? 'yes' : null",
    "expected": "null"
   },
   {
    "expression": "{!null + 1}",
    "exprtext": "null + 1",
    "expected": "1"
   },
   {
    "expression": "{!null + 'b'}",
    "exprtext": "null + 'b'",
    "expected": "'b'"
   },
   {
    "expression": "{!2.5 + null}",
    "exprtext": "2.5 + null",
    "expected": "2.5"
   },
   {
    "expression": "{!'c' + null}",
    "exprtext": "'c' + null",
    "expected": "'c'"
   },
   {
    "expression": "{!null + null}",
    "exprtext": "null + null",
    "expected": "''"
   },
   {
    "expression": "{!2 - null}",
    "exprtext": "2 - null",
    "expected": "2"
   },
   {
    "expression": "{!null - 3.1}",
    "exprtext": "null - 3.1",
    "expected": "-3.1"
   },
   {
    "expression": "{!null - null}",
    "exprtext": "null - null",
    "expected": "0"
   },
   {
    "expression": "{!3 * null}",
    "exprtext": "3 * null",
    "expected": "0"
   },
   {
    "expression": "{!null * -.1}",
    "exprtext": "null * -.1",
    "expected": "0"
   },
   {
    "expression": "{!null * null}",
    "exprtext": "null * null",
    "expected": "0"
   },
   {
    "expression": "{!3 / null}",
    "exprtext": "3 / null",
    "expected": "Infinity"
   },
   {
    "expression": "{!null / 3}",
    "exprtext": "null / 3",
    "expected": "0"
   },
   {
    "expression": "{!null / null}",
    "exprtext": "null / null",
    "expected": "NaN"
   },
   {
    "expression": "{!3 % null}",
    "exprtext": "3 % null",
    "expected": "NaN"
   },
   {
    "expression": "{!null % 3}",
    "exprtext": "null % 3",
    "expected": "0"
   },
   {
    "expression": "{!null % null}",
    "exprtext": "null % null",
    "expected": "NaN"
   },
   {
    "expression": "{!1 > null}",
    "exprtext": "1 > null",
    "expected": "true"
   },
   {
    "expression": "{!null > 0}",
    "exprtext": "null > 0",
    "expected": "false"
   },
   {
    "expression": "{!null > null}",
    "exprtext": "null > null",
    "expected": "false"
   },
   {
    "expression": "{!0 >= null}",
    "exprtext": "0 >= null",
    "expected": "true"
   },
   {
    "expression": "{!null >= 1}",
    "exprtext": "null >= 1",
    "expected": "false"
   },
   {
    "expression": "{!null >= null}",
    "exprtext": "null >= null",
    "expected": "true"
   },
   {
    "expression": "{!0 < null}",
    "exprtext": "0 < null",
    "expected": "false"
   },
   {
    "expression": "{!null < 1}",
    "exprtext": "null < 1",
    "expected": "true"
   },
   {
    "expression": "{!null < null}",
    "exprtext": "null < null",
    "expected": "false"
   },
   {
    "expression": "{!1 <= null}",
    "exprtext": "1 <= null",
    "expected": "false"
   },
   {
    "expression": "{!null <= 0}",
    "exprtext": "null <= 0",
    "expected": "true"
   },
   {
    "expression": "{!null <= null}",
    "exprtext": "null <= null",
    "expected": "true"
   },
   {
    "expression": "{!-null}",
    "exprtext": "-null",
    "expected": "0"
   },
   {
    "expression": "{!abs(null)}",
    "exprtext": "abs(null)",
    "expected": "0"
   },
   {
    "expression": "{!m.stringNull}",
    "exprtext": "m.stringNull",
    "expected": "null"
   },
   {
    "expression": "{!m.integerNull}",
    "exprtext": "m.integerNull",
    "expected": "null"
   },
   {
    "expression": "{!m.doubleNull}",
    "exprtext": "m.doubleNull",
    "expected": "null"
   },
   {
    "expression": "{!m.objectNull}",
    "exprtext": "m.objectNull",
    "expected": "null"
   },
   {
    "expression": "{!!m.stringNull}",
    "exprtext": "!m.stringNull",
    "expected": "true"
   },
   {
    "expression": "{!!m.objectNull}",
    "exprtext": "!m.objectNull",
    "expected": "true"
   },
   {
    "expression": "{!null == m.stringNull}",
    "exprtext": "null == m.stringNull",
    "expected": "true"
   },
   {
    "expression": "{!null == m.integerNull}",
    "exprtext": "null == m.integerNull",
    "expected": "true"
   },
   {
    "expression": "{!null == m.doubleNull}",
    "exprtext": "null == m.doubleNull",
    "expected": "true"
   },
   {
    "expression": "{!null == m.objectNull}",
    "exprtext": "null == m.objectNull",
    "expected": "true"
   }
  ]
 },
 "cmp.expressionTest.simpleValue": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "booleanValue",
    "type": "Boolean"
   },
   {
    "name": "integerValue",
    "type": "Integer"
   },
   {
    "name": "stringValue",
    "type": "String"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.booleanValue}",
    "action": "{!c.onValueChange}"
   },
   {
    "name": "change",
    "value": "{!v.integerValue}",
    "action": "{!c.onValueChange}"
   },
   {
    "name": "change",
    "value": "{!v.stringValue}",
    "action": "{!c.onValueChange}"
   }
  ]
 },
 "cmp.expressionTest.suite": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ]
 },
 "cmp.expressionTest.test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "expression",
    "type": "Object"
   },
   {
    "name": "exprText",
    "type": "String"
   },
   {
    "name": "expected",
    "type": "Object"
   }
  ]
 },
 "cmp.expressionTest.undefined": {
  "cmp.aura.component": [
   {
    "extends": "expressionTest:suite",
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "isNotSet",
    "type": "String"
   }
  ],
  "cmp.expressiontest.test": [
   {
    "expression": "{!undefined}",
    "exprtext": "undefined",
    "expected": "undefined"
   },
   {
    "expression": "{!v.isNotSet}",
    "exprtext": "v.isNotSet",
    "expected": "undefined"
   },
   {
    "expression": "{!!undefined}",
    "exprtext": "!undefined",
    "expected": "true"
   },
   {
    "expression": "{!undefined == true}",
    "exprtext": "undefined == true",
    "expected": "false"
   },
   {
    "expression": "{!undefined == false}",
    "exprtext": "undefined == false",
    "expected": "false"
   },
   {
    "expression": "{!undefined == ''}",
    "exprtext": "undefined == ''",
    "expected": "false"
   },
   {
    "expression": "{!undefined == 0}",
    "exprtext": "undefined == 0",
    "expected": "false"
   },
   {
    "expression": "{!undefined == m.naN}",
    "exprtext": "undefined == m.naN",
    "expected": "false"
   },
   {
    "expression": "{!undefined != undefined}",
    "exprtext": "undefined != undefined",
    "expected": "false"
   },
   {
    "expression": "{!undefined != m.naN}",
    "exprtext": "undefined != m.naN",
    "expected": "true"
   },
   {
    "expression": "{!true && undefined}",
    "exprtext": "true && undefined",
    "expected": "undefined"
   },
   {
    "expression": "{!undefined && undefined}",
    "exprtext": "undefined && undefined",
    "expected": "undefined"
   },
   {
    "expression": "{!undefined && true}",
    "exprtext": "undefined && true",
    "expected": "undefined"
   },
   {
    "expression": "{!false || undefined}",
    "exprtext": "false || undefined",
    "expected": "undefined"
   },
   {
    "expression": "{!undefined || true}",
    "exprtext": "undefined || true",
    "expected": "true"
   },
   {
    "expression": "{!undefined || undefined}",
    "exprtext": "undefined || undefined",
    "expected": "undefined"
   },
   {
    "expression": "{!undefined ? 'yes' : 'no'}",
    "exprtext": "undefined ? 'yes' : 'no'",
    "expected": "'no'"
   },
   {
    "expression": "{!true ? undefined : 'no'}",
    "exprtext": "true ? undefined : 'no'",
    "expected": "undefined"
   },
   {
    "expression": "{!false ? 'yes' : undefined}",
    "exprtext": "false ? 'yes' : undefined",
    "expected": "undefined"
   },
   {
    "expression": "{!undefined + 1}",
    "exprtext": "undefined + 1",
    "expected": "NaN"
   },
   {
    "expression": "{!undefined + 'b'}",
    "exprtext": "undefined + 'b'",
    "expected": "'b'"
   },
   {
    "expression": "{!2.5 + undefined}",
    "exprtext": "2.5 + undefined",
    "expected": "NaN"
   },
   {
    "expression": "{!'c' + undefined}",
    "exprtext": "'c' + undefined",
    "expected": "'c'"
   },
   {
    "expression": "{!undefined + undefined}",
    "exprtext": "undefined + undefined",
    "expected": "''"
   },
   {
    "expression": "{!2 - undefined}",
    "exprtext": "2 - undefined",
    "expected": "NaN"
   },
   {
    "expression": "{!undefined - 3.1}",
    "exprtext": "undefined - 3.1",
    "expected": "NaN"
   },
   {
    "expression": "{!undefined - undefined}",
    "exprtext": "undefined - undefined",
    "expected": "NaN"
   },
   {
    "expression": "{!3 * undefined}",
    "exprtext": "3 * undefined",
    "expected": "NaN"
   },
   {
    "expression": "{!undefined * -.1}",
    "exprtext": "undefined * -.1",
    "expected": "NaN"
   },
   {
    "expression": "{!undefined * undefined}",
    "exprtext": "undefined * undefined",
    "expected": "NaN"
   },
   {
    "expression": "{!3 / undefined}",
    "exprtext": "3 / undefined",
    "expected": "NaN"
   },
   {
    "expression": "{!undefined / 3}",
    "exprtext": "undefined / 3",
    "expected": "NaN"
   },
   {
    "expression": "{!undefined / undefined}",
    "exprtext": "undefined / undefined",
    "expected": "NaN"
   },
   {
    "expression": "{!3 % undefined}",
    "exprtext": "3 % undefined",
    "expected": "NaN"
   },
   {
    "expression": "{!undefined % 3}",
    "exprtext": "undefined % 3",
    "expected": "NaN"
   },
   {
    "expression": "{!undefined % undefined}",
    "exprtext": "undefined % undefined",
    "expected": "NaN"
   },
   {
    "expression": "{!1 > undefined}",
    "exprtext": "1 > undefined",
    "expected": "false"
   },
   {
    "expression": "{!undefined > 0}",
    "exprtext": "undefined > 0",
    "expected": "false"
   },
   {
    "expression": "{!undefined > undefined}",
    "exprtext": "undefined > undefined",
    "expected": "false"
   },
   {
    "expression": "{!0 >= undefined}",
    "exprtext": "0 >= undefined",
    "expected": "false"
   },
   {
    "expression": "{!undefined >= 1}",
    "exprtext": "undefined >= 1",
    "expected": "false"
   },
   {
    "expression": "{!undefined >= undefined}",
    "exprtext": "undefined >= undefined",
    "expected": "false"
   },
   {
    "expression": "{!0 < undefined}",
    "exprtext": "0 < undefined",
    "expected": "false"
   },
   {
    "expression": "{!undefined < 1}",
    "exprtext": "undefined < 1",
    "expected": "false"
   },
   {
    "expression": "{!undefined < undefined}",
    "exprtext": "undefined < undefined",
    "expected": "false"
   },
   {
    "expression": "{!1 <= undefined}",
    "exprtext": "1 <= undefined",
    "expected": "false"
   },
   {
    "expression": "{!undefined <= 0}",
    "exprtext": "undefined <= 0",
    "expected": "false"
   },
   {
    "expression": "{!undefined <= undefined}",
    "exprtext": "undefined <= undefined",
    "expected": "false"
   },
   {
    "expression": "{!-undefined}",
    "exprtext": "-undefined",
    "expected": "NaN"
   },
   {
    "expression": "{!abs(undefined)}",
    "exprtext": "abs(undefined)",
    "expected": "NaN"
   }
  ]
 },
 "cmp.flavorTest.async": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.flavorTest.async_x_wrapper": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ]
 },
 "cmp.flavorTest.async_x_wrapper_child": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:async_x_wrapper"
   }
  ]
 },
 "cmp.flavorTest.basic_ifBlock": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!true}"
   },
   {
    "istrue": "{!false}"
   },
   {
    "istrue": "{!true}"
   },
   {
    "istrue": "{!false}"
   }
  ],
  "cmp.flavortest.x_sample": [
   {
    "aura:id": "trueBlockFlavoredInstance",
    "aura:flavor": "flavorA"
   },
   {
    "aura:id": "elseBlockFlavoredInstance",
    "aura:flavor": "flavorA"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   }
  ],
  "cmp.flavortest.x_samplewithdefault": [
   {
    "aura:id": "trueBlockFlavoredDefault"
   },
   {
    "aura:id": "elseBlockFlavoredDefault"
   }
  ]
 },
 "cmp.flavorTest.basic_iterationBlock": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.iteration": [
   {
    "items": "1,2,3",
    "var": "item"
   }
  ],
  "cmp.flavortest.x_sample": [
   {
    "aura:id": "target",
    "aura:flavor": "flavorA"
   }
  ]
 },
 "cmp.flavorTest.basic_multipleExplicitFlavors": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.flavortest.x_sample": [
   {
    "aura:id": "target",
    "aura:flavor": "flavorA, flavorB"
   }
  ]
 },
 "cmp.flavorTest.basic_nested": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.flavortest.x_sample": [
   {
    "aura:id": "outer",
    "aura:flavor": "flavorA"
   },
   {
    "aura:id": "superInnerParentCmp",
    "aura:flavor": "flavorC"
   }
  ],
  "cmp.flavortest.x_samplenested": [
   {
    "aura:id": "inner",
    "aura:flavor": "flavorB"
   },
   {
    "aura:id": "superInner",
    "aura:flavor": "flavorA"
   }
  ]
 },
 "cmp.flavorTest.basic_usesDefault": {
  "cmp.aura.component": [
   {
    "defaultflavor": "test"
   }
  ]
 },
 "cmp.flavorTest.bug_flavorMisappliedToInner": {
  "cmp.aura.component": [
   {
    "description": "test case for bug where the parent flavor is applied to a nested element on rerender (W-2601493)"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "count",
    "type": "String",
    "default": "0",
    "required": "true"
   }
  ]
 },
 "cmp.flavorTest.default_changeParentFromExplicitDefault": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:default_x_extensibleExplicitDefault",
    "defaultflavor": "second"
   }
  ]
 },
 "cmp.flavorTest.default_changeParentFromImplicitDefault": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:default_x_extensibleImplicitDefault",
    "defaultflavor": "alt"
   }
  ]
 },
 "cmp.flavorTest.default_multiple": {
  "cmp.aura.component": [
   {
    "defaultflavor": "first, second"
   }
  ]
 },
 "cmp.flavorTest.default_noChangeToParentDefault": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:default_x_extensibleExplicitDefault"
   }
  ]
 },
 "cmp.flavorTest.default_setForBothLevels": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:default_x_extensibleExplicitDefault",
    "defaultflavor": "second"
   }
  ]
 },
 "cmp.flavorTest.default_setParentDefault": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:default_x_extensibleNoDefault",
    "defaultflavor": "flavorB"
   }
  ]
 },
 "cmp.flavorTest.default_x_extensibleExplicitDefault": {
  "cmp.aura.component": [
   {
    "defaultflavor": "first",
    "extensible": "true"
   }
  ]
 },
 "cmp.flavorTest.default_x_extensibleImplicitDefault": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ]
 },
 "cmp.flavorTest.default_x_extensibleNoDefault": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:dynamically_flavorable_x_parent"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable_changeFlavorDefault": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:dynamically_flavorable_x_parent",
    "defaultflavor": "alt"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable_changeFlavorDefaultMulti": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.flavortest.dynamically_flavorable_x_childchangeflavor": [
   {
    "aura:id": "target"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable_childFlavorableInner": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:dynamically_flavorable_x_parent"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable_childFlavorableOuter": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:dynamically_flavorable_x_parent"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable_multi": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:dynamically_flavorable_x_parent"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable_rerender": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:dynamically_flavorable_x_parent"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "count",
    "type": "String",
    "required": "true",
    "default": "0"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable_setFlavorOnInstance": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.flavortest.dynamically_flavorable_x_child": [
   {
    "aura:id": "target",
    "aura:flavor": "default, alt"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable_textOnly": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:dynamically_flavorable_x_parent"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable_x_child": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:dynamically_flavorable_x_parent"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable_x_childChangeFlavor": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:dynamically_flavorable_x_parent",
    "defaultflavor": "default, alt"
   }
  ]
 },
 "cmp.flavorTest.dynamically_flavorable_x_parent": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "dynamicallyflavorable": "true"
   }
  ]
 },
 "cmp.flavorTest.expressions": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "flav",
    "type": "String",
    "default": "flavorB"
   }
  ],
  "cmp.flavortest.x_sample": [
   {
    "aura:id": "target",
    "aura:flavor": "{!v.flav}"
   }
  ]
 },
 "cmp.flavorTest.inheritance": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.flavortest.inheritance_x_extensiblewrapper_barechild": [
   {
    "aura:id": "bareChild",
    "aura:flavor": "flavorA"
   }
  ],
  "cmp.flavortest.inheritance_x_extensiblewrapper_markupchild": [
   {
    "aura:id": "markupChild",
    "aura:flavor": "flavorA"
   }
  ],
  "cmp.flavortest.inheritance_x_extensiblebare_child": [
   {
    "aura:id": "bareParent",
    "aura:flavor": "flavorA"
   }
  ],
  "cmp.flavortest.inheritance_x_extensiblewrapper_child": [
   {
    "aura:id": "both",
    "aura:flavor": "flavorA"
   }
  ],
  "cmp.flavortest.inheritance_x_extensiblewrapper_textchild": [
   {
    "aura:id": "textChild",
    "aura:flavor": "flavorA"
   }
  ],
  "cmp.flavortest.inheritance_x_extensiblemarkupwrapper_flatchild": [
   {
    "aura:id": "flatChild",
    "aura:flavor": "flavorB"
   }
  ],
  "cmp.flavortest.inheritance_x_extensiblemarkupwrapper_outerchild": [
   {
    "aura:id": "outerChild",
    "aura:flavor": "flavorB"
   }
  ],
  "cmp.flavortest.inheritance_x_extensiblemarkupwrapper_innerchild": [
   {
    "aura:id": "innerChild",
    "aura:flavor": "flavorB"
   }
  ],
  "cmp.flavortest.inheritance_x_extensiblemarkupwrapper_peerschild": [
   {
    "aura:id": "peersChild",
    "aura:flavor": "flavorB"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleBare": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "inheritance test helper component: a parent cmp that doesn't contain any elements"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleBare_child": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:inheritance_x_extensibleBare",
    "description": "inheritance test helper component: extends a cmp with no elements but has a flavorable element of its own"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleMarkupWrapper": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "inheritance test helper component: a parent cmp that wraps a bare div around v.body"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleMarkupWrapper_flatChild": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:inheritance_x_extensibleMarkupWrapper",
    "description": "inheritance test helper component: flavorable element at top level"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleMarkupWrapper_innerChild": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:inheritance_x_extensibleMarkupWrapper",
    "description": "inheritance test helper component: flavorable element at second level"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleMarkupWrapper_outerChild": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:inheritance_x_extensibleMarkupWrapper",
    "description": "inheritance test helper component: flavorable element at first level"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleMarkupWrapper_peersChild": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:inheritance_x_extensibleMarkupWrapper",
    "description": "inheritance test helper component: flavorable element at top level with peers"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleWrapper": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "inheritance test helper component: a parent cmp that wraps a flavorable div around v.body"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleWrapper_bareChild": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:inheritance_x_extensibleWrapper",
    "description": "inheritance test helper component: extends a cmp with a flavorable element but doesn't have any elements itself"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleWrapper_child": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:inheritance_x_extensibleWrapper",
    "description": "inheritance test helper component: extends a cmp with a flavorable element wrapper AND ALSO has a flavorable element of its own"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleWrapper_markupChild": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:inheritance_x_extensibleWrapper",
    "description": "inheritance test helper component: extends a cmp with a flavorable element wrapper but only has nonflavorable elements itself"
   }
  ]
 },
 "cmp.flavorTest.inheritance_x_extensibleWrapper_textChild": {
  "cmp.aura.component": [
   {
    "extends": "flavorTest:inheritance_x_extensibleWrapper",
    "description": "inheritance test helper component: extends a cmp with a flavorable element wrapper but only has bare text itself"
   }
  ]
 },
 "cmp.flavorTest.overrides_x_all": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.flavorTest.overrides_x_onlyFlavorA": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.flavorTest.overrides_x_onlyFlavorB": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.flavorTest.overrides_x_onlyFlavorC": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.flavorTest.overrides_x_onlyImplicitDefault": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.flavorTest.x_landmark": {
  "cmp.aura.component": [
   {
    "description": "sample component using markup that landmark would use"
   }
  ]
 },
 "cmp.flavorTest.x_sample": {
  "cmp.aura.component": [
   {
    "description": "test helper component: a basic flavorable component"
   }
  ]
 },
 "cmp.flavorTest.x_sampleNested": {
  "cmp.aura.component": [
   {
    "description": "test helper component: the flavor element is nested"
   }
  ]
 },
 "cmp.flavorTest.x_sampleWithDefault": {
  "cmp.aura.component": [
   {
    "defaultflavor": "explicitDefault",
    "description": "test helper component: a component that sets an explicit default flavor"
   }
  ]
 },
 "cmp.forEachDefTest.basicDataType": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "string",
    "type": "String[]"
   },
   {
    "name": "number",
    "type": "Integer[]"
   },
   {
    "name": "bool",
    "type": "Boolean[]"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.string}",
    "var": "i"
   },
   {
    "items": "{!v.number}",
    "var": "i"
   },
   {
    "items": "{!v.bool}",
    "var": "i"
   },
   {
    "items": "{!m.stringList}",
    "var": "i"
   },
   {
    "items": "{!m.integerList}",
    "var": "i"
   },
   {
    "items": "{!m.booleanList}",
    "var": "i"
   }
  ],
  "cmp.foreachdeftest.foreachdefdisplay": [
   {
    "aura:id": "stringValueByRef",
    "string": "{!i}"
   },
   {
    "aura:id": "numberValueByRef",
    "number": "{!i}"
   },
   {
    "aura:id": "booleanValueByRef",
    "bool": "{!i}"
   },
   {
    "aura:id": "stringValue",
    "string": "{!i}"
   },
   {
    "aura:id": "numberValue",
    "number": "{!i}"
   },
   {
    "aura:id": "booleanValue",
    "bool": "{!i}"
   }
  ]
 },
 "cmp.forEachDefTest.collectionDataType": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "listofList",
    "type": "List"
   },
   {
    "name": "Objects",
    "type": "Object[]"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.Objects}",
    "var": "i2"
   },
   {
    "items": "{!m.listOfList}",
    "var": "i"
   },
   {
    "items": "{!m.integerList}",
    "var": "i"
   }
  ],
  "cmp.foreachdeftest.foreachdefdisplay": [
   {
    "aura:id": "objectValueByRef",
    "obj": "{!i2}"
   },
   {
    "aura:id": "listValue",
    "list": "{!i}"
   },
   {
    "aura:id": "objectValue",
    "obj": "{!i}"
   }
  ]
 },
 "cmp.forEachDefTest.emptyLists": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "string",
    "type": "String[]"
   },
   {
    "name": "number",
    "type": "Integer[]"
   },
   {
    "name": "bool",
    "type": "Boolean[]"
   }
  ],
  "cmp.foreachdeftest.foreachdefdisplay": [
   {
    "aura:id": "start",
    "number": "0"
   },
   {
    "aura:id": "modelStringListNull",
    "number": "{!i}"
   },
   {
    "aura:id": "modelIntegerListNull",
    "number": "{!i}"
   },
   {
    "aura:id": "modelDoubleListNull",
    "number": "{!i}"
   },
   {
    "aura:id": "modelBooleanListNull",
    "number": "{!i}"
   },
   {
    "aura:id": "modelNull",
    "number": "{!i}"
   },
   {
    "aura:id": "modelEmptyList",
    "number": "{!i}"
   },
   {
    "aura:id": "end",
    "number": "1"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.stringListNull}",
    "var": "i"
   },
   {
    "items": "{!m.integerListNull}",
    "var": "i"
   },
   {
    "items": "{!m.doubleListNull}",
    "var": "i"
   },
   {
    "items": "{!m.booleanListNull}",
    "var": "i"
   },
   {
    "items": "{!m.objectNull}",
    "var": "i"
   },
   {
    "items": "{!m.emptyList}",
    "var": "i"
   }
  ]
 },
 "cmp.forEachDefTest.forEachDefDisplay": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.loadLevel.SluggishServerModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "string",
    "type": "String"
   },
   {
    "name": "number",
    "type": "Integer"
   },
   {
    "name": "bool",
    "type": "Boolean"
   },
   {
    "name": "obj",
    "type": "Object"
   },
   {
    "name": "map",
    "type": "Map"
   },
   {
    "name": "list",
    "type": "List"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.list}",
    "var": "i"
   }
  ]
 },
 "cmp.forEachDefTest.forEachDefParent": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.foreachdeftest.basicdatatype": [
   {
    "string": "{!m.stringList}",
    "number": "{!m.integerList}",
    "bool": "{!m.booleanList}",
    "aura:id": "basicDataType"
   }
  ],
  "cmp.foreachdeftest.collectiondatatype": [
   {
    "listoflist": "{!m.listOfList}",
    "objects": "{!m.integerList}",
    "aura:id": "collection"
   }
  ]
 },
 "cmp.forEachDefTest.nonListDataType": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.string}",
    "var": "i"
   }
  ],
  "cmp.foreachdeftest.foreachdefdisplay": [
   {
    "string": "{!i}"
   }
  ]
 },
 "cmp.forEachDefTest.singleComponentAttribute": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.foreachdeftest.singlecomponentinforeach": [
   {}
  ]
 },
 "cmp.forEachDefTest.singleComponentInForEach": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.body}",
    "var": "comp"
   }
  ]
 },
 "cmp.gvpTest.basicTest": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.gvpTest.browserProvider": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.gvpTest.contextGVPTest": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.ContextVPTestController"
   }
  ]
 },
 "cmp.gvpTest.customGVPTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extensible": "true",
    "extends": "aura:template"
   }
  ],
  "cmp.aura.attribute": [
   {
    "default": "Default",
    "type": "String",
    "name": "stringValue"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "auraPreInitBlock"
   }
  ]
 },
 "cmp.gvpTest.customGVPTest": {
  "cmp.aura.component": [
   {
    "template": "gvpTest:customGVPTemplate"
   }
  ]
 },
 "cmp.gvpTest.dynamicLabels": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.gvpTest.dynamicTypeTest": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.gvpTest.innerCmpWithLabel": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.gvpTest.labelProvider": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "simplevalue1",
    "type": "Object"
   },
   {
    "name": "simplevalue2",
    "type": "Object"
   },
   {
    "name": "simplevalue3",
    "type": "Object"
   },
   {
    "name": "simplevalue4",
    "type": "Object"
   }
  ]
 },
 "cmp.gvpTest.loadFromStorage": {
  "cmp.aura.component": [
   {
    "render": "client",
    "template": "gvpTest:loadFromStorageTemplate"
   }
  ]
 },
 "cmp.gvpTest.loadFromStorageTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extensible": "true",
    "extends": "aura:template"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "auraPreInitBlock"
   }
  ]
 },
 "cmp.gvpTest.newLabels": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://gvpTest:parseLabels"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "LabelAsAttribute",
    "class": "{!$Label.Related_Lists.task_mode_today}",
    "value": "LabelAsAttribute"
   }
  ],
  "cmp.gvptest.innercmpwithlabel": [
   {
    "aura:id": "innerCmp"
   }
  ]
 },
 "cmp.gvpTest.parseLabels": {
  "cmp.aura.component": [
   {
    "provider": "js://gvpTest.parseLabels"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "xxx",
    "type": "String",
    "default": "none"
   },
   {
    "name": "yyy",
    "type": "String",
    "default": "none"
   }
  ],
  "cmp.aura.import": [
   {
    "library": "gvpTest:parseLabelsLibrary",
    "property": "pll"
   }
  ]
 },
 "cmp.gvpTest.voiceOverTest": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.gvpTest.withPersistentStorage": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.handleEventTest.aHandlesEventFromA": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "type": "handleEventTest:event",
    "name": "evt"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "evt",
    "action": "{!c.handleIt}"
   }
  ]
 },
 "cmp.handleEventTest.attachEventsInModel": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestModelToAttachEvents"
   }
  ]
 },
 "cmp.handleEventTest.bHandlesEventFromA": {
  "cmp.aura.component": [
   {
    "extends": "handleEventTest:aHandlesEventFromA",
    "extensible": "true"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "type": "handleEventTest:event",
    "name": "evtB"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "evt",
    "action": "{!c.handleTheEvent}"
   },
   {
    "name": "evtB",
    "action": "{!c.handleTheEventB}"
   }
  ]
 },
 "cmp.handleEventTest.cHandlesEventFromAandB": {
  "cmp.aura.component": [
   {
    "extends": "handleEventTest:bHandlesEventFromA",
    "extensible": "true"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "evt",
    "action": "{!c.cHandleTheEventB}"
   }
  ]
 },
 "cmp.handleEventTest.eventScope": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "handleEventTest:applicationEvent",
    "action": "{!c.handleA}"
   }
  ],
  "cmp.handleeventtest.handlesabappevents": [
   {
    "aura:id": "Martin",
    "a": "{!c.handleB}"
   },
   {
    "aura:id": "Charlie",
    "a": "{!c.handleB}"
   },
   {
    "aura:id": "Bob",
    "a": "{!c.handleB}"
   },
   {
    "aura:id": "Max",
    "a": "{!c.handleB}"
   },
   {
    "aura:id": "Brooke",
    "a": "{!c.handleB}"
   }
  ]
 },
 "cmp.handleEventTest.handlerWithEventForComponentEvent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "handleEventTest:Event",
    "action": "{!c.handleIt}"
   }
  ]
 },
 "cmp.handleEventTest.handlerWithInvalidEvent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "ThisIsNotAValidEventName",
    "action": "{!c.handleIt}"
   }
  ]
 },
 "cmp.handleEventTest.handlerWithNameAndEvent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.registerevent": [
   {
    "name": "somename",
    "type": "handleEventTest:event"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "somename",
    "event": "handleEventTest:applicationEvent",
    "action": "{!c.handleIt}"
   }
  ]
 },
 "cmp.handleEventTest.handlerWithNameForApplicationEvent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.registerevent": [
   {
    "name": "anApplicationEvent",
    "type": "handleEventTest:applicationEvent"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "anApplicationEvent",
    "action": "{!c.handleIt}"
   }
  ]
 },
 "cmp.handleEventTest.handlerWithNameForParentsApplicationEvent": {
  "cmp.aura.component": [
   {
    "extends": "handleEventTest:registersApplicationEvent"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "anApplicationEvent",
    "action": "{!c.handleIt}"
   }
  ]
 },
 "cmp.handleEventTest.handlerWithUnregisteredName": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "ThisIsNotARegisteredEventName",
    "action": "{!c.handleIt}"
   }
  ]
 },
 "cmp.handleEventTest.handlerWithoutNameOrEvent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "action": "{!c.handleIt}"
   }
  ]
 },
 "cmp.handleEventTest.handlesABAppEvents": {
  "cmp.aura.component": [
   {
    "controller": "js://handleEventTest.eventScope"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "A",
    "type": "handleEventTest:event"
   },
   {
    "name": "B",
    "type": "handleEventTest:event"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "A",
    "action": "{!c.handleA}"
   },
   {
    "name": "B",
    "action": "{!c.handleB}"
   },
   {
    "event": "handleEventTest:applicationEvent",
    "action": "{!c.handleC}"
   }
  ]
 },
 "cmp.handleEventTest.multipleHandlersForEvent": {
  "cmp.aura.component": [
   {
    "controller": "js://handleEventTest.eventScope"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "A",
    "type": "handleEventTest:event"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "A",
    "action": "{!c.handleA}"
   },
   {
    "name": "A",
    "action": "{!c.handleB}"
   },
   {
    "event": "handleEventTest:applicationEvent",
    "action": "{!c.handleC}"
   },
   {
    "event": "handleEventTest:applicationEvent",
    "action": "{!c.handleC}"
   }
  ]
 },
 "cmp.handleEventTest.registersApplicationEvent": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "anApplicationEvent",
    "type": "handleEventTest:applicationEvent"
   }
  ]
 },
 "cmp.ifTest.testIf": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "thang",
    "type": "Boolean"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.thang}"
   },
   {
    "istrue": "{! !v.thang}"
   },
   {
    "istrue": "false"
   },
   {
    "istrue": "true"
   }
  ]
 },
 "cmp.ifTest.testIfElse": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "thang",
    "type": "Boolean"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.thang}"
   },
   {
    "istrue": "{! !v.thang}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ifTest.testIfNested": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "outer",
    "type": "Boolean"
   },
   {
    "name": "inner",
    "type": "Boolean"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.outer}"
   },
   {
    "istrue": "{!v.inner}"
   },
   {
    "istrue": "{! !v.inner}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   }
  ],
  "cmp.iftest.testifelse": [
   {
    "thang": "{!v.inner}"
   }
  ]
 },
 "cmp.ifTest.testIfServer": {
  "cmp.aura.component": [
   {
    "render": "server"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "thang",
    "type": "Boolean"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.thang}"
   },
   {
    "istrue": "{! !v.thang}"
   },
   {
    "istrue": "false"
   },
   {
    "istrue": "true"
   }
  ]
 },
 "cmp.ifTest.testIfWithIterationInside": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "bool1",
    "type": "Boolean",
    "default": "true"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.toggleBool1}",
    "label": "toggle bool1 to load new array with different range",
    "aura:id": "toggleBool1"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.bool1}"
   }
  ],
  "cmp.iterationtest.iterationwithifinside": [
   {
    "start": "1",
    "end": "10"
   },
   {
    "start": "11",
    "end": "20"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.ifTest.testIfWithModel": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestReinitializeModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "attr",
    "type": "String",
    "default": "defaultValue"
   }
  ]
 },
 "cmp.ifTest.testRenderIfNested": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "outer",
    "type": "Boolean"
   },
   {
    "name": "inner",
    "type": "Boolean"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.outer}"
   },
   {
    "istrue": "{!v.inner}"
   },
   {
    "istrue": "{!v.inner}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "io TT",
    "label": "Set TT",
    "press": "{!c.press}"
   },
   {
    "aura:id": "io TF",
    "label": "Set TF",
    "press": "{!c.press}"
   },
   {
    "aura:id": "io FT",
    "label": "Set FT",
    "press": "{!c.press}"
   },
   {
    "aura:id": "io FF",
    "label": "Set FF",
    "press": "{!c.press}"
   },
   {
    "aura:id": "oi TT",
    "label": "Set TT",
    "press": "{!c.press}"
   },
   {
    "aura:id": "oi TF",
    "label": "Set TF",
    "press": "{!c.press}"
   },
   {
    "aura:id": "oi FT",
    "label": "Set FT",
    "press": "{!c.press}"
   },
   {
    "aura:id": "oi FF",
    "label": "Set FF",
    "press": "{!c.press}"
   }
  ]
 },
 "cmp.integrationService.noHistoryService": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:locationChange",
    "action": "{!c.locationChange}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "txt",
    "type": "String",
    "default": ""
   }
  ]
 },
 "cmp.integrationService.simpleStub": {
  "cmp.aura.component": [
   {
    "render": "Server",
    "renderer": "java://org.auraframework.impl.renderer.sampleJavaRenderers.RendererForTestingIntegrationService"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "placeholder",
    "type": "String",
    "default": "placeholder"
   },
   {
    "name": "localId",
    "type": "String",
    "default": "localId"
   },
   {
    "name": "desc",
    "type": "String",
    "default": "ui:button"
   },
   {
    "name": "attrMap",
    "type": "Map",
    "default": "{}"
   }
  ]
 },
 "cmp.iterationTest.arrayIteration": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://iterationTest:arrayIterationPreloaded"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "newCmp",
    "type": "Aura.Component[]"
   }
  ]
 },
 "cmp.iterationTest.arrayIterationNotPreloaded": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String[]",
    "description": "The list of messages to be displayed."
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.value}",
    "var": "message"
   }
  ]
 },
 "cmp.iterationTest.arrayIterationPreloaded": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String[]",
    "description": "The list of messages to be displayed."
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.value}",
    "var": "message"
   }
  ]
 },
 "cmp.iterationTest.basicIteration": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "showIteration",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "items",
    "type": "List"
   },
   {
    "name": "start",
    "type": "Object"
   },
   {
    "name": "end",
    "type": "Object"
   },
   {
    "name": "iterationCompleteFired",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "iterationCompleteOperation",
    "type": "String",
    "default": ""
   }
  ],
  "cmp.aura.renderif": [
   {
    "aura:id": "if",
    "istrue": "{!v.showIteration}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.showIteration}"
   },
   {
    "istrue": "{!v.showIteration}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iteration",
    "items": "{!v.items}",
    "var": "var",
    "indexvar": "idx",
    "start": "{!v.start}",
    "end": "{!v.end}",
    "iterationcomplete": "{!c.iterationComplete}"
   }
  ]
 },
 "cmp.iterationTest.cmpWithDefaultAtt": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "messages",
    "type": "List"
   },
   {
    "name": "color",
    "type": "string"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "box",
    "items": "{!v.messages}",
    "var": "message",
    "indexvar": "index"
   }
  ]
 },
 "cmp.iterationTest.cmpWithDefaultAtt2": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "messages",
    "type": "List",
    "default": "Default A, Default B"
   },
   {
    "name": "color",
    "type": "string"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "box",
    "items": "{!v.messages}",
    "var": "message",
    "indexvar": "index"
   }
  ]
 },
 "cmp.iterationTest.componentIteration": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "start",
    "type": "Integer"
   },
   {
    "name": "end",
    "type": "Integer"
   },
   {
    "name": "cmps",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iteration",
    "items": "{!v.cmps}",
    "var": "var",
    "indexvar": "idx",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ]
 },
 "cmp.iterationTest.diffTypeOfChildren": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "start",
    "type": "Integer"
   },
   {
    "name": "end",
    "type": "Integer"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iteration",
    "items": "{!m.innerData}",
    "var": "var",
    "indexvar": "idx",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ],
  "cmp.iterationtest.iterationchildwjsprovider": [
   {
    "aura:id": "childWithJSProvider",
    "strattribute": "{!var}"
   }
  ]
 },
 "cmp.iterationTest.iterationArrayValueChange_ArrayFromAttribute": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "listdata",
    "type": "List"
   },
   {
    "name": "start",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "end",
    "type": "integer",
    "default": "100"
   },
   {
    "name": "indexToChange",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "newValueToChange",
    "type": "string",
    "default": "new value to edit"
   },
   {
    "name": "indexToInsert",
    "type": "string",
    "default": "0"
   },
   {
    "name": "newValueToInsert",
    "type": "string",
    "default": "new value to insert"
   },
   {
    "name": "indexToDelete",
    "type": "string",
    "default": "0"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "class": "inputNumber_indexToChange",
    "value": "{!v.indexToChange}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "class": "inputText_newValueToChange",
    "value": "{!v.newValueToChange}"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "button_changeValue_iteration",
    "press": "{!c.changeOneValueOnIterationItems}",
    "label": "Change Item in Iteration"
   },
   {
    "class": "button_changeValue_attribute",
    "press": "{!c.changeOneValueInAttribute}",
    "label": "Change Item in Attribute"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iterationOnArrayAttribute",
    "items": "{!v.listdata}",
    "var": "item",
    "indexvar": "index",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ]
 },
 "cmp.iterationTest.iterationArrayValueChange_ArrayFromAttribute_PassThroughValue": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "listdata",
    "type": "List"
   },
   {
    "name": "start",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "end",
    "type": "integer",
    "default": "100"
   },
   {
    "name": "indexToChange",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "newValueToChange",
    "type": "string",
    "default": "new value to edit"
   },
   {
    "name": "indexToInsert",
    "type": "string",
    "default": "0"
   },
   {
    "name": "newValueToInsert",
    "type": "string",
    "default": "new value to insert"
   },
   {
    "name": "indexToDelete",
    "type": "string",
    "default": "0"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iterationOnArrayAttributePassthrough",
    "items": "{!v.listdata}",
    "var": "item",
    "indexvar": "index",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ],
  "cmp.auratest.eventcounter": [
   {
    "aura:id": "passThroughValueArrayAttribute",
    "passthrough": "{!item}"
   }
  ]
 },
 "cmp.iterationTest.iterationArrayValueChange_ArrayFromModel": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "start",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "end",
    "type": "integer",
    "default": "100"
   },
   {
    "name": "indexToChange",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "newValueToChange",
    "type": "string",
    "default": "new value to edit"
   },
   {
    "name": "indexToInsert",
    "type": "string",
    "default": "0"
   },
   {
    "name": "newValueToInsert",
    "type": "string",
    "default": "new value to insert"
   },
   {
    "name": "indexToDelete",
    "type": "string",
    "default": "0"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "class": "inputNumber_indexToChange",
    "value": "{!v.indexToChange}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "class": "inputText_newValueToChange",
    "value": "{!v.newValueToChange}"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "button_changeValue_iteration",
    "press": "{!c.changeOneValueOnIterationItems}",
    "label": "Change Item in Iteration"
   },
   {
    "class": "button_changeValue_model",
    "press": "{!c.changeOneValueInModel}",
    "label": "Change Item in Attribute"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iterationOnArrayModel",
    "items": "{!m.dataIntList}",
    "var": "item",
    "indexvar": "index",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ]
 },
 "cmp.iterationTest.iterationArrayValueChange_ArrayFromModel_PassThroughValue": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "start",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "end",
    "type": "integer",
    "default": "100"
   },
   {
    "name": "indexToChange",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "newValueToChange",
    "type": "string",
    "default": "new value to edit"
   },
   {
    "name": "indexToInsert",
    "type": "string",
    "default": "0"
   },
   {
    "name": "newValueToInsert",
    "type": "string",
    "default": "new value to insert"
   },
   {
    "name": "indexToDelete",
    "type": "string",
    "default": "0"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iterationOnArrayModelPassthrough",
    "items": "{!m.dataIntList}",
    "var": "item",
    "indexvar": "index",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ],
  "cmp.auratest.eventcounter": [
   {
    "aura:id": "passThroughValueArrayModel",
    "passthrough": "{!item}"
   }
  ]
 },
 "cmp.iterationTest.iterationArrayValueChange_ObjectFromAttribute": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "mapdata",
    "type": "Object"
   },
   {
    "name": "start",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "end",
    "type": "integer",
    "default": "100"
   },
   {
    "name": "indexToChange",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "newValueToChange",
    "type": "string",
    "default": "new value to edit"
   },
   {
    "name": "indexToInsert",
    "type": "string",
    "default": "0"
   },
   {
    "name": "newValueToInsert",
    "type": "string",
    "default": "new value to insert"
   },
   {
    "name": "indexToDelete",
    "type": "string",
    "default": "0"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iterationOnMapAttribute",
    "items": "{!v.mapdata.items}",
    "var": "item",
    "indexvar": "index",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ]
 },
 "cmp.iterationTest.iterationArrayValueChange_ObjectFromAttribute_PassThroughValue": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "mapdata",
    "type": "Object"
   },
   {
    "name": "start",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "end",
    "type": "integer",
    "default": "100"
   },
   {
    "name": "indexToChange",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "newValueToChange",
    "type": "string",
    "default": "new value to edit"
   },
   {
    "name": "indexToInsert",
    "type": "string",
    "default": "0"
   },
   {
    "name": "newValueToInsert",
    "type": "string",
    "default": "new value to insert"
   },
   {
    "name": "indexToDelete",
    "type": "string",
    "default": "0"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iterationOnMapAttributePassthrough",
    "items": "{!v.mapdata.items}",
    "var": "item",
    "indexvar": "index",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ],
  "cmp.auratest.eventcounter": [
   {
    "aura:id": "passThroughValueObjectAttribute",
    "passthroughobj": "{!item}"
   }
  ]
 },
 "cmp.iterationTest.iterationArrayValueChange_ObjectFromModel": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "start",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "end",
    "type": "integer",
    "default": "100"
   },
   {
    "name": "indexToChange",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "newValueToChange",
    "type": "string",
    "default": "new value to edit"
   },
   {
    "name": "indexToInsert",
    "type": "string",
    "default": "0"
   },
   {
    "name": "newValueToInsert",
    "type": "string",
    "default": "new value to insert"
   },
   {
    "name": "indexToDelete",
    "type": "string",
    "default": "0"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iterationOnMapModel",
    "items": "{!m.mapdata.items}",
    "var": "item",
    "indexvar": "index",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ]
 },
 "cmp.iterationTest.iterationArrayValueChange_ObjectFromModel_PassThroughValue": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "start",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "end",
    "type": "integer",
    "default": "100"
   },
   {
    "name": "indexToChange",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "newValueToChange",
    "type": "string",
    "default": "new value to edit"
   },
   {
    "name": "indexToInsert",
    "type": "string",
    "default": "0"
   },
   {
    "name": "newValueToInsert",
    "type": "string",
    "default": "new value to insert"
   },
   {
    "name": "indexToDelete",
    "type": "string",
    "default": "0"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iterationOnMapModelPassthrough",
    "items": "{!m.mapdata.items}",
    "var": "item",
    "indexvar": "index",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ],
  "cmp.auratest.eventcounter": [
   {
    "aura:id": "passThroughValueObjectModel",
    "passthroughobj": "{!item}"
   }
  ]
 },
 "cmp.iterationTest.iterationChildWJSProvider": {
  "cmp.aura.component": [
   {
    "provider": "js://iterationTest.iterationChildWJSProvider"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "strAttribute"
   },
   {
    "type": "String",
    "name": "newStrAttribute"
   }
  ]
 },
 "cmp.iterationTest.iterationChildWithModel": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "fromiteration",
    "type": "string"
   },
   {
    "name": "fromparent",
    "type": "string"
   }
  ]
 },
 "cmp.iterationTest.iterationOfCmpWithDefaultAtt": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "loop",
    "items": "blue,green,yellow,orange,red",
    "var": "color"
   }
  ],
  "cmp.iterationtest.cmpwithdefaultatt": [
   {
    "color": "{!color}"
   },
   {
    "aura:id": "aqua",
    "color": "aqua"
   }
  ],
  "cmp.iterationtest.cmpwithdefaultatt2": [
   {
    "aura:id": "black",
    "color": "black"
   },
   {
    "aura:id": "brown",
    "color": "brown"
   }
  ]
 },
 "cmp.iterationTest.iterationWJSProviderOnly": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "provider": "js://iterationTest.iterationWJSProviderOnly"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "ifTest:*",
    "type": "COMPONENT"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "cmpDescriptorName",
    "type": "String",
    "description": "What component to provide"
   }
  ]
 },
 "cmp.iterationTest.iterationWJSProviderOnlyList": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "items",
    "type": "String[]",
    "default": "ifTest:testIf,ifTest:testIfElse,ifTest:testIfNested,ifTest:testIfServer"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.items}",
    "var": "item"
   }
  ],
  "cmp.iterationtest.iterationwjsprovideronly": [
   {
    "aura:id": "iterCmp",
    "cmpdescriptorname": "{!item}"
   }
  ]
 },
 "cmp.iterationTest.iterationWithBodyTemplate": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "items",
    "type": "List",
    "default": "1,2,3"
   },
   {
    "name": "stringAttr",
    "type": "String",
    "default": "iterationWithBodyTemplate."
   },
   {
    "name": "itemTemplate",
    "type": "Aura.ComponentDefRef[]",
    "required": "true",
    "description": "A ComponentDefRef to use as the template for each generated row in the list."
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iter",
    "items": "{!v.items}",
    "var": "row",
    "indexvar": "itemIndex",
    "body": "{!v.itemTemplate}"
   }
  ]
 },
 "cmp.iterationTest.iterationWithBodyTemplateConsumer": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "stringAttr",
    "type": "String",
    "default": "DefaultText."
   }
  ],
  "cmp.iterationtest.iterationwithbodytemplate": [
   {
    "aura:id": "iterationCmp"
   },
   {
    "aura:id": "iterationAttributeData"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!m.string}"
   },
   {
    "value": "{!v.stringAttr}"
   }
  ]
 },
 "cmp.iterationTest.iterationWithIfInside": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "list",
    "type": "List"
   },
   {
    "name": "start",
    "type": "integer",
    "default": "4"
   },
   {
    "name": "end",
    "type": "integer",
    "default": "14"
   },
   {
    "name": "showEven",
    "type": "Boolean",
    "default": "true"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.toggleEvenOdd}",
    "label": "toggleEvenOdd",
    "aura:id": "toggleEvenOdd",
    "class": "toggleEvenOdd"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iteration",
    "items": "{!m.dataIntList}",
    "var": "number",
    "indexvar": "index",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.showEven}"
   },
   {
    "istrue": "{! (mod(index,2)==0) ? 'true':'false'}"
   },
   {
    "istrue": "{! (mod(index,2)==1) ? 'true':'false'}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.iterationTest.iterationWithLabelInside": {
  "cmp.aura.component": [
   {
    "support": "PROTO",
    "extensible": "false",
    "description": "nested part with label."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "data",
    "type": "List"
   },
   {
    "name": "className",
    "type": "String"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.data}",
    "action": "{!c.dataChange}"
   },
   {
    "name": "destroy",
    "value": "{!this}",
    "action": "{!c.onDestroy}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.data}",
    "var": "i"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "fieldName",
    "value": "{!i.fieldName}"
   }
  ],
  "cmp.aura.label": [
   {
    "value": "{!i.oldValue == null ? \n                    (i.newValue == null ? 'ovalN_nvalN' : 'ovalN_nvalNN') : \n                    (i.newValue == null ? 'ovalNN_nvalN' : 'ovalNN_nvalNN') }"
   }
  ]
 },
 "cmp.iterationTest.iterationWithModel": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "model": "java://org.auraframework.components.test.java.model.TestModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.stringList}",
    "var": "item"
   },
   {
    "items": "{!m.stringList}",
    "var": "item",
    "forceserver": "true"
   }
  ],
  "cmp.iterationtest.iterationwithmodelinnercmp": [
   {
    "aura:id": "innerCmp",
    "value": "{!item}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "addRow",
    "label": "Click here to add item",
    "press": "{!c.addRow}"
   },
   {
    "aura:id": "removeRow",
    "label": "Click here to remove item",
    "press": "{!c.removeRow}"
   }
  ],
  "cmp.iterationtest.iterationwrapper": [
   {
    "aura:id": "innerCmpWrapper",
    "value": "{!item}"
   }
  ]
 },
 "cmp.iterationTest.iterationWithModelInnerCmp": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "model": "java://org.auraframework.components.test.java.model.TestModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   }
  ]
 },
 "cmp.iterationTest.iterationWrapper": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "default": "hello"
   }
  ],
  "cmp.iterationtest.iterationwithmodelinnercmp": [
   {
    "value": "{!v.value}"
   }
  ]
 },
 "cmp.iterationTest.modifyDefRef": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "items",
    "type": "List"
   },
   {
    "name": "cdr",
    "type": "Aura.ComponentDefRef[]"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.items}",
    "var": "thing",
    "body": "{!v.cdr}"
   }
  ]
 },
 "cmp.iterationTest.nestedIteration": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.data}",
    "var": "outer",
    "indexvar": "index",
    "start": "13",
    "end": "19"
   },
   {
    "items": "{!m.innerData}",
    "var": "inner",
    "indexvar": "index"
   }
  ]
 },
 "cmp.iterationTest.nestedIterationServer": {
  "cmp.aura.component": [
   {
    "render": "server",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.data}",
    "var": "outer",
    "indexvar": "index",
    "start": "13",
    "end": "19"
   },
   {
    "items": "{!m.innerData}",
    "var": "inner",
    "indexvar": "index"
   }
  ]
 },
 "cmp.iterationTest.resetIteration": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "data",
    "type": "Object"
   },
   {
    "name": "innerClassName",
    "type": "String"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v._initialized}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.data.elements}",
    "var": "item"
   }
  ],
  "cmp.iterationtest.iterationwithlabelinside": [
   {
    "data": "{!item.changes}",
    "classname": "{!v.innerClassName}",
    "aura:id": "innerCmp"
   }
  ]
 },
 "cmp.iterationTest.simpleIteration": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.data}",
    "var": "itsavar"
   },
   {
    "items": "{!m.data}",
    "var": "stuff",
    "indexvar": "index",
    "start": "6",
    "end": "10"
   },
   {
    "items": "{!m.data}",
    "var": "stuff",
    "start": "9",
    "end": "10"
   }
  ],
  "cmp.iterationtest.iterationchildwithmodel": [
   {
    "aura:id": "childwithmodel",
    "fromiteration": "{!stuff.whatever}",
    "fromparent": "{!m.derp}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "",
    "aura:id": "outputText",
    "class": "outputText"
   }
  ]
 },
 "cmp.iterationTest.simpleIterationServer": {
  "cmp.aura.component": [
   {
    "render": "server",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.data}",
    "var": "itsavar"
   },
   {
    "items": "{!m.data}",
    "var": "stuff",
    "indexvar": "index",
    "start": "6",
    "end": "10"
   },
   {
    "items": "{!m.data}",
    "var": "stuff",
    "start": "9",
    "end": "10"
   }
  ],
  "cmp.iterationtest.iterationchildwithmodel": [
   {
    "aura:id": "childwithmodel",
    "fromiteration": "{!stuff.whatever}",
    "fromparent": "{!m.derp}"
   }
  ]
 },
 "cmp.iterationTest.startAndEndIndexWithDefaults": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "items",
    "type": "List"
   },
   {
    "name": "setIndexesInInit",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "start",
    "type": "Object",
    "default": "0"
   },
   {
    "name": "end",
    "type": "Object",
    "default": "1"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iteration",
    "items": "{!v.items}",
    "var": "var",
    "indexvar": "idx",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ]
 },
 "cmp.iterationTest.typeIteration": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.stringListNull}",
    "var": "x"
   },
   {
    "items": "{!m.emptyList}",
    "var": "x"
   },
   {
    "items": "{!m.stringList}",
    "var": "x",
    "indexvar": "i"
   },
   {
    "items": "{!m.integerList}",
    "var": "x",
    "indexvar": "i"
   },
   {
    "items": "{!m.booleanList}",
    "var": "x",
    "indexvar": "i"
   },
   {
    "items": "{!m.listOfList}",
    "var": "x",
    "indexvar": "i"
   },
   {
    "items": "{!x}",
    "var": "y",
    "indexvar": "j"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "value": "{!x+7}"
   },
   {
    "size": "{!i+3}",
    "value": "{!i+3}",
    "maxlength": "{!x+3}"
   },
   {
    "value": "{!i}",
    "disabled": "{!x}"
   },
   {
    "value": "{!y + ' is from [' + i + ',' + j + ']'}"
   }
  ],
  "cmp.iterationtest.componentiteration": [
   {
    "start": "0",
    "end": "2",
    "aura:id": "componentArray"
   },
   {
    "start": "0",
    "end": "0",
    "aura:id": "emptyComponentArray"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "cmps"
   }
  ],
  "cmp.aura.text": [
   {
    "value": "textOnBody",
    "aura:id": "text"
   }
  ]
 },
 "cmp.iterationTest.withLazyComponents": {
  "cmp.aura.component": [
   {
    "extends": "loadLevelTest:lazyLoadHelper",
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "start",
    "type": "Integer"
   },
   {
    "name": "end",
    "type": "Integer"
   },
   {
    "name": "slowFacet",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "fastFacet",
    "type": "boolean",
    "default": "false"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.slowFacet}"
   },
   {
    "istrue": "{!v.fastFacet}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iteration",
    "items": "{!m.innerData}",
    "var": "var",
    "indexvar": "idx",
    "start": "{!v.start}",
    "end": "{!v.end}"
   },
   {
    "aura:id": "iterationWithAttributes",
    "items": "{!m.innerData}",
    "var": "var",
    "indexvar": "idx",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ],
  "cmp.loadleveltest.servercomponent": [
   {
    "aura:id": "lazy",
    "waitid": "{!'withLazyComponents'+idx}",
    "aura:load": "lazy"
   },
   {
    "aura:id": "lazy",
    "waitid": "withAttributes",
    "aura:load": "lazy"
   }
  ],
  "cmp.aura.expression": [
   {
    "value": "{!var}",
    "aura:id": "lazyWithAttributes",
    "aura:load": "lazy"
   }
  ]
 },
 "cmp.lintTest.basic": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.listTest.listDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "description": "A test data provider to test per-component perf test.",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.listTest.testListAttrItemTemplate": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "itemFromDataProvider",
    "type": "String",
    "default": "tiger"
   },
   {
    "name": "itemFromThisComp",
    "type": "String"
   }
  ]
 },
 "cmp.listTest.testListAttributeEvaluation": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "extraString",
    "default": "cat",
    "required": "true"
   }
  ],
  "cmp.ui.list": [
   {
    "aura:id": "simpleList",
    "itemvar": "listItemX"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "dataProvider"
   }
  ],
  "cmp.listtest.testlistattritemtemplate": [
   {
    "itemfromdataprovider": "{!listItemX}",
    "itemfromthiscomp": "{!v.extraString}"
   }
  ],
  "cmp.listtest.listdataprovider": [
   {}
  ]
 },
 "cmp.loadLevelTest.NonPreloadedServerComponent": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.loadLevel.GatedModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "waitId"
   },
   {
    "type": "String",
    "name": "stringAttribute"
   }
  ]
 },
 "cmp.loadLevelTest.clientComponent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "first",
    "type": "String"
   },
   {
    "name": "last",
    "type": "String"
   },
   {
    "name": "arrayOfMaps",
    "type": "List"
   }
  ]
 },
 "cmp.loadLevelTest.clientProvidesServerCmp": {
  "cmp.aura.component": [
   {
    "provider": "js://loadLevelTest.clientProvidesServerCmp"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "default": "default text"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "loadLevelTest:clientWithServerChild"
   }
  ]
 },
 "cmp.loadLevelTest.clientWithLazyClientChild": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:waiting",
    "action": "{!c.waiting}"
   },
   {
    "event": "aura:doneWaiting",
    "action": "{!c.doneWaiting}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "status",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.makeClient}",
    "label": "Push for client component"
   },
   {
    "press": "{!c.makeServer}",
    "label": "Push for server component",
    "aura:id": "makeServer"
   },
   {
    "press": "{!c.makeExclusiveServer}",
    "label": "Push for exclusive server component"
   }
  ]
 },
 "cmp.loadLevelTest.clientWithServerChild": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "stringAttribute",
    "type": "String",
    "default": "clientWithServerChild"
   }
  ],
  "cmp.loadleveltest.nonpreloadedservercomponent": [
   {
    "stringattribute": "set by clientWithServerChild"
   }
  ]
 },
 "cmp.loadLevelTest.createNewCmp": {
  "cmp.aura.component": [
   {
    "render": "client",
    "extends": "loadLevelTest:lazyLoadHelper"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "testAttr",
    "type": "String",
    "default": "testValue"
   },
   {
    "name": "testAttr2",
    "type": "Integer",
    "default": "22"
   },
   {
    "name": "arrayOfMaps",
    "type": "Object[]"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "action": "{!c.doInit}",
    "value": "{!this}"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "aura:renderIf"
   },
   {
    "resource": "loadLevelTest:clientComponent"
   },
   {
    "resource": "loadLevelTest:serverComponent"
   },
   {
    "resource": "loadLevelTest:clientWithServerChild"
   },
   {
    "resource": "loadLevelTest:clientProvidesServerCmp"
   }
  ]
 },
 "cmp.loadLevelTest.displayBoolean": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "Boolean",
    "name": "bool"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.bool}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.loadLevelTest.displayMap": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "stringAttribute",
    "type": "String",
    "default": "barFoo"
   },
   {
    "name": "map",
    "type": "Map"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!v.map.propRef}"
   },
   {
    "value": "{!v.map.map2.propRef}"
   }
  ]
 },
 "cmp.loadLevelTest.displayNumber": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "Integer",
    "name": "number"
   }
  ]
 },
 "cmp.loadLevelTest.displayStringArray": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "StringArray",
    "type": "String[]"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.StringArray}",
    "var": "i"
   }
  ]
 },
 "cmp.loadLevelTest.lazyLoadBasicTypes": {
  "cmp.aura.component": [
   {
    "render": "client",
    "extends": "loadLevelTest:lazyLoadHelper"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "stringAttribute",
    "type": "String",
    "default": "lazyLoading"
   },
   {
    "name": "waitId",
    "type": "String"
   }
  ],
  "cmp.loadleveltest.servercomponent": [
   {
    "aura:id": "lazy",
    "aura:load": "lazy",
    "waitid": "{!v.waitId}"
   }
  ],
  "cmp.aura.label": [
   {
    "value": "one {0} two",
    "aura:id": "labelWithoutBody",
    "aura:load": "lazy"
   }
  ],
  "cmp.aura.text": [
   {
    "value": "lazyLoading",
    "aura:id": "text",
    "aura:load": "lazy"
   }
  ]
 },
 "cmp.loadLevelTest.lazyLoadForEach": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.loadLevel.SluggishServerModel",
    "render": "client"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.stringList}",
    "var": "i"
   }
  ],
  "cmp.foreachdeftest.foreachdefdisplay": [
   {
    "aura:id": "stringValue",
    "string": "{!i}",
    "aura:load": "lazy"
   }
  ]
 },
 "cmp.loadLevelTest.lazyLoadHelper": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "controller": "java://org.auraframework.components.loadLevel.GatedModelController"
   }
  ]
 },
 "cmp.loadLevelTest.lazyLoadInRenderIf": {
  "cmp.aura.component": [
   {
    "extends": "loadLevelTest:lazyLoadHelper",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "flip",
    "type": "boolean",
    "default": "true"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.flip}"
   }
  ],
  "cmp.loadleveltest.servercomponent": [
   {
    "aura:id": "lazyrenderIf",
    "waitid": "lazyrenderIf",
    "aura:load": "LAZY"
   },
   {
    "aura:id": "lazyelse",
    "waitid": "lazyelse",
    "aura:load": "LAZY"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.loadLevelTest.loadLevel": {
  "cmp.aura.component": [
   {
    "render": "client",
    "extends": "loadLevelTest:lazyLoadHelper"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.testLazy}"
   },
   {
    "istrue": "{!v.testExclusive}"
   },
   {
    "istrue": "{!v.testNestedLazy}"
   },
   {
    "istrue": "{!v.testMissingRequiredAttribute}"
   }
  ],
  "cmp.loadleveltest.servercomponent": [
   {
    "aura:id": "lazy",
    "waitid": "lazy",
    "aura:load": "lazy"
   },
   {
    "aura:id": "exclusive",
    "waitid": "exclusive",
    "aura:load": "exclusive"
   }
  ],
  "cmp.loadleveltest.serverwithlazychild": [
   {
    "aura:id": "nestedLazy",
    "waitid": "nestedLazy",
    "aura:load": "lazy"
   }
  ],
  "cmp.loadleveltest.clientcomponent": [
   {
    "aura:id": "lazyClient",
    "aura:load": "lazy"
   }
  ],
  "cmp.loadleveltest.servercomponentwreqattr": [
   {
    "aura:id": "lazyWReqAttr",
    "waitid": "lazyWReqAttr",
    "aura:load": "lazy"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "testLazy",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "testExclusive",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "testNestedLazy",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "testMissingRequiredAttribute",
    "type": "boolean",
    "default": "false"
   }
  ]
 },
 "cmp.loadLevelTest.loadSimpleAttributes": {
  "cmp.aura.component": [
   {
    "render": "client",
    "extends": "loadLevelTest:lazyLoadHelper",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "stringAttribute",
    "type": "String"
   },
   {
    "name": "integerAttribute",
    "type": "Integer"
   },
   {
    "name": "booleanAttribute",
    "type": "Boolean"
   },
   {
    "name": "waitId",
    "type": "String"
   }
  ],
  "cmp.aura.expression": [
   {
    "value": "{!v.stringAttribute}",
    "aura:id": "stringAttribute",
    "aura:load": "lazy"
   }
  ],
  "cmp.loadleveltest.servercomponent": [
   {
    "aura:id": "lazy",
    "waitid": "{!v.waitId}",
    "aura:load": "lazy"
   }
  ],
  "cmp.loadleveltest.displaynumber": [
   {
    "number": "{!v.integerAttribute}",
    "aura:id": "integerAttribute",
    "aura:load": "lazy"
   }
  ],
  "cmp.loadleveltest.displayboolean": [
   {
    "bool": "{!v.booleanAttribute}",
    "aura:id": "booleanAttribute",
    "aura:load": "lazy"
   }
  ]
 },
 "cmp.loadLevelTest.newCmpHalfLoad": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "receiverCmp",
    "type": "String",
    "default": "loadLevelTest:newCmpWithValueProvider"
   },
   {
    "name": "receiverCmpAuraId",
    "type": "String",
    "default": "receiverCmp"
   },
   {
    "name": "controllerFuncToCreateCmp",
    "type": "String",
    "default": "c.createCmpByFetchingDefFromServer"
   }
  ]
 },
 "cmp.loadLevelTest.newCmpWithValueProvider": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "stringAttribute",
    "type": "String",
    "default": "fooBar"
   },
   {
    "name": "nameAttribute",
    "type": "String",
    "default": "Washington"
   },
   {
    "type": "Integer",
    "name": "numberAttribute"
   }
  ],
  "cmp.loadleveltest.servercomponent": [
   {}
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.createCmpWithMapValuePropRefValueFromServer}",
    "label": "Push for component",
    "aura:id": "button_createCmp"
   }
  ]
 },
 "cmp.loadLevelTest.serverComponent": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.loadLevel.GatedModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "waitId"
   },
   {
    "type": "String",
    "name": "stringAttribute"
   }
  ]
 },
 "cmp.loadLevelTest.serverComponentWReqAttr": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.loadLevel.GatedModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "waitId"
   },
   {
    "type": "String",
    "name": "stringAttribute",
    "required": "true"
   }
  ]
 },
 "cmp.loadLevelTest.serverWithInnerServerCmp": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.loadLevel.GatedModel"
   }
  ],
  "cmp.loadleveltest.clientwithserverchild": [
   {}
  ]
 },
 "cmp.loadLevelTest.serverWithLazyChild": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.loadLevel.GatedModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "waitId"
   }
  ],
  "cmp.loadleveltest.servercomponent": [
   {
    "aura:load": "lazy",
    "waitid": "lazyKid",
    "aura:id": "kid"
   }
  ]
 },
 "cmp.loadLevelTest.simpleImplementation1": {
  "cmp.aura.component": [
   {
    "implements": "loadLevelTest:simpleInterface"
   }
  ]
 },
 "cmp.loadLevelTest.simpleImplementation2": {
  "cmp.aura.component": [
   {
    "implements": "loadLevelTest:simpleInterface"
   }
  ]
 },
 "cmp.loadLevelTest.sleepyServerComponent": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.loadLevel.SleepyServerModel"
   }
  ]
 },
 "cmp.metricsPluginTest.auraContextPlugin": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.metricsPluginTest.clientService": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.metricsPluginTest.componentService": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.metricsPluginTest.registerNewPlugin": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.miscTest.aura_if": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "branch",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "enabled",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.enabled}"
   },
   {
    "istrue": "{!v.branch}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.miscTest.aura_iteration": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "tochange",
    "type": "Integer"
   },
   {
    "name": "newvalue",
    "type": "string"
   },
   {
    "name": "newEndIndex",
    "type": "Integer",
    "default": "26"
   },
   {
    "name": "inputValue",
    "type": "string"
   },
   {
    "name": "count",
    "type": "integer",
    "required": "false",
    "default": "1"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iteration",
    "items": "{!m.data}",
    "var": "stuff1",
    "indexvar": "index1",
    "start": "0",
    "end": "{!v.count}"
   },
   {
    "aura:id": "innerIteration",
    "items": "{!m.data}",
    "var": "stuff",
    "indexvar": "index",
    "start": "0",
    "end": "{!v.newEndIndex}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!stuff.letters}"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "value": "{!v.tochange}",
    "class": "itemIndex"
   },
   {
    "value": "{!v.count}",
    "class": "pageCount"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "value": "{!v.newvalue}",
    "class": "itemValue"
   },
   {
    "value": "{!v.inputValue}",
    "class": "pageSize"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.changeOneValue}",
    "class": "changeValue",
    "label": "Go"
   },
   {
    "press": "{!c.changeEndIndex}",
    "class": "changePageSize",
    "label": "Go"
   },
   {
    "class": "changePageCount",
    "label": "Go"
   }
  ]
 },
 "cmp.miscTest.aura_renderif": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "count",
    "type": "Integer",
    "default": "1"
   },
   {
    "name": "nestedCount",
    "type": "Integer",
    "default": "1"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.count > 0}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 4}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 5}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 6}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 7}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 8}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 9}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 10}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 11}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 12}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 13}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 14}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 15}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 16}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 17}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 18}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 19}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 20}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 21}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 22}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 23}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 24}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 25}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 26}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 27}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 28}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 29}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 30}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 31}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 32}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 33}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 34}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 35}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 36}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 37}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 38}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 39}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 40}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 41}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 42}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 43}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 44}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 45}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 46}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 47}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 48}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 49}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 50}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 51}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 52}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 53}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 54}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 55}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 56}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 57}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 58}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 59}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 60}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 61}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 62}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 63}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 64}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 65}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 66}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 67}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 68}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 69}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 70}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 71}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 72}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 73}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 74}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 75}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 76}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 77}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 78}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 79}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 80}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 81}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 82}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 83}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 84}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 85}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 86}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 87}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 88}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 89}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 90}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 91}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 92}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 93}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 94}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 95}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 96}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 97}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 98}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 99}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 100}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 101}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 102}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 103}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 104}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 105}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 106}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 107}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 108}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 109}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 110}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 111}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 112}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 113}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 114}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 115}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 116}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 117}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 118}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 119}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 120}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 121}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 122}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 123}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 124}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 125}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 126}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 127}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 128}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 129}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 130}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 131}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 132}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 133}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 134}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 135}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 136}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 137}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 138}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 139}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 140}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 141}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 142}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 143}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 144}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 145}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 146}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 147}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 148}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 149}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 150}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 151}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 152}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 153}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 154}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 155}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 156}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 157}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 158}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 159}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 160}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 161}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 162}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 163}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 164}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 165}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 166}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 167}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 168}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 169}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 170}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 171}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 172}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 173}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 174}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 175}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 176}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 177}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 178}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 179}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 180}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 181}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 182}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 183}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 184}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 185}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 186}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 187}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 188}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 189}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 190}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 191}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 192}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 193}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 194}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 195}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 196}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 197}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 198}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 199}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 200}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 201}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 202}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 203}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 204}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 205}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 206}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 207}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 208}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 209}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 210}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 211}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 212}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 213}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 214}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 215}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 216}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 217}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 218}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 219}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 220}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 221}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 222}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 223}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 224}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 225}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 226}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 227}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 228}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 229}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 230}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 231}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 232}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 233}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 234}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 235}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 236}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 237}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 238}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 239}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 240}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 241}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 242}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 243}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 244}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 245}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 246}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 247}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 248}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 249}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 250}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 251}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 252}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 253}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 254}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 255}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 256}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 257}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 258}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 259}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 260}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 261}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 262}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 263}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 264}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 265}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 266}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 267}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 268}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 269}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 270}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 271}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 272}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 273}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 274}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 275}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 276}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 277}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 278}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 279}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 280}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 281}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 282}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 283}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 284}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 285}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 286}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 287}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 288}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 289}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 290}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 291}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 292}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 293}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 294}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 295}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 296}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 297}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 298}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   },
   {
    "istrue": "{!v.count > 299}"
   },
   {
    "istrue": "{!v.nestedCount > 1}"
   },
   {
    "istrue": "{!v.nestedCount > 2}"
   },
   {
    "istrue": "{!v.nestedCount > 3}"
   },
   {
    "istrue": "{!v.nestedCount > 4}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "value": "{!v.count}",
    "class": "count"
   },
   {
    "value": "{!v.nestedCount}",
    "class": "nestedCount"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "changeCount",
    "label": "Go"
   },
   {
    "class": "changeNestedCount",
    "label": "Go"
   }
  ]
 },
 "cmp.miscTest.baseBall": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.miscTest.basketBall": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.miscTest.child": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "miscTest:parent"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "teamName",
    "type": "String"
   },
   {
    "name": "manager",
    "type": "String"
   },
   {
    "name": "generalManager",
    "type": "String"
   },
   {
    "name": "stadium",
    "type": "String"
   }
  ]
 },
 "cmp.miscTest.deepIteration": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "color",
    "default": "white",
    "type": "String"
   },
   {
    "name": "players",
    "type": "List"
   },
   {
    "name": "start",
    "type": "Integer"
   },
   {
    "name": "end",
    "type": "Integer"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.players}",
    "var": "var",
    "start": "{!v.start}",
    "end": "{!v.end}",
    "indexvar": "idx"
   },
   {
    "items": "{!var}",
    "var": "fields"
   }
  ]
 },
 "cmp.miscTest.grandParent": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "miscTest:greatGrandParent"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "league",
    "type": "String"
   },
   {
    "name": "startYear",
    "type": "String"
   },
   {
    "name": "endYear",
    "type": "String"
   },
   {
    "name": "president",
    "type": "String"
   }
  ]
 },
 "cmp.miscTest.greatGrandParent": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "color",
    "default": "white",
    "type": "String"
   },
   {
    "name": "city",
    "type": "String"
   },
   {
    "name": "country",
    "type": "String"
   },
   {
    "name": "state",
    "type": "String"
   },
   {
    "name": "nickname",
    "type": "String"
   },
   {
    "name": "geoLocation",
    "type": "String"
   }
  ]
 },
 "cmp.miscTest.htmlMarkup": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "color",
    "default": "white",
    "type": "String"
   }
  ]
 },
 "cmp.miscTest.infinitePerfDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "listType",
    "type": "String"
   },
   {
    "name": "getDataFromServer",
    "type": "Boolean"
   },
   {
    "name": "multiplier",
    "type": "Integer",
    "default": "1"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.miscTest.inheritance": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "color",
    "default": "white",
    "type": "String"
   }
  ],
  "cmp.misctest.child": [
   {
    "color": "{!v.color}",
    "city": "San Francisco",
    "country": "United States of America",
    "state": "California",
    "geolocation": "37°47′N 122°25′W",
    "nickname": "The city by the bay",
    "league": "National League",
    "startyear": "1883",
    "endyear": "Current",
    "president": "Bill Giles",
    "division": "West",
    "shortname": "NL West",
    "founded": "1969",
    "mosttitles": "Los Angeles Dodgers",
    "teamname": "San Francisco Giants",
    "manager": "Bruce Bochy",
    "generalmanager": "Brian Sabean",
    "stadium": "AT&T Park"
   }
  ]
 },
 "cmp.miscTest.iterateBasicData": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestIterationModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "color",
    "default": "white",
    "type": "String"
   },
   {
    "name": "rowNumber",
    "type": "List"
   },
   {
    "name": "start",
    "type": "Integer"
   },
   {
    "name": "end",
    "type": "Integer"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iteration",
    "items": "{!v.rowNumber}",
    "var": "var",
    "indexvar": "idx",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ]
 },
 "cmp.miscTest.iterateComponents": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "color",
    "default": "white",
    "type": "String"
   },
   {
    "name": "start",
    "type": "Integer"
   },
   {
    "name": "end",
    "type": "Integer"
   },
   {
    "name": "cmps",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "iteration",
    "items": "{!v.cmps}",
    "var": "var",
    "indexvar": "idx",
    "start": "{!v.start}",
    "end": "{!v.end}"
   }
  ]
 },
 "cmp.miscTest.myDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "description": "A test data provider to test per-component perf test.",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.miscTest.newComponent": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.createCmpWithComplexAttributes}",
    "label": "Push for component"
   }
  ]
 },
 "cmp.miscTest.parent": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "miscTest:grandParent"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "division"
   },
   {
    "type": "String",
    "name": "shortName"
   },
   {
    "type": "Integer",
    "name": "founded"
   },
   {
    "type": "String",
    "name": "mostTitles"
   }
  ]
 },
 "cmp.miscTest.registeredComponents": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.list": [
   {
    "aura:id": "list1",
    "itemvar": "item"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "dataProvider"
   }
  ],
  "cmp.misctest.registeredcomponentsitem": [
   {
    "item": "{!item}"
   }
  ],
  "cmp.misctest.registeredcomponentsdataprovider": [
   {}
  ]
 },
 "cmp.miscTest.registeredComponentsDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "description": "A test data provider to test per-component perf test."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.miscTest.registeredComponentsItem": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "item",
    "type": "Object"
   },
   {
    "name": "readonly",
    "type": "boolean",
    "default": "false"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.readonly}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!v.item}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "label": "{!v.item}",
    "value": "",
    "click": "{!c.linkClick}"
   }
  ]
 },
 "cmp.miscTest.ui_button": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "changeCount",
    "type": "String",
    "default": "0"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "button1",
    "label": "per component test for ui:button",
    "press": "{!c.changeCount}"
   }
  ]
 },
 "cmp.miscTest.ui_datePicker": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.datepicker": [
   {
    "aura:id": "datePicker",
    "visible": "true"
   }
  ]
 },
 "cmp.miscTest.ui_infiniteList": {
  "cmp.aura.component": [
   {
    "implements": "ui:pagingInterface, ui:scrollerEmbeddable"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "showMore",
    "action": "{!c.showMore}"
   },
   {
    "name": "refresh",
    "action": "{!c.refresh}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "multiplier",
    "type": "Integer",
    "default": "1"
   }
  ],
  "cmp.ui.infinitelist": [
   {
    "aura:id": "list",
    "itemvar": "row",
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.misctest.infiniteperfdataprovider": [
   {
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}",
    "multiplier": "{!v.multiplier}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!row.char}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "btnShowMore",
    "class": "showMore",
    "label": "show more",
    "press": "{!c.showMore}"
   },
   {
    "aura:id": "btnRefresh",
    "class": "refresh",
    "label": "refresh",
    "press": "{!c.refresh}"
   }
  ]
 },
 "cmp.miscTest.ui_inputDate": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "myDate",
    "type": "Date",
    "default": "2013-02-28"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "aura:id": "dateInput",
    "value": "{!v.myDate}",
    "displaydatepicker": "true"
   }
  ]
 },
 "cmp.miscTest.ui_inputDateTime": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "myDate",
    "type": "Date",
    "default": "2013-02-28"
   },
   {
    "name": "myDate1",
    "type": "Date",
    "default": "2013-02-27"
   },
   {
    "name": "myDate2",
    "type": "Date",
    "default": "2013-02-26"
   },
   {
    "name": "myDate3",
    "type": "Date",
    "default": "2013-02-25"
   },
   {
    "name": "myDate4",
    "type": "Date",
    "default": "2013-02-24"
   },
   {
    "name": "myDate5",
    "type": "Date",
    "default": "2013-02-23"
   },
   {
    "name": "myDate6",
    "type": "Date",
    "default": "2013-02-22"
   },
   {
    "name": "myDate7",
    "type": "Date",
    "default": "2013-02-21"
   },
   {
    "name": "myDate8",
    "type": "Date",
    "default": "2013-02-20"
   },
   {
    "name": "myDate9",
    "type": "Date",
    "default": "2013-02-19"
   },
   {
    "name": "count",
    "type": "int",
    "required": "false",
    "default": "1"
   }
  ],
  "cmp.ui.inputdatetime": [
   {
    "aura:id": "dateInput",
    "value": "{!v.myDate}",
    "displaydatepicker": "true"
   },
   {
    "aura:id": "dateInput1",
    "value": "{!v.myDate1}",
    "displaydatepicker": "true"
   },
   {
    "aura:id": "dateInput2",
    "value": "{!v.myDate2}",
    "displaydatepicker": "true"
   },
   {
    "aura:id": "dateInput3",
    "value": "{!v.myDate3}",
    "displaydatepicker": "true"
   },
   {
    "aura:id": "dateInput4",
    "value": "{!v.myDate4}",
    "displaydatepicker": "true"
   },
   {
    "aura:id": "dateInput5",
    "value": "{!v.myDate5}",
    "displaydatepicker": "true"
   },
   {
    "aura:id": "dateInput6",
    "value": "{!v.myDate6}",
    "displaydatepicker": "true"
   },
   {
    "aura:id": "dateInput7",
    "value": "{!v.myDate7}",
    "displaydatepicker": "true"
   },
   {
    "aura:id": "dateInput8",
    "value": "{!v.myDate8}",
    "displaydatepicker": "true"
   },
   {
    "aura:id": "dateInput9",
    "value": "{!v.myDate9}",
    "displaydatepicker": "true"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.count > 4}"
   },
   {
    "istrue": "{!v.count > 9}"
   }
  ]
 },
 "cmp.miscTest.ui_inputSelect": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "count",
    "type": "int",
    "required": "false",
    "description": "The size of the data",
    "default": "1"
   },
   {
    "name": "componentCount",
    "type": "int",
    "required": "false",
    "description": "The number of components",
    "default": "1"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions1"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions2"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions3"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions4"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions5"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions6"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions7"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions8"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions9"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions10"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions11"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions12"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions13"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions14"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions15"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions16"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions17"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions18"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions19"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions20"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions21"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions22"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions23"
   },
   {
    "options": "{!m.perfOptions}",
    "aura:id": "InputSelectOptions24"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.componentCount > 9}"
   },
   {
    "istrue": "{!v.componentCount > 24}"
   }
  ]
 },
 "cmp.miscTest.ui_inputText": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "textI",
    "label": "Per Component Perf Test For ui:inputText",
    "value": "text input"
   }
  ]
 },
 "cmp.miscTest.ui_list": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.list": [
   {
    "aura:id": "list1",
    "itemvar": "list"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "dataProvider"
   }
  ],
  "cmp.misctest.ui_list_template": [
   {
    "label": "{!list}"
   }
  ],
  "cmp.misctest.mydataprovider": [
   {}
  ]
 },
 "cmp.miscTest.ui_list_template": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String",
    "default": "tiger"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "{!v.label}",
    "aura:id": "{!v.label}"
   }
  ]
 },
 "cmp.miscTest.ui_menu_actionMenu": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.menu": [
   {}
  ],
  "cmp.ui.menutriggerlink": [
   {
    "aura:id": "trigger",
    "label": "Select your favorite team"
   }
  ],
  "cmp.ui.menulist": [
   {
    "class": "actionMenu",
    "aura:id": "actionMenu"
   }
  ],
  "cmp.ui.actionmenuitem": [
   {
    "class": "actionItem1",
    "aura:id": "actionItem1",
    "label": "Bayern Munich",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "actionItem2",
    "aura:id": "actionItem2",
    "label": "FC Barcelona",
    "click": "{!c.updateTriggerLabel}",
    "disabled": "true"
   },
   {
    "class": "actionItem3",
    "aura:id": "actionItem3",
    "label": "Inter Milan",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "actionItem4",
    "aura:id": "actionItem4",
    "label": "Manchester United",
    "click": "{!c.updateTriggerLabel}"
   }
  ]
 },
 "cmp.miscTest.ui_menu_checkBox": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.menu": [
   {}
  ],
  "cmp.ui.menutriggerlink": [
   {
    "class": "checkboxMenuLabel",
    "aura:id": "checkboxMenuLabel",
    "label": "Select your favorite teams"
   }
  ],
  "cmp.ui.menulist": [
   {
    "aura:id": "checkboxMenu",
    "class": "checkboxMenu"
   }
  ],
  "cmp.ui.checkboxmenuitem": [
   {
    "class": "checkboxItem1",
    "aura:id": "checkboxItem1",
    "label": "San Francisco 49ers"
   },
   {
    "class": "checkboxItem2",
    "aura:id": "checkboxItem2",
    "label": "Seattle Seahawks"
   },
   {
    "class": "checkboxItem3",
    "aura:id": "checkboxItem3",
    "label": "St. Louis Rams"
   },
   {
    "class": "checkboxItem4",
    "aura:id": "checkboxItem4",
    "label": "Arizona Cardinals",
    "disabled": "true",
    "selected": "true"
   }
  ]
 },
 "cmp.miscTest.ui_menu_radioMenu": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.menu": [
   {}
  ],
  "cmp.ui.menutriggerlink": [
   {
    "class": "radioMenuLabel",
    "aura:id": "radioMenuLabel",
    "label": "Select a team"
   }
  ],
  "cmp.ui.menulist": [
   {
    "class": "radioMenu",
    "aura:id": "radioMenu"
   }
  ],
  "cmp.ui.radiomenuitem": [
   {
    "class": "radioItem1",
    "aura:id": "radioItem1",
    "label": "San Francisco",
    "click": "{!c.getRadioMenuSelected}"
   },
   {
    "class": "radioItem2",
    "aura:id": "radioItem2",
    "label": "LA Dodgers",
    "click": "{!c.getRadioMenuSelected}"
   },
   {
    "class": "radioItem3",
    "aura:id": "radioItem3",
    "label": "Arizona",
    "click": "{!c.getRadioMenuSelected}"
   },
   {
    "class": "radioItem4",
    "aura:id": "radioItem4",
    "label": "Diego",
    "disabled": "true",
    "click": "{!c.getRadioMenuSelected}"
   },
   {
    "class": "radioItem5",
    "aura:id": "radioItem5",
    "label": "Colorado",
    "click": "{!c.getRadioMenuSelected}"
   }
  ]
 },
 "cmp.miscTest.ui_outputCheckbox": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "count",
    "type": "Integer",
    "default": "1"
   }
  ],
  "cmp.ui.outputcheckbox": [
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   },
   {
    "value": "True"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.count > 49}"
   },
   {
    "istrue": "{!v.count > 99}"
   }
  ]
 },
 "cmp.miscTest.ui_outputCurrency": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.outputcurrency": [
   {
    "value": "10.1"
   }
  ]
 },
 "cmp.miscTest.ui_outputDate": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.outputdate": [
   {
    "value": "1987-10-02"
   }
  ]
 },
 "cmp.miscTest.ui_outputEmail": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "count",
    "type": "Integer",
    "default": "1"
   }
  ],
  "cmp.ui.outputemail": [
   {
    "actionable": "true",
    "value": "test1@test.com"
   },
   {
    "actionable": "true",
    "value": "test2@test.com"
   },
   {
    "actionable": "true",
    "value": "test3@test.com"
   },
   {
    "actionable": "true",
    "value": "test4@test.com"
   },
   {
    "actionable": "true",
    "value": "test5@test.com"
   },
   {
    "actionable": "true",
    "value": "test6@test.com"
   },
   {
    "actionable": "true",
    "value": "test7@test.com"
   },
   {
    "actionable": "true",
    "value": "test8@test.com"
   },
   {
    "actionable": "true",
    "value": "test9@test.com"
   },
   {
    "actionable": "true",
    "value": "test10@test.com"
   },
   {
    "actionable": "true",
    "value": "test11@test.com"
   },
   {
    "actionable": "true",
    "value": "test12@test.com"
   },
   {
    "actionable": "true",
    "value": "test13@test.com"
   },
   {
    "actionable": "true",
    "value": "test14@test.com"
   },
   {
    "actionable": "true",
    "value": "test15@test.com"
   },
   {
    "actionable": "true",
    "value": "test16@test.com"
   },
   {
    "actionable": "true",
    "value": "test17@test.com"
   },
   {
    "actionable": "true",
    "value": "test18@test.com"
   },
   {
    "actionable": "true",
    "value": "test19@test.com"
   },
   {
    "actionable": "true",
    "value": "test20@test.com"
   },
   {
    "actionable": "true",
    "value": "test21@test.com"
   },
   {
    "actionable": "true",
    "value": "test22@test.com"
   },
   {
    "actionable": "true",
    "value": "test23@test.com"
   },
   {
    "actionable": "true",
    "value": "test24@test.com"
   },
   {
    "actionable": "true",
    "value": "test25@test.com"
   },
   {
    "actionable": "true",
    "value": "test26@test.com"
   },
   {
    "actionable": "true",
    "value": "test27@test.com"
   },
   {
    "actionable": "true",
    "value": "test28@test.com"
   },
   {
    "actionable": "true",
    "value": "test29@test.com"
   },
   {
    "actionable": "true",
    "value": "test30@test.com"
   },
   {
    "actionable": "true",
    "value": "test31@test.com"
   },
   {
    "actionable": "true",
    "value": "test32@test.com"
   },
   {
    "actionable": "true",
    "value": "test33@test.com"
   },
   {
    "actionable": "true",
    "value": "test34@test.com"
   },
   {
    "actionable": "true",
    "value": "test35@test.com"
   },
   {
    "actionable": "true",
    "value": "test36@test.com"
   },
   {
    "actionable": "true",
    "value": "test37@test.com"
   },
   {
    "actionable": "true",
    "value": "test38@test.com"
   },
   {
    "actionable": "true",
    "value": "test39@test.com"
   },
   {
    "actionable": "true",
    "value": "test40@test.com"
   },
   {
    "actionable": "true",
    "value": "test41@test.com"
   },
   {
    "actionable": "true",
    "value": "test42@test.com"
   },
   {
    "actionable": "true",
    "value": "test43@test.com"
   },
   {
    "actionable": "true",
    "value": "test44@test.com"
   },
   {
    "actionable": "true",
    "value": "test45@test.com"
   },
   {
    "actionable": "true",
    "value": "test46@test.com"
   },
   {
    "actionable": "true",
    "value": "test47@test.com"
   },
   {
    "actionable": "true",
    "value": "test48@test.com"
   },
   {
    "actionable": "true",
    "value": "test49@test.com"
   },
   {
    "actionable": "true",
    "value": "test50@test.com"
   },
   {
    "actionable": "true",
    "value": "test51@test.com"
   },
   {
    "actionable": "true",
    "value": "test52@test.com"
   },
   {
    "actionable": "true",
    "value": "test53@test.com"
   },
   {
    "actionable": "true",
    "value": "test54@test.com"
   },
   {
    "actionable": "true",
    "value": "test55@test.com"
   },
   {
    "actionable": "true",
    "value": "test56@test.com"
   },
   {
    "actionable": "true",
    "value": "test57@test.com"
   },
   {
    "actionable": "true",
    "value": "test58@test.com"
   },
   {
    "actionable": "true",
    "value": "test59@test.com"
   },
   {
    "actionable": "true",
    "value": "test60@test.com"
   },
   {
    "actionable": "true",
    "value": "test61@test.com"
   },
   {
    "actionable": "true",
    "value": "test62@test.com"
   },
   {
    "actionable": "true",
    "value": "test63@test.com"
   },
   {
    "actionable": "true",
    "value": "test64@test.com"
   },
   {
    "actionable": "true",
    "value": "test65@test.com"
   },
   {
    "actionable": "true",
    "value": "test66@test.com"
   },
   {
    "actionable": "true",
    "value": "test67@test.com"
   },
   {
    "actionable": "true",
    "value": "test68@test.com"
   },
   {
    "actionable": "true",
    "value": "test69@test.com"
   },
   {
    "actionable": "true",
    "value": "test70@test.com"
   },
   {
    "actionable": "true",
    "value": "test71@test.com"
   },
   {
    "actionable": "true",
    "value": "test72@test.com"
   },
   {
    "actionable": "true",
    "value": "test73@test.com"
   },
   {
    "actionable": "true",
    "value": "test74@test.com"
   },
   {
    "actionable": "true",
    "value": "test75@test.com"
   },
   {
    "actionable": "true",
    "value": "test76@test.com"
   },
   {
    "actionable": "true",
    "value": "test77@test.com"
   },
   {
    "actionable": "true",
    "value": "test78@test.com"
   },
   {
    "actionable": "true",
    "value": "test79@test.com"
   },
   {
    "actionable": "true",
    "value": "test80@test.com"
   },
   {
    "actionable": "true",
    "value": "test81@test.com"
   },
   {
    "actionable": "true",
    "value": "test82@test.com"
   },
   {
    "actionable": "true",
    "value": "test83@test.com"
   },
   {
    "actionable": "true",
    "value": "test84@test.com"
   },
   {
    "actionable": "true",
    "value": "test85@test.com"
   },
   {
    "actionable": "true",
    "value": "test86@test.com"
   },
   {
    "actionable": "true",
    "value": "test87@test.com"
   },
   {
    "actionable": "true",
    "value": "test88@test.com"
   },
   {
    "actionable": "true",
    "value": "test89@test.com"
   },
   {
    "actionable": "true",
    "value": "test90@test.com"
   },
   {
    "actionable": "true",
    "value": "test91@test.com"
   },
   {
    "actionable": "true",
    "value": "test92@test.com"
   },
   {
    "actionable": "true",
    "value": "test93@test.com"
   },
   {
    "actionable": "true",
    "value": "test94@test.com"
   },
   {
    "actionable": "true",
    "value": "test95@test.com"
   },
   {
    "actionable": "true",
    "value": "test96@test.com"
   },
   {
    "actionable": "true",
    "value": "test97@test.com"
   },
   {
    "actionable": "true",
    "value": "test98@test.com"
   },
   {
    "actionable": "true",
    "value": "test99@test.com"
   },
   {
    "actionable": "true",
    "value": "test100@test.com"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.count > 49}"
   },
   {
    "istrue": "{!v.count > 99}"
   }
  ]
 },
 "cmp.miscTest.ui_outputNumber": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "count",
    "type": "Integer",
    "default": "1"
   }
  ],
  "cmp.ui.outputnumber": [
   {
    "value": "1"
   },
   {
    "value": "2"
   },
   {
    "value": "3"
   },
   {
    "value": "4"
   },
   {
    "value": "5"
   },
   {
    "value": "6"
   },
   {
    "value": "7"
   },
   {
    "value": "8"
   },
   {
    "value": "9"
   },
   {
    "value": "10"
   },
   {
    "value": "11"
   },
   {
    "value": "12"
   },
   {
    "value": "13"
   },
   {
    "value": "14"
   },
   {
    "value": "15"
   },
   {
    "value": "16"
   },
   {
    "value": "17"
   },
   {
    "value": "18"
   },
   {
    "value": "19"
   },
   {
    "value": "20"
   },
   {
    "value": "21"
   },
   {
    "value": "22"
   },
   {
    "value": "23"
   },
   {
    "value": "24"
   },
   {
    "value": "25"
   },
   {
    "value": "26"
   },
   {
    "value": "27"
   },
   {
    "value": "28"
   },
   {
    "value": "29"
   },
   {
    "value": "30"
   },
   {
    "value": "31"
   },
   {
    "value": "32"
   },
   {
    "value": "33"
   },
   {
    "value": "34"
   },
   {
    "value": "35"
   },
   {
    "value": "36"
   },
   {
    "value": "37"
   },
   {
    "value": "38"
   },
   {
    "value": "39"
   },
   {
    "value": "40"
   },
   {
    "value": "41"
   },
   {
    "value": "42"
   },
   {
    "value": "43"
   },
   {
    "value": "44"
   },
   {
    "value": "45"
   },
   {
    "value": "46"
   },
   {
    "value": "47"
   },
   {
    "value": "48"
   },
   {
    "value": "49"
   },
   {
    "value": "50"
   },
   {
    "value": "51"
   },
   {
    "value": "52"
   },
   {
    "value": "53"
   },
   {
    "value": "54"
   },
   {
    "value": "55"
   },
   {
    "value": "56"
   },
   {
    "value": "57"
   },
   {
    "value": "58"
   },
   {
    "value": "59"
   },
   {
    "value": "60"
   },
   {
    "value": "61"
   },
   {
    "value": "62"
   },
   {
    "value": "63"
   },
   {
    "value": "64"
   },
   {
    "value": "65"
   },
   {
    "value": "66"
   },
   {
    "value": "67"
   },
   {
    "value": "68"
   },
   {
    "value": "69"
   },
   {
    "value": "70"
   },
   {
    "value": "71"
   },
   {
    "value": "72"
   },
   {
    "value": "73"
   },
   {
    "value": "74"
   },
   {
    "value": "75"
   },
   {
    "value": "76"
   },
   {
    "value": "77"
   },
   {
    "value": "78"
   },
   {
    "value": "79"
   },
   {
    "value": "80"
   },
   {
    "value": "81"
   },
   {
    "value": "82"
   },
   {
    "value": "83"
   },
   {
    "value": "84"
   },
   {
    "value": "85"
   },
   {
    "value": "86"
   },
   {
    "value": "87"
   },
   {
    "value": "88"
   },
   {
    "value": "89"
   },
   {
    "value": "90"
   },
   {
    "value": "91"
   },
   {
    "value": "92"
   },
   {
    "value": "93"
   },
   {
    "value": "94"
   },
   {
    "value": "95"
   },
   {
    "value": "96"
   },
   {
    "value": "97"
   },
   {
    "value": "98"
   },
   {
    "value": "99"
   },
   {
    "value": "100"
   },
   {
    "value": "101"
   },
   {
    "value": "102"
   },
   {
    "value": "103"
   },
   {
    "value": "104"
   },
   {
    "value": "105"
   },
   {
    "value": "106"
   },
   {
    "value": "107"
   },
   {
    "value": "108"
   },
   {
    "value": "109"
   },
   {
    "value": "110"
   },
   {
    "value": "111"
   },
   {
    "value": "112"
   },
   {
    "value": "113"
   },
   {
    "value": "114"
   },
   {
    "value": "115"
   },
   {
    "value": "116"
   },
   {
    "value": "117"
   },
   {
    "value": "118"
   },
   {
    "value": "119"
   },
   {
    "value": "120"
   },
   {
    "value": "121"
   },
   {
    "value": "122"
   },
   {
    "value": "123"
   },
   {
    "value": "124"
   },
   {
    "value": "125"
   },
   {
    "value": "126"
   },
   {
    "value": "127"
   },
   {
    "value": "128"
   },
   {
    "value": "129"
   },
   {
    "value": "130"
   },
   {
    "value": "131"
   },
   {
    "value": "132"
   },
   {
    "value": "133"
   },
   {
    "value": "134"
   },
   {
    "value": "135"
   },
   {
    "value": "136"
   },
   {
    "value": "137"
   },
   {
    "value": "138"
   },
   {
    "value": "139"
   },
   {
    "value": "140"
   },
   {
    "value": "141"
   },
   {
    "value": "142"
   },
   {
    "value": "143"
   },
   {
    "value": "144"
   },
   {
    "value": "145"
   },
   {
    "value": "146"
   },
   {
    "value": "147"
   },
   {
    "value": "148"
   },
   {
    "value": "149"
   },
   {
    "value": "150"
   },
   {
    "value": "151"
   },
   {
    "value": "152"
   },
   {
    "value": "153"
   },
   {
    "value": "154"
   },
   {
    "value": "155"
   },
   {
    "value": "156"
   },
   {
    "value": "157"
   },
   {
    "value": "158"
   },
   {
    "value": "159"
   },
   {
    "value": "160"
   },
   {
    "value": "161"
   },
   {
    "value": "162"
   },
   {
    "value": "163"
   },
   {
    "value": "164"
   },
   {
    "value": "165"
   },
   {
    "value": "166"
   },
   {
    "value": "167"
   },
   {
    "value": "168"
   },
   {
    "value": "169"
   },
   {
    "value": "170"
   },
   {
    "value": "171"
   },
   {
    "value": "172"
   },
   {
    "value": "173"
   },
   {
    "value": "174"
   },
   {
    "value": "175"
   },
   {
    "value": "176"
   },
   {
    "value": "177"
   },
   {
    "value": "178"
   },
   {
    "value": "179"
   },
   {
    "value": "180"
   },
   {
    "value": "181"
   },
   {
    "value": "182"
   },
   {
    "value": "183"
   },
   {
    "value": "184"
   },
   {
    "value": "185"
   },
   {
    "value": "186"
   },
   {
    "value": "187"
   },
   {
    "value": "188"
   },
   {
    "value": "189"
   },
   {
    "value": "190"
   },
   {
    "value": "191"
   },
   {
    "value": "192"
   },
   {
    "value": "193"
   },
   {
    "value": "194"
   },
   {
    "value": "195"
   },
   {
    "value": "196"
   },
   {
    "value": "197"
   },
   {
    "value": "198"
   },
   {
    "value": "199"
   },
   {
    "value": "200"
   },
   {
    "value": "201"
   },
   {
    "value": "202"
   },
   {
    "value": "203"
   },
   {
    "value": "204"
   },
   {
    "value": "205"
   },
   {
    "value": "206"
   },
   {
    "value": "207"
   },
   {
    "value": "208"
   },
   {
    "value": "209"
   },
   {
    "value": "210"
   },
   {
    "value": "211"
   },
   {
    "value": "212"
   },
   {
    "value": "213"
   },
   {
    "value": "214"
   },
   {
    "value": "215"
   },
   {
    "value": "216"
   },
   {
    "value": "217"
   },
   {
    "value": "218"
   },
   {
    "value": "219"
   },
   {
    "value": "220"
   },
   {
    "value": "221"
   },
   {
    "value": "222"
   },
   {
    "value": "223"
   },
   {
    "value": "224"
   },
   {
    "value": "225"
   },
   {
    "value": "226"
   },
   {
    "value": "227"
   },
   {
    "value": "228"
   },
   {
    "value": "229"
   },
   {
    "value": "230"
   },
   {
    "value": "231"
   },
   {
    "value": "232"
   },
   {
    "value": "233"
   },
   {
    "value": "234"
   },
   {
    "value": "235"
   },
   {
    "value": "236"
   },
   {
    "value": "237"
   },
   {
    "value": "238"
   },
   {
    "value": "239"
   },
   {
    "value": "240"
   },
   {
    "value": "241"
   },
   {
    "value": "242"
   },
   {
    "value": "243"
   },
   {
    "value": "244"
   },
   {
    "value": "245"
   },
   {
    "value": "246"
   },
   {
    "value": "247"
   },
   {
    "value": "248"
   },
   {
    "value": "249"
   },
   {
    "value": "250"
   },
   {
    "value": "251"
   },
   {
    "value": "252"
   },
   {
    "value": "253"
   },
   {
    "value": "254"
   },
   {
    "value": "255"
   },
   {
    "value": "256"
   },
   {
    "value": "257"
   },
   {
    "value": "258"
   },
   {
    "value": "259"
   },
   {
    "value": "260"
   },
   {
    "value": "261"
   },
   {
    "value": "262"
   },
   {
    "value": "263"
   },
   {
    "value": "264"
   },
   {
    "value": "265"
   },
   {
    "value": "266"
   },
   {
    "value": "267"
   },
   {
    "value": "268"
   },
   {
    "value": "269"
   },
   {
    "value": "270"
   },
   {
    "value": "271"
   },
   {
    "value": "272"
   },
   {
    "value": "273"
   },
   {
    "value": "274"
   },
   {
    "value": "275"
   },
   {
    "value": "276"
   },
   {
    "value": "277"
   },
   {
    "value": "278"
   },
   {
    "value": "279"
   },
   {
    "value": "280"
   },
   {
    "value": "281"
   },
   {
    "value": "282"
   },
   {
    "value": "283"
   },
   {
    "value": "284"
   },
   {
    "value": "285"
   },
   {
    "value": "286"
   },
   {
    "value": "287"
   },
   {
    "value": "288"
   },
   {
    "value": "289"
   },
   {
    "value": "290"
   },
   {
    "value": "291"
   },
   {
    "value": "292"
   },
   {
    "value": "293"
   },
   {
    "value": "294"
   },
   {
    "value": "295"
   },
   {
    "value": "296"
   },
   {
    "value": "297"
   },
   {
    "value": "298"
   },
   {
    "value": "299"
   },
   {
    "value": "300"
   },
   {
    "value": "301"
   },
   {
    "value": "302"
   },
   {
    "value": "303"
   },
   {
    "value": "304"
   },
   {
    "value": "305"
   },
   {
    "value": "306"
   },
   {
    "value": "307"
   },
   {
    "value": "308"
   },
   {
    "value": "309"
   },
   {
    "value": "310"
   },
   {
    "value": "311"
   },
   {
    "value": "312"
   },
   {
    "value": "313"
   },
   {
    "value": "314"
   },
   {
    "value": "315"
   },
   {
    "value": "316"
   },
   {
    "value": "317"
   },
   {
    "value": "318"
   },
   {
    "value": "319"
   },
   {
    "value": "320"
   },
   {
    "value": "321"
   },
   {
    "value": "322"
   },
   {
    "value": "323"
   },
   {
    "value": "324"
   },
   {
    "value": "325"
   },
   {
    "value": "326"
   },
   {
    "value": "327"
   },
   {
    "value": "328"
   },
   {
    "value": "329"
   },
   {
    "value": "330"
   },
   {
    "value": "331"
   },
   {
    "value": "332"
   },
   {
    "value": "333"
   },
   {
    "value": "334"
   },
   {
    "value": "335"
   },
   {
    "value": "336"
   },
   {
    "value": "337"
   },
   {
    "value": "338"
   },
   {
    "value": "339"
   },
   {
    "value": "340"
   },
   {
    "value": "341"
   },
   {
    "value": "342"
   },
   {
    "value": "343"
   },
   {
    "value": "344"
   },
   {
    "value": "345"
   },
   {
    "value": "346"
   },
   {
    "value": "347"
   },
   {
    "value": "348"
   },
   {
    "value": "349"
   },
   {
    "value": "350"
   },
   {
    "value": "351"
   },
   {
    "value": "352"
   },
   {
    "value": "353"
   },
   {
    "value": "354"
   },
   {
    "value": "355"
   },
   {
    "value": "356"
   },
   {
    "value": "357"
   },
   {
    "value": "358"
   },
   {
    "value": "359"
   },
   {
    "value": "360"
   },
   {
    "value": "361"
   },
   {
    "value": "362"
   },
   {
    "value": "363"
   },
   {
    "value": "364"
   },
   {
    "value": "365"
   },
   {
    "value": "366"
   },
   {
    "value": "367"
   },
   {
    "value": "368"
   },
   {
    "value": "369"
   },
   {
    "value": "370"
   },
   {
    "value": "371"
   },
   {
    "value": "372"
   },
   {
    "value": "373"
   },
   {
    "value": "374"
   },
   {
    "value": "375"
   },
   {
    "value": "376"
   },
   {
    "value": "377"
   },
   {
    "value": "378"
   },
   {
    "value": "379"
   },
   {
    "value": "380"
   },
   {
    "value": "381"
   },
   {
    "value": "382"
   },
   {
    "value": "383"
   },
   {
    "value": "384"
   },
   {
    "value": "385"
   },
   {
    "value": "386"
   },
   {
    "value": "387"
   },
   {
    "value": "388"
   },
   {
    "value": "389"
   },
   {
    "value": "390"
   },
   {
    "value": "391"
   },
   {
    "value": "392"
   },
   {
    "value": "393"
   },
   {
    "value": "394"
   },
   {
    "value": "395"
   },
   {
    "value": "396"
   },
   {
    "value": "397"
   },
   {
    "value": "398"
   },
   {
    "value": "399"
   },
   {
    "value": "400"
   },
   {
    "value": "401"
   },
   {
    "value": "402"
   },
   {
    "value": "403"
   },
   {
    "value": "404"
   },
   {
    "value": "405"
   },
   {
    "value": "406"
   },
   {
    "value": "407"
   },
   {
    "value": "408"
   },
   {
    "value": "409"
   },
   {
    "value": "410"
   },
   {
    "value": "411"
   },
   {
    "value": "412"
   },
   {
    "value": "413"
   },
   {
    "value": "414"
   },
   {
    "value": "415"
   },
   {
    "value": "416"
   },
   {
    "value": "417"
   },
   {
    "value": "418"
   },
   {
    "value": "419"
   },
   {
    "value": "420"
   },
   {
    "value": "421"
   },
   {
    "value": "422"
   },
   {
    "value": "423"
   },
   {
    "value": "424"
   },
   {
    "value": "425"
   },
   {
    "value": "426"
   },
   {
    "value": "427"
   },
   {
    "value": "428"
   },
   {
    "value": "429"
   },
   {
    "value": "430"
   },
   {
    "value": "431"
   },
   {
    "value": "432"
   },
   {
    "value": "433"
   },
   {
    "value": "434"
   },
   {
    "value": "435"
   },
   {
    "value": "436"
   },
   {
    "value": "437"
   },
   {
    "value": "438"
   },
   {
    "value": "439"
   },
   {
    "value": "440"
   },
   {
    "value": "441"
   },
   {
    "value": "442"
   },
   {
    "value": "443"
   },
   {
    "value": "444"
   },
   {
    "value": "445"
   },
   {
    "value": "446"
   },
   {
    "value": "447"
   },
   {
    "value": "448"
   },
   {
    "value": "449"
   },
   {
    "value": "450"
   },
   {
    "value": "451"
   },
   {
    "value": "452"
   },
   {
    "value": "453"
   },
   {
    "value": "454"
   },
   {
    "value": "455"
   },
   {
    "value": "456"
   },
   {
    "value": "457"
   },
   {
    "value": "458"
   },
   {
    "value": "459"
   },
   {
    "value": "460"
   },
   {
    "value": "461"
   },
   {
    "value": "462"
   },
   {
    "value": "463"
   },
   {
    "value": "464"
   },
   {
    "value": "465"
   },
   {
    "value": "466"
   },
   {
    "value": "467"
   },
   {
    "value": "468"
   },
   {
    "value": "469"
   },
   {
    "value": "470"
   },
   {
    "value": "471"
   },
   {
    "value": "472"
   },
   {
    "value": "473"
   },
   {
    "value": "474"
   },
   {
    "value": "475"
   },
   {
    "value": "476"
   },
   {
    "value": "477"
   },
   {
    "value": "478"
   },
   {
    "value": "479"
   },
   {
    "value": "480"
   },
   {
    "value": "481"
   },
   {
    "value": "482"
   },
   {
    "value": "483"
   },
   {
    "value": "484"
   },
   {
    "value": "485"
   },
   {
    "value": "486"
   },
   {
    "value": "487"
   },
   {
    "value": "488"
   },
   {
    "value": "489"
   },
   {
    "value": "490"
   },
   {
    "value": "491"
   },
   {
    "value": "492"
   },
   {
    "value": "493"
   },
   {
    "value": "494"
   },
   {
    "value": "495"
   },
   {
    "value": "496"
   },
   {
    "value": "497"
   },
   {
    "value": "498"
   },
   {
    "value": "499"
   },
   {
    "value": "500"
   },
   {
    "value": "501"
   },
   {
    "value": "502"
   },
   {
    "value": "503"
   },
   {
    "value": "504"
   },
   {
    "value": "505"
   },
   {
    "value": "506"
   },
   {
    "value": "507"
   },
   {
    "value": "508"
   },
   {
    "value": "509"
   },
   {
    "value": "510"
   },
   {
    "value": "511"
   },
   {
    "value": "512"
   },
   {
    "value": "513"
   },
   {
    "value": "514"
   },
   {
    "value": "515"
   },
   {
    "value": "516"
   },
   {
    "value": "517"
   },
   {
    "value": "518"
   },
   {
    "value": "519"
   },
   {
    "value": "520"
   },
   {
    "value": "521"
   },
   {
    "value": "522"
   },
   {
    "value": "523"
   },
   {
    "value": "524"
   },
   {
    "value": "525"
   },
   {
    "value": "526"
   },
   {
    "value": "527"
   },
   {
    "value": "528"
   },
   {
    "value": "529"
   },
   {
    "value": "530"
   },
   {
    "value": "531"
   },
   {
    "value": "532"
   },
   {
    "value": "533"
   },
   {
    "value": "534"
   },
   {
    "value": "535"
   },
   {
    "value": "536"
   },
   {
    "value": "537"
   },
   {
    "value": "538"
   },
   {
    "value": "539"
   },
   {
    "value": "540"
   },
   {
    "value": "541"
   },
   {
    "value": "542"
   },
   {
    "value": "543"
   },
   {
    "value": "544"
   },
   {
    "value": "545"
   },
   {
    "value": "546"
   },
   {
    "value": "547"
   },
   {
    "value": "548"
   },
   {
    "value": "549"
   },
   {
    "value": "550"
   },
   {
    "value": "551"
   },
   {
    "value": "552"
   },
   {
    "value": "553"
   },
   {
    "value": "554"
   },
   {
    "value": "555"
   },
   {
    "value": "556"
   },
   {
    "value": "557"
   },
   {
    "value": "558"
   },
   {
    "value": "559"
   },
   {
    "value": "560"
   },
   {
    "value": "561"
   },
   {
    "value": "562"
   },
   {
    "value": "563"
   },
   {
    "value": "564"
   },
   {
    "value": "565"
   },
   {
    "value": "566"
   },
   {
    "value": "567"
   },
   {
    "value": "568"
   },
   {
    "value": "569"
   },
   {
    "value": "570"
   },
   {
    "value": "571"
   },
   {
    "value": "572"
   },
   {
    "value": "573"
   },
   {
    "value": "574"
   },
   {
    "value": "575"
   },
   {
    "value": "576"
   },
   {
    "value": "577"
   },
   {
    "value": "578"
   },
   {
    "value": "579"
   },
   {
    "value": "580"
   },
   {
    "value": "581"
   },
   {
    "value": "582"
   },
   {
    "value": "583"
   },
   {
    "value": "584"
   },
   {
    "value": "585"
   },
   {
    "value": "586"
   },
   {
    "value": "587"
   },
   {
    "value": "588"
   },
   {
    "value": "589"
   },
   {
    "value": "590"
   },
   {
    "value": "591"
   },
   {
    "value": "592"
   },
   {
    "value": "593"
   },
   {
    "value": "594"
   },
   {
    "value": "595"
   },
   {
    "value": "596"
   },
   {
    "value": "597"
   },
   {
    "value": "598"
   },
   {
    "value": "599"
   },
   {
    "value": "600"
   },
   {
    "value": "601"
   },
   {
    "value": "602"
   },
   {
    "value": "603"
   },
   {
    "value": "604"
   },
   {
    "value": "605"
   },
   {
    "value": "606"
   },
   {
    "value": "607"
   },
   {
    "value": "608"
   },
   {
    "value": "609"
   },
   {
    "value": "610"
   },
   {
    "value": "611"
   },
   {
    "value": "612"
   },
   {
    "value": "613"
   },
   {
    "value": "614"
   },
   {
    "value": "615"
   },
   {
    "value": "616"
   },
   {
    "value": "617"
   },
   {
    "value": "618"
   },
   {
    "value": "619"
   },
   {
    "value": "620"
   },
   {
    "value": "621"
   },
   {
    "value": "622"
   },
   {
    "value": "623"
   },
   {
    "value": "624"
   },
   {
    "value": "625"
   },
   {
    "value": "626"
   },
   {
    "value": "627"
   },
   {
    "value": "628"
   },
   {
    "value": "629"
   },
   {
    "value": "630"
   },
   {
    "value": "631"
   },
   {
    "value": "632"
   },
   {
    "value": "633"
   },
   {
    "value": "634"
   },
   {
    "value": "635"
   },
   {
    "value": "636"
   },
   {
    "value": "637"
   },
   {
    "value": "638"
   },
   {
    "value": "639"
   },
   {
    "value": "640"
   },
   {
    "value": "641"
   },
   {
    "value": "642"
   },
   {
    "value": "643"
   },
   {
    "value": "644"
   },
   {
    "value": "645"
   },
   {
    "value": "646"
   },
   {
    "value": "647"
   },
   {
    "value": "648"
   },
   {
    "value": "649"
   },
   {
    "value": "650"
   },
   {
    "value": "651"
   },
   {
    "value": "652"
   },
   {
    "value": "653"
   },
   {
    "value": "654"
   },
   {
    "value": "655"
   },
   {
    "value": "656"
   },
   {
    "value": "657"
   },
   {
    "value": "658"
   },
   {
    "value": "659"
   },
   {
    "value": "660"
   },
   {
    "value": "661"
   },
   {
    "value": "662"
   },
   {
    "value": "663"
   },
   {
    "value": "664"
   },
   {
    "value": "665"
   },
   {
    "value": "666"
   },
   {
    "value": "667"
   },
   {
    "value": "668"
   },
   {
    "value": "669"
   },
   {
    "value": "670"
   },
   {
    "value": "671"
   },
   {
    "value": "672"
   },
   {
    "value": "673"
   },
   {
    "value": "674"
   },
   {
    "value": "675"
   },
   {
    "value": "676"
   },
   {
    "value": "677"
   },
   {
    "value": "678"
   },
   {
    "value": "679"
   },
   {
    "value": "680"
   },
   {
    "value": "681"
   },
   {
    "value": "682"
   },
   {
    "value": "683"
   },
   {
    "value": "684"
   },
   {
    "value": "685"
   },
   {
    "value": "686"
   },
   {
    "value": "687"
   },
   {
    "value": "688"
   },
   {
    "value": "689"
   },
   {
    "value": "690"
   },
   {
    "value": "691"
   },
   {
    "value": "692"
   },
   {
    "value": "693"
   },
   {
    "value": "694"
   },
   {
    "value": "695"
   },
   {
    "value": "696"
   },
   {
    "value": "697"
   },
   {
    "value": "698"
   },
   {
    "value": "699"
   },
   {
    "value": "700"
   },
   {
    "value": "701"
   },
   {
    "value": "702"
   },
   {
    "value": "703"
   },
   {
    "value": "704"
   },
   {
    "value": "705"
   },
   {
    "value": "706"
   },
   {
    "value": "707"
   },
   {
    "value": "708"
   },
   {
    "value": "709"
   },
   {
    "value": "710"
   },
   {
    "value": "711"
   },
   {
    "value": "712"
   },
   {
    "value": "713"
   },
   {
    "value": "714"
   },
   {
    "value": "715"
   },
   {
    "value": "716"
   },
   {
    "value": "717"
   },
   {
    "value": "718"
   },
   {
    "value": "719"
   },
   {
    "value": "720"
   },
   {
    "value": "721"
   },
   {
    "value": "722"
   },
   {
    "value": "723"
   },
   {
    "value": "724"
   },
   {
    "value": "725"
   },
   {
    "value": "726"
   },
   {
    "value": "727"
   },
   {
    "value": "728"
   },
   {
    "value": "729"
   },
   {
    "value": "730"
   },
   {
    "value": "731"
   },
   {
    "value": "732"
   },
   {
    "value": "733"
   },
   {
    "value": "734"
   },
   {
    "value": "735"
   },
   {
    "value": "736"
   },
   {
    "value": "737"
   },
   {
    "value": "738"
   },
   {
    "value": "739"
   },
   {
    "value": "740"
   },
   {
    "value": "741"
   },
   {
    "value": "742"
   },
   {
    "value": "743"
   },
   {
    "value": "744"
   },
   {
    "value": "745"
   },
   {
    "value": "746"
   },
   {
    "value": "747"
   },
   {
    "value": "748"
   },
   {
    "value": "749"
   },
   {
    "value": "750"
   },
   {
    "value": "751"
   },
   {
    "value": "752"
   },
   {
    "value": "753"
   },
   {
    "value": "754"
   },
   {
    "value": "755"
   },
   {
    "value": "756"
   },
   {
    "value": "757"
   },
   {
    "value": "758"
   },
   {
    "value": "759"
   },
   {
    "value": "760"
   },
   {
    "value": "761"
   },
   {
    "value": "762"
   },
   {
    "value": "763"
   },
   {
    "value": "764"
   },
   {
    "value": "765"
   },
   {
    "value": "766"
   },
   {
    "value": "767"
   },
   {
    "value": "768"
   },
   {
    "value": "769"
   },
   {
    "value": "770"
   },
   {
    "value": "771"
   },
   {
    "value": "772"
   },
   {
    "value": "773"
   },
   {
    "value": "774"
   },
   {
    "value": "775"
   },
   {
    "value": "776"
   },
   {
    "value": "777"
   },
   {
    "value": "778"
   },
   {
    "value": "779"
   },
   {
    "value": "780"
   },
   {
    "value": "781"
   },
   {
    "value": "782"
   },
   {
    "value": "783"
   },
   {
    "value": "784"
   },
   {
    "value": "785"
   },
   {
    "value": "786"
   },
   {
    "value": "787"
   },
   {
    "value": "788"
   },
   {
    "value": "789"
   },
   {
    "value": "790"
   },
   {
    "value": "791"
   },
   {
    "value": "792"
   },
   {
    "value": "793"
   },
   {
    "value": "794"
   },
   {
    "value": "795"
   },
   {
    "value": "796"
   },
   {
    "value": "797"
   },
   {
    "value": "798"
   },
   {
    "value": "799"
   },
   {
    "value": "800"
   },
   {
    "value": "801"
   },
   {
    "value": "802"
   },
   {
    "value": "803"
   },
   {
    "value": "804"
   },
   {
    "value": "805"
   },
   {
    "value": "806"
   },
   {
    "value": "807"
   },
   {
    "value": "808"
   },
   {
    "value": "809"
   },
   {
    "value": "810"
   },
   {
    "value": "811"
   },
   {
    "value": "812"
   },
   {
    "value": "813"
   },
   {
    "value": "814"
   },
   {
    "value": "815"
   },
   {
    "value": "816"
   },
   {
    "value": "817"
   },
   {
    "value": "818"
   },
   {
    "value": "819"
   },
   {
    "value": "820"
   },
   {
    "value": "821"
   },
   {
    "value": "822"
   },
   {
    "value": "823"
   },
   {
    "value": "824"
   },
   {
    "value": "825"
   },
   {
    "value": "826"
   },
   {
    "value": "827"
   },
   {
    "value": "828"
   },
   {
    "value": "829"
   },
   {
    "value": "830"
   },
   {
    "value": "831"
   },
   {
    "value": "832"
   },
   {
    "value": "833"
   },
   {
    "value": "834"
   },
   {
    "value": "835"
   },
   {
    "value": "836"
   },
   {
    "value": "837"
   },
   {
    "value": "838"
   },
   {
    "value": "839"
   },
   {
    "value": "840"
   },
   {
    "value": "841"
   },
   {
    "value": "842"
   },
   {
    "value": "843"
   },
   {
    "value": "844"
   },
   {
    "value": "845"
   },
   {
    "value": "846"
   },
   {
    "value": "847"
   },
   {
    "value": "848"
   },
   {
    "value": "849"
   },
   {
    "value": "850"
   },
   {
    "value": "851"
   },
   {
    "value": "852"
   },
   {
    "value": "853"
   },
   {
    "value": "854"
   },
   {
    "value": "855"
   },
   {
    "value": "856"
   },
   {
    "value": "857"
   },
   {
    "value": "858"
   },
   {
    "value": "859"
   },
   {
    "value": "860"
   },
   {
    "value": "861"
   },
   {
    "value": "862"
   },
   {
    "value": "863"
   },
   {
    "value": "864"
   },
   {
    "value": "865"
   },
   {
    "value": "866"
   },
   {
    "value": "867"
   },
   {
    "value": "868"
   },
   {
    "value": "869"
   },
   {
    "value": "870"
   },
   {
    "value": "871"
   },
   {
    "value": "872"
   },
   {
    "value": "873"
   },
   {
    "value": "874"
   },
   {
    "value": "875"
   },
   {
    "value": "876"
   },
   {
    "value": "877"
   },
   {
    "value": "878"
   },
   {
    "value": "879"
   },
   {
    "value": "880"
   },
   {
    "value": "881"
   },
   {
    "value": "882"
   },
   {
    "value": "883"
   },
   {
    "value": "884"
   },
   {
    "value": "885"
   },
   {
    "value": "886"
   },
   {
    "value": "887"
   },
   {
    "value": "888"
   },
   {
    "value": "889"
   },
   {
    "value": "890"
   },
   {
    "value": "891"
   },
   {
    "value": "892"
   },
   {
    "value": "893"
   },
   {
    "value": "894"
   },
   {
    "value": "895"
   },
   {
    "value": "896"
   },
   {
    "value": "897"
   },
   {
    "value": "898"
   },
   {
    "value": "899"
   },
   {
    "value": "900"
   },
   {
    "value": "901"
   },
   {
    "value": "902"
   },
   {
    "value": "903"
   },
   {
    "value": "904"
   },
   {
    "value": "905"
   },
   {
    "value": "906"
   },
   {
    "value": "907"
   },
   {
    "value": "908"
   },
   {
    "value": "909"
   },
   {
    "value": "910"
   },
   {
    "value": "911"
   },
   {
    "value": "912"
   },
   {
    "value": "913"
   },
   {
    "value": "914"
   },
   {
    "value": "915"
   },
   {
    "value": "916"
   },
   {
    "value": "917"
   },
   {
    "value": "918"
   },
   {
    "value": "919"
   },
   {
    "value": "920"
   },
   {
    "value": "921"
   },
   {
    "value": "922"
   },
   {
    "value": "923"
   },
   {
    "value": "924"
   },
   {
    "value": "925"
   },
   {
    "value": "926"
   },
   {
    "value": "927"
   },
   {
    "value": "928"
   },
   {
    "value": "929"
   },
   {
    "value": "930"
   },
   {
    "value": "931"
   },
   {
    "value": "932"
   },
   {
    "value": "933"
   },
   {
    "value": "934"
   },
   {
    "value": "935"
   },
   {
    "value": "936"
   },
   {
    "value": "937"
   },
   {
    "value": "938"
   },
   {
    "value": "939"
   },
   {
    "value": "940"
   },
   {
    "value": "941"
   },
   {
    "value": "942"
   },
   {
    "value": "943"
   },
   {
    "value": "944"
   },
   {
    "value": "945"
   },
   {
    "value": "946"
   },
   {
    "value": "947"
   },
   {
    "value": "948"
   },
   {
    "value": "949"
   },
   {
    "value": "950"
   },
   {
    "value": "951"
   },
   {
    "value": "952"
   },
   {
    "value": "953"
   },
   {
    "value": "954"
   },
   {
    "value": "955"
   },
   {
    "value": "956"
   },
   {
    "value": "957"
   },
   {
    "value": "958"
   },
   {
    "value": "959"
   },
   {
    "value": "960"
   },
   {
    "value": "961"
   },
   {
    "value": "962"
   },
   {
    "value": "963"
   },
   {
    "value": "964"
   },
   {
    "value": "965"
   },
   {
    "value": "966"
   },
   {
    "value": "967"
   },
   {
    "value": "968"
   },
   {
    "value": "969"
   },
   {
    "value": "970"
   },
   {
    "value": "971"
   },
   {
    "value": "972"
   },
   {
    "value": "973"
   },
   {
    "value": "974"
   },
   {
    "value": "975"
   },
   {
    "value": "976"
   },
   {
    "value": "977"
   },
   {
    "value": "978"
   },
   {
    "value": "979"
   },
   {
    "value": "980"
   },
   {
    "value": "981"
   },
   {
    "value": "982"
   },
   {
    "value": "983"
   },
   {
    "value": "984"
   },
   {
    "value": "985"
   },
   {
    "value": "986"
   },
   {
    "value": "987"
   },
   {
    "value": "988"
   },
   {
    "value": "989"
   },
   {
    "value": "990"
   },
   {
    "value": "991"
   },
   {
    "value": "992"
   },
   {
    "value": "993"
   },
   {
    "value": "994"
   },
   {
    "value": "995"
   },
   {
    "value": "996"
   },
   {
    "value": "997"
   },
   {
    "value": "998"
   },
   {
    "value": "999"
   },
   {
    "value": "1000"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.count > 499}"
   },
   {
    "istrue": "{!v.count > 999}"
   }
  ]
 },
 "cmp.miscTest.ui_outputPhone": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "count",
    "type": "Integer",
    "default": "1"
   }
  ],
  "cmp.ui.outputphone": [
   {
    "value": "555-555-0001"
   },
   {
    "value": "555-555-0002"
   },
   {
    "value": "555-555-0003"
   },
   {
    "value": "555-555-0004"
   },
   {
    "value": "555-555-0005"
   },
   {
    "value": "555-555-0006"
   },
   {
    "value": "555-555-0007"
   },
   {
    "value": "555-555-0008"
   },
   {
    "value": "555-555-0009"
   },
   {
    "value": "555-555-0010"
   },
   {
    "value": "555-555-0011"
   },
   {
    "value": "555-555-0012"
   },
   {
    "value": "555-555-0013"
   },
   {
    "value": "555-555-0014"
   },
   {
    "value": "555-555-0015"
   },
   {
    "value": "555-555-0016"
   },
   {
    "value": "555-555-0017"
   },
   {
    "value": "555-555-0018"
   },
   {
    "value": "555-555-0019"
   },
   {
    "value": "555-555-0020"
   },
   {
    "value": "555-555-0021"
   },
   {
    "value": "555-555-0022"
   },
   {
    "value": "555-555-0023"
   },
   {
    "value": "555-555-0024"
   },
   {
    "value": "555-555-0025"
   },
   {
    "value": "555-555-0026"
   },
   {
    "value": "555-555-0027"
   },
   {
    "value": "555-555-0028"
   },
   {
    "value": "555-555-0029"
   },
   {
    "value": "555-555-0030"
   },
   {
    "value": "555-555-0031"
   },
   {
    "value": "555-555-0032"
   },
   {
    "value": "555-555-0033"
   },
   {
    "value": "555-555-0034"
   },
   {
    "value": "555-555-0035"
   },
   {
    "value": "555-555-0036"
   },
   {
    "value": "555-555-0037"
   },
   {
    "value": "555-555-0038"
   },
   {
    "value": "555-555-0039"
   },
   {
    "value": "555-555-0040"
   },
   {
    "value": "555-555-0041"
   },
   {
    "value": "555-555-0042"
   },
   {
    "value": "555-555-0043"
   },
   {
    "value": "555-555-0044"
   },
   {
    "value": "555-555-0045"
   },
   {
    "value": "555-555-0046"
   },
   {
    "value": "555-555-0047"
   },
   {
    "value": "555-555-0048"
   },
   {
    "value": "555-555-0049"
   },
   {
    "value": "555-555-0050"
   },
   {
    "value": "555-555-0051"
   },
   {
    "value": "555-555-0052"
   },
   {
    "value": "555-555-0053"
   },
   {
    "value": "555-555-0054"
   },
   {
    "value": "555-555-0055"
   },
   {
    "value": "555-555-0056"
   },
   {
    "value": "555-555-0057"
   },
   {
    "value": "555-555-0058"
   },
   {
    "value": "555-555-0059"
   },
   {
    "value": "555-555-0060"
   },
   {
    "value": "555-555-0061"
   },
   {
    "value": "555-555-0062"
   },
   {
    "value": "555-555-0063"
   },
   {
    "value": "555-555-0064"
   },
   {
    "value": "555-555-0065"
   },
   {
    "value": "555-555-0066"
   },
   {
    "value": "555-555-0067"
   },
   {
    "value": "555-555-0068"
   },
   {
    "value": "555-555-0069"
   },
   {
    "value": "555-555-0070"
   },
   {
    "value": "555-555-0071"
   },
   {
    "value": "555-555-0072"
   },
   {
    "value": "555-555-0073"
   },
   {
    "value": "555-555-0074"
   },
   {
    "value": "555-555-0075"
   },
   {
    "value": "555-555-0076"
   },
   {
    "value": "555-555-0077"
   },
   {
    "value": "555-555-0078"
   },
   {
    "value": "555-555-0079"
   },
   {
    "value": "555-555-0080"
   },
   {
    "value": "555-555-0081"
   },
   {
    "value": "555-555-0082"
   },
   {
    "value": "555-555-0083"
   },
   {
    "value": "555-555-0084"
   },
   {
    "value": "555-555-0085"
   },
   {
    "value": "555-555-0086"
   },
   {
    "value": "555-555-0087"
   },
   {
    "value": "555-555-0088"
   },
   {
    "value": "555-555-0089"
   },
   {
    "value": "555-555-0090"
   },
   {
    "value": "555-555-0091"
   },
   {
    "value": "555-555-0092"
   },
   {
    "value": "555-555-0093"
   },
   {
    "value": "555-555-0094"
   },
   {
    "value": "555-555-0095"
   },
   {
    "value": "555-555-0096"
   },
   {
    "value": "555-555-0097"
   },
   {
    "value": "555-555-0098"
   },
   {
    "value": "555-555-0099"
   },
   {
    "value": "555-555-0100"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.count > 49}"
   },
   {
    "istrue": "{!v.count > 99}"
   }
  ]
 },
 "cmp.miscTest.ui_outputText": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "count",
    "type": "Integer",
    "default": "1"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "1. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "2. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "3. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "4. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "5. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "6. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "7. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "8. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "9. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "10. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "11. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "12. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "13. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "14. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "15. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "16. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "17. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "18. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "19. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "20. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "21. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "22. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "23. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "24. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "25. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "26. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "27. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "28. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "29. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "30. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "31. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "32. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "33. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "34. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "35. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "36. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "37. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "38. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "39. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "40. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "41. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "42. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "43. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "44. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "45. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "46. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "47. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "48. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "49. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "50. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "51. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "52. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "53. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "54. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "55. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "56. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "57. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "58. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "59. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "60. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "61. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "62. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "63. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "64. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "65. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "66. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "67. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "68. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "69. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "70. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "71. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "72. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "73. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "74. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "75. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "76. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "77. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "78. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "79. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "80. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "81. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "82. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "83. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "84. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "85. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "86. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "87. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "88. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "89. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "90. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "91. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "92. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "93. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "94. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "95. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "96. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "97. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "98. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "99. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "100. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "101. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "102. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "103. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "104. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "105. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "106. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "107. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "108. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "109. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "110. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "111. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "112. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "113. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "114. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "115. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "116. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "117. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "118. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "119. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "120. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "121. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "122. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "123. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "124. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "125. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "126. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "127. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "128. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "129. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "130. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "131. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "132. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "133. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "134. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "135. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "136. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "137. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "138. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "139. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "140. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "141. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "142. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "143. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "144. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "145. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "146. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "147. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "148. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "149. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "150. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "151. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "152. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "153. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "154. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "155. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "156. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "157. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "158. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "159. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "160. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "161. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "162. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "163. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "164. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "165. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "166. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "167. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "168. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "169. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "170. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "171. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "172. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "173. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "174. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "175. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "176. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "177. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "178. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "179. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "180. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "181. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "182. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "183. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "184. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "185. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "186. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "187. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "188. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "189. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "190. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "191. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "192. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "193. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "194. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "195. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "196. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "197. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "198. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "199. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "200. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "201. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "202. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "203. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "204. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "205. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "206. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "207. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "208. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "209. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "210. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "211. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "212. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "213. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "214. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "215. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "216. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "217. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "218. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "219. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "220. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "221. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "222. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "223. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "224. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "225. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "226. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "227. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "228. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "229. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "230. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "231. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "232. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "233. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "234. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "235. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "236. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "237. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "238. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "239. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "240. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "241. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "242. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "243. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "244. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "245. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "246. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "247. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "248. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "249. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "250. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "251. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "252. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "253. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "254. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "255. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "256. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "257. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "258. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "259. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "260. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "261. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "262. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "263. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "264. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "265. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "266. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "267. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "268. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "269. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "270. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "271. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "272. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "273. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "274. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "275. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "276. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "277. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "278. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "279. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "280. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "281. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "282. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "283. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "284. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "285. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "286. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "287. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "288. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "289. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "290. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "291. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "292. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "293. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "294. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "295. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "296. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "297. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "298. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "299. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "300. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "301. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "302. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "303. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "304. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "305. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "306. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "307. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "308. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "309. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "310. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "311. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "312. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "313. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "314. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "315. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "316. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "317. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "318. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "319. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "320. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "321. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "322. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "323. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "324. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "325. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "326. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "327. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "328. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "329. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "330. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "331. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "332. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "333. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "334. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "335. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "336. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "337. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "338. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "339. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "340. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "341. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "342. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "343. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "344. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "345. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "346. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "347. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "348. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "349. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "350. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "351. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "352. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "353. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "354. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "355. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "356. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "357. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "358. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "359. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "360. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "361. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "362. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "363. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "364. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "365. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "366. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "367. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "368. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "369. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "370. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "371. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "372. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "373. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "374. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "375. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "376. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "377. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "378. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "379. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "380. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "381. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "382. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "383. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "384. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "385. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "386. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "387. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "388. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "389. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "390. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "391. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "392. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "393. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "394. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "395. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "396. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "397. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "398. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "399. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "400. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "401. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "402. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "403. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "404. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "405. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "406. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "407. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "408. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "409. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "410. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "411. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "412. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "413. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "414. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "415. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "416. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "417. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "418. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "419. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "420. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "421. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "422. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "423. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "424. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "425. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "426. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "427. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "428. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "429. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "430. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "431. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "432. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "433. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "434. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "435. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "436. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "437. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "438. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "439. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "440. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "441. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "442. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "443. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "444. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "445. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "446. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "447. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "448. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "449. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "450. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "451. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "452. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "453. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "454. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "455. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "456. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "457. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "458. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "459. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "460. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "461. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "462. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "463. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "464. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "465. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "466. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "467. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "468. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "469. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "470. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "471. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "472. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "473. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "474. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "475. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "476. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "477. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "478. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "479. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "480. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "481. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "482. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "483. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "484. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "485. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "486. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "487. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "488. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "489. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "490. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "491. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "492. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "493. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "494. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "495. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "496. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "497. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "498. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "499. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "500. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "501. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "502. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "503. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "504. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "505. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "506. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "507. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "508. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "509. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "510. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "511. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "512. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "513. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "514. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "515. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "516. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "517. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "518. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "519. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "520. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "521. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "522. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "523. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "524. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "525. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "526. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "527. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "528. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "529. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "530. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "531. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "532. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "533. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "534. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "535. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "536. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "537. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "538. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "539. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "540. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "541. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "542. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "543. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "544. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "545. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "546. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "547. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "548. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "549. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "550. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "551. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "552. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "553. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "554. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "555. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "556. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "557. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "558. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "559. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "560. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "561. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "562. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "563. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "564. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "565. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "566. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "567. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "568. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "569. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "570. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "571. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "572. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "573. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "574. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "575. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "576. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "577. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "578. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "579. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "580. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "581. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "582. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "583. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "584. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "585. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "586. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "587. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "588. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "589. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "590. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "591. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "592. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "593. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "594. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "595. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "596. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "597. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "598. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "599. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "600. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "601. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "602. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "603. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "604. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "605. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "606. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "607. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "608. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "609. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "610. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "611. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "612. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "613. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "614. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "615. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "616. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "617. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "618. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "619. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "620. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "621. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "622. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "623. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "624. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "625. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "626. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "627. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "628. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "629. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "630. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "631. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "632. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "633. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "634. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "635. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "636. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "637. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "638. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "639. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "640. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "641. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "642. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "643. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "644. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "645. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "646. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "647. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "648. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "649. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "650. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "651. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "652. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "653. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "654. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "655. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "656. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "657. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "658. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "659. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "660. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "661. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "662. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "663. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "664. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "665. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "666. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "667. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "668. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "669. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "670. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "671. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "672. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "673. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "674. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "675. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "676. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "677. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "678. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "679. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "680. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "681. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "682. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "683. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "684. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "685. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "686. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "687. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "688. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "689. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "690. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "691. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "692. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "693. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "694. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "695. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "696. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "697. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "698. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "699. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "700. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "701. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "702. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "703. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "704. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "705. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "706. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "707. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "708. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "709. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "710. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "711. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "712. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "713. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "714. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "715. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "716. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "717. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "718. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "719. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "720. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "721. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "722. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "723. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "724. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "725. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "726. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "727. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "728. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "729. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "730. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "731. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "732. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "733. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "734. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "735. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "736. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "737. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "738. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "739. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "740. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "741. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "742. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "743. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "744. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "745. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "746. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "747. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "748. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "749. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "750. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "751. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "752. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "753. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "754. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "755. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "756. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "757. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "758. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "759. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "760. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "761. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "762. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "763. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "764. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "765. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "766. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "767. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "768. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "769. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "770. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "771. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "772. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "773. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "774. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "775. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "776. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "777. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "778. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "779. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "780. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "781. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "782. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "783. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "784. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "785. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "786. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "787. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "788. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "789. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "790. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "791. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "792. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "793. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "794. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "795. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "796. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "797. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "798. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "799. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "800. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "801. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "802. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "803. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "804. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "805. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "806. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "807. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "808. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "809. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "810. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "811. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "812. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "813. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "814. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "815. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "816. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "817. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "818. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "819. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "820. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "821. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "822. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "823. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "824. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "825. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "826. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "827. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "828. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "829. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "830. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "831. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "832. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "833. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "834. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "835. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "836. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "837. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "838. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "839. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "840. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "841. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "842. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "843. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "844. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "845. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "846. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "847. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "848. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "849. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "850. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "851. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "852. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "853. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "854. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "855. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "856. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "857. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "858. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "859. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "860. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "861. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "862. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "863. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "864. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "865. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "866. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "867. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "868. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "869. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "870. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "871. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "872. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "873. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "874. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "875. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "876. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "877. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "878. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "879. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "880. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "881. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "882. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "883. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "884. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "885. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "886. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "887. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "888. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "889. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "890. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "891. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "892. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "893. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "894. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "895. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "896. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "897. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "898. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "899. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "900. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "901. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "902. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "903. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "904. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "905. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "906. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "907. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "908. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "909. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "910. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "911. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "912. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "913. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "914. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "915. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "916. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "917. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "918. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "919. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "920. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "921. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "922. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "923. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "924. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "925. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "926. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "927. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "928. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "929. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "930. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "931. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "932. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "933. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "934. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "935. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "936. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "937. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "938. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "939. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "940. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "941. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "942. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "943. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "944. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "945. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "946. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "947. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "948. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "949. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "950. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "951. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "952. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "953. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "954. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "955. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "956. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "957. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "958. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "959. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "960. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "961. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "962. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "963. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "964. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "965. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "966. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "967. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "968. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "969. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "970. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "971. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "972. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "973. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "974. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "975. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "976. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "977. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "978. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "979. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "980. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "981. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "982. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "983. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "984. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "985. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "986. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "987. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "988. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "989. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "990. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "991. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "992. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "993. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "994. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "995. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "996. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "997. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "998. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "999. abcdefghijklmnopqrstuvwxyz"
   },
   {
    "value": "1000. abcdefghijklmnopqrstuvwxyz"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.count > 499}"
   },
   {
    "istrue": "{!v.count > 999}"
   }
  ]
 },
 "cmp.miscTest.ui_tabset": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "caseToRender",
    "type": "String",
    "default": "0",
    "description": "Which item you want rendered. Valid items are: iteration, 10, 100, 1000"
   },
   {
    "name": "items",
    "type": "List",
    "description": "list element for iteration. You can have 100 items rendered through iteration max",
    "default": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000"
   },
   {
    "name": "endIndex",
    "type": "Integer",
    "default": "100",
    "description": "How many tabs you want rendered with iteration"
   },
   {
    "name": "lazyRenderTabs",
    "type": "Boolean",
    "default": "false",
    "description": "Whether the body of the tab should be rendered when it is needed or right away"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.caseToRender == 'iteration'}"
   },
   {
    "istrue": "{!v.caseToRender == '10'}"
   },
   {
    "istrue": "{!v.caseToRender == '100'}"
   },
   {
    "istrue": "{!v.caseToRender == '1000'}"
   }
  ],
  "cmp.ui.tabset": [
   {
    "aura:id": "tabset1",
    "class": "tabset1",
    "lazyrendertabs": "{!v.lazyRenderTabs}"
   },
   {
    "aura:id": "tabset1",
    "class": "tabset1",
    "lazyrendertabs": "{!v.lazyRenderTabs}"
   },
   {
    "aura:id": "tabset2",
    "class": "tabset2",
    "lazyrendertabs": "{!v.lazyRenderTabs}"
   },
   {
    "aura:id": "tabset3",
    "class": "tabset3",
    "lazyrendertabs": "{!true}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.items}",
    "var": "indicie",
    "start": "0",
    "end": "{!v.endIndex}"
   }
  ],
  "cmp.ui.tab": [
   {
    "title": "{!'tab'+ indicie}"
   },
   {
    "title": "tab0"
   },
   {
    "title": "tab1"
   },
   {
    "title": "tab2"
   },
   {
    "title": "tab3"
   },
   {
    "title": "tab4"
   },
   {
    "title": "tab5"
   },
   {
    "title": "tab6"
   },
   {
    "title": "tab7"
   },
   {
    "title": "tab8"
   },
   {
    "title": "tab9"
   },
   {
    "title": "tab0"
   },
   {
    "title": "tab1"
   },
   {
    "title": "tab2"
   },
   {
    "title": "tab3"
   },
   {
    "title": "tab4"
   },
   {
    "title": "tab5"
   },
   {
    "title": "tab6"
   },
   {
    "title": "tab7"
   },
   {
    "title": "tab8"
   },
   {
    "title": "tab9"
   },
   {
    "title": "tab10"
   },
   {
    "title": "tab11"
   },
   {
    "title": "tab12"
   },
   {
    "title": "tab13"
   },
   {
    "title": "tab14"
   },
   {
    "title": "tab15"
   },
   {
    "title": "tab16"
   },
   {
    "title": "tab17"
   },
   {
    "title": "tab18"
   },
   {
    "title": "tab19"
   },
   {
    "title": "tab20"
   },
   {
    "title": "tab21"
   },
   {
    "title": "tab22"
   },
   {
    "title": "tab23"
   },
   {
    "title": "tab24"
   },
   {
    "title": "tab25"
   },
   {
    "title": "tab26"
   },
   {
    "title": "tab27"
   },
   {
    "title": "tab28"
   },
   {
    "title": "tab29"
   },
   {
    "title": "tab30"
   },
   {
    "title": "tab31"
   },
   {
    "title": "tab32"
   },
   {
    "title": "tab33"
   },
   {
    "title": "tab34"
   },
   {
    "title": "tab35"
   },
   {
    "title": "tab36"
   },
   {
    "title": "tab37"
   },
   {
    "title": "tab38"
   },
   {
    "title": "tab39"
   },
   {
    "title": "tab40"
   },
   {
    "title": "tab41"
   },
   {
    "title": "tab42"
   },
   {
    "title": "tab43"
   },
   {
    "title": "tab44"
   },
   {
    "title": "tab45"
   },
   {
    "title": "tab46"
   },
   {
    "title": "tab47"
   },
   {
    "title": "tab48"
   },
   {
    "title": "tab49"
   },
   {
    "title": "tab50"
   },
   {
    "title": "tab51"
   },
   {
    "title": "tab52"
   },
   {
    "title": "tab53"
   },
   {
    "title": "tab54"
   },
   {
    "title": "tab55"
   },
   {
    "title": "tab56"
   },
   {
    "title": "tab57"
   },
   {
    "title": "tab58"
   },
   {
    "title": "tab59"
   },
   {
    "title": "tab60"
   },
   {
    "title": "tab61"
   },
   {
    "title": "tab62"
   },
   {
    "title": "tab63"
   },
   {
    "title": "tab64"
   },
   {
    "title": "tab65"
   },
   {
    "title": "tab66"
   },
   {
    "title": "tab67"
   },
   {
    "title": "tab68"
   },
   {
    "title": "tab69"
   },
   {
    "title": "tab70"
   },
   {
    "title": "tab71"
   },
   {
    "title": "tab72"
   },
   {
    "title": "tab73"
   },
   {
    "title": "tab74"
   },
   {
    "title": "tab75"
   },
   {
    "title": "tab76"
   },
   {
    "title": "tab77"
   },
   {
    "title": "tab78"
   },
   {
    "title": "tab79"
   },
   {
    "title": "tab80"
   },
   {
    "title": "tab81"
   },
   {
    "title": "tab82"
   },
   {
    "title": "tab83"
   },
   {
    "title": "tab84"
   },
   {
    "title": "tab85"
   },
   {
    "title": "tab86"
   },
   {
    "title": "tab87"
   },
   {
    "title": "tab88"
   },
   {
    "title": "tab89"
   },
   {
    "title": "tab90"
   },
   {
    "title": "tab91"
   },
   {
    "title": "tab92"
   },
   {
    "title": "tab93"
   },
   {
    "title": "tab94"
   },
   {
    "title": "tab95"
   },
   {
    "title": "tab96"
   },
   {
    "title": "tab97"
   },
   {
    "title": "tab98"
   },
   {
    "title": "tab99"
   },
   {
    "title": "tab0"
   },
   {
    "title": "tab1"
   },
   {
    "title": "tab2"
   },
   {
    "title": "tab3"
   },
   {
    "title": "tab4"
   },
   {
    "title": "tab5"
   },
   {
    "title": "tab6"
   },
   {
    "title": "tab7"
   },
   {
    "title": "tab8"
   },
   {
    "title": "tab9"
   },
   {
    "title": "tab10"
   },
   {
    "title": "tab11"
   },
   {
    "title": "tab12"
   },
   {
    "title": "tab13"
   },
   {
    "title": "tab14"
   },
   {
    "title": "tab15"
   },
   {
    "title": "tab16"
   },
   {
    "title": "tab17"
   },
   {
    "title": "tab18"
   },
   {
    "title": "tab19"
   },
   {
    "title": "tab20"
   },
   {
    "title": "tab21"
   },
   {
    "title": "tab22"
   },
   {
    "title": "tab23"
   },
   {
    "title": "tab24"
   },
   {
    "title": "tab25"
   },
   {
    "title": "tab26"
   },
   {
    "title": "tab27"
   },
   {
    "title": "tab28"
   },
   {
    "title": "tab29"
   },
   {
    "title": "tab30"
   },
   {
    "title": "tab31"
   },
   {
    "title": "tab32"
   },
   {
    "title": "tab33"
   },
   {
    "title": "tab34"
   },
   {
    "title": "tab35"
   },
   {
    "title": "tab36"
   },
   {
    "title": "tab37"
   },
   {
    "title": "tab38"
   },
   {
    "title": "tab39"
   },
   {
    "title": "tab40"
   },
   {
    "title": "tab41"
   },
   {
    "title": "tab42"
   },
   {
    "title": "tab43"
   },
   {
    "title": "tab44"
   },
   {
    "title": "tab45"
   },
   {
    "title": "tab46"
   },
   {
    "title": "tab47"
   },
   {
    "title": "tab48"
   },
   {
    "title": "tab49"
   },
   {
    "title": "tab50"
   },
   {
    "title": "tab51"
   },
   {
    "title": "tab52"
   },
   {
    "title": "tab53"
   },
   {
    "title": "tab54"
   },
   {
    "title": "tab55"
   },
   {
    "title": "tab56"
   },
   {
    "title": "tab57"
   },
   {
    "title": "tab58"
   },
   {
    "title": "tab59"
   },
   {
    "title": "tab60"
   },
   {
    "title": "tab61"
   },
   {
    "title": "tab62"
   },
   {
    "title": "tab63"
   },
   {
    "title": "tab64"
   },
   {
    "title": "tab65"
   },
   {
    "title": "tab66"
   },
   {
    "title": "tab67"
   },
   {
    "title": "tab68"
   },
   {
    "title": "tab69"
   },
   {
    "title": "tab70"
   },
   {
    "title": "tab71"
   },
   {
    "title": "tab72"
   },
   {
    "title": "tab73"
   },
   {
    "title": "tab74"
   },
   {
    "title": "tab75"
   },
   {
    "title": "tab76"
   },
   {
    "title": "tab77"
   },
   {
    "title": "tab78"
   },
   {
    "title": "tab79"
   },
   {
    "title": "tab80"
   },
   {
    "title": "tab81"
   },
   {
    "title": "tab82"
   },
   {
    "title": "tab83"
   },
   {
    "title": "tab84"
   },
   {
    "title": "tab85"
   },
   {
    "title": "tab86"
   },
   {
    "title": "tab87"
   },
   {
    "title": "tab88"
   },
   {
    "title": "tab89"
   },
   {
    "title": "tab90"
   },
   {
    "title": "tab91"
   },
   {
    "title": "tab92"
   },
   {
    "title": "tab93"
   },
   {
    "title": "tab94"
   },
   {
    "title": "tab95"
   },
   {
    "title": "tab96"
   },
   {
    "title": "tab97"
   },
   {
    "title": "tab98"
   },
   {
    "title": "tab99"
   },
   {
    "title": "tab100"
   },
   {
    "title": "tab101"
   },
   {
    "title": "tab102"
   },
   {
    "title": "tab103"
   },
   {
    "title": "tab104"
   },
   {
    "title": "tab105"
   },
   {
    "title": "tab106"
   },
   {
    "title": "tab107"
   },
   {
    "title": "tab108"
   },
   {
    "title": "tab109"
   },
   {
    "title": "tab110"
   },
   {
    "title": "tab111"
   },
   {
    "title": "tab112"
   },
   {
    "title": "tab113"
   },
   {
    "title": "tab114"
   },
   {
    "title": "tab115"
   },
   {
    "title": "tab116"
   },
   {
    "title": "tab117"
   },
   {
    "title": "tab118"
   },
   {
    "title": "tab119"
   },
   {
    "title": "tab120"
   },
   {
    "title": "tab121"
   },
   {
    "title": "tab122"
   },
   {
    "title": "tab123"
   },
   {
    "title": "tab124"
   },
   {
    "title": "tab125"
   },
   {
    "title": "tab126"
   },
   {
    "title": "tab127"
   },
   {
    "title": "tab128"
   },
   {
    "title": "tab129"
   },
   {
    "title": "tab130"
   },
   {
    "title": "tab131"
   },
   {
    "title": "tab132"
   },
   {
    "title": "tab133"
   },
   {
    "title": "tab134"
   },
   {
    "title": "tab135"
   },
   {
    "title": "tab136"
   },
   {
    "title": "tab137"
   },
   {
    "title": "tab138"
   },
   {
    "title": "tab139"
   },
   {
    "title": "tab140"
   },
   {
    "title": "tab141"
   },
   {
    "title": "tab142"
   },
   {
    "title": "tab143"
   },
   {
    "title": "tab144"
   },
   {
    "title": "tab145"
   },
   {
    "title": "tab146"
   },
   {
    "title": "tab147"
   },
   {
    "title": "tab148"
   },
   {
    "title": "tab149"
   },
   {
    "title": "tab150"
   },
   {
    "title": "tab151"
   },
   {
    "title": "tab152"
   },
   {
    "title": "tab153"
   },
   {
    "title": "tab154"
   },
   {
    "title": "tab155"
   },
   {
    "title": "tab156"
   },
   {
    "title": "tab157"
   },
   {
    "title": "tab158"
   },
   {
    "title": "tab159"
   },
   {
    "title": "tab160"
   },
   {
    "title": "tab161"
   },
   {
    "title": "tab162"
   },
   {
    "title": "tab163"
   },
   {
    "title": "tab164"
   },
   {
    "title": "tab165"
   },
   {
    "title": "tab166"
   },
   {
    "title": "tab167"
   },
   {
    "title": "tab168"
   },
   {
    "title": "tab169"
   },
   {
    "title": "tab170"
   },
   {
    "title": "tab171"
   },
   {
    "title": "tab172"
   },
   {
    "title": "tab173"
   },
   {
    "title": "tab174"
   },
   {
    "title": "tab175"
   },
   {
    "title": "tab176"
   },
   {
    "title": "tab177"
   },
   {
    "title": "tab178"
   },
   {
    "title": "tab179"
   },
   {
    "title": "tab180"
   },
   {
    "title": "tab181"
   },
   {
    "title": "tab182"
   },
   {
    "title": "tab183"
   },
   {
    "title": "tab184"
   },
   {
    "title": "tab185"
   },
   {
    "title": "tab186"
   },
   {
    "title": "tab187"
   },
   {
    "title": "tab188"
   },
   {
    "title": "tab189"
   },
   {
    "title": "tab190"
   },
   {
    "title": "tab191"
   },
   {
    "title": "tab192"
   },
   {
    "title": "tab193"
   },
   {
    "title": "tab194"
   },
   {
    "title": "tab195"
   },
   {
    "title": "tab196"
   },
   {
    "title": "tab197"
   },
   {
    "title": "tab198"
   },
   {
    "title": "tab199"
   },
   {
    "title": "tab200"
   },
   {
    "title": "tab201"
   },
   {
    "title": "tab202"
   },
   {
    "title": "tab203"
   },
   {
    "title": "tab204"
   },
   {
    "title": "tab205"
   },
   {
    "title": "tab206"
   },
   {
    "title": "tab207"
   },
   {
    "title": "tab208"
   },
   {
    "title": "tab209"
   },
   {
    "title": "tab210"
   },
   {
    "title": "tab211"
   },
   {
    "title": "tab212"
   },
   {
    "title": "tab213"
   },
   {
    "title": "tab214"
   },
   {
    "title": "tab215"
   },
   {
    "title": "tab216"
   },
   {
    "title": "tab217"
   },
   {
    "title": "tab218"
   },
   {
    "title": "tab219"
   },
   {
    "title": "tab220"
   },
   {
    "title": "tab221"
   },
   {
    "title": "tab222"
   },
   {
    "title": "tab223"
   },
   {
    "title": "tab224"
   },
   {
    "title": "tab225"
   },
   {
    "title": "tab226"
   },
   {
    "title": "tab227"
   },
   {
    "title": "tab228"
   },
   {
    "title": "tab229"
   },
   {
    "title": "tab230"
   },
   {
    "title": "tab231"
   },
   {
    "title": "tab232"
   },
   {
    "title": "tab233"
   },
   {
    "title": "tab234"
   },
   {
    "title": "tab235"
   },
   {
    "title": "tab236"
   },
   {
    "title": "tab237"
   },
   {
    "title": "tab238"
   },
   {
    "title": "tab239"
   },
   {
    "title": "tab240"
   },
   {
    "title": "tab241"
   },
   {
    "title": "tab242"
   },
   {
    "title": "tab243"
   },
   {
    "title": "tab244"
   },
   {
    "title": "tab245"
   },
   {
    "title": "tab246"
   },
   {
    "title": "tab247"
   },
   {
    "title": "tab248"
   },
   {
    "title": "tab249"
   },
   {
    "title": "tab250"
   },
   {
    "title": "tab251"
   },
   {
    "title": "tab252"
   },
   {
    "title": "tab253"
   },
   {
    "title": "tab254"
   },
   {
    "title": "tab255"
   },
   {
    "title": "tab256"
   },
   {
    "title": "tab257"
   },
   {
    "title": "tab258"
   },
   {
    "title": "tab259"
   },
   {
    "title": "tab260"
   },
   {
    "title": "tab261"
   },
   {
    "title": "tab262"
   },
   {
    "title": "tab263"
   },
   {
    "title": "tab264"
   },
   {
    "title": "tab265"
   },
   {
    "title": "tab266"
   },
   {
    "title": "tab267"
   },
   {
    "title": "tab268"
   },
   {
    "title": "tab269"
   },
   {
    "title": "tab270"
   },
   {
    "title": "tab271"
   },
   {
    "title": "tab272"
   },
   {
    "title": "tab273"
   },
   {
    "title": "tab274"
   },
   {
    "title": "tab275"
   },
   {
    "title": "tab276"
   },
   {
    "title": "tab277"
   },
   {
    "title": "tab278"
   },
   {
    "title": "tab279"
   },
   {
    "title": "tab280"
   },
   {
    "title": "tab281"
   },
   {
    "title": "tab282"
   },
   {
    "title": "tab283"
   },
   {
    "title": "tab284"
   },
   {
    "title": "tab285"
   },
   {
    "title": "tab286"
   },
   {
    "title": "tab287"
   },
   {
    "title": "tab288"
   },
   {
    "title": "tab289"
   },
   {
    "title": "tab290"
   },
   {
    "title": "tab291"
   },
   {
    "title": "tab292"
   },
   {
    "title": "tab293"
   },
   {
    "title": "tab294"
   },
   {
    "title": "tab295"
   },
   {
    "title": "tab296"
   },
   {
    "title": "tab297"
   },
   {
    "title": "tab298"
   },
   {
    "title": "tab299"
   },
   {
    "title": "tab300"
   },
   {
    "title": "tab301"
   },
   {
    "title": "tab302"
   },
   {
    "title": "tab303"
   },
   {
    "title": "tab304"
   },
   {
    "title": "tab305"
   },
   {
    "title": "tab306"
   },
   {
    "title": "tab307"
   },
   {
    "title": "tab308"
   },
   {
    "title": "tab309"
   },
   {
    "title": "tab310"
   },
   {
    "title": "tab311"
   },
   {
    "title": "tab312"
   },
   {
    "title": "tab313"
   },
   {
    "title": "tab314"
   },
   {
    "title": "tab315"
   },
   {
    "title": "tab316"
   },
   {
    "title": "tab317"
   },
   {
    "title": "tab318"
   },
   {
    "title": "tab319"
   },
   {
    "title": "tab320"
   },
   {
    "title": "tab321"
   },
   {
    "title": "tab322"
   },
   {
    "title": "tab323"
   },
   {
    "title": "tab324"
   },
   {
    "title": "tab325"
   },
   {
    "title": "tab326"
   },
   {
    "title": "tab327"
   },
   {
    "title": "tab328"
   },
   {
    "title": "tab329"
   },
   {
    "title": "tab330"
   },
   {
    "title": "tab331"
   },
   {
    "title": "tab332"
   },
   {
    "title": "tab333"
   },
   {
    "title": "tab334"
   },
   {
    "title": "tab335"
   },
   {
    "title": "tab336"
   },
   {
    "title": "tab337"
   },
   {
    "title": "tab338"
   },
   {
    "title": "tab339"
   },
   {
    "title": "tab340"
   },
   {
    "title": "tab341"
   },
   {
    "title": "tab342"
   },
   {
    "title": "tab343"
   },
   {
    "title": "tab344"
   },
   {
    "title": "tab345"
   },
   {
    "title": "tab346"
   },
   {
    "title": "tab347"
   },
   {
    "title": "tab348"
   },
   {
    "title": "tab349"
   },
   {
    "title": "tab350"
   },
   {
    "title": "tab351"
   },
   {
    "title": "tab352"
   },
   {
    "title": "tab353"
   },
   {
    "title": "tab354"
   },
   {
    "title": "tab355"
   },
   {
    "title": "tab356"
   },
   {
    "title": "tab357"
   },
   {
    "title": "tab358"
   },
   {
    "title": "tab359"
   },
   {
    "title": "tab360"
   },
   {
    "title": "tab361"
   },
   {
    "title": "tab362"
   },
   {
    "title": "tab363"
   },
   {
    "title": "tab364"
   },
   {
    "title": "tab365"
   },
   {
    "title": "tab366"
   },
   {
    "title": "tab367"
   },
   {
    "title": "tab368"
   },
   {
    "title": "tab369"
   },
   {
    "title": "tab370"
   },
   {
    "title": "tab371"
   },
   {
    "title": "tab372"
   },
   {
    "title": "tab373"
   },
   {
    "title": "tab374"
   },
   {
    "title": "tab375"
   },
   {
    "title": "tab376"
   },
   {
    "title": "tab377"
   },
   {
    "title": "tab378"
   },
   {
    "title": "tab379"
   },
   {
    "title": "tab380"
   },
   {
    "title": "tab381"
   },
   {
    "title": "tab382"
   },
   {
    "title": "tab383"
   },
   {
    "title": "tab384"
   },
   {
    "title": "tab385"
   },
   {
    "title": "tab386"
   },
   {
    "title": "tab387"
   },
   {
    "title": "tab388"
   },
   {
    "title": "tab389"
   },
   {
    "title": "tab390"
   },
   {
    "title": "tab391"
   },
   {
    "title": "tab392"
   },
   {
    "title": "tab393"
   },
   {
    "title": "tab394"
   },
   {
    "title": "tab395"
   },
   {
    "title": "tab396"
   },
   {
    "title": "tab397"
   },
   {
    "title": "tab398"
   },
   {
    "title": "tab399"
   },
   {
    "title": "tab400"
   },
   {
    "title": "tab401"
   },
   {
    "title": "tab402"
   },
   {
    "title": "tab403"
   },
   {
    "title": "tab404"
   },
   {
    "title": "tab405"
   },
   {
    "title": "tab406"
   },
   {
    "title": "tab407"
   },
   {
    "title": "tab408"
   },
   {
    "title": "tab409"
   },
   {
    "title": "tab410"
   },
   {
    "title": "tab411"
   },
   {
    "title": "tab412"
   },
   {
    "title": "tab413"
   },
   {
    "title": "tab414"
   },
   {
    "title": "tab415"
   },
   {
    "title": "tab416"
   },
   {
    "title": "tab417"
   },
   {
    "title": "tab418"
   },
   {
    "title": "tab419"
   },
   {
    "title": "tab420"
   },
   {
    "title": "tab421"
   },
   {
    "title": "tab422"
   },
   {
    "title": "tab423"
   },
   {
    "title": "tab424"
   },
   {
    "title": "tab425"
   },
   {
    "title": "tab426"
   },
   {
    "title": "tab427"
   },
   {
    "title": "tab428"
   },
   {
    "title": "tab429"
   },
   {
    "title": "tab430"
   },
   {
    "title": "tab431"
   },
   {
    "title": "tab432"
   },
   {
    "title": "tab433"
   },
   {
    "title": "tab434"
   },
   {
    "title": "tab435"
   },
   {
    "title": "tab436"
   },
   {
    "title": "tab437"
   },
   {
    "title": "tab438"
   },
   {
    "title": "tab439"
   },
   {
    "title": "tab440"
   },
   {
    "title": "tab441"
   },
   {
    "title": "tab442"
   },
   {
    "title": "tab443"
   },
   {
    "title": "tab444"
   },
   {
    "title": "tab445"
   },
   {
    "title": "tab446"
   },
   {
    "title": "tab447"
   },
   {
    "title": "tab448"
   },
   {
    "title": "tab449"
   },
   {
    "title": "tab450"
   },
   {
    "title": "tab451"
   },
   {
    "title": "tab452"
   },
   {
    "title": "tab453"
   },
   {
    "title": "tab454"
   },
   {
    "title": "tab455"
   },
   {
    "title": "tab456"
   },
   {
    "title": "tab457"
   },
   {
    "title": "tab458"
   },
   {
    "title": "tab459"
   },
   {
    "title": "tab460"
   },
   {
    "title": "tab461"
   },
   {
    "title": "tab462"
   },
   {
    "title": "tab463"
   },
   {
    "title": "tab464"
   },
   {
    "title": "tab465"
   },
   {
    "title": "tab466"
   },
   {
    "title": "tab467"
   },
   {
    "title": "tab468"
   },
   {
    "title": "tab469"
   },
   {
    "title": "tab470"
   },
   {
    "title": "tab471"
   },
   {
    "title": "tab472"
   },
   {
    "title": "tab473"
   },
   {
    "title": "tab474"
   },
   {
    "title": "tab475"
   },
   {
    "title": "tab476"
   },
   {
    "title": "tab477"
   },
   {
    "title": "tab478"
   },
   {
    "title": "tab479"
   },
   {
    "title": "tab480"
   },
   {
    "title": "tab481"
   },
   {
    "title": "tab482"
   },
   {
    "title": "tab483"
   },
   {
    "title": "tab484"
   },
   {
    "title": "tab485"
   },
   {
    "title": "tab486"
   },
   {
    "title": "tab487"
   },
   {
    "title": "tab488"
   },
   {
    "title": "tab489"
   },
   {
    "title": "tab490"
   },
   {
    "title": "tab491"
   },
   {
    "title": "tab492"
   },
   {
    "title": "tab493"
   },
   {
    "title": "tab494"
   },
   {
    "title": "tab495"
   },
   {
    "title": "tab496"
   },
   {
    "title": "tab497"
   },
   {
    "title": "tab498"
   },
   {
    "title": "tab499"
   },
   {
    "title": "tab500"
   },
   {
    "title": "tab501"
   },
   {
    "title": "tab502"
   },
   {
    "title": "tab503"
   },
   {
    "title": "tab504"
   },
   {
    "title": "tab505"
   },
   {
    "title": "tab506"
   },
   {
    "title": "tab507"
   },
   {
    "title": "tab508"
   },
   {
    "title": "tab509"
   },
   {
    "title": "tab510"
   },
   {
    "title": "tab511"
   },
   {
    "title": "tab512"
   },
   {
    "title": "tab513"
   },
   {
    "title": "tab514"
   },
   {
    "title": "tab515"
   },
   {
    "title": "tab516"
   },
   {
    "title": "tab517"
   },
   {
    "title": "tab518"
   },
   {
    "title": "tab519"
   },
   {
    "title": "tab520"
   },
   {
    "title": "tab521"
   },
   {
    "title": "tab522"
   },
   {
    "title": "tab523"
   },
   {
    "title": "tab524"
   },
   {
    "title": "tab525"
   },
   {
    "title": "tab526"
   },
   {
    "title": "tab527"
   },
   {
    "title": "tab528"
   },
   {
    "title": "tab529"
   },
   {
    "title": "tab530"
   },
   {
    "title": "tab531"
   },
   {
    "title": "tab532"
   },
   {
    "title": "tab533"
   },
   {
    "title": "tab534"
   },
   {
    "title": "tab535"
   },
   {
    "title": "tab536"
   },
   {
    "title": "tab537"
   },
   {
    "title": "tab538"
   },
   {
    "title": "tab539"
   },
   {
    "title": "tab540"
   },
   {
    "title": "tab541"
   },
   {
    "title": "tab542"
   },
   {
    "title": "tab543"
   },
   {
    "title": "tab544"
   },
   {
    "title": "tab545"
   },
   {
    "title": "tab546"
   },
   {
    "title": "tab547"
   },
   {
    "title": "tab548"
   },
   {
    "title": "tab549"
   },
   {
    "title": "tab550"
   },
   {
    "title": "tab551"
   },
   {
    "title": "tab552"
   },
   {
    "title": "tab553"
   },
   {
    "title": "tab554"
   },
   {
    "title": "tab555"
   },
   {
    "title": "tab556"
   },
   {
    "title": "tab557"
   },
   {
    "title": "tab558"
   },
   {
    "title": "tab559"
   },
   {
    "title": "tab560"
   },
   {
    "title": "tab561"
   },
   {
    "title": "tab562"
   },
   {
    "title": "tab563"
   },
   {
    "title": "tab564"
   },
   {
    "title": "tab565"
   },
   {
    "title": "tab566"
   },
   {
    "title": "tab567"
   },
   {
    "title": "tab568"
   },
   {
    "title": "tab569"
   },
   {
    "title": "tab570"
   },
   {
    "title": "tab571"
   },
   {
    "title": "tab572"
   },
   {
    "title": "tab573"
   },
   {
    "title": "tab574"
   },
   {
    "title": "tab575"
   },
   {
    "title": "tab576"
   },
   {
    "title": "tab577"
   },
   {
    "title": "tab578"
   },
   {
    "title": "tab579"
   },
   {
    "title": "tab580"
   },
   {
    "title": "tab581"
   },
   {
    "title": "tab582"
   },
   {
    "title": "tab583"
   },
   {
    "title": "tab584"
   },
   {
    "title": "tab585"
   },
   {
    "title": "tab586"
   },
   {
    "title": "tab587"
   },
   {
    "title": "tab588"
   },
   {
    "title": "tab589"
   },
   {
    "title": "tab590"
   },
   {
    "title": "tab591"
   },
   {
    "title": "tab592"
   },
   {
    "title": "tab593"
   },
   {
    "title": "tab594"
   },
   {
    "title": "tab595"
   },
   {
    "title": "tab596"
   },
   {
    "title": "tab597"
   },
   {
    "title": "tab598"
   },
   {
    "title": "tab599"
   },
   {
    "title": "tab600"
   },
   {
    "title": "tab601"
   },
   {
    "title": "tab602"
   },
   {
    "title": "tab603"
   },
   {
    "title": "tab604"
   },
   {
    "title": "tab605"
   },
   {
    "title": "tab606"
   },
   {
    "title": "tab607"
   },
   {
    "title": "tab608"
   },
   {
    "title": "tab609"
   },
   {
    "title": "tab610"
   },
   {
    "title": "tab611"
   },
   {
    "title": "tab612"
   },
   {
    "title": "tab613"
   },
   {
    "title": "tab614"
   },
   {
    "title": "tab615"
   },
   {
    "title": "tab616"
   },
   {
    "title": "tab617"
   },
   {
    "title": "tab618"
   },
   {
    "title": "tab619"
   },
   {
    "title": "tab620"
   },
   {
    "title": "tab621"
   },
   {
    "title": "tab622"
   },
   {
    "title": "tab623"
   },
   {
    "title": "tab624"
   },
   {
    "title": "tab625"
   },
   {
    "title": "tab626"
   },
   {
    "title": "tab627"
   },
   {
    "title": "tab628"
   },
   {
    "title": "tab629"
   },
   {
    "title": "tab630"
   },
   {
    "title": "tab631"
   },
   {
    "title": "tab632"
   },
   {
    "title": "tab633"
   },
   {
    "title": "tab634"
   },
   {
    "title": "tab635"
   },
   {
    "title": "tab636"
   },
   {
    "title": "tab637"
   },
   {
    "title": "tab638"
   },
   {
    "title": "tab639"
   },
   {
    "title": "tab640"
   },
   {
    "title": "tab641"
   },
   {
    "title": "tab642"
   },
   {
    "title": "tab643"
   },
   {
    "title": "tab644"
   },
   {
    "title": "tab645"
   },
   {
    "title": "tab646"
   },
   {
    "title": "tab647"
   },
   {
    "title": "tab648"
   },
   {
    "title": "tab649"
   },
   {
    "title": "tab650"
   },
   {
    "title": "tab651"
   },
   {
    "title": "tab652"
   },
   {
    "title": "tab653"
   },
   {
    "title": "tab654"
   },
   {
    "title": "tab655"
   },
   {
    "title": "tab656"
   },
   {
    "title": "tab657"
   },
   {
    "title": "tab658"
   },
   {
    "title": "tab659"
   },
   {
    "title": "tab660"
   },
   {
    "title": "tab661"
   },
   {
    "title": "tab662"
   },
   {
    "title": "tab663"
   },
   {
    "title": "tab664"
   },
   {
    "title": "tab665"
   },
   {
    "title": "tab666"
   },
   {
    "title": "tab667"
   },
   {
    "title": "tab668"
   },
   {
    "title": "tab669"
   },
   {
    "title": "tab670"
   },
   {
    "title": "tab671"
   },
   {
    "title": "tab672"
   },
   {
    "title": "tab673"
   },
   {
    "title": "tab674"
   },
   {
    "title": "tab675"
   },
   {
    "title": "tab676"
   },
   {
    "title": "tab677"
   },
   {
    "title": "tab678"
   },
   {
    "title": "tab679"
   },
   {
    "title": "tab680"
   },
   {
    "title": "tab681"
   },
   {
    "title": "tab682"
   },
   {
    "title": "tab683"
   },
   {
    "title": "tab684"
   },
   {
    "title": "tab685"
   },
   {
    "title": "tab686"
   },
   {
    "title": "tab687"
   },
   {
    "title": "tab688"
   },
   {
    "title": "tab689"
   },
   {
    "title": "tab690"
   },
   {
    "title": "tab691"
   },
   {
    "title": "tab692"
   },
   {
    "title": "tab693"
   },
   {
    "title": "tab694"
   },
   {
    "title": "tab695"
   },
   {
    "title": "tab696"
   },
   {
    "title": "tab697"
   },
   {
    "title": "tab698"
   },
   {
    "title": "tab699"
   },
   {
    "title": "tab700"
   },
   {
    "title": "tab701"
   },
   {
    "title": "tab702"
   },
   {
    "title": "tab703"
   },
   {
    "title": "tab704"
   },
   {
    "title": "tab705"
   },
   {
    "title": "tab706"
   },
   {
    "title": "tab707"
   },
   {
    "title": "tab708"
   },
   {
    "title": "tab709"
   },
   {
    "title": "tab710"
   },
   {
    "title": "tab711"
   },
   {
    "title": "tab712"
   },
   {
    "title": "tab713"
   },
   {
    "title": "tab714"
   },
   {
    "title": "tab715"
   },
   {
    "title": "tab716"
   },
   {
    "title": "tab717"
   },
   {
    "title": "tab718"
   },
   {
    "title": "tab719"
   },
   {
    "title": "tab720"
   },
   {
    "title": "tab721"
   },
   {
    "title": "tab722"
   },
   {
    "title": "tab723"
   },
   {
    "title": "tab724"
   },
   {
    "title": "tab725"
   },
   {
    "title": "tab726"
   },
   {
    "title": "tab727"
   },
   {
    "title": "tab728"
   },
   {
    "title": "tab729"
   },
   {
    "title": "tab730"
   },
   {
    "title": "tab731"
   },
   {
    "title": "tab732"
   },
   {
    "title": "tab733"
   },
   {
    "title": "tab734"
   },
   {
    "title": "tab735"
   },
   {
    "title": "tab736"
   },
   {
    "title": "tab737"
   },
   {
    "title": "tab738"
   },
   {
    "title": "tab739"
   },
   {
    "title": "tab740"
   },
   {
    "title": "tab741"
   },
   {
    "title": "tab742"
   },
   {
    "title": "tab743"
   },
   {
    "title": "tab744"
   },
   {
    "title": "tab745"
   },
   {
    "title": "tab746"
   },
   {
    "title": "tab747"
   },
   {
    "title": "tab748"
   },
   {
    "title": "tab749"
   },
   {
    "title": "tab750"
   },
   {
    "title": "tab751"
   },
   {
    "title": "tab752"
   },
   {
    "title": "tab753"
   },
   {
    "title": "tab754"
   },
   {
    "title": "tab755"
   },
   {
    "title": "tab756"
   },
   {
    "title": "tab757"
   },
   {
    "title": "tab758"
   },
   {
    "title": "tab759"
   },
   {
    "title": "tab760"
   },
   {
    "title": "tab761"
   },
   {
    "title": "tab762"
   },
   {
    "title": "tab763"
   },
   {
    "title": "tab764"
   },
   {
    "title": "tab765"
   },
   {
    "title": "tab766"
   },
   {
    "title": "tab767"
   },
   {
    "title": "tab768"
   },
   {
    "title": "tab769"
   },
   {
    "title": "tab770"
   },
   {
    "title": "tab771"
   },
   {
    "title": "tab772"
   },
   {
    "title": "tab773"
   },
   {
    "title": "tab774"
   },
   {
    "title": "tab775"
   },
   {
    "title": "tab776"
   },
   {
    "title": "tab777"
   },
   {
    "title": "tab778"
   },
   {
    "title": "tab779"
   },
   {
    "title": "tab780"
   },
   {
    "title": "tab781"
   },
   {
    "title": "tab782"
   },
   {
    "title": "tab783"
   },
   {
    "title": "tab784"
   },
   {
    "title": "tab785"
   },
   {
    "title": "tab786"
   },
   {
    "title": "tab787"
   },
   {
    "title": "tab788"
   },
   {
    "title": "tab789"
   },
   {
    "title": "tab790"
   },
   {
    "title": "tab791"
   },
   {
    "title": "tab792"
   },
   {
    "title": "tab793"
   },
   {
    "title": "tab794"
   },
   {
    "title": "tab795"
   },
   {
    "title": "tab796"
   },
   {
    "title": "tab797"
   },
   {
    "title": "tab798"
   },
   {
    "title": "tab799"
   },
   {
    "title": "tab800"
   },
   {
    "title": "tab801"
   },
   {
    "title": "tab802"
   },
   {
    "title": "tab803"
   },
   {
    "title": "tab804"
   },
   {
    "title": "tab805"
   },
   {
    "title": "tab806"
   },
   {
    "title": "tab807"
   },
   {
    "title": "tab808"
   },
   {
    "title": "tab809"
   },
   {
    "title": "tab810"
   },
   {
    "title": "tab811"
   },
   {
    "title": "tab812"
   },
   {
    "title": "tab813"
   },
   {
    "title": "tab814"
   },
   {
    "title": "tab815"
   },
   {
    "title": "tab816"
   },
   {
    "title": "tab817"
   },
   {
    "title": "tab818"
   },
   {
    "title": "tab819"
   },
   {
    "title": "tab820"
   },
   {
    "title": "tab821"
   },
   {
    "title": "tab822"
   },
   {
    "title": "tab823"
   },
   {
    "title": "tab824"
   },
   {
    "title": "tab825"
   },
   {
    "title": "tab826"
   },
   {
    "title": "tab827"
   },
   {
    "title": "tab828"
   },
   {
    "title": "tab829"
   },
   {
    "title": "tab830"
   },
   {
    "title": "tab831"
   },
   {
    "title": "tab832"
   },
   {
    "title": "tab833"
   },
   {
    "title": "tab834"
   },
   {
    "title": "tab835"
   },
   {
    "title": "tab836"
   },
   {
    "title": "tab837"
   },
   {
    "title": "tab838"
   },
   {
    "title": "tab839"
   },
   {
    "title": "tab840"
   },
   {
    "title": "tab841"
   },
   {
    "title": "tab842"
   },
   {
    "title": "tab843"
   },
   {
    "title": "tab844"
   },
   {
    "title": "tab845"
   },
   {
    "title": "tab846"
   },
   {
    "title": "tab847"
   },
   {
    "title": "tab848"
   },
   {
    "title": "tab849"
   },
   {
    "title": "tab850"
   },
   {
    "title": "tab851"
   },
   {
    "title": "tab852"
   },
   {
    "title": "tab853"
   },
   {
    "title": "tab854"
   },
   {
    "title": "tab855"
   },
   {
    "title": "tab856"
   },
   {
    "title": "tab857"
   },
   {
    "title": "tab858"
   },
   {
    "title": "tab859"
   },
   {
    "title": "tab860"
   },
   {
    "title": "tab861"
   },
   {
    "title": "tab862"
   },
   {
    "title": "tab863"
   },
   {
    "title": "tab864"
   },
   {
    "title": "tab865"
   },
   {
    "title": "tab866"
   },
   {
    "title": "tab867"
   },
   {
    "title": "tab868"
   },
   {
    "title": "tab869"
   },
   {
    "title": "tab870"
   },
   {
    "title": "tab871"
   },
   {
    "title": "tab872"
   },
   {
    "title": "tab873"
   },
   {
    "title": "tab874"
   },
   {
    "title": "tab875"
   },
   {
    "title": "tab876"
   },
   {
    "title": "tab877"
   },
   {
    "title": "tab878"
   },
   {
    "title": "tab879"
   },
   {
    "title": "tab880"
   },
   {
    "title": "tab881"
   },
   {
    "title": "tab882"
   },
   {
    "title": "tab883"
   },
   {
    "title": "tab884"
   },
   {
    "title": "tab885"
   },
   {
    "title": "tab886"
   },
   {
    "title": "tab887"
   },
   {
    "title": "tab888"
   },
   {
    "title": "tab889"
   },
   {
    "title": "tab890"
   },
   {
    "title": "tab891"
   },
   {
    "title": "tab892"
   },
   {
    "title": "tab893"
   },
   {
    "title": "tab894"
   },
   {
    "title": "tab895"
   },
   {
    "title": "tab896"
   },
   {
    "title": "tab897"
   },
   {
    "title": "tab898"
   },
   {
    "title": "tab899"
   },
   {
    "title": "tab900"
   },
   {
    "title": "tab901"
   },
   {
    "title": "tab902"
   },
   {
    "title": "tab903"
   },
   {
    "title": "tab904"
   },
   {
    "title": "tab905"
   },
   {
    "title": "tab906"
   },
   {
    "title": "tab907"
   },
   {
    "title": "tab908"
   },
   {
    "title": "tab909"
   },
   {
    "title": "tab910"
   },
   {
    "title": "tab911"
   },
   {
    "title": "tab912"
   },
   {
    "title": "tab913"
   },
   {
    "title": "tab914"
   },
   {
    "title": "tab915"
   },
   {
    "title": "tab916"
   },
   {
    "title": "tab917"
   },
   {
    "title": "tab918"
   },
   {
    "title": "tab919"
   },
   {
    "title": "tab920"
   },
   {
    "title": "tab921"
   },
   {
    "title": "tab922"
   },
   {
    "title": "tab923"
   },
   {
    "title": "tab924"
   },
   {
    "title": "tab925"
   },
   {
    "title": "tab926"
   },
   {
    "title": "tab927"
   },
   {
    "title": "tab928"
   },
   {
    "title": "tab929"
   },
   {
    "title": "tab930"
   },
   {
    "title": "tab931"
   },
   {
    "title": "tab932"
   },
   {
    "title": "tab933"
   },
   {
    "title": "tab934"
   },
   {
    "title": "tab935"
   },
   {
    "title": "tab936"
   },
   {
    "title": "tab937"
   },
   {
    "title": "tab938"
   },
   {
    "title": "tab939"
   },
   {
    "title": "tab940"
   },
   {
    "title": "tab941"
   },
   {
    "title": "tab942"
   },
   {
    "title": "tab943"
   },
   {
    "title": "tab944"
   },
   {
    "title": "tab945"
   },
   {
    "title": "tab946"
   },
   {
    "title": "tab947"
   },
   {
    "title": "tab948"
   },
   {
    "title": "tab949"
   },
   {
    "title": "tab950"
   },
   {
    "title": "tab951"
   },
   {
    "title": "tab952"
   },
   {
    "title": "tab953"
   },
   {
    "title": "tab954"
   },
   {
    "title": "tab955"
   },
   {
    "title": "tab956"
   },
   {
    "title": "tab957"
   },
   {
    "title": "tab958"
   },
   {
    "title": "tab959"
   },
   {
    "title": "tab960"
   },
   {
    "title": "tab961"
   },
   {
    "title": "tab962"
   },
   {
    "title": "tab963"
   },
   {
    "title": "tab964"
   },
   {
    "title": "tab965"
   },
   {
    "title": "tab966"
   },
   {
    "title": "tab967"
   },
   {
    "title": "tab968"
   },
   {
    "title": "tab969"
   },
   {
    "title": "tab970"
   },
   {
    "title": "tab971"
   },
   {
    "title": "tab972"
   },
   {
    "title": "tab973"
   },
   {
    "title": "tab974"
   },
   {
    "title": "tab975"
   },
   {
    "title": "tab976"
   },
   {
    "title": "tab977"
   },
   {
    "title": "tab978"
   },
   {
    "title": "tab979"
   },
   {
    "title": "tab980"
   },
   {
    "title": "tab981"
   },
   {
    "title": "tab982"
   },
   {
    "title": "tab983"
   },
   {
    "title": "tab984"
   },
   {
    "title": "tab985"
   },
   {
    "title": "tab986"
   },
   {
    "title": "tab987"
   },
   {
    "title": "tab988"
   },
   {
    "title": "tab989"
   },
   {
    "title": "tab990"
   },
   {
    "title": "tab991"
   },
   {
    "title": "tab992"
   },
   {
    "title": "tab993"
   },
   {
    "title": "tab994"
   },
   {
    "title": "tab995"
   },
   {
    "title": "tab996"
   },
   {
    "title": "tab997"
   },
   {
    "title": "tab998"
   },
   {
    "title": "tab999"
   }
  ]
 },
 "cmp.namespaceDefTest.testStyleTokens": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.perfTest.dummyPerf": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.perfTest.registeredComponents": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.list": [
   {
    "aura:id": "list1",
    "itemvar": "item"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "dataProvider"
   }
  ],
  "cmp.perftest.registeredcomponentsitem": [
   {
    "item": "{!item}"
   }
  ],
  "cmp.perftest.registeredcomponentsdataprovider": [
   {}
  ]
 },
 "cmp.perfTest.registeredComponentsDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "description": "A test data provider to test per-component perf test."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.perfTest.registeredComponentsItem": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "item",
    "type": "Object"
   },
   {
    "name": "readonly",
    "type": "boolean",
    "default": "false"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.readonly}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!v.item}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "label": "{!v.item}",
    "value": "",
    "click": "{!c.linkClick}"
   }
  ]
 },
 "cmp.performanceTest.runnerExample": {
  "cmp.aura.component": [
   {
    "implements": "performance:test"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "loaded",
    "type": "Boolean"
   }
  ],
  "cmp.ui.image": [
   {
    "aura:id": "image",
    "src": "/auraFW/resources/aura/auralogo.png",
    "alt": "logo"
   }
  ]
 },
 "cmp.performanceTest.runnerExample2": {
  "cmp.aura.component": [
   {
    "implements": "performance:test"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "loaded",
    "type": "Boolean"
   }
  ]
 },
 "cmp.preloadTest.test_SpecialCharacter": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.preloadTest.test_dynamicNamespace": {
  "cmp.aura.component": [
   {
    "provider": "java://org.auraframework.impl.java.provider.ConcreteProvider",
    "extensible": "true",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "whatToDo",
    "type": "String",
    "default": "mockRecordLayout"
   }
  ]
 },
 "cmp.provider.beanProvider": {
  "cmp.aura.component": [
   {
    "provider": "java://org.auraframework.impl.java.provider.TestBeanProvider"
   }
  ]
 },
 "cmp.provider.clientProvider": {
  "cmp.aura.component": [
   {
    "render": "client",
    "provider": "js://provider.clientProvider"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   }
  ]
 },
 "cmp.provider.cmpWithModel": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   }
  ]
 },
 "cmp.provider.providerA": {
  "cmp.aura.component": [
   {
    "extends": "provider:providerBase"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "attA",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "type",
    "type": "String",
    "default": "A"
   }
  ]
 },
 "cmp.provider.providerB": {
  "cmp.aura.component": [
   {
    "extends": "provider:providerBase"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "attB",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "new1",
    "type": "String",
    "default": "1"
   },
   {
    "name": "new2",
    "type": "String",
    "default": "2"
   },
   {
    "name": "new3",
    "type": "String",
    "default": "3"
   }
  ]
 },
 "cmp.provider.providerBase": {
  "cmp.aura.component": [
   {
    "provider": "java://org.auraframework.impl.java.provider.TestBaseProvider",
    "extensible": "true",
    "abstract": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "type",
    "default": "b",
    "type": "String"
   }
  ]
 },
 "cmp.provider.providerC": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.provider.providera": [
   {}
  ],
  "cmp.provider.providerbase": [
   {}
  ],
  "cmp.provider.providerb": [
   {}
  ]
 },
 "cmp.provider.stubWithClientProvider": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.dependency": [
   {
    "resource": "provider:cmpWithModel",
    "type": "COMPONENT"
   },
   {
    "resource": "provider:providerA",
    "type": "COMPONENT"
   },
   {
    "resource": "provider:providerB",
    "type": "COMPONENT"
   }
  ],
  "cmp.provider.clientprovider": [
   {
    "value": "{componentDef:'markup://aura:text',attributes:{value:'resolver'}}",
    "aura:id": "provider1"
   },
   {
    "value": "{componentDef:'markup://provider:providerA'}",
    "aura:id": "provider3"
   },
   {
    "value": "{componentDef:'markup://provider:providerB'}",
    "aura:id": "provider4"
   }
  ]
 },
 "cmp.renderingTest.arrayValues": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "String[]",
    "name": "simpleValueArray"
   },
   {
    "type": "Aura.Component[]",
    "name": "componentArray"
   }
  ]
 },
 "cmp.renderingTest.bodyRendering": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.renderingtest.rendercounter": [
   {
    "index": "1"
   },
   {
    "index": "2"
   },
   {
    "index": "3"
   },
   {
    "index": "4"
   }
  ]
 },
 "cmp.renderingTest.cmpWithRenderer": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "renderCounter",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "rerenderCounter",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "unrenderCounter",
    "type": "Integer",
    "default": "0"
   }
  ]
 },
 "cmp.renderingTest.cmpWithRendererExtendWithRenderer": {
  "cmp.aura.component": [
   {
    "extends": "renderingTest:cmpWithRenderer"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "extendRenderCounter",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "extendRerenderCounter",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "extendUnrenderCounter",
    "type": "Integer",
    "default": "0"
   }
  ]
 },
 "cmp.renderingTest.cmpWithRendererExtendWithoutRenderer": {
  "cmp.aura.component": [
   {
    "extends": "renderingTest:cmpWithRenderer"
   }
  ]
 },
 "cmp.renderingTest.conditionalRendering": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "stuffToRender",
    "type": "Object"
   }
  ]
 },
 "cmp.renderingTest.exception": {
  "cmp.aura.component": [
   {
    "renderer": "java://org.auraframework.impl.renderer.sampleJavaRenderers.TestRendererThrowingException"
   }
  ]
 },
 "cmp.renderingTest.html": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "styleClass",
    "type": "String",
    "default": "styleClass"
   }
  ]
 },
 "cmp.renderingTest.renderCounter": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "index",
    "type": "integer"
   },
   {
    "name": "renderCount",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "rerenderCount",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "unrenderCount",
    "type": "integer",
    "default": "0"
   },
   {
    "name": "onloadCount",
    "type": "integer",
    "default": "0"
   }
  ]
 },
 "cmp.renderingTest.test": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "stringAttribute",
    "default": "London"
   },
   {
    "type": "Boolean",
    "name": "flag",
    "default": "true"
   },
   {
    "name": "cmps",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.aura.text": [
   {
    "value": "textOnBody",
    "aura:id": "localtext"
   },
   {
    "value": "textInsideFacet",
    "aura:id": "text"
   }
  ],
  "cmp.renderingtest.arrayvalues": [
   {
    "aura:id": "arrayFacet",
    "simplevaluearray": "{!m.stringList}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "componentArray"
   }
  ],
  "cmp.renderingtest.conditionalrendering": [
   {
    "stufftorender": "{!v.flag?v.cmps:v.stringAttribute}",
    "aura:id": "conditionalRendering"
   }
  ]
 },
 "cmp.renderingTest.testEventHandlerChain": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "stringValue",
    "default": "London"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "A",
    "type": "handleEventTest:event"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "A",
    "action": "{!c.handler3}"
   },
   {
    "event": "handleEventTest:applicationEvent",
    "action": "{!c.handler1}"
   },
   {
    "event": "handleEventTest:applicationEvent",
    "action": "{!c.handler2}"
   }
  ],
  "cmp.renderingtest.arrayvalues": [
   {
    "aura:id": "arrayFacet",
    "simplevaluearray": "{!m.stringList}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "componentArray"
   }
  ]
 },
 "cmp.setAttributesTest.abstract": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "provider": "java://org.auraframework.impl.java.provider.SetAttributeTestProviderForAbstractCmp",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "SimpleAttribute",
    "type": "string",
    "default": "abstractX"
   }
  ]
 },
 "cmp.setAttributesTest.abstractCmpExtension": {
  "cmp.aura.component": [
   {
    "extends": "setAttributesTest:abstract"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "SimpleAttribute",
    "value": "abstractExtensionX"
   }
  ]
 },
 "cmp.setAttributesTest.anotherChild": {
  "cmp.aura.component": [
   {
    "extends": "setAttributesTest:parent"
   }
  ]
 },
 "cmp.setAttributesTest.attributesChild": {
  "cmp.aura.component": [
   {
    "extends": "setAttributesTest:attributesParent"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "city",
    "value": "Seattle (default child)"
   },
   {
    "attribute": "state",
    "value": "Washington (default child)"
   },
   {
    "attribute": "address"
   }
  ]
 },
 "cmp.setAttributesTest.attributesParent": {
  "cmp.aura.component": [
   {
    "abstract": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "city",
    "type": "String",
    "default": "San Francisco (default parent)"
   },
   {
    "name": "state",
    "type": "String",
    "default": "California (default parent)"
   },
   {
    "name": "address",
    "type": "Aura.Component[]"
   }
  ]
 },
 "cmp.setAttributesTest.child": {
  "cmp.aura.component": [
   {
    "extends": "setAttributesTest:parent"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "SimpleAttribute",
    "value": "childX"
   }
  ]
 },
 "cmp.setAttributesTest.cmpTotestAbstractCmp": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.setattributestest.abstract": [
   {
    "aura:id": "id"
   }
  ]
 },
 "cmp.setAttributesTest.cmpTotestInterface": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.setattributestest.interface": [
   {
    "aura:id": "id"
   }
  ]
 },
 "cmp.setAttributesTest.grandparent": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "SimpleAttribute",
    "type": "java://String",
    "default": "grandparentX"
   },
   {
    "name": "ComponentTypeAttribute",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.test.test_button": [
   {
    "label": "grandParentX_Button"
   }
  ]
 },
 "cmp.setAttributesTest.implementation": {
  "cmp.aura.component": [
   {
    "implements": "setAttributesTest:interface"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "SimpleAttribute",
    "value": "implementationX"
   }
  ]
 },
 "cmp.setAttributesTest.parent": {
  "cmp.aura.component": [
   {
    "extends": "setAttributesTest:grandParent",
    "extensible": "true",
    "render": "client"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "SimpleAttribute",
    "value": "parentX"
   }
  ]
 },
 "cmp.setAttributesTest.typeCoercion": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "stringAttribute",
    "type": "String"
   },
   {
    "name": "stringArrayAttribute",
    "type": "String[]"
   },
   {
    "name": "listAttribute",
    "type": "List"
   }
  ]
 },
 "cmp.styleServiceTest.asyncLoaded": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.styleServiceTest.colors": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.UIPerfActionMarksTest": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Fire Background Action",
    "press": "{!c.backgroundAction}",
    "class": "backgroundButton"
   },
   {
    "label": "Fire Foreground Action",
    "press": "{!c.foregroundAction}",
    "class": "foregroundButton"
   },
   {
    "label": "Fire Multiple Foreground Action",
    "press": "{!c.multipleForegroundActions}",
    "class": "multiForegroundButton"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputValue",
    "class": "outputText",
    "value": ""
   }
  ]
 },
 "cmp.test.accessAttributes": {
  "cmp.aura.component": [
   {
    "access": "GLOBAL",
    "description": "An abstract component that provides a basic layout for the ui:list component."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "Private",
    "type": "String",
    "access": "PRIVATE",
    "description": "private",
    "default": "PRIVATE"
   },
   {
    "name": "Public",
    "type": "String",
    "access": "PUBLIC",
    "description": "private",
    "default": "PUBLIC"
   },
   {
    "name": "Internal",
    "type": "String",
    "access": "INTERNAL",
    "description": "private",
    "default": "INTERNAL"
   },
   {
    "name": "Global",
    "type": "String",
    "access": "GLOBAL",
    "description": "private",
    "default": "GLOBAL"
   }
  ]
 },
 "cmp.test.ballot": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.BallotModel",
    "render": "client"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "test:vote",
    "action": "{!c.vote}"
   }
  ]
 },
 "cmp.test.basicCspCmpExtendsTemplate": {
  "cmp.aura.component": [
   {
    "render": "client",
    "template": "test:basicCspTemplate"
   }
  ]
 },
 "cmp.test.basicCspTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extensible": "true",
    "extends": "aura:template"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "extraScriptTags"
   },
   {
    "attribute": "title",
    "value": "CSP Test"
   }
  ]
 },
 "cmp.test.child1": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestReinitializeModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "attr",
    "type": "String"
   }
  ],
  "cmp.test.child2": [
   {}
  ]
 },
 "cmp.test.child2": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.componentDefRefArrayAttribute": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "cdrs",
    "type": "Aura.ComponentDefRef[]"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "hi"
   }
  ]
 },
 "cmp.test.extendsChild": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.TestController",
    "model": "java://org.auraframework.components.test.java.model.TestModel",
    "extends": "test:extendsParent"
   }
  ],
  "cmp.test.child1": [
   {
    "attr": "an attribute value"
   }
  ]
 },
 "cmp.test.extendsParent": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.impl.java.controller.TestController2",
    "model": "java://org.auraframework.components.test.java.model.TestModel2",
    "extensible": "true"
   }
  ],
  "cmp.test.child1": [
   {
    "attr": "an attribute value"
   }
  ]
 },
 "cmp.test.facetAttribute": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "atf",
    "type": "Aura.Component[]"
   }
  ]
 },
 "cmp.test.facetAttributePassthrough": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "tf",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.test.facetattribute": [
   {
    "atf": "{!v.tf}"
   }
  ]
 },
 "cmp.test.facetAttributePassthroughParent": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "something",
    "type": "string",
    "default": "default string"
   }
  ],
  "cmp.test.facetattributepassthrough": [
   {}
  ],
  "cmp.aura.set": [
   {
    "attribute": "tf"
   }
  ]
 },
 "cmp.test.fakeAbstract": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true"
   }
  ]
 },
 "cmp.test.fakeAbstractChild": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true"
   }
  ]
 },
 "cmp.test.fakeAbstractParent": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true"
   }
  ]
 },
 "cmp.test.fakeComponent": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.fakeComponentChild": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.fakeComponentParent": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.fakeDesign": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "something",
    "type": "String"
   },
   {
    "name": "else",
    "type": "String"
   },
   {
    "name": "entities",
    "type": "String"
   }
  ]
 },
 "cmp.test.fakeDesignNonExistentInterface": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "something",
    "type": "String"
   },
   {
    "name": "else",
    "type": "String"
   },
   {
    "name": "entities",
    "type": "String"
   }
  ]
 },
 "cmp.test.fakeImpl": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.flavorableFakeComponent": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.flavorsSerializationTest1": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.flavorsSerializationTest2": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.jsModel": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.jsModelAndJavaModel": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestModel"
   }
  ]
 },
 "cmp.test.jsModelImplicit": {
  "cmp.aura.component": [
   {
    "model": "js://test.jsModel",
    "render": "client"
   }
  ]
 },
 "cmp.test.kitchenSink": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestModel",
    "controller": "java://org.auraframework.components.test.java.controller.TestController",
    "provider": "js://test.kitchenSink,java://org.auraframework.impl.java.provider.TestComponnetConfigProviderAIS"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "strAttribute",
    "type": "String",
    "default": "Apple"
   },
   {
    "name": "valueFromJSProvider",
    "type": "String",
    "default": "Empty"
   },
   {
    "name": "valueFromJavaProvider",
    "type": "String",
    "default": "Empty"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "clickMe",
    "press": "{!c.handleClick}"
   }
  ]
 },
 "cmp.test.libraryTest": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.import": [
   {
    "library": "test:test_Library",
    "property": "imported"
   },
   {
    "library": "test:test_Library",
    "property": "importedAgain"
   },
   {
    "library": "test:test_LibraryWithExternalImports",
    "property": "externallyImported"
   },
   {
    "library": "test:test_LibraryWithExternalImports",
    "property": "externallyImportedAgain"
   }
  ]
 },
 "cmp.test.parent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.test.child1": [
   {
    "attr": "an attribute value"
   }
  ]
 },
 "cmp.test.parentComponent": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "parentAttribute",
    "type": "String"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "parentEvent",
    "type": "test:parentEvent",
    "description": "The Description"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "parentEvent",
    "action": "{!c.foo}"
   }
  ]
 },
 "cmp.test.parser": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.impl.model.java.TestModel"
   }
  ],
  "cmp.test.parserchild": [
   {
    "at1": "at1Val"
   }
  ],
  "cmp.test.parsergrandchild": [
   {}
  ]
 },
 "cmp.test.parserChild": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "at1",
    "type": "String",
    "<": "",
    "aura:component": ""
   }
  ]
 },
 "cmp.test.parserFragment": {
  "cmp.aura.parent": [
   {}
  ]
 },
 "cmp.test.parserGrandChild": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.parserInvalid": {},
 "cmp.test.require": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.VersionTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "version",
    "default": "default"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "updateVersion",
    "action": "{!c.updateVersion}"
   },
   {
    "name": "fireEventWithVersionInServerController",
    "action": "{!c.fireEventWithVersionInServerController}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "versionEvt",
    "type": "auratest:testEvent"
   }
  ]
 },
 "cmp.test.requireConsumer": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "Aura.Component",
    "name": "consumedCmp"
   },
   {
    "type": "String",
    "name": "versionInConsumedCmp",
    "default": "default"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "updateWithVersionInConsumedComponent",
    "action": "{!c.updateWithVersionInConsumedComponent}"
   }
  ],
  "cmp.aura.require": [
   {
    "namespace": "componentTest",
    "version": "1.5"
   }
  ]
 },
 "cmp.test.serverModelCaseSensitivity": {
  "cmp.aura.component": [
   {
    "render": "client",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ]
 },
 "cmp.test.styleNameExpressionTest": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.styleTestTemplate": {
  "cmp.aura.component": [
   {
    "istemplate": "true",
    "extends": "aura:template",
    "style": "templateCss://test.styleTestTemplate"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "auraInitBlock"
   }
  ]
 },
 "cmp.test.svgIsTooLarge": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testActionCallbacks": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.TestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "cbComplete",
    "type": "String",
    "default": "No"
   },
   {
    "name": "cbName",
    "type": "String",
    "default": "SUCCESS"
   },
   {
    "name": "cbExpected",
    "type": "String",
    "default": "SUCCESS"
   },
   {
    "name": "cbResult",
    "type": "String",
    "default": "NONE",
    "visibility": "private"
   },
   {
    "name": "cbState",
    "type": "String",
    "default": "NONE",
    "visibility": "private"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "pass",
    "label": "Pass!",
    "press": "{!c.firePass}"
   },
   {
    "aura:id": "fail",
    "label": "Fail!",
    "press": "{!c.fireFail}"
   }
  ]
 },
 "cmp.test.testActionEvent": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "eventName",
    "type": "String",
    "description": "Name of event to associate with the exception in server action. GenericEventException will encapsulate this event"
   },
   {
    "name": "eventParamName",
    "type": "String",
    "description": "Parameter to set on the exception"
   },
   {
    "name": "eventParamValue",
    "type": "String"
   },
   {
    "name": "response",
    "type": "Aura.Action"
   },
   {
    "name": "data",
    "type": "String",
    "visibility": "private"
   },
   {
    "name": "event",
    "type": "String",
    "visibility": "private"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "local",
    "type": "test:testActionEventEvent"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "local",
    "action": "{!c.showLocalEvent}"
   },
   {
    "event": "aura:systemError",
    "action": "{!c.showSystemErrorEvent}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "trigger",
    "label": "fire!",
    "press": "{!c.fireEvent}"
   }
  ]
 },
 "cmp.test.testActionExceptions": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "throwableClass",
    "type": "String"
   },
   {
    "name": "throwableCause",
    "type": "String"
   },
   {
    "name": "response",
    "type": "Aura.Action"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "trigger",
    "label": "fire!",
    "press": "{!c.getException}"
   }
  ]
 },
 "cmp.test.testActionExpressionChaining": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "push",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.test.testactionexpressionchainingfixture": [
   {
    "aura:id": "fixture",
    "press": "{!c.press}"
   },
   {
    "aura:id": "function",
    "press": "{!v.push?c.push:c.press}"
   }
  ]
 },
 "cmp.test.testActionExpressionChainingFixture": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "press",
    "type": "Aura.Action",
    "required": "true"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "theButton",
    "label": "Press Me",
    "press": "{!v.press}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.press != null}"
   }
  ]
 },
 "cmp.test.testActionRef": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "pants",
    "type": "integer",
    "default": "0"
   }
  ],
  "cmp.test.testactionrefchild": [
   {
    "aura:id": "sandputter",
    "put": "{!c.sand}"
   }
  ]
 },
 "cmp.test.testActionRefChild": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "put",
    "type": "Aura.Action"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!v.put}",
    "aura:id": "button",
    "label": "put sand in pants"
   }
  ]
 },
 "cmp.test.testActionRefContainer": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "myActionRef",
    "type": "Aura.Action"
   }
  ],
  "cmp.test.testactionref": [
   {
    "aura:id": "actionref"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "getButton",
    "press": "{!c.getSand}",
    "label": "getSand"
   },
   {
    "aura:id": "runButton",
    "press": "{!c.runSand}",
    "label": "runSand"
   }
  ]
 },
 "cmp.test.testAfterRender": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.test.testafterrenderfixture": [
   {
    "aura:id": "simple"
   },
   {
    "aura:id": "containedInHTML"
   },
   {
    "aura:id": "containedInNestedHTML"
   },
   {
    "aura:id": "containedInComponent"
   },
   {
    "aura:id": "containedInNestedComponent"
   },
   {
    "aura:id": "kitchenSinkA"
   },
   {
    "aura:id": "kitchenSinkB"
   }
  ],
  "cmp.test.testafterrenderfixtureextended": [
   {
    "aura:id": "extended"
   },
   {
    "aura:id": "extendedContainedInHTML"
   },
   {
    "aura:id": "extendedContainedInNestedHTML"
   },
   {
    "aura:id": "extendedContainedInComponent"
   },
   {
    "aura:id": "extendedContainedInNestedComponent"
   },
   {
    "aura:id": "extendedKitchenSinkA"
   },
   {
    "aura:id": "extendedKitchenSinkB"
   }
  ],
  "cmp.ui.message": [
   {},
   {},
   {},
   {},
   {}
  ]
 },
 "cmp.test.testAfterRenderFixture": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ]
 },
 "cmp.test.testAfterRenderFixtureExtended": {
  "cmp.aura.component": [
   {
    "extends": "test:testAfterRenderFixture"
   }
  ]
 },
 "cmp.test.testAuraTypes": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "intName",
    "type": "Integer",
    "default": "12"
   },
   {
    "name": "longName",
    "type": "Long",
    "default": "1212312412142"
   },
   {
    "name": "doubleName",
    "type": "Double",
    "default": "12.30"
   },
   {
    "name": "decimalName",
    "type": "Decimal",
    "default": "2.5"
   },
   {
    "name": "boolName",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "stringName",
    "type": "String",
    "default": "stringValue"
   },
   {
    "name": "objectName",
    "type": "Object",
    "default": "true"
   },
   {
    "name": "mapName",
    "type": "Map",
    "default": "{}"
   },
   {
    "name": "listName",
    "type": "List",
    "default": "bald"
   },
   {
    "name": "setName",
    "type": "Set",
    "default": "indifferent"
   },
   {
    "name": "componentArrayName",
    "type": "Aura.Component[]"
   },
   {
    "name": "componentName",
    "type": "Aura.Component"
   },
   {
    "name": "componentDefRefArrayName",
    "type": "Aura.ComponentDefRef[]"
   },
   {
    "name": "actionName",
    "type": "Aura.Action"
   }
  ]
 },
 "cmp.test.testCmpNoJSHelper": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testDuplicateJSController": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String",
    "default": "empty"
   }
  ]
 },
 "cmp.test.testEvalScope": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testEventBubbling": {
  "cmp.aura.component": [
   {
    "extends": "test:testEventBubblingSuper"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://test:testEventBubbling*",
    "type": "COMPONENT"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "iterationIds",
    "type": "List",
    "default": ""
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "logId",
    "value": "Root"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "bubblingEvent",
    "event": "test:testEventBubblingEvent",
    "action": "{!c.handle}"
   },
   {
    "name": "init",
    "action": "{!c.handleInit}",
    "value": "{!this}"
   }
  ],
  "cmp.auratest.logpanel": [
   {
    "aura:id": "logPanel"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.iterationIds}",
    "var": "i"
   }
  ],
  "cmp.test.testeventbubblinghandlercontainer": [
   {
    "aura:id": "container",
    "logid": "{!'Container' + i}"
   }
  ],
  "cmp.test.testeventbubblinghandlergrandchild": [
   {
    "aura:id": "inner",
    "logid": "{!'Inner' + i}"
   }
  ],
  "cmp.test.testeventbubblingemitter": [
   {
    "aura:id": "emitter",
    "logid": "Event"
   }
  ],
  "cmp.test.testeventbubblingemitterextended": [
   {
    "aura:id": "emitterExtended",
    "logid": "Extended"
   }
  ],
  "cmp.test.testeventbubblingemitterother": [
   {
    "aura:id": "emitterOther",
    "logid": "Other"
   }
  ],
  "cmp.test.testeventbubblinghandler": [
   {
    "aura:id": "provided",
    "logid": "Provided",
    "providebyhandler": "test:testEventBubblingHandlerChild"
   },
   {
    "aura:id": "noSuperHandlers",
    "logid": "NoSuperHandlers",
    "providebyhandler": "test:testEventBubblingHandlerGrandchildWithoutHandlers"
   }
  ]
 },
 "cmp.test.testEventBubblingEmitter": {
  "cmp.aura.component": [
   {
    "implements": "test:testEventBubblingHasLogId"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "bubblingEvent",
    "type": "test:testEventBubblingEvent"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "fireEvent",
    "action": "{!c.fireEvent}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "button",
    "press": "{!c.fireEvent}",
    "label": "{!v.logId}"
   }
  ]
 },
 "cmp.test.testEventBubblingEmitterExtended": {
  "cmp.aura.component": [
   {
    "implements": "test:testEventBubblingHasLogId",
    "controller": "js://test.testEventBubblingEmitter"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "bubblingEvent",
    "type": "test:testEventBubblingEventExtended"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "fireEvent",
    "action": "{!c.fireEvent}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "button",
    "press": "{!c.fireEvent}",
    "label": "Extended"
   }
  ]
 },
 "cmp.test.testEventBubblingEmitterOther": {
  "cmp.aura.component": [
   {
    "implements": "test:testEventBubblingHasLogId",
    "controller": "js://test.testEventBubblingEmitter"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "bubblingEvent",
    "type": "test:testEventBubblingEventOther"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "fireEvent",
    "action": "{!c.fireEvent}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "button",
    "press": "{!c.fireEvent}",
    "label": "Other"
   }
  ]
 },
 "cmp.test.testEventBubblingHandler": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "test:testEventBubblingHasLogId,test:testEventBubblingProvidable",
    "provider": "js://test.testEventBubblingHandler"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "bubblingEvent",
    "event": "test:testEventBubblingEvent",
    "action": "{!c.handle}"
   }
  ],
  "cmp.test.testeventbubblingemitter": [
   {
    "aura:id": "emitter",
    "logid": "Event"
   }
  ],
  "cmp.test.testeventbubblingemitterextended": [
   {
    "aura:id": "emitterExtended",
    "logid": "Extended"
   }
  ],
  "cmp.test.testeventbubblingemitterother": [
   {
    "aura:id": "emitterOther",
    "logid": "Other"
   }
  ]
 },
 "cmp.test.testEventBubblingHandlerChild": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "test:testEventBubblingHandler"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "bubblingEvent",
    "event": "test:testEventBubblingEvent",
    "action": "{!c.handleChild}"
   }
  ],
  "cmp.test.testeventbubblingemitter": [
   {
    "aura:id": "emitter",
    "logid": "Event"
   }
  ],
  "cmp.test.testeventbubblingemitterextended": [
   {
    "aura:id": "emitterExtended",
    "logid": "Extended"
   }
  ],
  "cmp.test.testeventbubblingemitterother": [
   {
    "aura:id": "emitterOther",
    "logid": "Other"
   }
  ]
 },
 "cmp.test.testEventBubblingHandlerChildWithoutHandlers": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "test:testEventBubblingHandler"
   }
  ]
 },
 "cmp.test.testEventBubblingHandlerContainer": {
  "cmp.aura.component": [
   {
    "implements": "test:testEventBubblingHasLogId"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "bubblingEvent",
    "event": "test:testEventBubblingEvent",
    "action": "{!c.handleContainer}"
   }
  ],
  "cmp.test.testeventbubblinghandlergrandchild": [
   {
    "aura:id": "content",
    "logid": "{! v.logId + 'Content'}"
   }
  ]
 },
 "cmp.test.testEventBubblingHandlerGrandchild": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "test:testEventBubblingHandlerChild"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "bubblingEvent",
    "event": "test:testEventBubblingEvent",
    "action": "{!c.handleGrandchild}"
   }
  ],
  "cmp.test.testeventbubblingemitter": [
   {
    "aura:id": "emitter",
    "logid": "Event"
   }
  ],
  "cmp.test.testeventbubblingemitterextended": [
   {
    "aura:id": "emitterExtended",
    "logid": "Extended"
   }
  ],
  "cmp.test.testeventbubblingemitterother": [
   {
    "aura:id": "emitterOther",
    "logid": "Other"
   }
  ]
 },
 "cmp.test.testEventBubblingHandlerGrandchildWithoutHandlers": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "test:testEventBubblingHandlerChildWithoutHandlers"
   }
  ],
  "cmp.test.testeventbubblingemitter": [
   {
    "aura:id": "emitter",
    "logid": "Event"
   }
  ],
  "cmp.test.testeventbubblingemitterextended": [
   {
    "aura:id": "emitterExtended",
    "logid": "Extended"
   }
  ],
  "cmp.test.testeventbubblingemitterother": [
   {
    "aura:id": "emitterOther",
    "logid": "Other"
   }
  ]
 },
 "cmp.test.testEventBubblingSuper": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "test:testEventBubblingHasLogId"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "bubblingEvent",
    "event": "test:testEventBubblingEvent",
    "action": "{!c.handleSuper}"
   }
  ],
  "cmp.test.testeventbubblingemitter": [
   {
    "aura:id": "emitter",
    "logid": "Super"
   }
  ]
 },
 "cmp.test.testInValidCSS": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testInvalidJSController": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testInvalidJSRenderer": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testJSController": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testJSControllerChild": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testJSControllerParent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.test.testjscontrollerchild": [
   {}
  ]
 },
 "cmp.test.testJSHelper": {
  "cmp.aura.component": [
   {
    "extends": "test:testJSHelperSuper"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "dirty",
    "type": "String"
   }
  ]
 },
 "cmp.test.testJSHelperExplicit": {
  "cmp.aura.component": [
   {
    "helper": "js://test.test_SimpleHelper",
    "extends": "test:testJSHelperSuper"
   }
  ]
 },
 "cmp.test.testJSHelperExplicitInheritance": {
  "cmp.aura.component": [
   {
    "helper": "js://test.testJSHelperSuper"
   }
  ]
 },
 "cmp.test.testJSHelperInheritedOnly": {
  "cmp.aura.component": [
   {
    "extends": "test:testJSHelperSuper"
   }
  ]
 },
 "cmp.test.testJSHelperMethodOverloading": {
  "cmp.aura.component": [
   {
    "extends": "test:testJSHelperSuperSuper"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "childButton",
    "label": "Call method on child",
    "press": "{!c.buttonPress}"
   }
  ]
 },
 "cmp.test.testJSHelperSuper": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "extends": "test:testJSHelperSuperSuper"
   }
  ]
 },
 "cmp.test.testJSHelperSuperSuper": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "attr",
    "type": "String",
    "default": "Default value from parent"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "parentButton",
    "label": "Call method on parent",
    "press": "{!c.buttonPress}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "output",
    "value": "{!v.attr}"
   }
  ]
 },
 "cmp.test.testJSRenderer": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "default": "testJSRenderer",
    "name": "label"
   }
  ]
 },
 "cmp.test.testJSRendererUsingHelper": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "default": "testJSRendererUsingJSHelper",
    "name": "label"
   }
  ]
 },
 "cmp.test.testJSTestSuite": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "num",
    "type": "Integer",
    "default": "2"
   },
   {
    "name": "alpha",
    "type": "String",
    "default": "Z"
   }
  ]
 },
 "cmp.test.testJSTestSuiteWithoutAttributes": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "num",
    "type": "Integer",
    "default": "2"
   }
  ]
 },
 "cmp.test.testJavaProviderSettingAttributeValues": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "provider": "java://org.auraframework.impl.java.provider.TestJavaProviderSettingAttributeValues"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "a1",
    "type": "String"
   },
   {
    "name": "a3",
    "type": "String"
   },
   {
    "name": "a2",
    "type": "String"
   },
   {
    "name": "value",
    "type": "String"
   }
  ]
 },
 "cmp.test.testJavaProviderSettingAttributeValuesHelper": {
  "cmp.aura.component": [
   {
    "extends": "test:testJavaProviderSettingAttributeValues"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "a1",
    "type": "String"
   },
   {
    "name": "a2",
    "type": "String"
   },
   {
    "name": "ar1",
    "type": "String[]"
   },
   {
    "name": "b1",
    "type": "String"
   },
   {
    "name": "b2",
    "type": "String"
   },
   {
    "name": "value",
    "type": "String",
    "required": "true"
   }
  ]
 },
 "cmp.test.testJavaProviderSettingAttributeValuesViaComponentConfig": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "provider": "java://org.auraframework.impl.java.provider.TestJavaProviderSettingAttributeValuesViaComponentConfig"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "a1",
    "type": "String"
   },
   {
    "name": "a2",
    "type": "String"
   },
   {
    "name": "a3",
    "type": "String"
   },
   {
    "name": "value",
    "type": "String",
    "required": "true"
   }
  ]
 },
 "cmp.test.testJavaProviderSettingAttributeValuesViaComponentConfigHelper": {
  "cmp.aura.component": [
   {
    "extends": "test:testJavaProviderSettingAttributeValuesViaComponentConfig"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "ar1",
    "type": "String[]"
   },
   {
    "name": "b1",
    "type": "String"
   },
   {
    "name": "b2",
    "type": "String"
   },
   {
    "name": "facet",
    "type": "Aura.Component[]"
   }
  ]
 },
 "cmp.test.testMultipleBodyFacetChild1": {
  "cmp.aura.component": [
   {
    "extends": "test:testMultipleBodyFacetParent"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "body"
   }
  ]
 },
 "cmp.test.testMultipleBodyFacetParent": {
  "cmp.aura.component": [
   {
    "extensible": "true"
   }
  ]
 },
 "cmp.test.testNoJSControllers": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testNonFunctionElementsInJSController": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testNullExpressionAddition": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "dontset",
    "type": "string"
   },
   {
    "name": "dontset2",
    "type": "string"
   }
  ]
 },
 "cmp.test.testRenderIf": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "thang",
    "type": "Boolean"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.thang}"
   },
   {
    "istrue": "{! !v.thang}"
   },
   {
    "istrue": "{!false}"
   },
   {
    "istrue": "{!true}"
   }
  ]
 },
 "cmp.test.testRenderIfElse": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "thang",
    "type": "Boolean"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.thang}"
   },
   {
    "istrue": "{! !v.thang}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.test.testRenderIfElseLiteral": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "thang",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.thang}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else",
    "value": "Blah"
   }
  ]
 },
 "cmp.test.testRenderIfEmptyBody": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "thang",
    "type": "Boolean"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.thang}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.test.testRenderIfUninitializedBody": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "thang",
    "type": "Boolean"
   },
   {
    "name": "uninitializedBody",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.thang}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   }
  ]
 },
 "cmp.test.testSingleBodyFacetChild1": {
  "cmp.aura.component": [
   {
    "extends": "test:testSingleBodyFacetParent"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "body"
   }
  ]
 },
 "cmp.test.testSingleBodyFacetChild2": {
  "cmp.aura.component": [
   {
    "extends": "test:testSingleBodyFacetParent"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "body"
   }
  ]
 },
 "cmp.test.testSingleBodyFacetChild3": {
  "cmp.aura.component": [
   {
    "extends": "test:testSingleBodyFacetParent"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "attr",
    "value": "text3"
   }
  ]
 },
 "cmp.test.testSingleBodyFacetParent": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "attr",
    "type": "String"
   }
  ]
 },
 "cmp.test.testStyleNamespaceInvalidConditions": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testStyleNamespaceToken": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testStyleNamespaceTokenInvalidCSS": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testStyleNamespaceTokenValidCSS": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testStyleNamespaceTrueConditions": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testStyleSelectorCaseSensitivity": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testStyleValidChild": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testStyleValidParent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.test.teststylevalidchild": [
   {}
  ]
 },
 "cmp.test.testTemplateCss": {
  "cmp.aura.component": [
   {
    "istemplate": "true"
   }
  ]
 },
 "cmp.test.testTwoCSSFiles": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testValidCSS": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.testVirtualList": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "template",
    "type": "Aura.ComponentDefRef[]",
    "description": "template"
   }
  ],
  "cmp.test.testvirtuallisttemplate": [
   {},
   {
    "id": "{!item._id}",
    "index": "{!item.index}",
    "name": "{!item.name}",
    "balance": "{!item.balance}",
    "friends": "{!item.friends}"
   }
  ],
  "cmp.ui.virtuallist": [
   {
    "aura:id": "list",
    "itemvar": "item"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.test.testvirtuallistdataprovider": [
   {}
  ]
 },
 "cmp.test.testVirtualListDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "description": "Uses querymore to load new items in the list"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.test.testVirtualListTemplate": {
  "cmp.aura.component": [
   {
    "implements": "ui:virtualListTemplate"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "id",
    "type": "String"
   },
   {
    "name": "index",
    "type": "String"
   },
   {
    "name": "name",
    "type": "String"
   },
   {
    "name": "balance",
    "type": "String"
   },
   {
    "name": "friends",
    "type": "Object"
   },
   {
    "name": "counter",
    "default": "0",
    "type": "Integer"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "friends",
    "items": "{!v.friends}",
    "var": "i"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "showItemInfo",
    "label": "Show yourself!",
    "press": "{!c.like}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "class": "outputItemInfo",
    "aura:id": "outputItemInfo",
    "value": ""
   }
  ],
  "cmp.test.testvirtuallisttemplatechild": [
   {
    "name": "{!v.name}"
   }
  ]
 },
 "cmp.test.testVirtualListTemplateChild": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "name",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "changeNameButton",
    "label": "Change Name",
    "press": "{!c.nameChange}"
   }
  ],
  "cmp.ui.label": [
   {
    "label": "{!v.name}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "class": "expectedNameChange",
    "aura:id": "outputName",
    "value": ""
   }
  ]
 },
 "cmp.test.test_ComponentWithBadHelper": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.test_CompoundCntrlr": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.TestController",
    "render": "client"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String",
    "default": "Button"
   }
  ],
  "cmp.test.test_button": [
   {
    "label": "{!v.label}",
    "press": "{!c.handleClick}",
    "class": "test_locator"
   }
  ]
 },
 "cmp.test.test_Events_BiggerComponentForEvent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.test.test_events_componentforevent": [
   {
    "label": "Smaller Component",
    "testpress": "{!c.changeLabel}",
    "testmouseover": "{!c.changeLabel}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "testBiggerPress",
    "type": "test:test_Events_Event2"
   }
  ]
 },
 "cmp.test.test_Events_ClientActions": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.test.test_events_componentforevent": [
   {
    "label": "#Event Generation#. Click or Mouse Over to Trigger an event",
    "aura:id": "withActions",
    "classidentifier": "WithActions",
    "testpress": "{!c.changeLabel}",
    "testmouseover": "{!c.changeLabel}"
   },
   {
    "label": "#No Events Generated#. Click or Mouse Over to Trigger an event but no Client Action",
    "aura:id": "noActions",
    "classidentifier": "WithoutActions"
   }
  ]
 },
 "cmp.test.test_Events_ComponentForEvent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String"
   },
   {
    "name": "classIdentifier",
    "type": "String"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "testPress",
    "type": "test:test_Events_Event"
   },
   {
    "name": "testMouseOver",
    "type": "test:test_Events_ParentEvent"
   }
  ]
 },
 "cmp.test.test_Events_Properties": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.test.test_events_componentforevent": [
   {
    "aura:id": "innerComp",
    "label": "#Click#",
    "classidentifier": "identifier",
    "testpress": "{!c.changeLabel}",
    "testmouseover": "{!c.changeLabel2}"
   }
  ]
 },
 "cmp.test.test_IfToggle": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "check",
    "type": "Boolean",
    "default": "{!false}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.check}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "button",
    "label": "Toggle",
    "press": "{!c.toggleCheck}"
   }
  ]
 },
 "cmp.test.test_Import": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.import": [
   {
    "library": "test:test_Library",
    "property": "testModule"
   }
  ]
 },
 "cmp.test.test_ImportNoLibrary": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.import": [
   {
    "property": "testLibrary"
   }
  ]
 },
 "cmp.test.test_ImportNoProperty": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.import": [
   {
    "library": "test:test_Library"
   }
  ]
 },
 "cmp.test.test_JSController_WithComments": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.test_JSProvider_AbstractBasic": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true",
    "provider": "java://org.auraframework.impl.java.provider.TestProviderAbstractBasic, js://test.test_JSProvider_AbstractBasic"
   }
  ]
 },
 "cmp.test.test_JSProvider_Impl": {
  "cmp.aura.component": [
   {
    "implements": "test:test_JSProvider_Impl"
   }
  ]
 },
 "cmp.test.test_JSRenderer_WithComments": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.test_JavaRndr_Abstract": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "renderer": "java://org.auraframework.impl.renderer.sampleJavaRenderers.TestSimpleRenderer",
    "provider": "java://org.auraframework.impl.renderer.TestProvider"
   }
  ]
 },
 "cmp.test.test_JavaRndr_Component": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.test.test_javarndr_abstract": [
   {}
  ]
 },
 "cmp.test.test_JavaRndr_Impl": {
  "cmp.aura.component": [
   {
    "extends": "test:test_JavaRndr_Abstract",
    "renderer": "java://org.auraframework.impl.renderer.sampleJavaRenderers.TestSimpleRenderer,js://test.test_JavaRndr_Impl"
   }
  ]
 },
 "cmp.test.test_JavaRndr_Override": {
  "cmp.aura.component": [
   {
    "render": "client",
    "renderer": "java://org.auraframework.impl.renderer.sampleJavaRenderers.TestOverridingRenderer"
   }
  ]
 },
 "cmp.test.test_NoProvider_NonAbstract_Component": {
  "cmp.aura.component": [
   {
    "abstract": "false",
    "provider": "java://org.auraframework.impl.java.provider.TestProvider"
   }
  ]
 },
 "cmp.test.test_NonExistingJavaRenderer": {
  "cmp.aura.component": [
   {
    "renderer": "java://NonExistingRenderer"
   }
  ]
 },
 "cmp.test.test_Parser_Comments": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.impl.model.java.TestModel"
   }
  ],
  "cmp.test.parserchild": [
   {
    "at1": "at1Val"
   }
  ],
  "cmp.test.parsergrandchild": [
   {}
  ]
 },
 "cmp.test.test_Preload_BadCmp": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "type": "String",
    "name": "dup"
   },
   {
    "type": "String",
    "name": "dup"
   }
  ]
 },
 "cmp.test.test_Provider_Abstract1": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true",
    "provider": "java://org.auraframework.impl.java.provider.TestProviderAbstract"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "implNumber",
    "type": "String"
   }
  ]
 },
 "cmp.test.test_Provider_Abstract2": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true",
    "extends": "test:test_Provider_Abstract1",
    "provider": "java://org.auraframework.impl.java.provider.TestProviderAbstract"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "implNumber",
    "type": "String"
   }
  ]
 },
 "cmp.test.test_Provider_Abstract3": {
  "cmp.aura.component": [
   {
    "extends": "test:test_Provider_Abstract2"
   }
  ]
 },
 "cmp.test.test_Provider_Abstract4": {
  "cmp.aura.component": [
   {
    "extends": "test:test_Provider_providerImpl4"
   }
  ]
 },
 "cmp.test.test_Provider_AbstractBasic": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true",
    "provider": "java://org.auraframework.impl.java.provider.TestProviderAbstractBasic"
   }
  ]
 },
 "cmp.test.test_Provider_AbstractBasicExtends": {
  "cmp.aura.component": [
   {
    "extends": "test:test_Provider_AbstractBasic"
   }
  ]
 },
 "cmp.test.test_Provider_AbstractCyclic": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true",
    "provider": "java://org.auraframework.impl.java.provider.TestProviderAbstractCyclic"
   }
  ]
 },
 "cmp.test.test_Provider_AbstractNoExtends": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true",
    "provider": "java://org.auraframework.impl.java.provider.TestProviderAbstractNoExtends"
   }
  ]
 },
 "cmp.test.test_Provider_Component": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.test.test_provider_interface": [
   {
    "implnumber": "3"
   }
  ]
 },
 "cmp.test.test_Provider_Concrete": {
  "cmp.aura.component": [
   {
    "provider": "java://org.auraframework.impl.java.provider.ConcreteProvider",
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "whatToDo",
    "type": "String",
    "default": ""
   },
   {
    "name": "name",
    "type": "String",
    "default": "nothing!"
   }
  ]
 },
 "cmp.test.test_Provider_Concrete_Sub": {
  "cmp.aura.component": [
   {
    "extends": "test:test_Provider_Concrete"
   }
  ]
 },
 "cmp.test.test_Provider_InterfaceChainComponent": {
  "cmp.aura.component": [
   {
    "implements": "test:test_Provider_InterfaceChain2"
   }
  ]
 },
 "cmp.test.test_Provider_InterfaceCyclicComponentA": {
  "cmp.aura.component": [
   {
    "implements": "test:test_Provider_InterfaceCyclicA"
   }
  ],
  "cmp.test.test_provider_interfacecyclicb": [
   {
    "cycle": "B"
   }
  ]
 },
 "cmp.test.test_Provider_InterfaceCyclicComponentB": {
  "cmp.aura.component": [
   {
    "implements": "test:test_Provider_InterfaceCyclicB"
   }
  ],
  "cmp.test.test_provider_interfacecyclica": [
   {
    "cycle": "A"
   }
  ]
 },
 "cmp.test.test_Provider_NoExtends": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.test_Provider_NoImpl": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.test_Provider_NonAbstract": {
  "cmp.aura.component": [
   {
    "abstract": "false",
    "provider": "java://org.auraframework.impl.java.provider.TestNonAbstractProvider"
   }
  ]
 },
 "cmp.test.test_Provider_ThrowsQFE": {
  "cmp.aura.component": [
   {
    "provider": "java://org.auraframework.impl.java.provider.TestProviderThrowsQFEDuringProvide"
   }
  ]
 },
 "cmp.test.test_Provider_providerImpl1": {
  "cmp.aura.component": [
   {
    "implements": "test:test_Provider_Interface"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "ComponentSpecificAttr",
    "type": "String",
    "default": "iammine"
   }
  ]
 },
 "cmp.test.test_Provider_providerImpl3": {
  "cmp.aura.component": [
   {
    "implements": "test:test_Provider_Interface"
   }
  ]
 },
 "cmp.test.test_Provider_providerImpl4": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "true",
    "implements": "test:test_Provider_Interface",
    "provider": "java://org.auraframework.impl.java.provider.TestProviderAbstract"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "implNumber",
    "type": "String"
   }
  ]
 },
 "cmp.test.test_Provider_providerImplOverrideAttr": {
  "cmp.aura.component": [
   {
    "implements": "test:test_Provider_Interface"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "implNumber",
    "type": "String",
    "default": "leaveMeAsIs"
   }
  ]
 },
 "cmp.test.test_ServerRenderable": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.test_ServerRendererOnly": {
  "cmp.aura.component": [
   {
    "render": "client",
    "renderer": "java://org.auraframework.impl.renderer.sampleJavaRenderers.TestSimpleRenderer"
   }
  ]
 },
 "cmp.test.test_ServerRenderingNegative": {
  "cmp.aura.component": [
   {
    "render": "server"
   }
  ],
  "cmp.test.test_button": [
   {
    "label": "testForcingServerRenderingOfInteractiveComponents",
    "class": "button"
   }
  ]
 },
 "cmp.test.test_SimpleHelper": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.test.test_SimpleJavaRenderer": {
  "cmp.aura.component": [
   {
    "renderer": "java://org.auraframework.impl.renderer.sampleJavaRenderers.TestSimpleRenderer"
   }
  ]
 },
 "cmp.test.test_button": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String"
   },
   {
    "name": "class",
    "type": "String"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "press",
    "type": "test:test_press"
   }
  ]
 },
 "cmp.test.text": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   }
  ],
  "cmp.test.parent": [
   {},
   {}
  ]
 },
 "cmp.themeSanityTest.header": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.themeSanityTest.header2": {
  "cmp.aura.component": [
   {}
  ]
 },
 "cmp.themeSanityTest.themeVariable": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.themesanitytest.header": [
   {}
  ]
 },
 "cmp.uitest.InputSelect_OptionsAttributeInitValue": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "whichToRender",
    "type": "String",
    "default": "VUWND"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.whichToRender == 'VUWND'}"
   },
   {
    "istrue": "{!v.whichToRender == 'VDSE'}"
   },
   {
    "istrue": "{!v.whichToRender == 'VUWD'}"
   },
   {
    "istrue": "{!v.whichToRender == 'VDSDNE'}"
   },
   {
    "istrue": "{!v.whichToRender == 'VNNO'}"
   },
   {
    "istrue": "{!v.whichToRender == 'VNWNNO'}"
   },
   {
    "istrue": "{!v.whichToRender == 'VNWNO'}"
   },
   {
    "istrue": "{!v.whichToRender == 'VNWDANO'}"
   },
   {
    "istrue": "{!v.whichToRender == 'VNWDANNO'}"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "aura:id": "Value_Undef_With_No_Default",
    "options": "{!m.noOptionsSel}"
   },
   {
    "aura:id": "Value_Def_Selection_Exists",
    "value": "Bear",
    "options": "{!m.noOptionsSel}"
   },
   {
    "aura:id": "Value_Undef_With_Default",
    "options": "{!m.secondOptionSel}"
   },
   {
    "aura:id": "Value_Def_Selection_DNE",
    "value": "Moose",
    "options": "{!m.noOptionsSel}"
   },
   {
    "aura:id": "Value_Null_No_Options",
    "value": ""
   },
   {
    "aura:id": "Value_Null_With_No_Null_Option",
    "value": "",
    "options": "{!m.noOptionsSel}"
   },
   {
    "aura:id": "Value_Null_With_Null_Option",
    "value": "",
    "options": "{!m.noOptionsSelWithNone}"
   },
   {
    "aura:id": "Value_Null_With_Default_And_Null_Option",
    "value": "",
    "options": "{!m.thirdOptionSelWithNone}"
   },
   {
    "aura:id": "Value_Null_With_Default_And_No_Null_Option",
    "value": "",
    "options": "{!m.thirdOptionSel}"
   }
  ]
 },
 "cmp.uitest.InputSelect_OptionsInBodyInitValue": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.uitest.inputselect_extend": [
   {
    "aura:id": "Value_Undef_With_Default"
   },
   {
    "aura:id": "Value_Undef_With_No_Default"
   },
   {
    "aura:id": "Value_Def_Selection_Exists",
    "value": "Bear"
   },
   {
    "aura:id": "Value_Def_Selection_DNE",
    "value": "Moose"
   },
   {
    "aura:id": "Value_Null_No_Options",
    "value": ""
   },
   {
    "aura:id": "Value_Null_With_No_Null_Option",
    "value": ""
   },
   {
    "aura:id": "Value_Null_With_Null_Option",
    "value": ""
   },
   {
    "aura:id": "Value_Null_With_Default_And_Null_Option",
    "value": ""
   },
   {
    "aura:id": "Value_Null_With_Default_And_No_Null_Option",
    "value": ""
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "text": "Tiger",
    "label": "Tiger"
   },
   {
    "text": "Lion",
    "label": "Lion",
    "value": "true"
   },
   {
    "text": "Bear",
    "label": "Bear"
   },
   {
    "text": "Moose",
    "label": "Moose"
   },
   {
    "text": "Tiger",
    "label": "Tiger"
   },
   {
    "text": "Lion",
    "label": "Lion"
   },
   {
    "text": "Bear",
    "label": "Bear"
   },
   {
    "text": "Tiger",
    "label": "Tiger"
   },
   {
    "text": "Lion",
    "label": "Lion"
   },
   {
    "text": "Bear",
    "label": "Bear"
   },
   {
    "text": "Tiger",
    "label": "Tiger"
   },
   {
    "text": "Lion",
    "label": "Lion"
   },
   {
    "text": "Bear",
    "label": "Bear"
   },
   {
    "text": "Tiger",
    "label": "Tiger"
   },
   {
    "text": "Lion",
    "label": "Lion"
   },
   {
    "text": "Bear",
    "label": "Bear"
   },
   {
    "text": "",
    "label": "None"
   },
   {
    "text": "Tiger",
    "label": "Tiger"
   },
   {
    "text": "Lion",
    "label": "Lion"
   },
   {
    "text": "Bear",
    "label": "Bear"
   },
   {
    "text": "",
    "label": "None"
   },
   {
    "text": "Tiger",
    "label": "Tiger"
   },
   {
    "text": "Lion",
    "label": "Lion",
    "value": "true"
   },
   {
    "text": "Bear",
    "label": "Bear"
   },
   {
    "text": "Tiger",
    "label": "Tiger"
   },
   {
    "text": "Lion",
    "label": "Lion"
   },
   {
    "text": "Bear",
    "label": "Bear",
    "value": "true"
   }
  ]
 },
 "cmp.uitest.LocalizationService_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.outputdatetime": [
   {
    "value": "2004-09-23T16:30:00.000Z",
    "timezone": "GMT",
    "aura:id": "myOutputDateTimeComp"
   },
   {
    "value": "2004-09-23T16:30:00.000+0800",
    "timezone": "GMT",
    "aura:id": "myOutputDateTimeCompGMT8"
   },
   {
    "value": "2013-11-02T16:01:00.000Z",
    "timezone": "Asia/Hong_Kong",
    "aura:id": "myOutputDateTimeCompHongKong1"
   },
   {
    "value": "2013-11-02T17:01:00.000Z",
    "timezone": "Asia/Hong_Kong",
    "aura:id": "myOutputDateTimeCompHongKong2"
   },
   {
    "value": "2013-11-02T18:01:00.000Z",
    "timezone": "Asia/Hong_Kong",
    "aura:id": "myOutputDateTimeCompHongKong3"
   },
   {
    "value": "2013-11-03T04:01:00.000Z",
    "timezone": "America/New_York",
    "aura:id": "myOutputDateTimeCompNewYork1"
   },
   {
    "value": "2013-11-03T05:01:00.000Z",
    "timezone": "America/New_York",
    "aura:id": "myOutputDateTimeCompNewYork2"
   },
   {
    "value": "2013-11-03T06:01:00.000Z",
    "timezone": "America/New_York",
    "aura:id": "myOutputDateTimeCompNewYork3"
   }
  ],
  "cmp.ui.outputdate": [
   {
    "value": "2004-09-23",
    "aura:id": "myOutputDateComp"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "4:30:00 PM",
    "aura:id": "myOutputTextComp"
   }
  ],
  "cmp.ui.outputnumber": [
   {
    "value": "3.14159",
    "format": ".00",
    "aura:id": "myOutputNumberComp"
   }
  ],
  "cmp.ui.outputpercent": [
   {
    "value": "0.14566",
    "format": ".00%",
    "aura:id": "myOutputPercentComp"
   }
  ],
  "cmp.ui.outputcurrency": [
   {
    "value": "1234567890",
    "format": "¤#,##0.00",
    "aura:id": "myOutputCurrencyComp"
   }
  ]
 },
 "cmp.uitest.accessibilityTool": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "caseToRender",
    "type": "String",
    "default": "full"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.caseToRender == 'testMultiULToOne'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testTopPanelHidden'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testActiveTopPanelAriaHiddenIsTrue'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testBasePanelAriaHiddenIsFalse'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testNoActiveTopPanelAriaHiddenOk'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testNoActiveTopPanelBasePanelAriaHiddenIsTrue'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testNoActiveTopPanelAriaHiddenNotExists'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testNoActiveSliderAriaHiddenCorrect'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testActiveSliderAriaHiddenIncorrect'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testActivePanelSliderAriaHiddenCorrect'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testInputDefaultError'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testWithNoHeader'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testThWithScopeNoTD'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testThWithIdNoTD'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testTableHeaderWithScope'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testTHandTDtagsAssociateCorrectly'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testTDUsesWrongID'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testTDWithOutHeaderAttrib'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testTableHeaderWoID'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testTableHeadersWandWoScope'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testThNoWoScope'}"
   },
   {
    "istrue": "{!v.caseToRender == 'testScopeWithWrongVal'}"
   },
   {
    "istrue": "{!v.caseToRender == 'skipIframeForVisForce'}"
   },
   {
    "istrue": "{!v.caseToRender == 'imageTagTest'}"
   },
   {
    "istrue": "{!v.caseToRender == 'buttonLabelValid'}"
   },
   {
    "istrue": "{!v.caseToRender == 'labelsNotNeeded'}"
   },
   {
    "istrue": "{!v.caseToRender == 'fieldSetWithStyles'}"
   },
   {
    "istrue": "{!v.caseToRender == 'full'}"
   },
   {
    "istrue": "{!v.caseToRender == 'labelTest'}"
   },
   {
    "istrue": "{!v.caseToRender == 'anchorWOInnerText'}"
   },
   {
    "istrue": "{!v.caseToRender == 'anchorWInnerText'}"
   },
   {
    "istrue": "{!v.caseToRender == 'anchorInOutputURLInfo'}"
   },
   {
    "istrue": "{!v.caseToRender == 'anchorInOutputURLDeco'}"
   },
   {
    "istrue": "{!v.caseToRender == 'anchorMenuTest'}"
   },
   {
    "istrue": "{!v.caseToRender == 'ckeditor_test'}"
   },
   {
    "istrue": "{!v.caseToRender == 'NoRadioErrors'}"
   },
   {
    "istrue": "{!v.caseToRender == 'RadioErrors'}"
   },
   {
    "istrue": "{!v.caseToRender == 'headersCorrectOrder'}"
   },
   {
    "istrue": "{!v.caseToRender == 'headersWrongOrder'}"
   },
   {
    "istrue": "{!v.caseToRender == 'headersWrongOrderReverse'}"
   },
   {
    "istrue": "{!v.caseToRender == 'headersWrongOrderWrapAround'}"
   },
   {
    "istrue": "{!v.caseToRender == 'tagsWithoutAttributes'}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inputTextId",
    "label": "hello"
   },
   {
    "aura:id": "first",
    "placeholder": "First name"
   },
   {
    "aura:id": "mid",
    "placeholder": "Middle Name"
   },
   {
    "aura:id": "last",
    "placeholder": "Last name"
   },
   {
    "aura:id": "first",
    "placeholder": "First name"
   },
   {
    "aura:id": "mid",
    "placeholder": "Middle Name"
   },
   {
    "aura:id": "last",
    "placeholder": "Last name"
   }
  ],
  "cmp.ui.inputdefaulterror": [
   {
    "aura:id": "error1",
    "value": "first error, second error, third error, fourth error"
   },
   {
    "aura:id": "error2",
    "value": "first error, second error, third error, fourth error"
   },
   {
    "value": "first error, second error, third error, fourth error"
   }
  ],
  "cmp.uitest.inputdefaulterror_test": [
   {
    "aura:id": "inputErrorTest",
    "casetorender": "all"
   }
  ],
  "cmp.ui.image": [
   {
    "src": "2",
    "alt": "",
    "imagetype": "decorative"
   },
   {
    "src": "3",
    "alt": "  Blah  ",
    "imagetype": "informational"
   },
   {
    "src": "9",
    "alt": "  UnDeFiNeD  ",
    "imagetype": "informational"
   },
   {
    "src": "10",
    "alt": "  EMPTY  ",
    "imagetype": "informational"
   },
   {
    "src": "11",
    "alt": "  NuLl  ",
    "imagetype": "informational"
   }
  ],
  "cmp.ui.button": [
   {
    "iconimgsrc": "/auraFW/resources/aura/images/bug.png",
    "label": ""
   },
   {
    "labeldisplay": "false",
    "label": " "
   },
   {
    "label": ""
   },
   {
    "iconimgsrc": "/auraFW/resources/aura/images/bug.png",
    "label": "bug Icon"
   },
   {
    "label": "This should be shown"
   }
  ],
  "cmp.ui.block": [
   {},
   {},
   {},
   {}
  ],
  "cmp.ui.label": [
   {
    "for": "birthdayInput",
    "label": "Birthday"
   },
   {
    "label": "21-25"
   },
   {
    "label": "26-30"
   },
   {
    "label": "31-35"
   },
   {
    "label": "36-40"
   },
   {
    "for": "first",
    "label": "first"
   },
   {
    "for": "mid",
    "label": "mid"
   },
   {
    "for": "21-25",
    "label": "21-25"
   },
   {
    "for": "26-30",
    "label": "26-30"
   },
   {
    "for": "31-35",
    "label": "31-35"
   },
   {
    "for": "tellUsAboutYou",
    "label": "tellUsAboutYou"
   },
   {
    "for": "last",
    "label": "last"
   },
   {
    "for": "birthdayInput",
    "label": "Birthday"
   },
   {
    "for": "26-30",
    "label": "26-30"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "aura:id": "birthdayInput",
    "displaydatepicker": "true"
   },
   {
    "aura:id": "birthdayInput",
    "displaydatepicker": "true"
   }
  ],
  "cmp.ui.inputradio": [
   {
    "aura:id": "21-25"
   },
   {
    "aura:id": "26-30"
   },
   {
    "aura:id": "31-35"
   },
   {
    "aura:id": "36-40"
   },
   {
    "label": "Old and wise enough",
    "aura:id": "Old and wise enough"
   },
   {
    "label": "I WANT TO BE CLICKED!!!!",
    "aura:id": "click me"
   },
   {
    "aura:id": "21-25"
   },
   {
    "aura:id": "26-30"
   },
   {
    "aura:id": "31-35"
   },
   {
    "label": "Old and wise enough",
    "aura:id": "Old and wise enough"
   },
   {
    "label": "I WANT TO BE CLICKED!!!!",
    "aura:id": "click me"
   },
   {
    "aura:id": "26-30"
   },
   {
    "label": "Radio5",
    "name": "Group1"
   },
   {
    "label": "Radio6",
    "name": "Group1"
   },
   {
    "label": "Radio7",
    "name": "Group2"
   },
   {
    "label": "Radio9",
    "name": "Group4"
   },
   {
    "label": "Radio5",
    "name": "Group1"
   },
   {
    "label": "Radio6",
    "name": "Group1"
   },
   {
    "label": "Radio7",
    "name": "Group2"
   },
   {
    "label": "Radio8",
    "name": "Group2"
   },
   {
    "label": "Radio10",
    "name": "Group4"
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "aura:id": "tellUsAboutYou",
    "placeholder": "Tell us about yourself",
    "rows": "10",
    "cols": "20"
   },
   {
    "aura:id": "tellUsAboutYou",
    "placeholder": "Tell us about yourself",
    "rows": "10",
    "cols": "20"
   }
  ],
  "cmp.ui.menu": [
   {}
  ],
  "cmp.ui.menutriggerlink": [
   {
    "class": "radioMenuLabel",
    "aura:id": "radioMenuLabel",
    "label": "National League West"
   }
  ],
  "cmp.ui.menulist": [
   {
    "class": "radioMenu",
    "aura:id": "radioMenu"
   }
  ],
  "cmp.ui.radiomenuitem": [
   {
    "class": "radioItem1",
    "aura:id": "radioItem1",
    "label": "San Francisco"
   },
   {
    "class": "radioItem2",
    "aura:id": "radioItem2",
    "label": "LA Dodgers"
   },
   {
    "class": "radioItem3",
    "aura:id": "radioItem3",
    "label": "Arizona"
   },
   {
    "class": "radioItem4",
    "aura:id": "radioItem4",
    "label": "Diego",
    "disabled": "true"
   },
   {
    "class": "radioItem5",
    "aura:id": "radioItem5",
    "label": "Colorado"
   }
  ],
  "cmp.ui.inputrichtext": [
   {
    "aura:id": "RICH_TEXT",
    "label": "label For Rich Text",
    "value": "{!v.testContent}"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "label": "Radio1",
    "name": "Group1"
   },
   {
    "label": "Radio2",
    "name": "Group1"
   },
   {
    "label": "Radio3",
    "name": "Group1"
   },
   {
    "label": "Radio4",
    "name": "Group1"
   },
   {
    "label": "Radio8",
    "name": "Group3"
   },
   {
    "label": "Radio1",
    "name": "Group1"
   },
   {
    "label": "Radio2",
    "name": "Group1"
   },
   {
    "label": "Radio3",
    "name": "Group1"
   },
   {
    "label": "Radio4",
    "name": "Group1"
   },
   {
    "label": "Radio9",
    "name": "Group3"
   }
  ]
 },
 "cmp.uitest.asyncImage_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "defaultSrc",
    "type": "String",
    "default": ""
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "ui:asyncComponentLoaded",
    "type": "EVENT"
   },
   {
    "resource": "ui:asyncComponentRegister",
    "type": "EVENT"
   }
  ],
  "cmp.ui.asyncimage": [
   {
    "aura:id": "asyncImage",
    "actualimagesrc": "{!v.defaultSrc}",
    "alt": "hello"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "loadButton",
    "label": "Fire Load Event",
    "press": "{!c.load}"
   }
  ]
 },
 "cmp.uitest.autoComplete_CustomOption": {
  "cmp.aura.component": [
   {
    "extends": "ui:autocompleteOption"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "visible",
    "type": "Boolean"
   }
  ]
 },
 "cmp.uitest.autoComplete_CustomTemplate": {
  "cmp.aura.component": [
   {
    "extends": "ui:interactive",
    "implements": "ui:autocompleteOptionTemplate"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   },
   {
    "name": "visible",
    "type": "Boolean"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "focus",
    "action": "{!c.handleFocus}"
   }
  ]
 },
 "cmp.uitest.autoComplete_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.autocomplete": [
   {
    "aura:id": "autoComplete",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeAutoCompleteMatchDone}",
    "inputchange": "{!c.handleInputChangeAutoComplete}",
    "selectlistoption": "{!c.handleSelectOptionAutoComplete}",
    "label": "Generic Auto Complete"
   },
   {
    "aura:id": "autoCompleteNoData",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeNoDataMatchDone}",
    "inputchange": "{!c.handleInputChangeNoData}",
    "selectlistoption": "{!c.handleSelectOptionNoData}",
    "keydown": "{!c.handleKeyDown}"
   },
   {
    "aura:id": "autoCompleteLargeList",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeLargeListMatchDone}",
    "inputchange": "{!c.handleInputChangeLargeList}",
    "selectlistoption": "{!c.handleSelectOptionLargeList}",
    "label": "Large List Auto Complete",
    "labelposition": "hidden"
   },
   {
    "aura:id": "autoCompleteCustomTemplate",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeCustomTemplateMatchDone}",
    "inputchange": "{!c.handleInputChangeCustomTemplate}",
    "selectlistoption": "{!c.handleSelectOptionCustomTemplate}"
   },
   {
    "aura:id": "autoCompleteCustomOption",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeCustomOptionMatchDone}",
    "inputchange": "{!c.handleInputChangeCustomOption}",
    "selectlistoption": "{!c.handleSelectOptionCustomOption}"
   },
   {
    "class": "autoCompleteUpdateOn",
    "aura:id": "autoCompleteUpdateOn",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeNoDataMatchDone}",
    "inputchange": "{!c.handleInputChangeNoData}",
    "selectlistoption": "{!c.handleSelectOptionNoData}",
    "keydown": "{!c.handleKeyDown}",
    "updateon": "keydown,change"
   },
   {
    "aura:id": "autoCompleteEmptyListContent",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeEmptyListContentMatchDone}",
    "inputchange": "{!c.handleInputChangeEmptyListContent}",
    "selectlistoption": "{!c.handleSelectOptionEmptyListContent}"
   },
   {
    "aura:id": "autoCompleteMatchFunc",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeMatchFuncMatchDone}",
    "inputchange": "{!c.handleInputChangeMatchFunc}",
    "selectlistoption": "{!c.handleSelectOptionMatchFunc}",
    "matchfunc": "{!c.matchFuncShowAllMatchFunc}"
   },
   {
    "class": "autoCompleteFocus blur focus",
    "aura:id": "autoCompleteFocus",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeNoDataMatchDone}",
    "inputchange": "{!c.handleInputChangeNoData}",
    "selectlistoption": "{!c.handleSelectOptionNoData}",
    "focus": "{!c.handleOnFocus}",
    "blur": "{!c.handleOnBlur}"
   },
   {
    "aura:id": "autoCompleteToggle",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeToggleMatchDone}",
    "inputchange": "{!c.handleInputChangeToggle}",
    "selectlistoption": "{!c.handleSelectOptionToggle}",
    "matchfunc": "{!c.matchFuncShowAllToggle}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "emptyListContent"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "autocompleteButton"
   }
  ],
  "cmp.uitest.autocomplete_testdataprovider": [
   {},
   {
    "datatype": "emptyList"
   },
   {
    "datatype": "largeList"
   },
   {},
   {},
   {
    "datatype": "emptyList"
   },
   {},
   {},
   {
    "datatype": "emptyList"
   },
   {}
  ],
  "cmp.ui.autocompleteoption": [
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   },
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   },
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   },
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   },
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   },
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   },
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   },
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "autoCompleteMatchSize",
    "value": ""
   },
   {
    "aura:id": "autoCompleteNoDataMatchSize",
    "value": ""
   },
   {
    "aura:id": "autoCompleteLargeListMatchSize",
    "value": ""
   },
   {
    "aura:id": "autoCompleteCustomTemplateMatchSize",
    "value": ""
   },
   {
    "aura:id": "autoCompleteCustomOptionMatchSize",
    "value": ""
   },
   {
    "aura:id": "outputLabel",
    "class": "outputLabel",
    "value": ""
   },
   {
    "value": "No matches found"
   },
   {
    "aura:id": "autoCompleteEmptyListContentMatchSize",
    "value": ""
   },
   {
    "aura:id": "autoCompleteMatchFuncMatchSize",
    "value": ""
   },
   {
    "aura:id": "outputLabelOnFocusAndBlur",
    "class": "outputLabelOnFocusAndBlur",
    "value": ""
   },
   {
    "aura:id": "autoCompleteToggleMatchSize",
    "value": ""
   }
  ],
  "cmp.uitest.autocomplete_customtemplate": [
   {
    "value": "{!row.label}",
    "visible": "{!row.visible}"
   }
  ],
  "cmp.uitest.autocomplete_customoption": [
   {
    "label": "{!row.label}",
    "visible": "{!row.visible}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Toggle",
    "press": "{!c.handleToggleActionToggle}"
   }
  ]
 },
 "cmp.uitest.autoComplete_updateOnTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.autocomplete": [
   {
    "aura:id": "autoCompleteNoData",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeNoDataMatchDone}",
    "inputchange": "{!c.handleInputChangeNoData}",
    "selectlistoption": "{!c.handleSelectOptionNoData}",
    "keydown": "{!c.handleKeyDown}"
   },
   {
    "aura:id": "autoCompleteLargeList",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeLargeListMatchDone}",
    "inputchange": "{!c.handleInputChangeLargeList}",
    "selectlistoption": "{!c.handleSelectOptionLargeList}",
    "label": "Large List Auto Complete",
    "labelposition": "hidden"
   },
   {
    "aura:id": "autoCompleteCustomTemplate",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeCustomTemplateMatchDone}",
    "inputchange": "{!c.handleInputChangeCustomTemplate}",
    "selectlistoption": "{!c.handleSelectOptionCustomTemplate}"
   },
   {
    "aura:id": "autoCompleteCustomOption",
    "optionvar": "row",
    "matchdone": "{!c.handleInputChangeCustomOptionMatchDone}",
    "inputchange": "{!c.handleInputChangeCustomOption}",
    "selectlistoption": "{!c.handleSelectOptionCustomOption}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   }
  ],
  "cmp.uitest.autocomplete_testdataprovider": [
   {
    "datatype": "emptyList"
   },
   {
    "datatype": "largeList"
   },
   {},
   {}
  ],
  "cmp.ui.autocompleteoption": [
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   },
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row.value}",
    "visible": "{!row.visible}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "autoCompleteNoDataMatchSize",
    "value": ""
   },
   {
    "aura:id": "autoCompleteLargeListMatchSize",
    "value": ""
   },
   {
    "aura:id": "autoCompleteCustomTemplateMatchSize",
    "value": ""
   },
   {
    "aura:id": "autoCompleteCustomOptionMatchSize",
    "value": ""
   },
   {
    "aura:id": "outputLabel",
    "class": "outputLabel",
    "value": ""
   }
  ],
  "cmp.uitest.autocomplete_customtemplate": [
   {
    "value": "{!row.label}",
    "visible": "{!row.visible}"
   }
  ],
  "cmp.uitest.autocomplete_customoption": [
   {
    "label": "{!row.label}",
    "visible": "{!row.visible}"
   }
  ]
 },
 "cmp.uitest.autocomplete_TestDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "description": "A test data provider to test autocomplete component.",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "dataType",
    "type": "String"
   }
  ]
 },
 "cmp.uitest.badRenderer": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "skipRender",
    "type": "Boolean"
   },
   {
    "name": "skipAfterRender",
    "type": "Boolean"
   },
   {
    "name": "skipRerender",
    "type": "Boolean"
   },
   {
    "name": "skipUnrerender",
    "type": "Boolean"
   }
  ]
 },
 "cmp.uitest.block_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.block": [
   {
    "aura:id": "overflowHidden"
   },
   {
    "aura:id": "overflowVisible",
    "overflow": "true",
    "tag": "span"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "left"
   },
   {
    "attribute": "right"
   }
  ]
 },
 "cmp.uitest.button_LabelRequiredTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.button": [
   {}
  ]
 },
 "cmp.uitest.button_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "iconAndLabelButtonPressedMessage",
    "type": "String",
    "default": "Icon and label button NOT yet pressed"
   },
   {
    "name": "labelOnlyButtonPressedMessage",
    "type": "String",
    "default": "Label only button NOT yet pressed"
   },
   {
    "name": "iconOnlyButtonPressedMessage",
    "type": "String",
    "default": "Icon only button NOT yet pressed"
   },
   {
    "name": "isDomEventSet",
    "type": "boolean",
    "default": "{!false}"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "Icon_and_label",
    "label": "Icon and label",
    "disabled": "false",
    "press": "{!c.handleIconAndLabel}",
    "iconimgsrc": "/auraFW/resources/aura/images/checkbox_checked.gif",
    "accesskey": "i"
   },
   {
    "class": "Label_only",
    "label": "Label only!!",
    "disabled": "false",
    "press": "{!c.handleLabelOnly}",
    "iconimgsrc": "",
    "labeldir": "rtl"
   },
   {
    "class": "Icon_only",
    "disabled": "false",
    "press": "{!c.handleIconOnly}",
    "iconimgsrc": "/auraFW/resources/aura/images/checkbox_checked.gif",
    "label": "Icon_only",
    "labeldisplay": "false"
   },
   {
    "class": "testDomEventBtn",
    "label": "testDomEvent",
    "press": "{!c.checkDomEventSet}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "class": "Icon_and_label",
    "value": "{!v.iconAndLabelButtonPressedMessage}"
   },
   {
    "class": "Label_only",
    "value": "{!v.labelOnlyButtonPressedMessage}"
   },
   {
    "class": "Icon_only",
    "value": "{!v.iconOnlyButtonPressedMessage}"
   }
  ]
 },
 "cmp.uitest.carousel_SpinnerTest": {
  "cmp.aura.component": [
   {
    "extends": "ui:carouselDeprecated"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "loadPage",
    "action": "{!c.loadPage}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "spinner"
   },
   {
    "attribute": "pageComponents"
   }
  ],
  "cmp.ui.spinner": [
   {
    "aura:id": "testSpinner",
    "isvisible": "false"
   }
  ],
  "cmp.ui.carouselpage": [
   {
    "aura:id": "p1"
   },
   {
    "aura:id": "p2"
   },
   {
    "aura:id": "p3"
   }
  ]
 },
 "cmp.uitest.carousel_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "isPageChangeActionCalled",
    "type": "Boolean",
    "default": "{!false}"
   }
  ],
  "cmp.ui.carouseldeprecated": [
   {
    "aura:id": "carousel1",
    "width": "450",
    "height": "450",
    "class": "myclass"
   },
   {
    "aura:id": "carousel2"
   },
   {
    "aura:id": "carouselNavBottom",
    "width": "450",
    "height": "450",
    "pageindicatorposition": "bottom"
   },
   {
    "aura:id": "carouselDefaultOverride",
    "width": "450",
    "height": "450",
    "title": "Im A Carousel",
    "defaultpage": "3"
   },
   {
    "aura:id": "carouselMaxPages",
    "width": "450",
    "height": "450"
   },
   {
    "aura:id": "carouselInCarousel",
    "width": "450",
    "height": "450"
   },
   {
    "aura:id": "childCarousel-smaller",
    "width": "100",
    "height": "100"
   },
   {
    "aura:id": "childCarousel-sameDim",
    "width": "450",
    "height": "450"
   },
   {
    "aura:id": "childCarousel-larger",
    "width": "600",
    "height": "600"
   },
   {
    "aura:id": "carouselContinousFlow",
    "width": "450",
    "height": "450",
    "continuousflow": "{!true}"
   },
   {
    "aura:id": "pgChangeAction",
    "width": "450",
    "height": "450",
    "onpagechange": "{!c.changePageAction}"
   },
   {
    "aura:id": "emptyCarousel",
    "width": "450",
    "height": "450",
    "title": "EMPTY CAROUSEL"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "pageComponents"
   },
   {
    "attribute": "pageComponents"
   },
   {
    "attribute": "pageComponents"
   },
   {
    "attribute": "pageComponents"
   },
   {
    "attribute": "pageComponents"
   },
   {
    "attribute": "pageComponents"
   },
   {
    "attribute": "pageComponents"
   },
   {
    "attribute": "pageComponents"
   },
   {
    "attribute": "pageComponents"
   },
   {
    "attribute": "pageComponents"
   },
   {
    "attribute": "pageComponents"
   }
  ],
  "cmp.ui.carouselpagedeprecated": [
   {
    "aura:id": "c1-p1"
   },
   {
    "aura:id": "c1-p2",
    "isdefault": "{!true}"
   },
   {
    "aura:id": "c1-pageWithLongString",
    "title": "PAGE 3"
   },
   {
    "aura:id": "c1-bigImage"
   },
   {
    "aura:id": "c1-mixContent"
   },
   {
    "aura:id": "c1-empty"
   },
   {
    "aura:id": "c1-updateOutput"
   },
   {},
   {
    "aura:id": "cnb-p1"
   },
   {
    "aura:id": "cnb-p2"
   },
   {
    "aura:id": "cnb-p3"
   },
   {
    "title": "Im Page 1"
   },
   {
    "title": "Im Page 2",
    "isdefault": "{!true}"
   },
   {
    "title": "Im Page 3"
   },
   {},
   {
    "aura:id": "cinc-p1"
   },
   {
    "aura:id": "childCarousel-smaller-p1"
   },
   {
    "aura:id": "childCarousel-smaller-p2"
   },
   {
    "aura:id": "childCarousel-smaller-p3"
   },
   {
    "aura:id": "cinc-p2"
   },
   {
    "aura:id": "childCarousel-sameDim-p1"
   },
   {
    "aura:id": "childCarousel-sameDim-p2"
   },
   {
    "aura:id": "childCarousel-sameDim-p3"
   },
   {
    "aura:id": "cinc-p3"
   },
   {
    "aura:id": "childCarousel-larger-p1"
   },
   {
    "aura:id": "childCarousel-larger-p2"
   },
   {
    "aura:id": "childCarousel-larger-p3"
   },
   {},
   {},
   {},
   {
    "aura:id": "cpca-p1"
   },
   {
    "aura:id": "cpca-p2"
   },
   {
    "aura:id": "cpca-p3"
   }
  ],
  "cmp.ui.image": [
   {
    "src": "/auraFW/resources/aura/images/auraNoteDemo.png",
    "imagetype": "decorative"
   },
   {
    "src": "/auraFW/resources/aura/images/hula.gif",
    "imagetype": "decorative"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "label": "a checkbox"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "label": "enter a number"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "hello, i'm an output text component"
   },
   {
    "aura:id": "output",
    "value": "i have something to say..."
   },
   {
    "aura:id": "cdo-p1-output",
    "value": "page 1"
   },
   {
    "aura:id": "cdo-p2-output",
    "value": "page 2"
   },
   {
    "aura:id": "cdo-p3-output",
    "value": "page 3"
   },
   {
    "aura:id": "ccf-p1-output",
    "value": "page 1"
   },
   {
    "aura:id": "ccf-p2-output",
    "value": "page 2"
   },
   {
    "aura:id": "ccf-p3-output",
    "value": "page 3"
   },
   {
    "aura:id": "cpca-p1-output",
    "value": "page 1"
   },
   {
    "aura:id": "cpca-p2-output",
    "value": "page 2"
   },
   {
    "aura:id": "cpca-p3-output",
    "value": "page 3"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "btnUpdateOutput",
    "press": "{!c.updateOutput}",
    "label": "update output"
   },
   {
    "aura:id": "btnCreatePages",
    "press": "{!c.addManyPgCarousel}",
    "label": "create pages"
   },
   {
    "aura:id": "btnForceRefresh",
    "press": "{!c.forceRefresh}",
    "label": "refresh"
   }
  ],
  "cmp.ui.scroller": [
   {}
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.pageList}",
    "var": "page"
   }
  ]
 },
 "cmp.uitest.dataGridPureHtmlTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "total",
    "type": "Integer",
    "default": "3000"
   }
  ]
 },
 "cmp.uitest.dataGrid_Actions": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "pageSize",
    "type": "Integer",
    "default": "100"
   },
   {
    "name": "currentPage",
    "type": "Integer",
    "default": "1"
   },
   {
    "name": "totalPages",
    "type": "Integer",
    "default": "5"
   },
   {
    "name": "sortBy",
    "type": "String"
   },
   {
    "name": "totalItems",
    "type": "Integer"
   },
   {
    "name": "mode",
    "type": "String",
    "default": "VIEW"
   }
  ],
  "cmp.ui.datagrid": [
   {
    "aura:id": "grid",
    "mode": "{!v.mode}",
    "sortby": "{!v.sortBy}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "columns"
   },
   {
    "attribute": "actionDelegate"
   },
   {
    "attribute": "dataProvider"
   }
  ],
  "cmp.ui.datagridselectioncolumn": [
   {}
  ],
  "cmp.ui.datagridcolumn": [
   {
    "label": "Id",
    "name": "id",
    "sortable": "true"
   },
   {
    "label": "Subject",
    "name": "subject"
   },
   {
    "label": "Name",
    "name": "name"
   },
   {
    "label": "Related To",
    "name": "relatedTo"
   },
   {
    "label": "Due Date",
    "name": "date"
   }
  ],
  "cmp.ui.datagridactioncolumn": [
   {
    "label": "Actions"
   }
  ],
  "cmp.ui.actionbutton": [
   {
    "name": "disable",
    "label": "Disable",
    "index": "{!index}",
    "disabled": "{!disabled}"
   },
   {
    "name": "enable",
    "label": "Enable",
    "index": "{!index}",
    "disabled": "{!!disabled}"
   },
   {
    "name": "toggleClass",
    "label": "Toggle Class",
    "index": "{!index}",
    "disabled": "{!disabled}"
   }
  ],
  "cmp.ui.actiondelegate": [
   {
    "onaction": "{!c.handleAction}"
   }
  ],
  "cmp.uitest.datagrid_testdataprovider": [
   {
    "aura:id": "provider",
    "sortby": "{!v.sortBy}",
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalpages": "{!v.totalPages}",
    "totalitems": "{!v.totalItems}"
   }
  ]
 },
 "cmp.uitest.dataGrid_ColumnsTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "pageSize",
    "type": "Integer",
    "default": "10"
   },
   {
    "name": "currentPage",
    "type": "Integer",
    "default": "1"
   },
   {
    "name": "totalPages",
    "type": "Integer",
    "default": "5"
   },
   {
    "name": "colCount",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "useSecondColumnType",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "appendOrOverwrite",
    "type": "String",
    "default": "overwrite"
   },
   {
    "name": "useDynamicColumns",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "sortBy",
    "type": "String"
   },
   {
    "name": "totalItems",
    "type": "Integer"
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:dataGrid"
   },
   {
    "resource": "markup://ui:dataGridColumn"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Add a Column",
    "press": "{!c.addAColumn}",
    "aura:id": "addAColumn"
   },
   {
    "label": "5 Columns",
    "press": "{!c.goTo5Columns}",
    "aura:id": "goTo5Columns"
   },
   {
    "label": "2 Columns",
    "press": "{!c.goTo2Columns}",
    "aura:id": "goTo2Columns"
   },
   {
    "label": "1 Columns",
    "press": "{!c.goTo1Column}",
    "aura:id": "goTo1Column"
   },
   {
    "label": "use wrong name",
    "press": "{!c.goToColumnWithWrongName}",
    "aura:id": "goToColumnWithWrongName"
   },
   {
    "label": "remove Columns",
    "press": "{!c.removeColumns}",
    "aura:id": "removeColumns"
   },
   {
    "label": "Sortable Columns",
    "press": "{!c.goToSortedColumns}",
    "aura:id": "goToSortedColumns"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.useDynamicColumns}"
   }
  ],
  "cmp.ui.datagrid": [
   {
    "aura:id": "grid",
    "mode": "VIEW",
    "sortby": "{!v.sortBy}"
   },
   {
    "aura:id": "grid",
    "mode": "VIEW",
    "sortby": "{!v.sortBy}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "columns"
   },
   {
    "attribute": "dataProvider"
   }
  ],
  "cmp.uitest.datagrid_testdataprovider": [
   {
    "aura:id": "provider",
    "sortby": "{!v.sortBy}",
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalpages": "{!v.totalPages}",
    "totalitems": "{!v.totalItems}"
   },
   {
    "aura:id": "provider",
    "sortby": "{!v.sortBy}",
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalpages": "{!v.totalPages}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.ui.datagridcolumn": [
   {
    "label": "Item Id",
    "name": "id",
    "sortable": "true"
   },
   {
    "label": "Item Subject",
    "name": "subject"
   }
  ]
 },
 "cmp.uitest.dataGrid_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "pageSize",
    "type": "Integer",
    "default": "100"
   },
   {
    "name": "currentPage",
    "type": "Integer",
    "default": "1"
   },
   {
    "name": "totalPages",
    "type": "Integer",
    "default": "5"
   },
   {
    "name": "sortBy",
    "type": "String"
   },
   {
    "name": "numItems2Create",
    "type": "Integer",
    "default": "1"
   },
   {
    "name": "currentRandNum",
    "type": "Integer",
    "default": "6000"
   },
   {
    "name": "totalItems",
    "type": "Integer"
   },
   {
    "name": "mode",
    "type": "String",
    "default": "VIEW"
   },
   {
    "name": "index",
    "type": "Integer"
   },
   {
    "name": "count",
    "type": "Integer"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.currentPage}",
    "action": "{!c.handleCurrentPageChange}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "refireDP",
    "label": "Re-fire datagrid's provide",
    "press": "{!c.replaceData}"
   },
   {
    "aura:id": "addRow",
    "label": "Add row",
    "press": "{!c.handleAddRow}"
   },
   {
    "aura:id": "insert",
    "label": "Insert",
    "press": "{!c.handleInsert}"
   },
   {
    "aura:id": "remove",
    "label": "Remove",
    "press": "{!c.handleRemove}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "placeholder": "index",
    "label": "index",
    "labelposition": "hidden",
    "aura:id": "index",
    "value": "{!v.index}"
   },
   {
    "placeholder": "count",
    "label": "count",
    "labelposition": "hidden",
    "aura:id": "count",
    "value": "{!v.count}"
   }
  ],
  "cmp.ui.datagrid": [
   {
    "aura:id": "grid",
    "mode": "{!v.mode}",
    "sortby": "{!v.sortBy}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "columns"
   },
   {
    "attribute": "dataProvider"
   }
  ],
  "cmp.ui.datagridselectioncolumn": [
   {}
  ],
  "cmp.ui.datagridcolumn": [
   {
    "label": "Id",
    "name": "id",
    "sortable": "true"
   },
   {
    "label": "Subject",
    "name": "subject"
   },
   {
    "label": "Name",
    "name": "name"
   },
   {
    "label": "Related To",
    "name": "relatedTo"
   },
   {
    "label": "Due Date",
    "name": "date"
   }
  ],
  "cmp.uitest.datagrid_testdataprovider": [
   {
    "aura:id": "provider",
    "sortby": "{!v.sortBy}",
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalpages": "{!v.totalPages}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.ui.pagernextprevious": [
   {
    "aura:id": "pagerNextPrev",
    "pagecount": "{!v.totalPages}",
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.ui.pagerpageinfo": [
   {
    "aura:id": "pageInfo",
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalitems": "{!v.totalItems}"
   }
  ]
 },
 "cmp.uitest.dataGrid_TestDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "sortBy",
    "type": "String"
   },
   {
    "name": "currentPage",
    "type": "Integer"
   },
   {
    "name": "pageSize",
    "type": "Integer"
   },
   {
    "name": "loadData",
    "type": "Integer"
   },
   {
    "name": "totalPages",
    "type": "Integer"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "provide",
    "action": "{!c.handleProvide}"
   }
  ]
 },
 "cmp.uitest.dataTable_EmptyItems": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.datatable": [
   {
    "aura:id": "dataTable"
   }
  ]
 },
 "cmp.uitest.dataTable_NoHeaderValue": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.datatable": [
   {
    "aura:id": "dataTable"
   }
  ]
 },
 "cmp.uitest.datePickerGrid_FirstWeekDayTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "firstDayOfWeek",
    "type": "String",
    "default": ""
   },
   {
    "name": "namesOfWeekdaysStr",
    "type": "String",
    "default": ""
   },
   {
    "name": "totalWeekdays",
    "type": "String",
    "default": ""
   }
  ],
  "cmp.ui.datepickergrid": [
   {
    "aura:id": "grid",
    "selecteddate": "2015-4-15",
    "date": "15",
    "month": "4",
    "year": "2015"
   }
  ]
 },
 "cmp.uitest.datePickerManager_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "default": "2013-09-25"
   }
  ],
  "cmp.ui.inputdatetrigger": [
   {
    "aura:id": "inputWDefValue",
    "displaydatepicker": "true",
    "format": "yyyy-MM-dd",
    "value": "{!v.value}"
   },
   {
    "aura:id": "inputWODefValue",
    "class": "date_input_box",
    "displaydatepicker": "true",
    "format": "MM/dd/yyyy"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "value": "{!v.value}",
    "aura:id": "inputWNoDatePicker",
    "displaydatepicker": "true",
    "loaddatepicker": "true",
    "format": "yyyy-MM-dd"
   }
  ],
  "cmp.ui.datepickermanager": [
   {
    "aura:id": "dpm"
   }
  ]
 },
 "cmp.uitest.datePicker_TodayButtonTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "showToday",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "selectedDate",
    "type": "Object",
    "default": "true"
   }
  ],
  "cmp.ui.datepicker": [
   {
    "aura:id": "datePicker",
    "showtoday": "{!v.showToday}",
    "selectdate": "{!c.handleSelectedDate}",
    "visible": "true"
   }
  ]
 },
 "cmp.uitest.demoMenuTrigger": {
  "cmp.aura.component": [
   {
    "extends": "ui:menuTrigger"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String",
    "default": "Trigger",
    "description": "The text to display as a tooltip."
   }
  ],
  "cmp.ui.outputurl": [
   {
    "value": "javascript:void(0)",
    "iconclass": "iconClassLink",
    "click": "{!c.relay}",
    "label": "{!v.label}",
    "alt": "{!v.label}",
    "class": "{!v.class}"
   }
  ]
 },
 "cmp.uitest.demoMenuTriggerDefault": {
  "cmp.aura.component": [
   {
    "extends": "ui:menuTrigger"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String",
    "default": "Trigger",
    "description": "The text to display as a tooltip."
   }
  ]
 },
 "cmp.uitest.demoRelay": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.menu": [
   {},
   {}
  ],
  "cmp.uitest.demomenutrigger": [
   {
    "aura:id": "trigger",
    "label": "Select your favorite team"
   }
  ],
  "cmp.ui.menulist": [
   {
    "class": "actionMenu",
    "aura:id": "actionMenu"
   },
   {
    "class": "actionMenu",
    "aura:id": "actionMenu2"
   }
  ],
  "cmp.ui.actionmenuitem": [
   {
    "class": "actionItem1",
    "aura:id": "actionItem1",
    "label": "Something 1",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "actionItem2",
    "aura:id": "actionItem2",
    "label": "Something 2",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "actionItem3",
    "aura:id": "actionItem3",
    "label": "Something 3",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "actionItem4",
    "aura:id": "actionItem4",
    "label": "Something 4",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "actionItem5",
    "aura:id": "actionItem5",
    "label": "Something 5",
    "click": "{!c.updateTriggerLabel}"
   },
   {
    "class": "actionItem6",
    "aura:id": "actionItem6",
    "label": "Something 6",
    "click": "{!c.updateTriggerLabel}"
   }
  ],
  "cmp.uitest.demomenutriggerdefault": [
   {
    "aura:id": "trigger-default",
    "label": "Select another team"
   }
  ]
 },
 "cmp.uitest.dialog_ModalFocusTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.dialogmanager": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "ui:closeDialog",
    "action": "{!c.closeDialog}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "resultLabel",
    "class": "resultLabel",
    "value": ""
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "1",
    "class": "launchDialogButton",
    "label": "Click for Modal!",
    "press": "{!c.openDialog}"
   }
  ],
  "cmp.ui.dialog": [
   {
    "clickouttoclose": "false",
    "aura:id": "dialogBoxId",
    "title": "Bang!",
    "description": "Testing Modal Dialog Box",
    "ismodal": "true"
   }
  ]
 },
 "cmp.uitest.dialog_ModalTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.dialogmanager": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "ui:closeDialog",
    "action": "{!c.closeDialog}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "resultLabel",
    "class": "resultLabel",
    "value": ""
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "1",
    "class": "launchDialogButton",
    "label": "Click for Modal!",
    "press": "{!c.openDialog}"
   }
  ],
  "cmp.ui.dialog": [
   {
    "clickouttoclose": "false",
    "aura:id": "dialogBoxId",
    "title": "Bang!",
    "description": "Testing Modal Dialog Box",
    "ismodal": "true"
   }
  ]
 },
 "cmp.uitest.dialog_NonModalTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.dialogmanager": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "ui:closeDialog",
    "action": "{!c.closeDialog}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "resultLabel",
    "class": "resultLabel",
    "value": ""
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "1",
    "class": "launchDialogButton",
    "label": "Click for Non-Modal!",
    "press": "{!c.openDialog}"
   }
  ],
  "cmp.ui.dialog": [
   {
    "aura:id": "dialogBoxId",
    "title": "BOOM!",
    "description": "Testing Non ModalDialog Box"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "buttons"
   }
  ],
  "cmp.ui.dialogbuttons": [
   {
    "defaultbuttons": "both"
   }
  ]
 },
 "cmp.uitest.dialog_NonModalWCheckboxesTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.dialogmanager": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "event": "ui:closeDialog",
    "action": "{!c.closeDialog}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "resultLabel",
    "class": "resultLabel",
    "value": ""
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "1",
    "class": "launchDialogButton",
    "label": "Click for Non-Modal!",
    "press": "{!c.openDialog}"
   }
  ],
  "cmp.ui.dialog": [
   {
    "aura:id": "dialogBoxId",
    "title": "BOOM!",
    "description": "Testing Non ModalDialog Box"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "buttons"
   }
  ],
  "cmp.ui.dialogbuttons": [
   {
    "defaultbuttons": "both"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "aura:id": "checkbox",
    "name": "Pudding",
    "class": "checkbox1",
    "value": "false"
   },
   {
    "aura:id": "checkbox",
    "name": "Puppies",
    "class": "checkbox2",
    "value": "false"
   },
   {
    "aura:id": "checkbox",
    "name": "Bananas",
    "class": "checkbox3",
    "value": "false"
   },
   {
    "aura:id": "checkbox",
    "name": "Owls",
    "class": "checkbox4",
    "value": "false"
   },
   {
    "aura:id": "checkbox",
    "name": "Cheese",
    "class": "checkbox5",
    "value": "false"
   },
   {
    "aura:id": "checkbox",
    "name": "Koala",
    "class": "checkbox6",
    "value": "false"
   },
   {
    "aura:id": "checkbox",
    "name": "Water Bottles",
    "class": "checkbox7",
    "value": "false"
   },
   {
    "aura:id": "checkbox",
    "name": "Coffee",
    "class": "checkbox8",
    "value": "false"
   },
   {
    "aura:id": "checkbox",
    "name": "Computers",
    "class": "checkbox9",
    "value": "false"
   },
   {
    "aura:id": "checkbox",
    "name": "Nerds",
    "class": "checkbox10",
    "value": "false"
   }
  ]
 },
 "cmp.uitest.dragAndDrop_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "_dropzoneContext1",
    "access": "private",
    "type": "Object"
   },
   {
    "name": "_dropzoneContext2",
    "access": "private",
    "type": "Object"
   },
   {
    "name": "_dropzoneContext3",
    "access": "private",
    "type": "Object"
   },
   {
    "name": "_dropzoneContext4",
    "access": "private",
    "type": "Object"
   },
   {
    "name": "_draggableContext1",
    "access": "private",
    "type": "Object"
   },
   {
    "name": "_draggableContext2",
    "access": "private",
    "type": "Object"
   },
   {
    "name": "_draggableContext3",
    "access": "private",
    "type": "Object"
   },
   {
    "name": "_draggableContext4",
    "access": "private",
    "type": "Object"
   },
   {
    "name": "_accessibilityComponent",
    "access": "private",
    "type": "String"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.draganddropaccessibilitymenu": [
   {
    "aura:id": "accessibilityComponent"
   }
  ],
  "cmp.ui.dropzone": [
   {
    "incontextof": "{!v._dropzoneContext1}",
    "class": "sampleList",
    "drop": "{!c.handleDrop}",
    "aura:id": "dropzoneCopy",
    "types": "copy"
   },
   {
    "incontextof": "{!v._dropzoneContext2}",
    "label": "Dropzone Type: Move",
    "class": "sampleList",
    "drop": "{!c.handleDrop}",
    "aura:id": "dropzoneMove",
    "types": "move"
   },
   {
    "incontextof": "{!v._dropzoneContext3}",
    "class": "sampleList",
    "drop": "{!c.handleDrop}",
    "aura:id": "dropzoneNone",
    "types": ""
   },
   {
    "incontextof": "{!v._dropzoneContext4}",
    "label": "Dropzone Type: Move2",
    "class": "sampleList",
    "drop": "{!c.handleDrop}",
    "aura:id": "dropzoneMove2",
    "types": "move"
   }
  ],
  "cmp.ui.infinitelist": [
   {
    "aura:id": "list",
    "itemvar": "item"
   },
   {
    "aura:id": "list",
    "itemvar": "item"
   },
   {
    "aura:id": "list",
    "itemvar": "item"
   },
   {
    "aura:id": "list",
    "itemvar": "item"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.uiexamples.draganddropprovider": [
   {
    "prefix": "Draggable Type: None",
    "count": "1"
   },
   {
    "prefix": "Draggable Type: Copy",
    "count": "1"
   },
   {
    "prefix": "Draggable Type: Move",
    "count": "1"
   },
   {
    "prefix": "Draggable Type: Move3",
    "count": "1"
   }
  ],
  "cmp.ui.draggable": [
   {
    "incontextof": "{!v._draggableContext1}",
    "dragend": "{!c.handleDragEnd}",
    "datatransfer": "{!item}",
    "class": "sampleCard",
    "dragclass": "dragging",
    "aura:id": "draggableNone",
    "type": "",
    "accessibilitycomponent": "{!v._accessibilityComponent}"
   },
   {
    "incontextof": "{!v._draggableContext2}",
    "datatransfer": "{!item}",
    "dragend": "{!c.handleDragEnd}",
    "class": "sampleCard",
    "dragclass": "dragging",
    "aura:id": "draggableCopy",
    "type": "copy",
    "accessibilitycomponent": "{!v._accessibilityComponent}"
   },
   {
    "incontextof": "{!v._draggableContext3}",
    "datatransfer": "{!item}",
    "dragend": "{!c.handleDragEnd}",
    "class": "sampleCard",
    "dragclass": "dragging",
    "aura:id": "draggableMove",
    "type": "move",
    "accessibilitycomponent": "{!v._accessibilityComponent}"
   },
   {
    "incontextof": "{!v._draggableContext4}",
    "datatransfer": "{!item}",
    "dragend": "{!c.handleDragEnd}",
    "class": "sampleCard",
    "dragclass": "dragging",
    "aura:id": "draggableMove2",
    "type": "move",
    "accessibilitycomponent": "{!v._accessibilityComponent}"
   }
  ]
 },
 "cmp.uitest.dragAndDrop_TestProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "prefix",
    "type": "String",
    "default": "Acme"
   },
   {
    "name": "count",
    "type": "Integer",
    "default": "5"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.uitest.hasModel": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
    "description": "Used by auraStorageTest:initTest."
   }
  ]
 },
 "cmp.uitest.image_ErrorTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.image": [
   {
    "aura:id": "image1",
    "title": "broken image with onerror",
    "src": "/auraFW/resources/aura/brokenImageUrl.png",
    "alt": "broken",
    "onerror": "{!c.hideImage1}"
   },
   {
    "aura:id": "image2",
    "title": "unbroken image with onerror",
    "src": "/auraFW/resources/aura/auralogo.png",
    "alt": "unbroken",
    "onerror": "{!c.hideImage2}"
   },
   {
    "aura:id": "image3",
    "title": "broken image without onerror",
    "src": "/auraFW/resources/aura/brokenImageUrl.png",
    "alt": "broken"
   }
  ]
 },
 "cmp.uitest.image_OnLoadTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.image": [
   {
    "aura:id": "image",
    "alt": "image",
    "onload": "{!c.callOnLoad}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputStatus",
    "value": ""
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "loadButton",
    "label": "Load New Image",
    "press": "{!c.loadNewImage}"
   }
  ]
 },
 "cmp.uitest.infiniteDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "listType",
    "type": "String"
   },
   {
    "name": "getDataFromServer",
    "type": "Boolean"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.uitest.infiniteDataProvider_StorableActions": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "cachedDataRows",
    "type": "Integer"
   },
   {
    "name": "serverDataRows",
    "type": "Integer"
   },
   {
    "name": "cachedTargetPage",
    "type": "Integer"
   },
   {
    "name": "serverTargetPage",
    "type": "Integer"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.uitest.infiniteListCscc_Test": {
  "cmp.aura.component": [
   {
    "implements": "ui:pagingInterface, ui:scrollerEmbeddable"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "isDoneRendering",
    "type": "Boolean",
    "default": "{!false}"
   },
   {
    "name": "isGetDataFromServer",
    "type": "Boolean"
   }
  ],
  "cmp.ui.infinitelist": [
   {
    "aura:id": "list",
    "itemvar": "row",
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}",
    "listcomplete": "{!c.handleListComplete}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.uitest.infinitedataprovider": [
   {
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}",
    "getdatafromserver": "{!v.isGetDataFromServer}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "btnShowMore",
    "label": "show more",
    "press": "{!c.showMore}"
   }
  ]
 },
 "cmp.uitest.infiniteListRow_Test": {
  "cmp.aura.component": [
   {
    "implements": "ui:pagingInterface, ui:scrollerEmbeddable"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "showMore",
    "action": "{!c.showMore}"
   },
   {
    "name": "refresh",
    "action": "{!c.refresh}"
   }
  ],
  "cmp.ui.infinitelist": [
   {
    "aura:id": "list",
    "itemvar": "row",
    "enablerowswipe": "true",
    "onrowopen": "{!c.openRow}",
    "onrowclose": "{!c.closeRow}",
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "swipeBody"
   }
  ],
  "cmp.uitest.infinitedataprovider": [
   {
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.ui.infinitelistrow": [
   {}
  ],
  "cmp.ui.button": [
   {
    "aura:id": "btnShowMore",
    "class": "btnShowMore",
    "label": "show more",
    "press": "{!c.showMore}"
   },
   {
    "aura:id": "btnRefresh",
    "class": "btnRefresh",
    "label": "refresh",
    "press": "{!c.refresh}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "rowOpened",
    "class": "rowOpened",
    "value": "No Rows opened"
   },
   {
    "aura:id": "rowClosed",
    "class": "rowClosed",
    "value": "No Rows closed"
   }
  ]
 },
 "cmp.uitest.infiniteList_ScrollerTest": {
  "cmp.aura.component": [
   {
    "implements": "ui:pagingInterface, ui:scrollerEmbeddable"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "extendedPullAtrib",
    "type": "Aura.Component[]"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.ui.scroller": [
   {
    "aura:id": "scroller1",
    "onpulltorefresh": "{!c.refresh}",
    "onpulltoshowmore": "{!c.showMore}",
    "class": "test"
   },
   {
    "aura:id": "scroller2",
    "onpulltorefresh": "{!c.refresh2}",
    "onpulltoshowmore": "{!c.showMore2}",
    "class": "test"
   },
   {
    "aura:id": "scroller3",
    "class": "test"
   }
  ],
  "cmp.ui.infinitelist": [
   {
    "aura:id": "list",
    "itemvar": "row",
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   },
   {
    "aura:id": "list2",
    "itemvar": "row",
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   },
   {
    "aura:id": "list3",
    "itemvar": "row",
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.uitest.infinitedataprovider": [
   {
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   },
   {
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}",
    "listtype": "single"
   },
   {
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}",
    "listtype": "single"
   }
  ]
 },
 "cmp.uitest.infiniteList_StorableActionsTest": {
  "cmp.aura.component": [
   {
    "implements": "ui:pagingInterface, ui:scrollerEmbeddable"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "cachedDataRows",
    "type": "Integer"
   },
   {
    "name": "serverDataRows",
    "type": "Integer"
   },
   {
    "name": "cachedTargetPage",
    "type": "Integer"
   },
   {
    "name": "serverTargetPage",
    "type": "Integer"
   }
  ],
  "cmp.ui.infinitelist": [
   {
    "aura:id": "list",
    "itemvar": "row",
    "currentpage": "{!v.currentPage}",
    "pagesize": "3",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.uitest.infinitedataprovider_storableactions": [
   {
    "cacheddatarows": "{!v.cachedDataRows}",
    "serverdatarows": "{!v.serverDataRows}",
    "cachedtargetpage": "{!v.cachedTargetPage}",
    "servertargetpage": "{!v.serverTargetPage}",
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   }
  ]
 },
 "cmp.uitest.infiniteList_Test": {
  "cmp.aura.component": [
   {
    "implements": "ui:pagingInterface, ui:scrollerEmbeddable"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "refresh",
    "action": "{!c.refresh}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "showMoreCallback",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "refreshCallBack",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "loaded",
    "type": "boolean",
    "default": "false"
   }
  ],
  "cmp.ui.infinitelist": [
   {
    "aura:id": "list",
    "itemvar": "row",
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}",
    "listcomplete": "{!c.listComplete}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.uitest.infinitedataprovider": [
   {
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "btnShowMore",
    "label": "show more",
    "press": "{!c.showMore}"
   },
   {
    "aura:id": "btnRefresh",
    "label": "refresh",
    "press": "{!c.refresh}"
   }
  ]
 },
 "cmp.uitest.inputCheckBox_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "aura:id": "checkbox",
    "label": "CheckBox",
    "change": "{!c.changed}",
    "click": "{!c.clicked}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "changedEvt_ot",
    "value": "Default Value"
   },
   {
    "aura:id": "clickedEvt_ot",
    "value": "Default Value"
   }
  ]
 },
 "cmp.uitest.inputCurrency_FormattingWithNullOrEmptyStringTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.inputcurrency": [
   {
    "aura:id": "inputCurrencyEmpty",
    "value": "{!m.stringEmpty}"
   },
   {
    "aura:id": "inputCurrencyNull",
    "value": "{!m.stringNull}"
   }
  ]
 },
 "cmp.uitest.inputDateRange_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "startDate",
    "type": "String"
   },
   {
    "name": "endDate",
    "type": "String"
   }
  ],
  "cmp.ui.inputdaterange": [
   {
    "aura:id": "datePickerTestCmpRange",
    "displaydatepicker": "true",
    "format": "yyyy-MM-dd",
    "startdate": "{!v.startDate}",
    "enddate": "{!v.endDate}",
    "startinputplaceholder": "Start Date",
    "endinputplaceholder": "End Date"
   }
  ]
 },
 "cmp.uitest.inputDateTime_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   },
   {
    "name": "format",
    "type": "String"
   }
  ],
  "cmp.ui.inputdatetime": [
   {
    "aura:id": "dateTimePickerTest",
    "label": "label",
    "displaydatepicker": "true",
    "class": "date_input_box",
    "value": "{!v.value}",
    "format": "{!v.format}"
   }
  ]
 },
 "cmp.uitest.inputDate_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.value}",
    "action": "{!c.valueChange}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "class": "outputStatus",
    "aura:id": "outputStatus",
    "value": ""
   }
  ],
  "cmp.ui.label": [
   {
    "for": "datePickerTestCmp",
    "label": "date picker with label"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "aura:id": "datePickerTestCmp",
    "displaydatepicker": "true",
    "class": "date_input_box",
    "format": "yyyy-MM-dd",
    "value": "{!v.value}"
   }
  ]
 },
 "cmp.uitest.inputDate_TestCreation": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "addl",
    "type": "String"
   },
   {
    "name": "count",
    "type": "Integer",
    "default": "0"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Add New InputDate",
    "press": "{!c.addInputDate}"
   }
  ]
 },
 "cmp.uitest.inputDefaultErrorDynamic_test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "label",
    "type": "String",
    "description": "label of the property"
   },
   {
    "name": "name",
    "type": "String",
    "description": "name of the property"
   },
   {
    "name": "value",
    "type": "Integer",
    "description": "value of the property"
   },
   {
    "name": "newClass",
    "type": "String",
    "description": "name of the property"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "label": "{!v.label}",
    "value": "{!v.value}",
    "class": "{!v.newClass}",
    "aura:id": "myInputNumber"
   }
  ]
 },
 "cmp.uitest.inputDefaultError_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "caseToRender",
    "type": "String",
    "default": "default"
   },
   {
    "name": "errors",
    "type": "List"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "validateInput"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.caseToRender == 'dynamic' }"
   },
   {
    "istrue": "{!v.caseToRender == 'default' || v.caseToRender == 'all'}"
   },
   {
    "istrue": "{!v.caseToRender == 'customUsage'}"
   },
   {
    "istrue": "{!v.caseToRender == 'staticCustomError'}"
   },
   {
    "istrue": "{!v.caseToRender == 'select' || v.caseToRender == 'all'}"
   },
   {
    "istrue": "{!v.caseToRender == 'search' || v.caseToRender == 'all'}"
   },
   {
    "istrue": "{!v.caseToRender == 'textArea' || v.caseToRender == 'all'}"
   },
   {
    "istrue": "{!v.caseToRender == 'date' || v.caseToRender == 'all'}"
   },
   {
    "istrue": "{!v.caseToRender == 'dateTime'}"
   },
   {
    "istrue": "{!v.caseToRender == 'radio' || v.caseToRender == 'all'}"
   },
   {
    "istrue": "{!v.caseToRender == 'range' || v.caseToRender == 'all'}"
   },
   {
    "istrue": "{!v.caseToRender == 'autoCompleteTextArea' || v.caseToRender == 'all'}"
   },
   {
    "istrue": "{!v.caseToRender == 'autoCompleteText' || v.caseToRender == 'all'}"
   },
   {
    "istrue": "{!v.caseToRender == 'text' || v.caseToRender == 'all'}"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "New",
    "aura:id": "new_button",
    "press": "{!c.createNew}"
   },
   {
    "label": "validate",
    "press": "{!c.validateInput}",
    "aura:id": "validate"
   }
  ],
  "cmp.ui.label": [
   {
    "label": "testing inputNumber, inputCurrency, inputPercent"
   },
   {
    "for": "defaultValid",
    "label": "testingInvalidInput"
   },
   {
    "for": "defaultInvalid",
    "label": "testingInvalidInput"
   },
   {
    "for": "customUsageInvalid",
    "label": "testingInvalidInput"
   },
   {
    "for": "staticCustomErrorInvalid",
    "label": "staticCustomError"
   },
   {
    "for": "selectInvalid",
    "label": "testingInvalidInput"
   },
   {
    "for": "searchInvalid",
    "label": "testingInvalidInput"
   },
   {
    "label": "Test for inputRichText"
   },
   {
    "for": "textAreaInvalid",
    "label": "testingInvalidInput"
   },
   {
    "for": "dateInvalid",
    "label": "testingInvalidInput"
   },
   {
    "for": "dateTimeInvalid",
    "label": "testingInvalidInput"
   },
   {
    "for": "radioInvalid",
    "label": "testingInvalidInput"
   },
   {
    "for": "rangeInvalid",
    "label": "testingInvalidInput"
   },
   {
    "for": "autoCompleteTextAreaInvalid",
    "label": "testingInvalidInput"
   },
   {
    "for": "autoCompleteTextInvalid",
    "label": "testingInvalidInput"
   },
   {
    "label": "Test for inputEmail, inputPhone, inputSecret, InputURL"
   },
   {
    "for": "textInvalid",
    "label": "testingInvalidInput"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "class": "formInput",
    "aura:id": "defaultValid",
    "value": "20",
    "placeholder": "at least 6 chars"
   },
   {
    "class": "formInput",
    "aura:id": "defaultInvalid",
    "value": "100000",
    "placeholder": "at least 6 chars"
   },
   {
    "class": "formInput",
    "aura:id": "customUsageInvalid",
    "value": "100000",
    "placeholder": "at least 6 chars"
   },
   {
    "class": "formInput",
    "aura:id": "staticCustomErrorInvalid",
    "value": "100000",
    "placeholder": "at least 6 chars"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "errorComponent"
   },
   {
    "attribute": "errorComponent"
   }
  ],
  "cmp.ui.inputdefaulterror": [
   {}
  ],
  "cmp.uitest.inputerrorcomponent": [
   {}
  ],
  "cmp.ui.inputselect": [
   {
    "aura:id": "selectInvalid"
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "text": "hello1b",
    "label": "hello1b"
   },
   {
    "text": "hello2b",
    "label": "hello2b"
   },
   {
    "text": "hello3b",
    "label": "hello3b"
   },
   {
    "text": "hello4b",
    "label": "hello4b"
   }
  ],
  "cmp.ui.inputsearch": [
   {
    "aura:id": "searchInvalid"
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "aura:id": "textAreaInvalid"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "aura:id": "dateInvalid"
   }
  ],
  "cmp.ui.inputdatetime": [
   {
    "aura:id": "dateTimeInvalid"
   }
  ],
  "cmp.ui.inputradio": [
   {
    "aura:id": "radioInvalid"
   }
  ],
  "cmp.ui.inputrange": [
   {
    "aura:id": "rangeInvalid"
   }
  ],
  "cmp.ui.inputtextareaforautocomplete": [
   {
    "aura:id": "autoCompleteTextAreaInvalid"
   }
  ],
  "cmp.ui.inputtextforautocomplete": [
   {
    "aura:id": "autoCompleteTextInvalid"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "textInvalid"
   }
  ]
 },
 "cmp.uitest.inputErrorComponent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "errors",
    "type": "Object[]",
    "description": "The list of errors to be displayed."
   },
   {
    "name": "ariaDescribedBy",
    "type": "String",
    "default": ""
   },
   {
    "name": "domId",
    "type": "String"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.doInit}"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{! !empty(v.errors)}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!v.errors}",
    "var": "error"
   }
  ]
 },
 "cmp.uitest.inputError_CustomTest": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "errorMessage",
    "type": "String"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inputCmp",
    "value": "",
    "onerror": "{!c.handleError}",
    "onclearerrors": "{!c.handleClearError}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputStatus",
    "value": ""
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Server error - Fire onError event",
    "press": "{!c.doServerErrorFireOnErrorEvent}"
   },
   {
    "label": "Clear error - Fire onClearErrors event",
    "press": "{!c.clearErrorFireOnClearErrorsEvent}"
   }
  ]
 },
 "cmp.uitest.inputError_Test": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inputCmp",
    "value": ""
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputStatus",
    "value": ""
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Error - From server",
    "press": "{!c.doServerError}"
   },
   {
    "label": "Error - No event fire",
    "press": "{!c.doErrorNoEventFire}"
   },
   {
    "label": "Clear error - No event fire",
    "press": "{!c.clearErrorNoEventFire}"
   },
   {
    "label": "Error - No error message",
    "press": "{!c.doErrorNoErrorMsg}"
   },
   {
    "label": "Clear error - Null errors message",
    "press": "{!c.clearErrorNullErrorMsg}"
   }
  ]
 },
 "cmp.uitest.inputLocalizedNumber_Test": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "cmpType",
    "type": "string",
    "default": "Decimal"
   },
   {
    "name": "ref",
    "type": "Object"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "aura:id": "inputValue",
    "value": "{!m.decimal}",
    "step": "0.001",
    "updateon": "keyup"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "submit",
    "press": "{!c.submit}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputValue",
    "value": ""
   }
  ]
 },
 "cmp.uitest.inputMultiSelect_NestedOptionsTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "testCmpName",
    "type": "string",
    "default": "SelectMulti"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "multiple": "true",
    "aura:id": "SelectMulti",
    "value": "{!m.selectValue}",
    "updateon": "blur"
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "name": "Opt1",
    "value": "false",
    "text": "option1",
    "label": "Option1"
   },
   {
    "name": "Opt2",
    "value": "false",
    "text": "option2",
    "label": "Option2"
   },
   {
    "name": "Opt3",
    "value": "false",
    "text": "option3",
    "label": "Option3"
   }
  ],
  "cmp.auratest.baseinputtest": [
   {
    "cmptype": "{!v.testCmpName}",
    "ref": "{!m.selectValue}"
   }
  ]
 },
 "cmp.uitest.inputMultiSelect_OverridingDefBehaviorTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "testCmpName",
    "type": "string",
    "default": "SelectMulti"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "multiple": "true",
    "aura:id": "SelectMulti",
    "updateon": "blur"
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "aura:id": "option1",
    "name": "Opt1",
    "value": "false",
    "text": "option1",
    "label": "Option1"
   },
   {
    "aura:id": "option2",
    "name": "Opt2",
    "value": "true",
    "text": "option2",
    "label": "Option2"
   },
   {
    "aura:id": "option3",
    "name": "Opt3",
    "value": "true",
    "text": "option3",
    "label": "Option3"
   }
  ]
 },
 "cmp.uitest.inputMultiSelect_Test": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "testCmpName",
    "type": "string",
    "default": "SelectMulti"
   }
  ],
  "cmp.uitest.inputselect_extend": [
   {
    "multiple": "true",
    "aura:id": "SelectMulti",
    "options": "{!m.selectOptions}",
    "value": "{!m.selectValue}",
    "updateon": "blur"
   }
  ],
  "cmp.auratest.baseinputtest": [
   {
    "cmptype": "{!v.testCmpName}",
    "ref": "{!m.selectValue}"
   }
  ]
 },
 "cmp.uitest.inputNumber_FormattingWithNullOrEmptyStringTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "aura:id": "inputNumberEmpty",
    "value": "{!m.stringEmpty}"
   },
   {
    "aura:id": "inputNumberNull",
    "value": "{!m.stringNull}"
   }
  ]
 },
 "cmp.uitest.inputNumber_Test": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "testCmpName",
    "type": "string",
    "default": "Number"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "aura:id": "Number",
    "value": "{!m.number}",
    "updateon": "keyup"
   },
   {
    "aura:id": "UnsetNumber",
    "updateon": "keyup"
   }
  ],
  "cmp.auratest.baseinputtest": [
   {
    "cmptype": "{!v.testCmpName}",
    "ref": "{!m.number}"
   }
  ]
 },
 "cmp.uitest.inputPercent_FormattingWithNullOrEmptyStringTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.inputpercent": [
   {
    "aura:id": "inputPercentEmpty",
    "value": "{!m.stringEmpty}"
   },
   {
    "aura:id": "inputPercentNull",
    "value": "{!m.stringNull}"
   }
  ]
 },
 "cmp.uitest.inputRadio_Test": {
  "cmp.aura.component": [
   {
    "description": "Radio buttons not setting correctly when the value they listen to is set programatically"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.onInit}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "myValueString",
    "type": "String"
   },
   {
    "name": "myValueBoolean",
    "type": "Boolean"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "yup",
    "press": "{!c.onYup}",
    "label": "Yup"
   },
   {
    "aura:id": "nope",
    "press": "{!c.onNope}",
    "label": "Nope"
   }
  ],
  "cmp.ui.inputradio": [
   {
    "aura:id": "expYup",
    "change": "{!c.changeHandlerString}",
    "name": "myValueStringGroup",
    "text": "yup",
    "value": "{!equals(v.myValueString, 'yup')}",
    "label": "Yup (String)",
    "labelposition": "right"
   },
   {
    "aura:id": "expNope",
    "change": "{!c.changeHandlerString}",
    "name": "myValueStringGroup",
    "text": "nope",
    "value": "{!equals(v.myValueString, 'nope')}",
    "label": "Nope (String)",
    "labelposition": "right"
   },
   {
    "aura:id": "booleanYup",
    "change": "{!c.changeHandlerBoolean}",
    "name": "myValueBooleanGroup",
    "text": "true",
    "value": "{!v.myValueBoolean}",
    "label": "Yup (Boolean)",
    "labelposition": "right"
   },
   {
    "aura:id": "booleanNope",
    "change": "{!c.changeHandlerBoolean}",
    "name": "myValueBooleanGroup",
    "text": "false",
    "value": "{!!v.myValueBoolean}",
    "label": "Nope (Boolean)",
    "labelposition": "right"
   }
  ]
 },
 "cmp.uitest.inputRichText_DisableTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.button": [
   {
    "aura:id": "disableBtn",
    "label": "disable",
    "press": "{!c.toggle}"
   }
  ],
  "cmp.ui.inputrichtext": [
   {
    "aura:id": "rt",
    "value": "abc"
   }
  ]
 },
 "cmp.uitest.inputRichText_ExtendedTest": {
  "cmp.aura.component": [
   {
    "extends": "ui:inputRichText"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "default": "abc"
   }
  ]
 },
 "cmp.uitest.inputRichText_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "testCmpName",
    "type": "String",
    "default": "Text"
   },
   {
    "name": "testContent",
    "type": "String"
   }
  ],
  "cmp.ui.inputrichtext": [
   {
    "aura:id": "Text",
    "value": "{!v.testContent}"
   },
   {
    "aura:id": "rtCustom"
   }
  ],
  "cmp.auratest.baseinputtest": [
   {
    "aura:id": "base",
    "cmptype": "{!v.testCmpName}",
    "ref": "{!v.testContent}"
   }
  ]
 },
 "cmp.uitest.inputSearch_HandlingSearchEvent": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "searched",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "value",
    "type": "string"
   },
   {
    "name": "showClear",
    "type": "boolean",
    "default": "{!false}"
   }
  ],
  "cmp.ui.inputsearch": [
   {
    "aura:id": "searchCmp",
    "class": "search",
    "updateon": "search",
    "search": "{!c.doSearch}",
    "value": "{!v.value}",
    "showclear": "{!v.showClear}"
   }
  ]
 },
 "cmp.uitest.inputSelect_CheckWarnings": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "case",
    "type": "String"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.case == 'badsel'}"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "aura:id": "dynamicSelect"
   },
   {
    "options": "{!m.selectOptions}"
   }
  ]
 },
 "cmp.uitest.inputSelect_DynamicOptions": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "whichOption",
    "type": "String",
    "default": "4"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "aura:id": "dynamicSelect",
    "class": "dynamicSelect"
   },
   {
    "aura:id": "inputSelectIteration"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "1,2,3,4,5",
    "var": "item"
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "text": "{!item}",
    "label": "{!item}"
   }
  ]
 },
 "cmp.uitest.inputSelect_Extend": {
  "cmp.aura.component": [
   {
    "extends": "ui:inputSelect"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!v.value}",
    "action": "{!c.valueChange}"
   },
   {
    "name": "change",
    "value": "{!v.options}",
    "action": "{!c.optionsChange}"
   }
  ]
 },
 "cmp.uitest.inputSelect_OptionsInBody": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputselect": [
   {
    "class": "single",
    "aura:id": "InputSelectSingle"
   },
   {
    "multiple": "true",
    "class": "multiple",
    "size": "5",
    "aura:id": "InputSelectMultiple",
    "updateon": "blur"
   }
  ],
  "cmp.ui.inputselectoptiongroup": [
   {
    "label": "Mammal"
   },
   {
    "label": "Insect"
   },
   {
    "label": "Mammal"
   },
   {
    "label": "Insect"
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "text": "Tiger",
    "label": "Tiger"
   },
   {
    "text": "Lion",
    "label": "Lion",
    "value": "true"
   },
   {
    "text": "Bear",
    "label": "Bear"
   },
   {
    "text": "Butterfly"
   },
   {
    "text": "Dragonfly"
   },
   {
    "text": "Emmet",
    "label": "Ant"
   },
   {
    "text": "Cockroach",
    "label": "Cockroach",
    "disabled": "true"
   },
   {
    "text": "Tiger",
    "label": "Tiger"
   },
   {
    "text": "Lion",
    "label": "Lion",
    "value": "true"
   },
   {
    "text": "Bear",
    "label": "Bear",
    "value": "true"
   },
   {
    "text": "Butterfly"
   },
   {
    "text": "Dragonfly"
   },
   {
    "text": "Emmet",
    "label": "Ant"
   },
   {
    "text": "Cockroach",
    "label": "Cockroach",
    "disabled": "true"
   }
  ]
 },
 "cmp.uitest.inputSelect_OptionsInBodySetValue": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "cities",
    "type": "String[]",
    "default": "Toronto,Vancouver,Montreal"
   },
   {
    "name": "condition",
    "type": "Boolean"
   },
   {
    "name": "multi",
    "type": "Boolean"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "multiple": "{!v.multi}",
    "aura:id": "InputSelectIteration",
    "class": "InputSelectIteration"
   },
   {
    "multiple": "{!v.multi}",
    "aura:id": "InputSelectCondition",
    "class": "InputSelectCondition"
   },
   {
    "multiple": "{!v.multi}",
    "aura:id": "InputSelectRenderIf",
    "class": "InputSelectRenderIf"
   },
   {
    "multiple": "{!v.multi}",
    "aura:id": "InputSelectRenderIfCondition",
    "class": "InputSelectRenderIfCondition"
   },
   {
    "multiple": "{!v.multi}",
    "aura:id": "InputSelectOptionGroup",
    "class": "InputSelectOptionGroup"
   },
   {
    "multiple": "{!v.multi}",
    "aura:id": "InputSelectNested",
    "class": "InputSelectNested"
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "text": "Quebec",
    "label": "Quebec",
    "class": "Quebec"
   },
   {
    "text": "{!city}",
    "label": "{!city}",
    "class": "{!city}"
   },
   {
    "text": "Quebec",
    "label": "Quebec"
   },
   {
    "text": "Toronto",
    "label": "Toronto"
   },
   {
    "text": "Montreal",
    "label": "Montreal"
   },
   {
    "text": "Quebec",
    "label": "Quebec"
   },
   {
    "text": "Toronto",
    "label": "Toronto"
   },
   {
    "text": "Montreal",
    "label": "Montreal"
   },
   {
    "text": "{!city}",
    "label": "{!city}"
   },
   {
    "text": "Ottawa",
    "label": "Ottawa"
   },
   {
    "text": "{!city}",
    "label": "{!city}"
   },
   {
    "text": "Quebec",
    "label": "Quebec"
   },
   {
    "text": "Toronto",
    "label": "Toronto"
   },
   {
    "text": "Ottawa",
    "label": "Ottawa"
   },
   {
    "text": "Quebec",
    "label": "Quebec"
   },
   {
    "text": "{!city}",
    "label": "{!city}"
   },
   {
    "text": "Ottawa",
    "label": "Ottawa"
   },
   {
    "text": "{!city}",
    "label": "{!city}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "Iteration",
    "items": "{!v.cities}",
    "var": "city"
   },
   {
    "aura:id": "Iteration",
    "items": "{!v.cities}",
    "var": "city"
   },
   {
    "aura:id": "Iteration",
    "items": "{!v.cities}",
    "var": "city"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{!v.condition}"
   },
   {
    "istrue": "{!city == 'Toronto'}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   },
   {
    "attribute": "else"
   }
  ],
  "cmp.aura.renderif": [
   {
    "istrue": "{!v.condition}"
   },
   {
    "istrue": "{!city == 'Toronto'}"
   }
  ],
  "cmp.ui.inputselectoptiongroup": [
   {
    "label": "Ontario"
   },
   {
    "label": "Ontario"
   }
  ]
 },
 "cmp.uitest.inputSelect_SemiColonOptions": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "selectedValue",
    "type": "String"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "aura:id": "inputSelectSemicolon",
    "change": "{!c.onSelectChange}"
   }
  ],
  "cmp.ui.label": [
   {
    "aura:id": "labelSelectedValue",
    "label": "{!v.selectedValue}"
   }
  ]
 },
 "cmp.uitest.inputSelect_UseOptionsAtribTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "aura:id": "dynamicSelect"
   },
   {
    "options": "{!m.selectOptions}",
    "aura:id": "dynamicSelectModel"
   }
  ]
 },
 "cmp.uitest.inputTextArea_MaxLength": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "maxlength",
    "type": "Integer"
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "class": "textArea",
    "aura:id": "textArea",
    "maxlength": "{!v.maxlength}"
   }
  ]
 },
 "cmp.uitest.inputTextArea_UpdateOnTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputtextarea": [
   {
    "aura:id": "textAreaWithLabel",
    "label": "textAreaWithLabel",
    "value": "textAreaWithLabel",
    "updateon": "keyup"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": ""
   }
  ]
 },
 "cmp.uitest.inputTextArea_UpdateOnValueChange": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String"
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "aura:id": "textAreaWithLabel",
    "label": "textAreaWithLabel",
    "keyup": "{!c.onChange}",
    "value": "{!v.value}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": ""
   }
  ]
 },
 "cmp.uitest.inputText_CutCopyPasteEventTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "copyEventFired",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "cutEventFired",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "pasteEventFired",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "value",
    "type": "string",
    "default": "testText"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inputCmp",
    "copy": "{!c.doCopy}",
    "paste": "{!c.doPaste}",
    "cut": "{!c.doCut}",
    "value": "{!v.value}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "outputStatus",
    "value": ""
   }
  ]
 },
 "cmp.uitest.inputText_MaxLength": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputtext": [
   {
    "maxlength": "5"
   }
  ]
 },
 "cmp.uitest.inputText_NoMaxLength": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.inputtext": [
   {}
  ]
 },
 "cmp.uitest.inputText_updateOnTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "isDomEventSet",
    "type": "boolean",
    "default": "false"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "blur",
    "class": "blur",
    "value": "{!m.string}",
    "updateon": "blur",
    "blur": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "change",
    "class": "change",
    "value": "{!m.string}",
    "updateon": "change"
   },
   {
    "aura:id": "click",
    "class": "click",
    "value": "{!m.string}",
    "updateon": "click",
    "click": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "dblclick",
    "class": "dblclick",
    "value": "{!m.string}",
    "updateon": "dblclick",
    "dblclick": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "focus",
    "class": "focus",
    "value": "{!m.string}",
    "updateon": "focus",
    "focus": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "mousedown",
    "class": "mousedown",
    "value": "{!m.string}",
    "updateon": "mousedown",
    "mousedown": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "mousemove",
    "class": "mousemove",
    "value": "{!m.string}",
    "updateon": "mousemove",
    "mousemove": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "mouseout",
    "class": "mouseout",
    "value": "{!m.string}",
    "updateon": "mouseout",
    "mouseout": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "mouseover",
    "class": "mouseover",
    "value": "{!m.string}",
    "updateon": "mouseover",
    "mouseover": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "mouseup",
    "class": "mouseup",
    "value": "{!m.string}",
    "updateon": "mouseup",
    "mouseup": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "keydown",
    "class": "keydown",
    "value": "{!m.string}",
    "updateon": "keydown",
    "keydown": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "keypress",
    "class": "keypress",
    "value": "{!m.string}",
    "updateon": "keypress",
    "keypress": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "keyup",
    "class": "keyup",
    "value": "{!m.string}",
    "updateon": "keyup",
    "keyup": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "select",
    "class": "select",
    "value": "{!m.string}",
    "updateon": "select"
   },
   {
    "aura:id": "invalid",
    "class": "invalid",
    "value": "{!m.string}",
    "updateon": "invalid"
   },
   {
    "aura:id": "keyup2",
    "class": "keyup2",
    "value": "{!m.string}",
    "updateon": "keyup",
    "keypress": "{!c.inspectKeyEvent}",
    "mousedown": "{!c.inspectMouseEvent}"
   },
   {
    "aura:id": "inputwithLabel",
    "label": "inputwithLabel",
    "value": "inputwithLabel",
    "updateon": "keyup"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!m.string}"
   },
   {
    "aura:id": "outputValue",
    "class": "outputValue",
    "value": ""
   }
  ]
 },
 "cmp.uitest.inputText_updateOnWithLabelTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "isDomEventSet",
    "type": "boolean",
    "default": "false"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "blur",
    "label": "blur",
    "class": "blur",
    "value": "{!m.string}",
    "updateon": "blur",
    "blur": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "change",
    "label": "change",
    "class": "change",
    "value": "{!m.string}",
    "updateon": "change"
   },
   {
    "aura:id": "click",
    "label": "click",
    "class": "click",
    "value": "{!m.string}",
    "updateon": "click",
    "click": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "dblclick",
    "label": "dblclick",
    "class": "dblclick",
    "value": "{!m.string}",
    "updateon": "dblclick",
    "dblclick": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "focus",
    "label": "focus",
    "class": "focus",
    "value": "{!m.string}",
    "updateon": "focus",
    "focus": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "mousedown",
    "label": "mousedown",
    "class": "mousedown",
    "value": "{!m.string}",
    "updateon": "mousedown",
    "mousedown": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "mousemove",
    "label": "mousemove",
    "class": "mousemove",
    "value": "{!m.string}",
    "updateon": "mousemove",
    "mousemove": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "mouseout",
    "label": "mouseout",
    "class": "mouseout",
    "value": "{!m.string}",
    "updateon": "mouseout",
    "mouseout": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "mouseover",
    "label": "mouseover",
    "class": "mouseover",
    "value": "{!m.string}",
    "updateon": "mouseover",
    "mouseover": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "mouseup",
    "label": "mouseup",
    "class": "mouseup",
    "value": "{!m.string}",
    "updateon": "mouseup",
    "mouseup": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "keydown",
    "label": "keydown",
    "class": "keydown",
    "value": "{!m.string}",
    "updateon": "keydown",
    "keydown": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "keypress",
    "label": "keypress",
    "class": "keypress",
    "value": "{!m.string}",
    "updateon": "keypress",
    "keypress": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "keyup",
    "label": "keyup",
    "class": "keyup",
    "value": "{!m.string}",
    "updateon": "keyup",
    "keyup": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "select",
    "label": "select",
    "class": "select",
    "value": "{!m.string}",
    "updateon": "select"
   },
   {
    "aura:id": "empty",
    "label": "",
    "class": "empty",
    "value": "{!m.string}",
    "updateon": "blur",
    "blur": "{!c.checkDomEventSet}"
   },
   {
    "aura:id": "keyup",
    "label": "inspectBaseEvent",
    "class": "keyup",
    "value": "{!m.string}",
    "updateon": "keyup",
    "keypress": "{!c.inspectKeyEvent}",
    "mousedown": "{!c.inspectMouseEvent}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!m.string}"
   },
   {
    "aura:id": "outputValue",
    "class": "outputValue",
    "value": ""
   }
  ]
 },
 "cmp.uitest.input_themeingTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.label": [
   {
    "label": "ui:inputCheckBox Not disabled checked "
   },
   {
    "label": "ui:inputCheckBox Not disabled or checked "
   },
   {
    "label": "ui:inputCheckBox disabled and checked "
   },
   {
    "label": "ui:inputCheckBox disabled and not checked "
   },
   {
    "label": "ui:inputText focused "
   },
   {
    "label": "ui:inputText not focused "
   },
   {
    "label": "ui:inputSearch "
   },
   {
    "label": "ui:inputSearch with clear "
   },
   {
    "label": "ui:inputDefaultError "
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "disabled": "false",
    "value": "true"
   },
   {
    "disabled": "false",
    "value": "false"
   },
   {
    "disabled": "true",
    "value": "true"
   },
   {
    "disabled": "true",
    "value": "false"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inputTextBoxFocusable"
   },
   {}
  ],
  "cmp.ui.inputsearch": [
   {},
   {
    "value": "clear",
    "showclear": "true"
   }
  ],
  "cmp.ui.inputdefaulterror": [
   {
    "value": "error1, error2, error3"
   }
  ]
 },
 "cmp.uitest.label_Test": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.ui.MenuTestModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "default": "left",
    "type": "String",
    "name": "whichPosition"
   },
   {
    "type": "String",
    "name": "labelTitle"
   }
  ],
  "cmp.ui.label": [
   {
    "aura:id": "rawStringLabel",
    "for": "myrawid",
    "label": "My Input Text"
   },
   {},
   {
    "for": "myinputtext",
    "label": "My Input Text",
    "aura:id": "myinputtextLabel"
   },
   {
    "aura:id": "myHiddenLabel",
    "labeldisplay": "false",
    "for": "myHiddeninputtext",
    "label": "My Input Text"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "rawStringinput",
    "domid": "myrawid",
    "value": "I'm an inputText"
   },
   {
    "value": "my input"
   },
   {
    "aura:id": "myinputtext",
    "value": "I'm an inputText"
   },
   {
    "aura:id": "myHiddeninputtext",
    "value": "I'm an inputText"
   },
   {
    "label": "{!item.label}",
    "value": "{!item.value}",
    "aura:id": "iteration"
   },
   {
    "label": "inputTest",
    "labelposition": "{!v.whichPosition}",
    "value": "I'm an inputText"
   }
  ],
  "cmp.aura.iteration": [
   {
    "items": "{!m.iterationItems}",
    "var": "item"
   }
  ],
  "cmp.ui.inputpercent": [
   {
    "label": "inputPercent",
    "value": "42"
   },
   {
    "label": "inputPercent",
    "labelposition": "{!v.whichPosition}",
    "value": "42"
   }
  ],
  "cmp.ui.inputcurrency": [
   {
    "label": "inputCurrency",
    "value": "42",
    "labelposition": "left",
    "aura:id": "leftPosition"
   },
   {
    "label": "inputCurrency",
    "labelposition": "{!v.whichPosition}",
    "value": "42"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "label": "inputCheckbox",
    "labelposition": "{!v.whichPosition}",
    "value": "false",
    "aura:id": "myInputCheckbox"
   },
   {
    "aura:id": "inputCheckboxWithLabelTitle",
    "labeltitle": "{!v.labelTitle}",
    "label": "inputCheckboxWithLabelTitle",
    "labelposition": "{!v.whichPosition}",
    "value": "false"
   }
  ],
  "cmp.ui.inputdate": [
   {
    "label": "inputDate",
    "labelposition": "{!v.whichPosition}",
    "value": "I'm an inputDate"
   }
  ],
  "cmp.ui.inputdatetime": [
   {
    "label": "inputDateTime",
    "labelposition": "{!v.whichPosition}",
    "value": "I'm an inputDateTime"
   }
  ],
  "cmp.ui.inputnumber": [
   {
    "label": "inputNumber",
    "labelposition": "{!v.whichPosition}",
    "value": "42"
   }
  ],
  "cmp.ui.inputradio": [
   {
    "label": "inputRadio",
    "labelposition": "{!v.whichPosition}",
    "value": "42"
   }
  ],
  "cmp.ui.inputrange": [
   {
    "label": "inputRange",
    "labelposition": "{!v.whichPosition}",
    "value": "6"
   }
  ],
  "cmp.ui.inputsearch": [
   {
    "label": "inputSearch",
    "labelposition": "{!v.whichPosition}",
    "value": "6"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "label": "inputSelect",
    "labelposition": "{!v.whichPosition}",
    "value": "I'm an inputSelect"
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "label": "inputTextArea",
    "labelposition": "{!v.whichPosition}",
    "value": "I'm an inputTextArea"
   },
   {
    "label": "inputTextArea",
    "labelposition": "hidden",
    "value": "I'm an inputTextArea",
    "aura:id": "hiddenPosition"
   }
  ],
  "cmp.ui.inputphone": [
   {
    "label": "inputPhone",
    "labelposition": "{!v.whichPosition}",
    "value": "I'm an inputPhone"
   }
  ],
  "cmp.ui.inputemail": [
   {
    "label": "I'm a inputEmail",
    "labelposition": "{!v.whichPosition}",
    "value": "I'm an inputEmail"
   }
  ],
  "cmp.ui.inputsecret": [
   {
    "label": "I'm an inputSecret",
    "labelposition": "{!v.whichPosition}",
    "value": "I'm an inputSecret"
   }
  ],
  "cmp.ui.inputurl": [
   {
    "label": "I'm an inputURL",
    "labelposition": "{!v.whichPosition}",
    "value": "I'm an inputURL"
   }
  ]
 },
 "cmp.uitest.listSorterDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel",
    "description": "A list data provider that understands Salesforce filters."
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "dataType",
    "type": "String"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.onInit}"
   },
   {
    "name": "provide",
    "action": "{!c.onProvide}"
   }
  ]
 },
 "cmp.uitest.listSorter_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "cancelEventFired",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "title",
    "type": "String",
    "default": "Sort",
    "description": "The title of this component."
   }
  ],
  "cmp.ui.listsorter": [
   {
    "aura:id": "defaultListSorter",
    "class": "defaultListSorter",
    "onapply": "{!c.handleApplyPressed}",
    "oncancel": "{!c.handleCancelPressed}",
    "title": "{!v.title}",
    "rowvar": "item"
   },
   {
    "aura:id": "largeListSorter",
    "onapply": "{!c.handleApplyPressedForLargeList}",
    "oncancel": "{!c.handleCancelPressed}",
    "rowvar": "item"
   },
   {
    "aura:id": "emptyListSorter",
    "rowvar": "item"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "rowDef"
   },
   {
    "attribute": "trigger"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "rowDef"
   },
   {
    "attribute": "trigger"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "rowDef"
   },
   {
    "attribute": "trigger"
   }
  ],
  "cmp.uitest.listsorterdataprovider": [
   {},
   {
    "datatype": "largeList"
   },
   {
    "datatype": "emptyList"
   }
  ],
  "cmp.ui.radiotogglemenuitem": [
   {
    "value": "{!item.fieldName}",
    "label": "{!item.label}",
    "aura:id": "defaultRadioToggleMenuItem"
   },
   {
    "value": "{!item.fieldName}",
    "label": "{!item.label}"
   },
   {
    "value": "{!item.fieldName}",
    "label": "{!item.label}"
   }
  ],
  "cmp.ui.menutriggerlink": [
   {
    "class": "defaultListSorterTrigger",
    "label": "Default List Sorter",
    "aura:id": "defaultListSorterTrigger"
   },
   {
    "label": "Large List Sorter",
    "aura:id": "largeListSorterTrigger"
   },
   {
    "label": "Empty List Sorter",
    "aura:id": "emptyListSorterTrigger"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "defaultListSorterResult",
    "value": ""
   },
   {
    "aura:id": "largeListSorterResult",
    "value": ""
   }
  ]
 },
 "cmp.uitest.list_MultipleDataProvidersTest": {
  "cmp.aura.component": [
   {
    "implements": "ui:pagingInterface"
   }
  ],
  "cmp.ui.list": [
   {
    "aura:id": "list",
    "itemvar": "row",
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.uitest.infinitedataprovider": [
   {
    "currentpage": "{!v.currentPage}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   },
   {
    "currentpage": "{!v.currentPage + 1}",
    "pagesize": "{!v.pageSize}",
    "totalitems": "{!v.totalItems}"
   },
   {
    "currentpage": "1",
    "pagesize": "0",
    "totalitems": "{!v.totalItems}"
   },
   {
    "currentpage": "1",
    "pagesize": "1",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "btnDP1",
    "label": "Get Data From Data Provider 1",
    "press": "{!c.getDP1Data}"
   },
   {
    "aura:id": "btnDP2",
    "label": "Get Data From Data Provider 2",
    "press": "{!c.getDP2Data}"
   },
   {
    "aura:id": "btnEmpty",
    "label": "Get Empty List",
    "press": "{!c.getEmptyList}"
   },
   {
    "aura:id": "btnIndex",
    "label": "Index Out Of Bound",
    "press": "{!c.getOutOfBound}"
   },
   {
    "aura:id": "btnInline",
    "label": "Fire Provide Inline",
    "press": "{!c.fireInline}"
   }
  ]
 },
 "cmp.uitest.localStorageFiller": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "message",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "Fill up Local Storage",
    "press": "{!c.fillLocalStorage}"
   }
  ]
 },
 "cmp.uitest.menuItem_extend": {
  "cmp.aura.component": [
   {
    "extends": "ui:actionMenuItem"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "zclass",
    "type": "string"
   },
   {
    "name": "zlabel",
    "type": "string"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "class",
    "value": "{!v.zclass}"
   },
   {
    "attribute": "label",
    "value": "{!v.zlabel}"
   }
  ]
 },
 "cmp.uitest.menuList_Extend": {
  "cmp.aura.component": [
   {
    "extensible": "false",
    "extends": "ui:menuList"
   }
  ]
 },
 "cmp.uitest.messagedemo": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.message": [
   {
    "title": "Alert",
    "closable": "true"
   },
   {
    "title": "Alert",
    "severity": "error"
   },
   {
    "title": "Warn",
    "severity": "warning"
   },
   {
    "title": "Confirmation",
    "severity": "confirm"
   },
   {
    "title": "Information",
    "severity": "info"
   }
  ]
 },
 "cmp.uitest.outputCmps_EmptyStringValue": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.outputdate": [
   {
    "aura:id": "date",
    "value": ""
   }
  ],
  "cmp.ui.outputcurrency": [
   {
    "aura:id": "currency",
    "value": ""
   }
  ],
  "cmp.ui.outputdatetime": [
   {
    "aura:id": "dateTime",
    "value": ""
   }
  ],
  "cmp.ui.outputnumber": [
   {
    "aura:id": "number",
    "value": ""
   }
  ],
  "cmp.ui.outputpercent": [
   {
    "aura:id": "percent",
    "value": ""
   }
  ]
 },
 "cmp.uitest.outputCurrency_FormattingWithNullOrEmptyStringTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.outputcurrency": [
   {
    "aura:id": "outputCurrencyEmpty",
    "value": "{!m.stringEmpty}"
   },
   {
    "aura:id": "outputCurrencyNull",
    "value": "{!m.stringNull}"
   }
  ]
 },
 "cmp.uitest.outputDateTime_JavaModel": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.outputdatetime": [
   {
    "value": "{!m.dateTimeISOString}",
    "aura:id": "ISOStringFromJava",
    "format": "MM/dd/yyyy HH:mm:ss Z",
    "timezone": "GMT"
   },
   {
    "value": "{!m.dateTimeISOString}",
    "timezone": "America/Phoenix",
    "format": "yyyy-MM-dd hh:mm:ss",
    "aura:id": "ISOStringFromJavaWithTZOverride"
   },
   {
    "value": "{!m.calendar}",
    "aura:id": "calendarFromJava",
    "timezone": "GMT"
   },
   {
    "value": "{!m.calendarWithTimeZone}",
    "timezone": "America/Phoenix",
    "format": "yyyy-MM-dd hh:mm:ss",
    "aura:id": "calendarFromJavaWithTZOverride"
   }
  ]
 },
 "cmp.uitest.outputDateTime_NumericValueFromJavaObj": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.outputdatetime": [
   {
    "value": "{!m.timestamp}",
    "timezone": "America/Chicago",
    "format": "M/d/yy h:m",
    "aura:id": "NumericValueFromJava"
   }
  ]
 },
 "cmp.uitest.outputDateTime_OverriddenFormatDateTime": {
  "cmp.aura.component": [
   {
    "extends": "ui:outputDateTime"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "value",
    "value": "2004-09-23T16:30:00.000Z"
   }
  ]
 },
 "cmp.uitest.outputDateTime_OverriddenGetFormat": {
  "cmp.aura.component": [
   {
    "extends": "ui:outputDateTime"
   }
  ]
 },
 "cmp.uitest.outputDateTime_OverriddenGetTimeZone": {
  "cmp.aura.component": [
   {
    "extends": "ui:outputDateTime"
   }
  ]
 },
 "cmp.uitest.outputDate_JavaModel": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.outputdate": [
   {
    "value": "{!m.date}",
    "format": "M/dd/yy",
    "aura:id": "dateFromJava"
   }
  ]
 },
 "cmp.uitest.outputDate_NonDateJavaObj": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.outputdate": [
   {
    "value": "{!m.string}",
    "aura:id": "NonDateFromJava"
   }
  ]
 },
 "cmp.uitest.outputDate_OverriddenFormatDate": {
  "cmp.aura.component": [
   {
    "extends": "ui:outputDate"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "value",
    "value": "2004-09-23"
   }
  ]
 },
 "cmp.uitest.outputMultiSelect_JavaModel": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.outputmultiselect": [
   {
    "value": "{!m.string}",
    "aura:id": "String"
   },
   {
    "value": "{!m.stringArray}",
    "aura:id": "StringArray"
   },
   {
    "value": "{!m.stringList}",
    "aura:id": "StringList"
   },
   {
    "value": "{!m.integerArray}",
    "aura:id": "IntegerArray"
   }
  ]
 },
 "cmp.uitest.outputNumber_BlankValue": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "noVal",
    "type": "Decimal"
   }
  ],
  "cmp.ui.outputnumber": [
   {
    "value": "{!v.noVal}",
    "aura:id": "uninitializedVariable"
   }
  ]
 },
 "cmp.uitest.outputNumber_FormattingWithNullOrEmptyStringTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.outputnumber": [
   {
    "aura:id": "outputNumberEmpty",
    "value": "{!m.stringEmpty}"
   },
   {
    "aura:id": "outputNumberNull",
    "value": "{!m.stringNull}"
   }
  ]
 },
 "cmp.uitest.outputPercent_FormattingWithNullOrEmptyStringTest": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.outputpercent": [
   {
    "aura:id": "outputPercentEmpty",
    "value": "{!m.stringEmpty}"
   },
   {
    "aura:id": "outputPercentNull",
    "value": "{!m.stringNull}"
   }
  ]
 },
 "cmp.uitest.outputRichText_JavaModel": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.outputrichtext": [
   {
    "value": "{!m.stringNull}",
    "aura:id": "myComp1"
   },
   {
    "value": "{!m.stringEmpty}",
    "aura:id": "myComp2"
   },
   {
    "value": "{!m.text}",
    "aura:id": "myComp3"
   },
   {
    "value": "{!m.textWithScriptTag}",
    "aura:id": "myComp4"
   },
   {
    "value": "{!m.textWithStyleTag}",
    "aura:id": "myComp5"
   },
   {
    "value": "{!m.textWithBlacklistedTags}",
    "aura:id": "myComp6"
   },
   {
    "value": "{!m.textWithBlacklistedNestedTags}",
    "aura:id": "myComp7"
   },
   {
    "value": "{!m.textWithWhitelistedChildrenTags}",
    "aura:id": "myComp8"
   },
   {
    "value": "{!m.textWithBlacklistedChildrenTags}",
    "aura:id": "myComp9"
   },
   {
    "value": "{!m.textWithEvent}",
    "aura:id": "myComp10"
   },
   {
    "value": "{!m.textWithMultipleEvents}",
    "aura:id": "myComp11"
   }
  ]
 },
 "cmp.uitest.outputText_JavaModel": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!m.objectNull}",
    "aura:id": "myComp1"
   },
   {
    "value": "{!m.booleanTrue}",
    "aura:id": "myComp2"
   },
   {
    "value": "{!m.text}",
    "aura:id": "myComp3"
   },
   {
    "value": "{!m.number}",
    "aura:id": "myComp4"
   }
  ]
 },
 "cmp.uitest.outputText_SettingBody": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.outputtext": [
   {
    "value": "foo",
    "aura:id": "settingBody"
   }
  ]
 },
 "cmp.uitest.output_themeingTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "item",
    "type": "String",
    "default": "A long time ago, in a galaxy far, far away... "
   }
  ],
  "cmp.ui.label": [
   {
    "label": "ui:outputCheckbox  checked: "
   },
   {
    "label": "ui:outputCheckbox  Not checked: "
   },
   {
    "label": "ui:outputURL   Not disabled checked: "
   },
   {
    "label": "ui:outputTextArea  Not disabled checked: "
   },
   {
    "label": "ui:outputLabel  Not disabled checked: "
   }
  ],
  "cmp.ui.outputcheckbox": [
   {
    "value": "true"
   },
   {
    "value": "false"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "iconclass": "iconClassLink",
    "label": "temp",
    "value": "SomethingSomethingDarkSide"
   }
  ],
  "cmp.ui.outputtextarea": [
   {
    "value": "{!v.item}"
   }
  ],
  "cmp.ui.outputlabel": [
   {
    "value": "THIS IS A LABEL"
   }
  ]
 },
 "cmp.uitest.panel2": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "implements": "ui:panelType",
    "description": "Panel2"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "instanceId",
    "type": "Integer",
    "default": "-1"
   },
   {
    "name": "alias",
    "type": "String",
    "default": "panel2"
   },
   {
    "name": "title",
    "type": "String",
    "default": "Default Title"
   },
   {
    "name": "visible",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "active",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "notify",
    "event": "ui:notify",
    "action": "{!c.handleNotify}"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "notify",
    "type": "ui:notify"
   }
  ]
 },
 "cmp.uitest.panel2Content": {
  "cmp.aura.component": [
   {
    "extensible": "true",
    "description": "Panel2"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "notify",
    "type": "ui:notify"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "counter",
    "type": "Integer",
    "default": "0"
   },
   {
    "name": "payload",
    "type": "Object"
   }
  ],
  "cmp.aura.method": [
   {
    "name": "incrementCounter"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "notify",
    "label": "Notify!",
    "press": "{!c.notify}"
   },
   {
    "aura:id": "notifyAll",
    "label": "Notify All!",
    "press": "{!c.notifyAll}"
   }
  ]
 },
 "cmp.uitest.panel2_Tester": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "panelType",
    "type": "String",
    "default": "modal"
   },
   {
    "name": "title",
    "type": "String",
    "default": "New Panel"
   },
   {
    "name": "titleDisplay",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "class",
    "type": "String"
   },
   {
    "name": "flavor",
    "type": "String"
   },
   {
    "name": "isVisible",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "startOfDialogLabel",
    "type": "String",
    "default": "Start of Dialog"
   },
   {
    "name": "closeOnClickOut",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "showCloseButton",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "closeDialogLabel",
    "type": "String",
    "default": "Close"
   },
   {
    "name": "useTransition",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "animation",
    "type": "String",
    "default": "bottom"
   },
   {
    "name": "autoFocus",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "direction",
    "type": "String",
    "default": "north"
   },
   {
    "name": "showPointer",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "referenceElement",
    "type": "Object"
   },
   {
    "name": "useReferenceElement",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "referenceElementSelector",
    "type": "String"
   },
   {
    "name": "useHeader",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "useFooter",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "panelHeader",
    "type": "Aura.Component[]"
   },
   {
    "name": "panelFooter",
    "type": "Aura.Component[]"
   },
   {
    "name": "makeScrollable",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "nonScrollable",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "customizeCloseAction",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "closeActionCalled",
    "type": "String",
    "default": ""
   }
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:createPanel",
    "type": "EVENT"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "Create a panel to your liking"
   },
   {
    "class": "IdCreated",
    "aura:id": "IdCreated",
    "value": ""
   },
   {
    "class": "IdDestroyed",
    "aura:id": "IdDestroyed",
    "value": ""
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inputPanelType",
    "label": "Panel Type",
    "value": "{!v.panelType}",
    "class": "inputPanelTypeClass"
   },
   {
    "aura:id": "inputTitle",
    "label": "Title",
    "value": "{!v.title}",
    "class": "inputTitle`Class"
   },
   {
    "aura:id": "inputClass",
    "label": "class",
    "value": "{!v.class}",
    "class": "inputClassClass"
   },
   {
    "aura:id": "inputFlavor",
    "label": "Flavor",
    "value": "{!v.flavor}",
    "class": "inputFlavorClass"
   },
   {
    "aura:id": "inputStartOfDialogLabel",
    "label": "Start of Dialog Label",
    "value": "{!v.startOfDialogLabel}",
    "class": "inputStartOfDialogLabelClass"
   },
   {
    "aura:id": "inputCloseDialogLabel",
    "label": "Close Dialog Label",
    "value": "{!v.closeDialogLabel}",
    "class": "inputDialogLabelClass"
   },
   {
    "aura:id": "inputAnimation",
    "label": "Animation",
    "value": "{!v.animation}",
    "class": "inputAnimationClass"
   },
   {
    "aura:id": "inputDirection",
    "label": "Direction",
    "value": "{!v.direction}",
    "class": "inputDirectionClass"
   },
   {
    "aura:id": "inputReferenceElementSelector",
    "label": "Reference Element Selector",
    "value": "{!v.referenceElementSelector}",
    "class": "inputReferenceElementSelector"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "aura:id": "inputTitleDisplay",
    "label": "Disaplay Title",
    "value": "{!v.titleDisplay}",
    "class": "inputTitleDisplayClass"
   },
   {
    "aura:id": "inputIsVisible",
    "label": "Is Visible",
    "value": "{!v.isVisible}",
    "class": "inputIsVisibleClass"
   },
   {
    "aura:id": "inputCloseOnClickOut",
    "label": "Close on Click Out",
    "value": "{!v.closeOnClickOut}",
    "class": "inputcloseOnClickOutClass"
   },
   {
    "aura:id": "inputShowCloseButton",
    "label": "Show Close Button",
    "value": "{!v.showCloseButton}",
    "class": "inputShowCloseButtonClass"
   },
   {
    "aura:id": "inputUseTransition",
    "label": "Use Transition",
    "value": "{!v.useTransition}",
    "class": "inputUseTransitionClass"
   },
   {
    "aura:id": "inputAutoFocus",
    "label": "Auto Focus",
    "value": "{!v.autoFocus}",
    "class": "inputAutoFocusClass"
   },
   {
    "aura:id": "inputShowPointer",
    "label": "Show Pointer",
    "value": "{!v.showPointer}",
    "class": "inputShowPointerClass"
   },
   {
    "aura:id": "inputUseReferenceElement",
    "label": "Use Reference Element",
    "value": "{!v.useReferenceElement}",
    "class": "inputUseReferenceElement"
   },
   {
    "aura:id": "inputUseHeader",
    "label": "Use Header",
    "value": "{!v.useHeader}",
    "class": "inputUseHeaderClass"
   },
   {
    "aura:id": "inputUseFooter",
    "label": "Use Footer",
    "value": "{!v.useFooter}",
    "class": "inputUseFooterClass"
   },
   {
    "aura:id": "inputMakeScrollable",
    "label": "Make Scrollable",
    "value": "{!v.makeScrollable}",
    "class": "inputMakeScrollableClass"
   },
   {
    "aura:id": "inputNonScrollable",
    "label": "Non Scrollable Modal",
    "value": "{!v.nonScrollable}",
    "class": "inputNonScrollableClass"
   },
   {
    "aura:id": "inputCustomizeCloseAction",
    "label": "Customize CloseAction",
    "value": "{!v.customizeCloseAction}",
    "class": "inputCustomizeCloseAction"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "createPanelBtn",
    "label": "Create Panel",
    "press": "{!c.createPanel}",
    "class": "createPanelBtnClass"
   }
  ]
 },
 "cmp.uitest.panelTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.dependency": [
   {
    "resource": "markup://ui:button"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "autoFocus",
    "type": "Boolean",
    "default": "true"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "panelDialogModalButton",
    "press": "{!c.showSimpleModal}",
    "label": "Show Simple Modal Panel Dialog",
    "aura:id": "simpleModalButton"
   },
   {
    "class": "panelDialogModalButton",
    "press": "{!c.showModal}",
    "label": "Show Modal Panel Dialog",
    "aura:id": "modalButton"
   },
   {
    "class": "panelDialogNonModalButton",
    "press": "{!c.showNonModal}",
    "label": "Show Non-Modal Panel Dialog",
    "aura:id": "nonModalButton"
   },
   {
    "class": "panelDialogNonModalNonTransientButton",
    "press": "{!c.showNonModalNonTransient}",
    "label": "Show NonTransient,Non-Modal Panel Dialog",
    "aura:id": "nonModalNonTransientButton"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "class": "inputText",
    "aura:id": "inText",
    "value": "TestingCloseOnClickOutFeature",
    "maxlength": "10"
   }
  ],
  "cmp.ui.panelmanager": [
   {}
  ]
 },
 "cmp.uitest.pillContainerAutoCompleteDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "description": "A test data provider."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.uitest.pillContainer_AsOutputField": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "maxAllowed",
    "type": "Integer",
    "default": "10",
    "description": "Max pills this container should have."
   }
  ],
  "cmp.ui.pillcontainer": [
   {
    "aura:id": "pillContainer",
    "maxallowed": "{!v.maxAllowed}"
   }
  ]
 },
 "cmp.uitest.pillContainer_Bubbling": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "maxAllowed",
    "type": "Integer",
    "default": "10",
    "description": "Max pills this container should have."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "pillInserted",
    "event": "ui:response",
    "action": "{!c.processPillInserted}"
   },
   {
    "name": "pillRemoved",
    "event": "ui:response",
    "action": "{!c.processPillRemoved}"
   },
   {
    "name": "blur",
    "event": "ui:blur",
    "action": "{!c.processBlur}"
   },
   {
    "name": "focus",
    "event": "ui:focus",
    "action": "{!c.processFocus}"
   }
  ],
  "cmp.ui.pillcontainer": [
   {
    "aura:id": "pillContainer",
    "maxallowed": "{!v.maxAllowed}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "pillInput"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   }
  ],
  "cmp.ui.pillcontainerautocomplete": [
   {
    "aura:id": "autocomplete",
    "optionvar": "row"
   }
  ],
  "cmp.uitest.pillcontainerautocompletedataprovider": [
   {}
  ],
  "cmp.ui.pillcontainerautocompleteoption": [
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row}",
    "visible": "{!row.visible}",
    "iconurl": "{!row.icon.url}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "result"
   }
  ]
 },
 "cmp.uitest.pillContainer_InputText": {
  "cmp.aura.component": [
   {
    "implements": "ui:pillContainerInput"
   }
  ],
  "cmp.aura.import": [
   {
    "library": "ui:eventLib",
    "property": "lib"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "keydown",
    "type": "ui:keydown",
    "access": "GLOBAL",
    "description": "The event fired when the user presses a keyboard key on the component."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "keydown",
    "action": "{!c.onKeydown}"
   }
  ]
 },
 "cmp.uitest.pillContainer_WithAutoComplete": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "flavor",
    "type": "String",
    "default": "default",
    "description": ""
   },
   {
    "name": "maxLines",
    "type": "Integer",
    "default": "0",
    "description": "Maximum lines to show. Hidden lines can be expanded. Use 0 to disable."
   },
   {
    "name": "maxAllowed",
    "type": "Integer",
    "default": "10",
    "description": "Max pills this container should have."
   }
  ],
  "cmp.ui.pillcontainer": [
   {
    "aura:id": "pillContainer",
    "maxlines": "{!v.maxLines}",
    "aura:flavor": "{!v.flavor}",
    "pillflavor": "{!v.flavor}",
    "maxallowed": "{!v.maxAllowed}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "pillInput"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   }
  ],
  "cmp.ui.pillcontainerautocomplete": [
   {
    "aura:id": "autocomplete",
    "optionvar": "row"
   }
  ],
  "cmp.uitest.pillcontainerautocompletedataprovider": [
   {}
  ],
  "cmp.ui.pillcontainerautocompleteoption": [
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row}",
    "visible": "{!row.visible}",
    "iconurl": "{!row.icon.url}"
   }
  ]
 },
 "cmp.uitest.pillContainer_WithAutoCompleteHeader": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.pillcontainer": [
   {
    "aura:id": "pillContainer"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "pillInput"
   },
   {
    "attribute": "header"
   },
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "listOption"
   }
  ],
  "cmp.ui.pillcontainerautocomplete": [
   {
    "aura:id": "autocomplete",
    "optionvar": "row"
   }
  ],
  "cmp.ui.inputselect": [
   {
    "aura:id": "select",
    "change": "{!c.onSelectChange}"
   }
  ],
  "cmp.ui.inputselectoption": [
   {
    "text": "Even",
    "label": "Even"
   },
   {
    "text": "Odd",
    "label": "Odd"
   }
  ],
  "cmp.uitest.pillcontainerautocompletedataprovider": [
   {}
  ],
  "cmp.ui.pillcontainerautocompleteoption": [
   {
    "label": "{!row.label}",
    "keyword": "{!row.keyword}",
    "value": "{!row}",
    "visible": "{!row.visible}",
    "iconurl": "{!row.icon.url}"
   }
  ]
 },
 "cmp.uitest.pillContainer_WithTextInput": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "pillInsertFired",
    "type": "boolean",
    "default": "false"
   },
   {
    "name": "pillRemovedFired",
    "type": "boolean",
    "default": "false"
   }
  ],
  "cmp.ui.pillcontainer": [
   {
    "aura:id": "pillContainer",
    "pillinserted": "{!c.processPillInserted}",
    "pillremoved": "{!c.processPillRemoved}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "pillInput"
   }
  ],
  "cmp.uitest.pillcontainer_inputtext": [
   {
    "aura:id": "textInput"
   }
  ]
 },
 "cmp.uitest.popupTestExtendedPopup": {
  "cmp.aura.component": [
   {
    "extends": "ui:popup"
   }
  ]
 },
 "cmp.uitest.popupTestExtendedTarget": {
  "cmp.aura.component": [
   {
    "extends": "ui:popupTarget"
   }
  ]
 },
 "cmp.uitest.popupTestFrame": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "frameId",
    "type": "String"
   }
  ],
  "cmp.ui.button": [
   {
    "press": "{!c.handlePress}",
    "label": "{!v.frameId + ': press me'}"
   }
  ]
 },
 "cmp.uitest.popupTestTriggerElement": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.registerevent": [
   {
    "name": "popupTargetToggle",
    "type": "ui:popupTargetToggle"
   }
  ],
  "cmp.ui.label": [
   {
    "class": "customTriggerLabel",
    "label": "Custom trigger"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "customTriggerButton",
    "press": "{!c.hideTarget}",
    "label": "Close Target"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "class": "customTriggerInput",
    "focus": "{!c.showTarget}"
   }
  ]
 },
 "cmp.uitest.scrollerNative": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.ui.UIScrollerDataProvider",
    "description": "A test scroller."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.ui.scroller": [
   {
    "class": "scrollWrapper",
    "usenativescroller": "true",
    "onscrollmove": "{!c.scrollMoveHandler}",
    "aura:id": "test-scroller",
    "showscrollbars": "true"
   }
  ]
 },
 "cmp.uitest.scroller_BidirectionalTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "scrollerId",
    "type": "String",
    "default": "horizontalScroll"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "toTop",
    "label": "Scroll to Top",
    "press": "{!c.scrollToTop}"
   },
   {
    "aura:id": "toBottom",
    "label": "Scroll to Bottom",
    "press": "{!c.scrollToBottom}"
   },
   {
    "aura:id": "toRight",
    "label": "Scroll to Right",
    "press": "{!c.scrollToRight}"
   },
   {
    "aura:id": "toLeft",
    "label": "Scroll to Left",
    "press": "{!c.scrollToLeft}"
   },
   {
    "aura:id": "byUp",
    "label": "Scroll Up",
    "press": "{!c.scrollUp}"
   },
   {
    "aura:id": "byDown",
    "label": "Scroll Down",
    "press": "{!c.scrollDown}"
   },
   {
    "aura:id": "byRight",
    "label": "Scroll Right",
    "press": "{!c.scrollRight}"
   },
   {
    "aura:id": "byLeft",
    "label": "Scroll Left",
    "press": "{!c.scrollLeft}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "newScrollerId",
    "value": "{!v.scrollerId}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "bidirectional"
   },
   {
    "value": "lockVertical"
   },
   {
    "value": "lockHorizontal"
   },
   {
    "value": "invalidDirection"
   },
   {
    "value": "verticalSroll"
   },
   {
    "value": "horizontalScroll"
   }
  ],
  "cmp.ui.scroller": [
   {
    "aura:id": "bidirectional",
    "scroll": "bidirectional"
   },
   {
    "aura:id": "lockVertical",
    "lockondirection": "vertical"
   },
   {
    "aura:id": "lockHorizontal",
    "lockondirection": "horizontal"
   },
   {
    "aura:id": "invalidDirection",
    "scroll": "overtherainbow"
   },
   {
    "aura:id": "verticalSroll",
    "scroll": "vertical"
   },
   {
    "aura:id": "horizontalScroll",
    "scroll": "horizontal"
   }
  ]
 },
 "cmp.uitest.scroller_Test": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.TestJavaModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "scrollToBottomCount",
    "type": "Integer",
    "default": "0"
   }
  ],
  "cmp.ui.scroller": [
   {
    "aura:id": "basic"
   },
   {
    "aura:id": "missingAfterRender"
   },
   {
    "aura:id": "rubberbanding"
   },
   {
    "aura:id": "rubberbandingBecauseMissingRefresh"
   },
   {
    "aura:id": "pullToRefresh",
    "onpulltorefresh": "{!c.replaceBodyContent}"
   },
   {},
   {
    "aura:id": "scrollToYTest",
    "canshowmore": "true",
    "onpulltorefresh": "{!c.replaceBodyContent}",
    "onpulltoshowmore": "{!c.replaceBodyContent}"
   },
   {
    "aura:id": "horizontalScrollBottom",
    "scroll": "horizontal"
   },
   {
    "aura:id": "verticalScrollBottom",
    "scroll": "vertical"
   }
  ],
  "cmp.uitest.badrenderer": [
   {
    "skipafterrender": "true"
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "aura:id": "inTextArea",
    "value": "{!m.textAreaText}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "toTopButton",
    "label": "ScrollToTop",
    "press": "{!c.scrollToTop}"
   },
   {
    "aura:id": "toBotButton",
    "label": "ScrollToBottom",
    "press": "{!c.scrollToBottom}"
   },
   {
    "aura:id": "toStepButton",
    "label": "ScrollRelative",
    "press": "{!c.scrollDown}"
   },
   {
    "aura:id": "toStepUpButton",
    "label": "ScrollRelative",
    "press": "{!c.scrollUp}"
   },
   {
    "label": "ScrollToTop",
    "press": "{!c.scrollToTop}"
   },
   {
    "aura:id": "hztlScrollButton",
    "label": "ScrollToBottom",
    "press": "{!c.hztlScrollToBottom}"
   },
   {
    "aura:id": "vrtScrollButton",
    "label": "ScrollToBottom",
    "press": "{!c.vrtScrollToBottom}"
   }
  ]
 },
 "cmp.uitest.scroller_basic": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.ui.UIScrollerDataProvider",
    "description": "A test scroller."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "enabled",
    "default": "true",
    "type": "Boolean"
   }
  ],
  "cmp.ui.scroller": [
   {
    "class": "scrollWrapper",
    "onpulltorefresh": "{!c.fetchDataPTR}",
    "onpulltoshowmore": "{!c.fetchDataPTL}",
    "onbeforescrollstart": "{!c.beforeScrollStartHandler}",
    "onscrollstart": "{!c.scrollStartHandler}",
    "onscrollmove": "{!c.scrollMoveHandler}",
    "onscrollend": "{!c.scrollEndHandler}",
    "aura:id": "test-scroller",
    "showscrollbars": "true",
    "enabled": "{!v.enabled}"
   }
  ]
 },
 "cmp.uitest.scroller_basicPerf": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.ui.UIScrollerDataProvider",
    "description": "A test scroller for testing performance."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "rows",
    "type": "List"
   }
  ],
  "cmp.ui.scroller": [
   {
    "aura:id": "outer",
    "class": "scrollWrapper"
   },
   {
    "aura:id": "inner",
    "class": "scrollWrapper"
   }
  ],
  "cmp.aura.iteration": [
   {
    "var": "row",
    "items": "{!v.rows}"
   }
  ],
  "cmp.ui.outputurl": [
   {
    "value": "javascript:void(0);",
    "label": "{!row.text}",
    "click": "{!c.handleClick}"
   }
  ]
 },
 "cmp.uitest.stampdemo": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.stamp": [
   {},
   {
    "severity": "success"
   },
   {
    "severity": "warning"
   },
   {
    "severity": "important"
   },
   {
    "severity": "info"
   },
   {
    "severity": "inverse"
   }
  ]
 },
 "cmp.uitest.tab_lazyCustomTab": {
  "cmp.aura.component": [
   {
    "extends": "ui:tab"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "rendered",
    "type": "Boolean",
    "default": "false"
   }
  ]
 },
 "cmp.uitest.tabset_RegressionTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "renderItem",
    "type": "String",
    "default": "none"
   },
   {
    "name": "_extra",
    "type": "String",
    "default": "none"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{! v.renderItem == 'testAddTab'}"
   },
   {
    "istrue": "{! v.renderItem == 'testTabItemAltText'}"
   },
   {
    "istrue": "{! v.renderItem == 'none'}"
   }
  ],
  "cmp.ui.tabset": [
   {
    "class": "tabset",
    "aura:id": "tabSet"
   },
   {
    "class": "tabset",
    "aura:id": "tabSet"
   }
  ],
  "cmp.ui.tab": [
   {
    "title": "tab 0 title"
   },
   {
    "title": "tab 1 title"
   }
  ]
 },
 "cmp.uitest.tabset_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "renderItem",
    "type": "String",
    "default": "none"
   },
   {
    "name": "lazyRender",
    "type": "Boolean",
    "default": "true"
   },
   {
    "name": "closable",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "conditionalShow",
    "type": "Boolean",
    "default": "true"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{! v.renderItem == 'basic' || v.renderItem == 'all'}"
   },
   {
    "istrue": "{!!v.conditionalShow}"
   },
   {
    "istrue": "{!v.conditionalShow}"
   },
   {
    "istrue": "{! v.renderItem == 'nestedTabs' || v.renderItem == 'all'}"
   },
   {
    "istrue": "{! v.renderItem == 'noTabs'}"
   },
   {
    "istrue": "{! v.renderItem == 'tab' || v.renderItem == 'all'}"
   },
   {
    "istrue": "{! v.renderItem == 'tab_lazyCustomTab'}"
   },
   {
    "istrue": "{! v.renderItem == 'none'}"
   }
  ],
  "cmp.uitest.tabset_extendstest": [
   {
    "aura:id": "tabset2",
    "class": "tabset1",
    "lazyrendertabs": "{!v.lazyRender}"
   },
   {
    "aura:id": "tabset3",
    "class": "tabset1",
    "lazyrendertabs": "{!v.lazyRender}"
   },
   {
    "aura:id": "tabset_lazyLoading",
    "class": "tabset",
    "lazyrendertabs": "true"
   }
  ],
  "cmp.ui.tab": [
   {
    "title": "Dummy Tab",
    "aura:id": "inputForActivateByIndex",
    "closable": "{!v.closable}"
   },
   {
    "title": "Accounts",
    "aura:id": "inputForActivateByIndex",
    "closable": "{!v.closable}"
   },
   {
    "title": "Contacts",
    "name": "contacts",
    "closable": "{!v.closable}"
   },
   {
    "title": "Opportunities",
    "closable": "{!v.closable}"
   },
   {
    "title": "Leads",
    "closable": "{!v.closable}"
   },
   {
    "title": "Chatter",
    "active": "true",
    "aura:id": "chatter"
   },
   {
    "aura:id": "campaigns",
    "name": "icons"
   },
   {
    "title": "Dashboards",
    "aura:id": "dashboard",
    "closable": "{!v.closable}"
   },
   {
    "title": "tab1"
   },
   {
    "title": "inner tab 1",
    "aura:id": "nestedTab",
    "closable": "true"
   },
   {
    "title": "inner tab 2"
   },
   {
    "title": "tab 2"
   },
   {
    "title": "Accounts",
    "aura:id": "inputForActivateByIndex",
    "closable": "{!v.closable}"
   },
   {
    "title": "Contacts",
    "name": "contacts",
    "closable": "{!v.closable}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "icon"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "aura:id": "icon",
    "value": "Icon"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inputTabTitle",
    "class": "inputTabTitle",
    "placeholder": "title"
   },
   {
    "aura:id": "inputTabTitle",
    "class": "inputTabTitle",
    "placeholder": "title"
   }
  ],
  "cmp.ui.inputtextarea": [
   {
    "aura:id": "inputTabContent",
    "placeholder": "content"
   },
   {
    "aura:id": "inputTabContent",
    "class": "inputTabContent",
    "placeholder": "content"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "aura:id": "inputTabClosable",
    "value": "closable"
   },
   {
    "aura:id": "setActive",
    "value": "isActive"
   }
  ],
  "cmp.ui.button": [
   {
    "label": "add tab",
    "class": "addTab",
    "press": "{!c.addTab}"
   },
   {
    "label": "Update Tab Title",
    "press": "{!c.updateTab}"
   },
   {
    "label": "Activate By Index",
    "press": "{!c.activateTabByIndex}",
    "aura:id": "activateByIndex"
   },
   {
    "label": "Active By Title",
    "press": "{!c.activateTabByName}",
    "aura:id": "activateByName"
   }
  ],
  "cmp.ui.tabset": [
   {
    "class": "nestedTabs"
   },
   {
    "aura:id": "nestedTabSet"
   },
   {
    "aura:id": "noTabsTabSet",
    "class": "tabset1",
    "lazyrendertabs": "{!true}"
   }
  ],
  "cmp.uitest.tab_lazycustomtab": [
   {
    "aura:id": "lazytab1",
    "title": "Tab 1"
   },
   {
    "aura:id": "lazytab2",
    "title": "Tab 2",
    "active": "true"
   },
   {
    "aura:id": "lazytab3",
    "title": "Tab 3"
   }
  ]
 },
 "cmp.uitest.tabset_extendsTest": {
  "cmp.aura.component": [
   {
    "extends": "ui:tabset"
   }
  ]
 },
 "cmp.uitest.tabset_overflowTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "renderItem",
    "type": "String",
    "default": "none"
   },
   {
    "name": "newTabCloseable",
    "type": "Boolean",
    "default": "false"
   },
   {
    "name": "newTabActive",
    "type": "Boolean",
    "default": "true"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{! v.renderItem == 'tabsetOverflow1'}"
   },
   {
    "istrue": "{! v.renderItem == 'tabsetOverflow2'}"
   },
   {
    "istrue": "{! v.renderItem == 'tabsetOverflow3'}"
   },
   {
    "istrue": "{! v.renderItem == 'tabsetOverflow4'}"
   },
   {
    "istrue": "{! v.renderItem == 'tabsetOverflow5'}"
   },
   {
    "istrue": "{! v.renderItem == 'none'}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "addTabBtn",
    "label": "add tab",
    "class": "addTab",
    "press": "{!c.addTab}"
   },
   {
    "aura:id": "addTabBtn",
    "label": "add tab",
    "class": "addTab",
    "press": "{!c.addTab}"
   },
   {
    "aura:id": "addTabBtn",
    "label": "add tab",
    "class": "addTab",
    "press": "{!c.addTab}"
   },
   {
    "aura:id": "addTabBtn",
    "label": "add tab",
    "class": "addTab",
    "press": "{!c.addTab}"
   }
  ],
  "cmp.uitest.tabset_extendstest": [
   {
    "aura:id": "tabsetOverflow",
    "class": "tabset1",
    "useoverflowmenu": "true",
    "barwidth": "200",
    "tabitemwidth": "50"
   },
   {
    "aura:id": "tabsetOverflow",
    "class": "tabset1",
    "useoverflowmenu": "true",
    "barwidth": "200",
    "tabitemwidth": "50"
   },
   {
    "aura:id": "tabsetOverflow",
    "class": "tabset1",
    "useoverflowmenu": "true",
    "barwidth": "200",
    "tabitemwidth": "50"
   },
   {
    "aura:id": "tabsetOverflow",
    "class": "tabset1",
    "useoverflowmenu": "true",
    "barwidth": "90",
    "tabitemwidth": "50",
    "overflowlabel": "My Custom Overflow Label"
   },
   {
    "aura:id": "tabsetOverflow",
    "class": "tabset1",
    "useoverflowmenu": "true",
    "barwidth": "200",
    "tabitemwidth": "50"
   }
  ],
  "cmp.ui.tab": [
   {
    "title": "Tab 1"
   },
   {
    "title": "Tab 2"
   },
   {
    "title": "Tab 3"
   },
   {
    "title": "Tab 4"
   },
   {
    "title": "Tab 5"
   },
   {
    "title": "Tab 6"
   },
   {
    "title": "Tab 1"
   },
   {
    "title": "Tab 2"
   },
   {
    "title": "Tab 3"
   },
   {
    "title": "Tab 4"
   },
   {
    "title": "Tab 5"
   },
   {
    "title": "Tab 6",
    "active": "true"
   },
   {
    "title": "Tab 1"
   },
   {
    "title": "Tab 2",
    "active": "true"
   },
   {
    "title": "Tab 1"
   },
   {
    "title": "Tab 2"
   },
   {
    "title": "Tab 1"
   },
   {
    "title": "Tab 2"
   },
   {
    "title": "Tab 3",
    "active": "true"
   },
   {
    "title": "Tab 4"
   },
   {
    "title": "Tab 5"
   },
   {
    "title": "Tab 6"
   }
  ]
 },
 "cmp.uitest.tooltipTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "renderItem",
    "type": "String",
    "default": "all"
   }
  ],
  "cmp.ui.tooltip": [
   {
    "aura:id": "default"
   },
   {
    "aura:id": "bodyalphanum",
    "advanced": "true",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "bodyhtmlimg",
    "advanced": "true",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "bodyhtmltbl",
    "advanced": "true",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "tooltip7",
    "advanced": "false",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "disabledfalse",
    "advanced": "false",
    "disabled": "false",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "disabledtrue",
    "advanced": "false",
    "disabled": "true",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "disabledempty",
    "advanced": "false",
    "disabled": "",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "advTrueTooltip",
    "advanced": "true",
    "trigger": "none",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "advFalseTooltip",
    "advanced": "false",
    "trigger": "none",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "advEmptyTooltip",
    "advanced": "false",
    "trigger": "none",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "triggerhover",
    "advanced": "true",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "triggerclick",
    "advanced": "true",
    "trigger": "click",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "triggerfocus",
    "advanced": "true",
    "trigger": "focus",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "triggernone",
    "advanced": "true",
    "trigger": "none",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "triggerempty",
    "advanced": "true",
    "trigger": "",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "triggerhoveradvfalse",
    "advanced": "false",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "triggerclickadvfalse",
    "advanced": "false",
    "trigger": "click",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "triggerfocusadvfalse",
    "advanced": "false",
    "trigger": "focus",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "triggernoneadvfalse",
    "advanced": "false",
    "trigger": "none",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "triggeremptyadvfalse",
    "advanced": "false",
    "trigger": "",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "trigClassAlpha",
    "advanced": "false",
    "triggerclass": "myTriggerClass",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "trigClassNum",
    "advanced": "false",
    "triggerclass": "1234",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "trigClassSpl",
    "advanced": "false",
    "triggerclass": "ab:12;$%∆∑π¬",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeInDuration0",
    "advanced": "false",
    "fadein": "true",
    "fadeinduration": "0",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeInDuration200",
    "advanced": "false",
    "trigger": "hover",
    "fadein": "true",
    "fadeinduration": "200",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeInDuration5000",
    "advanced": "false",
    "trigger": "hover",
    "fadein": "true",
    "fadeinduration": "5000",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeInDuration-1000",
    "advanced": "false",
    "trigger": "hover",
    "fadein": "true",
    "fadeinduration": "-1000",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeInDurationempty",
    "advanced": "false",
    "trigger": "hover",
    "fadein": "true",
    "fadeinduration": "",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeOutDuration0",
    "advanced": "false",
    "fadeout": "true",
    "fadeoutduration": "0",
    "trigger": "hover",
    "isvisible": "false",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeOutDuration200",
    "advanced": "false",
    "trigger": "hover",
    "fadeout": "true",
    "fadeoutduration": "200",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeOutDuration5000",
    "advanced": "false",
    "trigger": "hover",
    "fadeout": "true",
    "fadeoutduration": "5000",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeOutDuration-1000",
    "advanced": "false",
    "trigger": "hover",
    "fadeout": "true",
    "fadeoutduration": "-1000",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeOutDurationempty",
    "advanced": "false",
    "trigger": "hover",
    "fadeout": "true",
    "fadeoutduration": "",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeIn1000fadeOut0",
    "fadeinduration": "1000",
    "fadeoutduration": "0",
    "trigger": "hover",
    "isvisible": "false",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeIn100fadeOut3000",
    "fadeinduration": "100",
    "fadeoutduration": "3000",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeIn3000fadeOut100",
    "fadeinduration": "3000",
    "fadeoutduration": "100",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeIn0fadeOut1000",
    "fadeinduration": "0",
    "fadeoutduration": "1000",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeIn-1000fadeOut3000",
    "fadeinduration": "-1000",
    "fadeoutduration": "3000",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeIn3000fadeOut-1000",
    "fadeinduration": "3000",
    "fadeoutduration": "-1000",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "fadeInfadeOutEmpty",
    "fadeinduration": "",
    "fadeoutduration": "",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay0",
    "advanced": "false",
    "delay": "0",
    "trigger": "hover",
    "isvisible": "false",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay300",
    "advanced": "false",
    "trigger": "hover",
    "delay": "300",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay3000",
    "advanced": "false",
    "trigger": "hover",
    "delay": "3000",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay-150",
    "advanced": "false",
    "trigger": "hover",
    "delay": "-150",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay-1000",
    "advanced": "false",
    "trigger": "hover",
    "delay": "-1000",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delayempty",
    "advanced": "false",
    "trigger": "hover",
    "delay": "",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay0FadeIn",
    "advanced": "false",
    "fadeinduration": "500",
    "delay": "0",
    "trigger": "hover",
    "isvisible": "false",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay300FadeIn",
    "advanced": "false",
    "trigger": "hover",
    "fadeinduration": "500",
    "delay": "300",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay3000FadeIn",
    "advanced": "false",
    "trigger": "hover",
    "fadeinduration": "500",
    "delay": "3000",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay-200FadeIn",
    "advanced": "false",
    "trigger": "hover",
    "fadeinduration": "500",
    "delay": "-200",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay-1000FadeIn",
    "advanced": "false",
    "trigger": "hover",
    "fadeinduration": "500",
    "delay": "-1000",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delayEmptyFadeIn",
    "advanced": "false",
    "trigger": "hover",
    "fadeinduration": "500",
    "delay": "",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay0FadeOut",
    "advanced": "false",
    "fadeoutduration": "500",
    "delay": "0",
    "trigger": "hover",
    "isvisible": "false",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay300FadeOut",
    "advanced": "false",
    "trigger": "hover",
    "fadeoutduration": "500",
    "delay": "300",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay3000FadeOut",
    "advanced": "false",
    "trigger": "hover",
    "fadeoutduration": "500",
    "delay": "3000",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay-200FadeOut",
    "advanced": "false",
    "trigger": "hover",
    "fadeoutduration": "500",
    "delay": "-200",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delay-1000FadeOut",
    "advanced": "false",
    "trigger": "hover",
    "fadeoutduration": "500",
    "delay": "-1000",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "delayEmptyFadeOut",
    "advanced": "false",
    "trigger": "hover",
    "fadeoutduration": "500",
    "delay": "",
    "isvisible": "true",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "classAlpha",
    "advanced": "false",
    "class": "myOwnClassHERE",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "classNum",
    "advanced": "false",
    "class": "1234",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "classSpl",
    "advanced": "false",
    "class": "a:12;å¬∑πßå",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "classDash",
    "advanced": "false",
    "class": "--a",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "bodyNormal",
    "advanced": "false",
    "trigger": "hover",
    "tooltipbody": "This is a fairly normal amount of text that you would put in the tooltip. Maybe a bit more is fine too. Don't forget to include spl. chars (\"!@#$%*^ ÅıÇΩœ∑®†¥ˆøπ¬˚∆˙©ƒ∂ßåΩ≈ç√∫˜µ≤≥ & \")"
   },
   {
    "aura:id": "bodyMany",
    "advanced": "false",
    "trigger": "hover",
    "tooltipbody": "This is a fairly normal amount of text that you would put in the tooltip. Maybe a bit more is fine too. Don't forget to include spl. chars (\"!@#$%*^ ÅıÇΩœ∑®†¥ˆøπ¬˚∆˙©ƒ∂ßåΩ≈ç√∫˜µ≤≥ & \") This info here is just to add some more text to the tooltip. Just adding more and more! It's like theres no end to this right? Wrong! All you need is patience. Man! I have to move this test further down the screen just because this tooltip has so many characters! Its just growing and growing. I don't know if the text will overflow. It doesn't look like it will. This was pretty well written so its all been handled very well! Don't you worry, we've got your back!"
   },
   {
    "aura:id": "bodyHTML",
    "advanced": "false",
    "trigger": "hover",
    "tooltipbody": "<h1>Hello</h1>"
   },
   {
    "aura:id": "bodyEmpty",
    "advanced": "false",
    "trigger": "hover",
    "tooltipbody": ""
   },
   {
    "aura:id": "domIdAlpha",
    "advanced": "false",
    "domid": "testDomId",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "domIdNum",
    "advanced": "false",
    "domid": "1234",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "domIdSpl",
    "advanced": "false",
    "domid": "a:1;%$∆ß∫åœ∑",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   },
   {
    "aura:id": "domIdEmpty",
    "advanced": "false",
    "domid": "",
    "trigger": "hover",
    "tooltipbody": "Tooltip Message"
   }
  ],
  "cmp.ui.label": [
   {
    "aura:id": "defaultlabel",
    "for": "default",
    "label": "?"
   },
   {
    "aura:id": "bodyalphanumlabel",
    "for": "input",
    "label": "ab54@#$Ω®"
   },
   {
    "aura:id": "disabledfalselabel",
    "for": "input",
    "label": "?"
   },
   {
    "aura:id": "disabledtruelabel",
    "for": "input",
    "label": "?"
   },
   {
    "aura:id": "disabledemptylabel",
    "for": "input",
    "label": "?"
   },
   {
    "aura:id": "triggerhoverlabel",
    "for": "triggerhover",
    "label": "?"
   },
   {
    "aura:id": "triggerclicklabel",
    "for": "triggerclick",
    "label": "?"
   },
   {
    "aura:id": "triggernonelabel",
    "for": "triggernone",
    "label": "?"
   },
   {
    "aura:id": "triggeremptylabel",
    "for": "triggerempty",
    "label": "?"
   },
   {
    "aura:id": "triggerhoveradvfalselabel",
    "for": "triggerhoveradvfalse",
    "label": "?"
   },
   {
    "aura:id": "triggerclickadvfalselabel",
    "for": "triggerclickadvfalse",
    "label": "?"
   },
   {
    "aura:id": "triggernoneadvfalselabel",
    "for": "triggernoneadvfalse",
    "label": "?"
   },
   {
    "aura:id": "triggeremptyadvfalselabel",
    "for": "triggeremptyadvfalse",
    "label": "?"
   },
   {
    "aura:id": "trigClassAlphalabel",
    "for": "trigClassAlpha",
    "label": "?"
   },
   {
    "aura:id": "trigClassNumlabel",
    "for": "trigClassNum",
    "label": "?"
   },
   {
    "aura:id": "trigClassSpllabel",
    "for": "trigClassSpl",
    "label": "?"
   },
   {
    "aura:id": "fadeInDuration0label",
    "for": "fadeInDuration0",
    "label": "?"
   },
   {
    "aura:id": "fadeInDuration200label",
    "for": "fadeInDuration200",
    "label": "?"
   },
   {
    "aura:id": "fadeInDuration5000label",
    "for": "fadeInDuration5000",
    "label": "?"
   },
   {
    "aura:id": "fadeInDuration-1000label",
    "for": "fadeInDuration-1000",
    "label": "?"
   },
   {
    "aura:id": "fadeInDurationemptylabel",
    "for": "fadeInDurationempty",
    "label": "?"
   },
   {
    "aura:id": "fadeOutDuration0label",
    "for": "fadeOutDuration0",
    "label": "?"
   },
   {
    "aura:id": "fadeOutDuration200label",
    "for": "fadeOutDuration200",
    "label": "?"
   },
   {
    "aura:id": "fadeOutDuration5000label",
    "for": "fadeOutDuration5000",
    "label": "?"
   },
   {
    "aura:id": "fadeOutDuration-1000label",
    "for": "fadeOutDuration-1000",
    "label": "?"
   },
   {
    "aura:id": "fadeOutDurationemptylabel",
    "for": "fadeOutDurationempty",
    "label": "?"
   },
   {
    "aura:id": "fadeIn1000fadeOut0label",
    "for": "fadeIn1000fadeOut0",
    "label": "?"
   },
   {
    "aura:id": "fadeIn100fadeOut3000label",
    "for": "fadeIn100fadeOut3000",
    "label": "?"
   },
   {
    "aura:id": "fadeIn3000fadeOut100label",
    "for": "fadeIn3000fadeOut100",
    "label": "?"
   },
   {
    "aura:id": "fadeIn0fadeOut1000label",
    "for": "fadeIn0fadeOut1000",
    "label": "?"
   },
   {
    "aura:id": "fadeIn-1000fadeOut3000label",
    "for": "fadeIn-1000fadeOut3000",
    "label": "?"
   },
   {
    "aura:id": "fadeIn3000fadeOut-1000label",
    "for": "fadeIn3000fadeOut-1000",
    "label": "?"
   },
   {
    "aura:id": "fadeInfadeOutEmptylabel",
    "for": "fadeInfadeOutEmpty",
    "label": "?"
   },
   {
    "aura:id": "delay0label",
    "for": "delay0",
    "label": "?"
   },
   {
    "aura:id": "delay300label",
    "for": "delay300",
    "label": "?"
   },
   {
    "aura:id": "delay3000label",
    "for": "delay3000",
    "label": "?"
   },
   {
    "aura:id": "delay-150label",
    "for": "delay-150",
    "label": "?"
   },
   {
    "aura:id": "delay-1000label",
    "for": "delay-1000",
    "label": "?"
   },
   {
    "aura:id": "delayemptylabel",
    "for": "delayempty",
    "label": "?"
   },
   {
    "aura:id": "delay0FadeInlabel",
    "for": "delay0FadeIn",
    "label": "?"
   },
   {
    "aura:id": "delay300FadeInlabel",
    "for": "delay300FadeIn",
    "label": "?"
   },
   {
    "aura:id": "delay3000FadeInlabel",
    "for": "delay3000FadeIn",
    "label": "?"
   },
   {
    "aura:id": "delay-200FadeInlabel",
    "for": "delay-200FadeIn",
    "label": "?"
   },
   {
    "aura:id": "delay-1000FadeInlabel",
    "for": "delay-1000FadeIn",
    "label": "?"
   },
   {
    "aura:id": "delayEmptyFadeInlabel",
    "for": "delayEmptyFadeIn",
    "label": "?"
   },
   {
    "aura:id": "delay0FadeOutlabel",
    "for": "delay0FadeOut",
    "label": "?"
   },
   {
    "aura:id": "delay300FadeOutlabel",
    "for": "delay300FadeOut",
    "label": "?"
   },
   {
    "aura:id": "delay3000FadeOutlabel",
    "for": "delay3000FadeOut",
    "label": "?"
   },
   {
    "aura:id": "delay-200FadeOutlabel",
    "for": "delay-200FadeOut",
    "label": "?"
   },
   {
    "aura:id": "delay-1000FadeOutlabel",
    "for": "delay-1000FadeOut",
    "label": "?"
   },
   {
    "aura:id": "delayEmptyFadeOutlabel",
    "for": "delayEmptyFadeOut",
    "label": "?"
   },
   {
    "aura:id": "classAlphalabel",
    "for": "classAlpha",
    "label": "Class"
   },
   {
    "aura:id": "classNumLabel",
    "for": "classNum",
    "label": "Class"
   },
   {
    "aura:id": "classSplLabel",
    "for": "classSpl",
    "label": "Class"
   },
   {
    "aura:id": "classDashLabel",
    "for": "classDash",
    "label": "Class"
   },
   {
    "aura:id": "bodyNormallabel",
    "for": "bodyNormal",
    "label": "?"
   },
   {
    "aura:id": "bodyManylabel",
    "for": "bodyMany",
    "label": "?"
   },
   {
    "aura:id": "bodyHTMLlabel",
    "for": "bodyHTML",
    "label": "?"
   },
   {
    "aura:id": "bodyEmptylabel",
    "for": "bodyHTML",
    "label": "?"
   },
   {
    "aura:id": "domIdAlphaLabel",
    "for": "domIdAlpha",
    "label": "?"
   },
   {
    "aura:id": "domIdNumLabel",
    "for": "domIdNum",
    "label": "?"
   },
   {
    "aura:id": "domIdSplLabel",
    "for": "domIdSpl",
    "label": "?"
   },
   {
    "aura:id": "domIdEmptyLabel",
    "for": "domIdEmpty",
    "label": "?"
   }
  ],
  "cmp.ui.image": [
   {
    "aura:id": "bodyhtmlimgtag",
    "src": "http://ccoenraets.github.io/salesforce-mobile-sdk-presentation/images/salesforce-logo.png",
    "class": "logo",
    "alt": "sfdc logo"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "advTrueButton",
    "label": "click me",
    "press": "{!c.handleClickTrue}"
   },
   {
    "aura:id": "advFalseButton",
    "label": "click me",
    "press": "{!c.handleClickFalse}"
   },
   {
    "aura:id": "advEmptyButton",
    "label": "click me",
    "press": "{!c.handleClickEmpty}"
   }
  ],
  "cmp.ui.inputtext": [
   {
    "aura:id": "inputadvtrue",
    "placeholder": "Focus here"
   },
   {
    "aura:id": "triggerfocusadvfalseinput",
    "placeholder": "Focus here"
   }
  ]
 },
 "cmp.uitest.tooltipTestPosition": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.tooltip": [
   {
    "aura:id": "topLeftWest",
    "advanced": "true",
    "direction": "west",
    "trigger": "hover"
   },
   {
    "aura:id": "topLeftNorth",
    "advanced": "true",
    "direction": "north",
    "trigger": "hover"
   },
   {
    "aura:id": "topLeftSouth",
    "advanced": "true",
    "direction": "south",
    "trigger": "hover"
   },
   {
    "aura:id": "topLeftEast",
    "advanced": "true",
    "direction": "east",
    "trigger": "hover"
   },
   {
    "aura:id": "topCenterWest",
    "advanced": "true",
    "direction": "west",
    "trigger": "hover"
   },
   {
    "aura:id": "topCenterNorth",
    "advanced": "true",
    "direction": "west",
    "trigger": "hover"
   },
   {
    "aura:id": "topCenterSouth",
    "advanced": "true",
    "direction": "south",
    "trigger": "hover"
   },
   {
    "aura:id": "topCenterEast",
    "advanced": "true",
    "direction": "west",
    "trigger": "hover"
   },
   {
    "aura:id": "topRightWest",
    "advanced": "true",
    "direction": "west",
    "trigger": "hover"
   },
   {
    "aura:id": "topRightNorth",
    "advanced": "true",
    "direction": "north",
    "trigger": "hover"
   },
   {
    "aura:id": "topRightSouth",
    "advanced": "true",
    "direction": "south",
    "trigger": "hover"
   },
   {
    "aura:id": "topRightEast",
    "advanced": "true",
    "direction": "east",
    "trigger": "hover"
   },
   {
    "aura:id": "leftCenterWest",
    "advanced": "true",
    "direction": "west",
    "trigger": "hover"
   },
   {
    "aura:id": "leftCenterNorth",
    "advanced": "true",
    "direction": "north",
    "trigger": "hover"
   },
   {
    "aura:id": "leftCenterSouth",
    "advanced": "true",
    "direction": "south",
    "trigger": "hover"
   },
   {
    "aura:id": "leftCenterEast",
    "advanced": "true",
    "direction": "east",
    "trigger": "hover"
   },
   {
    "aura:id": "centerCenterWest",
    "advanced": "true",
    "direction": "west",
    "trigger": "hover"
   },
   {
    "aura:id": "centerCenterNorth",
    "advanced": "true",
    "direction": "north",
    "trigger": "hover"
   },
   {
    "aura:id": "centerCenterSouth",
    "advanced": "true",
    "direction": "south",
    "trigger": "hover"
   },
   {
    "aura:id": "centerCenterEast",
    "advanced": "true",
    "direction": "east",
    "trigger": "hover"
   },
   {
    "aura:id": "rightCenterWest",
    "advanced": "true",
    "direction": "west",
    "trigger": "hover"
   },
   {
    "aura:id": "rightCenterNorth",
    "advanced": "true",
    "direction": "north",
    "trigger": "hover"
   },
   {
    "aura:id": "rightCenterSouth",
    "advanced": "true",
    "direction": "south",
    "trigger": "hover"
   },
   {
    "aura:id": "rightCenterEast",
    "advanced": "true",
    "direction": "east",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomRightWest",
    "advanced": "true",
    "direction": "west",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomRightNorth",
    "advanced": "true",
    "direction": "north",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomRightSouth",
    "advanced": "true",
    "direction": "south",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomRightEast",
    "advanced": "true",
    "direction": "east",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomCenterWest",
    "advanced": "true",
    "direction": "west",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomCenterNorth",
    "advanced": "true",
    "direction": "north",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomCenterSouth",
    "advanced": "true",
    "direction": "south",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomCenterEast",
    "advanced": "true",
    "direction": "east",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomLeftWest",
    "advanced": "true",
    "direction": "west",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomLeftNorth",
    "advanced": "true",
    "direction": "north",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomLeftSouth",
    "advanced": "true",
    "direction": "south",
    "trigger": "hover"
   },
   {
    "aura:id": "bottomLeftEast",
    "advanced": "true",
    "direction": "east",
    "trigger": "hover"
   }
  ],
  "cmp.ui.label": [
   {
    "aura:id": "topLeftWestlabel",
    "for": "topLeftWest",
    "label": "Wst"
   },
   {
    "aura:id": "topLeftNorthlabel",
    "for": "topLeftNorth",
    "label": " Nrt"
   },
   {
    "aura:id": "topLeftSouthlabel",
    "for": "topLeftSouth",
    "label": " Sth"
   },
   {
    "aura:id": "topLeftEastlabel",
    "for": "topLeftEast",
    "label": " Est"
   },
   {
    "aura:id": "topCenterWestlabel",
    "for": "topCenterWest",
    "label": " Wst"
   },
   {
    "aura:id": "topCenterNorthlabel",
    "for": "topCenterNorth",
    "label": " Nrt"
   },
   {
    "aura:id": "topCenterSouthlabel",
    "for": "topCenterSouth",
    "label": " Sth"
   },
   {
    "aura:id": "topCenterEastlabel",
    "for": "topCenterEast",
    "label": " Est"
   },
   {
    "aura:id": "topRightWestlabel",
    "for": "topRightWest",
    "label": "Wst"
   },
   {
    "aura:id": "topRightNorthlabel",
    "for": "topRightNorth",
    "label": " Nrt"
   },
   {
    "aura:id": "topRightSouthlabel",
    "for": "topRightSouth",
    "label": " Sth"
   },
   {
    "aura:id": "topRightEastlabel",
    "for": "topRightEast",
    "label": " Est"
   },
   {
    "aura:id": "leftCenterWestlabel",
    "for": "leftCenterWest",
    "label": " Wst"
   },
   {
    "aura:id": "leftCenterNorthlabel",
    "for": "leftCenterNorth",
    "label": " Nrt"
   },
   {
    "aura:id": "leftCenterSouthlabel",
    "for": "leftCenterSouth",
    "label": " Sth"
   },
   {
    "aura:id": "leftCenterEastlabel",
    "for": "leftCenterEast",
    "label": " Est"
   },
   {
    "aura:id": "centerCenterWestlabel",
    "for": "centerCenterWest",
    "label": "Wst"
   },
   {
    "aura:id": "centerCenterNorthlabel",
    "for": "centerCenterNorth",
    "label": " Nrt"
   },
   {
    "aura:id": "centerCenterSouthlabel",
    "for": "centerCenterSouth",
    "label": " Sth"
   },
   {
    "aura:id": "centerCenterEastlabel",
    "for": "centerCenterEast",
    "label": " Est"
   },
   {
    "aura:id": "rightCenterWestlabel",
    "for": "rightCenterWest",
    "label": "Wst"
   },
   {
    "aura:id": "rightCenterNorthlabel",
    "for": "rightCenterNorth",
    "label": " Nrt"
   },
   {
    "aura:id": "rightCenterSouthlabel",
    "for": "rightCenterSouth",
    "label": " Sth"
   },
   {
    "aura:id": "rightCenterEastlabel",
    "for": "rightCenterEast",
    "label": " Est"
   },
   {
    "aura:id": "bottomRightWestlabel",
    "for": "bottomRightWest",
    "label": "Wst"
   },
   {
    "aura:id": "bottomRightNorthlabel",
    "for": "bottomRightNorth",
    "label": " Nrt"
   },
   {
    "aura:id": "bottomRightSouthlabel",
    "for": "bottomRightSouth",
    "label": " Sth"
   },
   {
    "aura:id": "bottomRightEastlabel",
    "for": "bottomRightEast",
    "label": " Est"
   },
   {
    "aura:id": "bottomCenterWestlabel",
    "for": "bottomCenterWest",
    "label": "Wst"
   },
   {
    "aura:id": "bottomCenterNorthlabel",
    "for": "bottomCenterNorth",
    "label": " Nrt"
   },
   {
    "aura:id": "bottomCenterSouthlabel",
    "for": "bottomCenterSouth",
    "label": " Sth"
   },
   {
    "aura:id": "bottomCenterEastlabel",
    "for": "bottomCenterEast",
    "label": " Est"
   },
   {
    "aura:id": "bottomLeftWestlabel",
    "for": "bottomLeftWest",
    "label": "Wst"
   },
   {
    "aura:id": "bottomLeftNorthlabel",
    "for": "bottomLeftNorth",
    "label": " Nrt"
   },
   {
    "aura:id": "bottomLeftSouthlabel",
    "for": "bottomLeftSouth",
    "label": " Sth"
   },
   {
    "aura:id": "bottomLeftEastlabel",
    "for": "bottomLeftEast",
    "label": " Est"
   }
  ]
 },
 "cmp.uitest.tooltip_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "renderItem",
    "type": "String",
    "default": "all"
   }
  ],
  "cmp.aura.if": [
   {
    "istrue": "{! v.renderItem == 'triggers' || v.renderItem == 'all'}"
   },
   {
    "istrue": "{! v.renderItem == 'advancedPositioning' || v.renderItem == 'all'}"
   }
  ],
  "cmp.ui.tooltip": [
   {
    "aura:id": "trigger1",
    "advanced": "true",
    "trigger": "click"
   },
   {
    "aura:id": "tooltip1",
    "advanced": "true",
    "trigger": "focus",
    "tooltipbody": "Hello world"
   },
   {
    "aura:id": "tooltip2",
    "advanced": "true",
    "trigger": "hover",
    "tooltipbody": "Long enough to go off the edge of the screen"
   },
   {
    "aura:id": "tooltip3",
    "advanced": "true",
    "trigger": "hover",
    "tooltipbody": "Long enough to go off the edge of the screen"
   },
   {
    "aura:id": "tooltip4",
    "advanced": "true",
    "trigger": "hover",
    "tooltipbody": "Long enough to go off the edge of the screen"
   },
   {
    "aura:id": "tooltip5",
    "advanced": "true",
    "trigger": "hover",
    "tooltipbody": "Long enough to go off the edge of the screen"
   }
  ]
 },
 "cmp.uitest.treeNode_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.treenode": [
   {
    "aura:id": "root",
    "title": "/",
    "expanded": "{!true}"
   },
   {
    "aura:id": "iota",
    "href": "#iota",
    "title": "iota"
   },
   {
    "aura:id": "A",
    "title": "A"
   },
   {
    "aura:id": "mu",
    "href": "#mu",
    "title": "mu"
   },
   {
    "aura:id": "B",
    "title": "B"
   },
   {
    "aura:id": "lambda",
    "href": "#lambda",
    "title": "lambda"
   },
   {
    "aura:id": "D",
    "title": "D"
   },
   {
    "aura:id": "gamma",
    "href": "#gamma",
    "title": "gamma"
   },
   {
    "aura:id": "G",
    "title": "G"
   },
   {
    "aura:id": "pi",
    "href": "#pi",
    "title": "pi"
   },
   {
    "aura:id": "rho",
    "href": "#rho",
    "title": "rho"
   },
   {
    "aura:id": "tau",
    "href": "#tau",
    "title": "tau"
   },
   {
    "aura:id": "E",
    "title": "E"
   },
   {
    "aura:id": "alpha",
    "href": "#alpha",
    "title": "alpha"
   },
   {
    "aura:id": "beta",
    "href": "#beta",
    "title": "beta"
   },
   {
    "aura:id": "F",
    "title": "F"
   },
   {
    "aura:id": "H",
    "title": "H"
   },
   {
    "aura:id": "chi",
    "href": "#chi",
    "title": "chi"
   },
   {
    "aura:id": "psi",
    "href": "#psi",
    "title": "psi"
   },
   {
    "aura:id": "omega",
    "href": "#omega",
    "title": "omega"
   },
   {
    "aura:id": "C",
    "title": "C"
   }
  ]
 },
 "cmp.uitest.tree_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.ui.tree": [
   {
    "aura:id": "automobiles"
   },
   {
    "aura:id": "planes"
   }
  ],
  "cmp.ui.treenode": [
   {
    "aura:id": "toyota",
    "title": "Toyota"
   },
   {
    "aura:id": "toyota.sedan",
    "title": "Sedan"
   },
   {
    "aura:id": "toyota.camry",
    "title": "Camry"
   },
   {
    "aura:id": "toyota.corolla",
    "title": "Corolla"
   },
   {
    "aura:id": "toyota.coupe",
    "title": "Coupe"
   },
   {
    "aura:id": "toyota.yaris",
    "title": "Yaris"
   },
   {
    "aura:id": "toyota.futuremodel"
   },
   {
    "aura:id": "toyota.secretModel"
   },
   {
    "aura:id": "toyota.pod",
    "title": "Pod"
   },
   {
    "aura:id": "toyota.truck",
    "title": "Truck"
   },
   {
    "aura:id": "toyota.tacoma",
    "title": "Tacoma"
   },
   {
    "aura:id": "tesla",
    "title": "Tesla"
   },
   {
    "aura:id": "tesla.sedan",
    "title": "Sedan"
   },
   {
    "aura:id": "tesla.models",
    "title": "Model-S"
   },
   {
    "aura:id": "tesla.sports",
    "title": "Sports Car"
   },
   {
    "aura:id": "tesla.roadster",
    "title": "Roadster"
   },
   {
    "aura:id": "tesla.suv",
    "title": "SUV"
   },
   {
    "aura:id": "ford",
    "title": "Ford"
   },
   {
    "aura:id": "ford.sedan",
    "title": "Sedan"
   },
   {
    "aura:id": "ford.focus",
    "title": "Focus"
   },
   {
    "aura:id": "ford.fusion",
    "title": "Fusion"
   },
   {
    "aura:id": "ford.taurus",
    "title": "Taurus"
   },
   {
    "aura:id": "ford.truck",
    "title": "Truck"
   },
   {
    "aura:id": "ford.f150",
    "title": "F-150"
   },
   {
    "aura:id": "ford.superduty",
    "title": "Super Duty"
   },
   {
    "aura:id": "ford.sports",
    "title": "Sports Car"
   },
   {
    "aura:id": "ford.mustang",
    "title": "Mustang"
   },
   {
    "aura:id": "boeing",
    "title": "Boeing"
   },
   {
    "aura:id": "boeing.737",
    "title": "737"
   },
   {
    "aura:id": "boeing.747",
    "title": "747"
   },
   {
    "aura:id": "boeing.777",
    "title": "777"
   },
   {
    "aura:id": "airbus",
    "title": "Airbus"
   },
   {
    "aura:id": "airbus.a380",
    "title": "A-380"
   },
   {
    "aura:id": "xflight",
    "title": "X Flight"
   }
  ]
 },
 "cmp.uitest.virtualDataGridItem": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "value",
    "type": "String",
    "description": ""
   }
  ]
 },
 "cmp.uitest.virtualDataGridProvider_test": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "description": ""
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.uitest.virtualDataGrid_columnsTests": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "sortBy",
    "type": "String"
   },
   {
    "name": "pageSize",
    "type": "Integer",
    "default": "10"
   },
   {
    "name": "currentPage",
    "type": "Integer",
    "default": "1"
   },
   {
    "name": "totalItems",
    "type": "Integer"
   },
   {
    "name": "index",
    "type": "Integer"
   },
   {
    "name": "count",
    "type": "Integer"
   },
   {
    "name": "className",
    "type": "String"
   },
   {
    "name": "rowIndex",
    "type": "Integer"
   },
   {
    "name": "gridItems",
    "type": "List"
   },
   {
    "name": "gridSelectedItems",
    "type": "List"
   },
   {
    "name": "provideNoData",
    "type": "Boolean"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "change",
    "value": "{!v.currentPage}",
    "action": "{!c.handleCurrentPageChange}"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "kitchenButton",
    "label": "Change Columns",
    "press": "{!c.switchColumn}"
   },
   {
    "class": "kitchenButton",
    "label": "Re-fire datagrid's provide",
    "press": "{!c.replaceData}"
   },
   {
    "class": "kitchenButton",
    "label": "Fire Data Provider With Empty Data",
    "press": "{!c.emptyData}"
   },
   {
    "label": "Spit Out Items",
    "press": "{!c.spit}"
   }
  ],
  "cmp.ui.inputcheckbox": [
   {
    "label": "Provide no data",
    "value": "{!v.provideNoData}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "label": "Sorting By:",
    "value": "{!v.sortBy}"
   },
   {
    "value": "{!item.id}"
   },
   {
    "value": "{!item.subject}"
   },
   {
    "value": "{!item.date}"
   },
   {
    "value": "{!item.name}"
   },
   {
    "value": "{!item.relatedTo}"
   },
   {
    "value": "{!item.id + ':' + item.subject + ':' + item.who.name + ':' + item.what.name + ':' + item.activityDate}"
   }
  ],
  "cmp.ui.virtualdatagrid": [
   {
    "aura:id": "grid",
    "onsort": "{!c.onsort}",
    "fixedheader": "true"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "headerColumns"
   },
   {
    "attribute": "columns"
   },
   {
    "attribute": "dataModel"
   }
  ],
  "cmp.ui.datagridcolumn": [
   {
    "name": "id",
    "label": "Id",
    "sortable": "true"
   },
   {
    "name": "subject",
    "label": "Subject",
    "sortable": "true"
   },
   {
    "name": "date",
    "label": "date"
   },
   {
    "name": "name",
    "label": "name"
   },
   {
    "name": "relatedTo",
    "label": "related to"
   }
  ],
  "cmp.uitest.datagrid_testdataprovider": [
   {
    "aura:id": "provider",
    "sortby": "{!v.sortBy}",
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalpages": "{!v.totalPages}",
    "totalitems": "{!v.totalItems}"
   }
  ],
  "cmp.aura.iteration": [
   {
    "aura:id": "items",
    "var": "item",
    "items": "{!v.gridItems}"
   }
  ]
 },
 "cmp.uitest.virtualDataGrid_dataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider",
    "description": "A test data provider to test virtualDataGrid component."
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "provide",
    "action": "{!c.provide}"
   }
  ]
 },
 "cmp.uitest.virtualDataGrid_onSortTest": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "sortBy",
    "type": "String"
   }
  ],
  "cmp.ui.virtualdatagrid": [
   {
    "aura:id": "grid",
    "onsort": "{!c.onsort}",
    "fixedheader": "true"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "headerColumns"
   },
   {
    "attribute": "columns"
   },
   {
    "attribute": "dataModel"
   }
  ],
  "cmp.ui.datagridcolumn": [
   {
    "name": "id",
    "label": "Id",
    "sortable": "true"
   },
   {
    "name": "name",
    "label": "Name",
    "sortable": "true"
   },
   {
    "name": "gender",
    "label": "Gender",
    "sortable": "true",
    "initialdirectiononsort": "ascending"
   },
   {
    "name": "age",
    "label": "Age",
    "sortable": "true"
   },
   {
    "name": "grade",
    "label": "Grade"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!item.id}"
   },
   {
    "value": "{!item.name}"
   },
   {
    "value": "{!item.gender}"
   },
   {
    "value": "{!item.age}"
   },
   {
    "value": "{!item.grade}"
   },
   {
    "aura:id": "sortBy",
    "value": ""
   }
  ],
  "cmp.uitest.virtualdatagrid_dataprovider": [
   {
    "aura:id": "provider",
    "sortby": "{!v.sortBy}"
   }
  ]
 },
 "cmp.uitest.virtualDataGrid_test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "testFixedHeader",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.ui.virtualdatagrid": [
   {
    "aura:id": "grid",
    "fixedheader": "{!v.testFixedHeader}"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "headerColumns"
   },
   {
    "attribute": "columns"
   },
   {
    "attribute": "dataModel"
   }
  ],
  "cmp.ui.datagridcolumn": [
   {
    "name": "Name",
    "label": "Name"
   },
   {
    "name": "Phone",
    "label": "Phone"
   },
   {
    "name": "Balance",
    "label": "Balance"
   }
  ],
  "cmp.uitest.virtualdatagriditem": [
   {
    "value": "{!item.name}"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!item.phone}"
   },
   {
    "value": "{!item.balance}"
   }
  ],
  "cmp.uitest.virtualdatagridprovider_test": [
   {}
  ]
 },
 "cmp.uitest.virtualList_Test": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.attribute": [
   {
    "name": "pageSize",
    "type": "Integer",
    "default": "100"
   },
   {
    "name": "currentPage",
    "type": "Integer",
    "default": "1"
   },
   {
    "name": "totalPages",
    "type": "Integer",
    "default": "5"
   },
   {
    "name": "template",
    "type": "Aura.ComponentDefRef[]",
    "description": "template"
   }
  ],
  "cmp.test.testvirtuallisttemplate": [
   {},
   {
    "id": "{!item._id}",
    "index": "{!item.index}",
    "name": "{!item.name}",
    "balance": "{!item.balance}",
    "friends": "{!item.friends}"
   }
  ],
  "cmp.ui.button": [
   {
    "class": "kitchenButton",
    "label": "Re-fire datagrid's provide",
    "press": "{!c.replaceData}"
   },
   {
    "class": "kitchenButtonEmptyData",
    "label": "Fire Data Provider With Empty Data",
    "press": "{!c.emptyData}"
   }
  ],
  "cmp.ui.virtuallist": [
   {
    "aura:id": "list",
    "itemvar": "item"
   }
  ],
  "cmp.aura.set": [
   {
    "attribute": "dataProvider"
   },
   {
    "attribute": "itemTemplate"
   }
  ],
  "cmp.uitest.virtuallist_testdataprovider": [
   {
    "aura:id": "provider",
    "pagesize": "{!v.pageSize}",
    "currentpage": "{!v.currentPage}",
    "totalpages": "{!v.totalPages}",
    "totalitems": "{!v.totalItems}"
   }
  ]
 },
 "cmp.uitest.virtualList_TestDataProvider": {
  "cmp.aura.component": [
   {
    "extends": "ui:dataProvider"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "currentPage",
    "type": "Integer"
   },
   {
    "name": "pageSize",
    "type": "Integer"
   },
   {
    "name": "loadData",
    "type": "Integer"
   },
   {
    "name": "totalPages",
    "type": "Integer"
   },
   {
    "name": "empty",
    "type": "Boolean",
    "default": "false"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "value": "{!this}",
    "action": "{!c.init}"
   },
   {
    "name": "provide",
    "action": "{!c.handleProvide}"
   }
  ]
 },
 "cmp.updateTest.updateHandling": {
  "cmp.aura.component": [
   {
    "extends": "updateTest:updateWithoutHandling"
   }
  ],
  "cmp.aura.handler": [
   {
    "event": "aura:clientOutOfSync",
    "action": "{!c.handleUpdate}"
   }
  ]
 },
 "cmp.updateTest.updateWithoutHandling": {
  "cmp.aura.component": [
   {
    "controller": "java://org.auraframework.components.test.java.controller.JavaTestController",
    "extensible": "true"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "text",
    "type": "string"
   }
  ],
  "cmp.ui.outputtext": [
   {
    "value": "{!v.text}"
   }
  ],
  "cmp.ui.button": [
   {
    "aura:id": "update",
    "class": "update",
    "press": "{!c.updateText}",
    "label": "update text"
   },
   {
    "aura:id": "trigger",
    "class": "trigger",
    "press": "{!c.sendOutdatedRequest}",
    "label": "call action"
   }
  ]
 },
 "cmp.updateTest.updateable": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.registerevent": [
   {
    "name": "click",
    "type": "updateTest:updateableEvent"
   }
  ]
 },
 "cmp.updateTest.updateableAlso": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.updateTest.updateableOther": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ]
 },
 "cmp.validationTest.basic": {
  "cmp.aura.component": [
   {
    "abstract": "true",
    "extensible": "false"
   }
  ]
 },
 "cmp.valueChange.componentInit": {
  "cmp.aura.component": [
   {
    "render": "client"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "action": "{!c.componentInit}",
    "value": "{!this}"
   },
   {
    "name": "init",
    "action": "{!c.multipleHandlers}",
    "value": "{!this}"
   },
   {
    "name": "init",
    "action": "{!c.attributeInit}",
    "value": "{!v.strAttribute}"
   },
   {
    "name": "init",
    "action": "{!c.facetInit}",
    "value": "{!facet}"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "strAttribute",
    "type": "String",
    "default": "foo"
   }
  ],
  "cmp.valuechange.facetinit": [
   {
    "aura:id": "facet"
   }
  ]
 },
 "cmp.valueChange.facetInit": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "action": "{!c.facetInit}",
    "value": "{!this}"
   }
  ]
 },
 "cmp.valueChange.newComponentInit": {
  "cmp.aura.component": [
   {}
  ],
  "cmp.aura.handler": [
   {
    "name": "init",
    "action": "{!c.newComponentInit}",
    "value": "{!this}"
   }
  ]
 },
 "cmp.valueChange.simpleValueChange": {
  "cmp.aura.component": [
   {
    "model": "java://org.auraframework.components.test.java.model.ValueChangeModel"
   }
  ],
  "cmp.aura.attribute": [
   {
    "name": "observed",
    "type": "String",
    "default": "first"
   },
   {
    "name": "observedB",
    "type": "string",
    "default": "observedB"
   },
   {
    "name": "observedC",
    "type": "string",
    "default": "observedC"
   }
  ],
  "cmp.aura.handler": [
   {
    "name": "change",
    "value": "{!m.string}",
    "action": "{!c.stringChange}"
   },
   {
    "name": "change",
    "value": "{!m.map}",
    "action": "{!c.mapChange}"
   },
   {
    "name": "change",
    "value": "{!m.list}",
    "action": "{!c.listChange}"
   },
   {
    "name": "change",
    "value": "{!m.recurseA}",
    "action": "{!c.recurseAChange}"
   },
   {
    "name": "change",
    "value": "{!m.recurseB}",
    "action": "{!c.recurseBChange}"
   },
   {
    "name": "change",
    "value": "{!m.recurseC}",
    "action": "{!c.recurseCChange}"
   },
   {
    "name": "change",
    "value": "{!m.chained}",
    "action": "{!c.chainedChange}"
   },
   {
    "name": "change",
    "value": "{!m.unchained}",
    "action": "{!c.unchainedChange}"
   }
  ],
  "cmp.test.ballot": [
   {
    "aura:id": "ballot"
   }
  ]
 },
 "cmp.whitespaceBehaviorTest.optimizeWhitespace": {
  "cmp.aura.component": [
   {
    "whitespace": "optimize",
    "render": "server"
   }
  ]
 },
 "cmp.whitespaceBehaviorTest.preserveWhitespace": {
  "cmp.aura.component": [
   {
    "whitespace": "preserve",
    "render": "server"
   }
  ]
 }
}
{
  "scope": "source.js, source.json, meta.structure.dictionary.json, meta.structure.dictionary.value.json, meta.structure.array.json",
  "completions": [
    {
      "trigger": "helper-aura-debug-output",
      "contents": "cmp.getDef().getHelper().output(${1:cmp},${2:name},${3:msg},${4:purgeOldData})"
    },
    {
      "trigger": "helper-aura-debug-scrollToBottom",
      "contents": "cmp.getDef().getHelper().scrollToBottom(${1:cmp},${2:name})"
    },
    {
      "trigger": "helper-aura-debug-getAuraStats",
      "contents": "cmp.getDef().getHelper().getAuraStats(${1:cmp},${2:viewName})"
    },
    {
      "trigger": "helper-aura-html-caseAttribute",
      "contents": "cmp.getDef().getHelper().caseAttribute(${1:attribute})"
    },
    {
      "trigger": "helper-aura-html-addNamedClickHandler",
      "contents": "cmp.getDef().getHelper().addNamedClickHandler(${1:element},${2:handler},${3:handlerName})"
    },
    {
      "trigger": "helper-aura-html-domEventHandler",
      "contents": "cmp.getDef().getHelper().domEventHandler(${1:event})"
    },
    {
      "trigger": "helper-aura-html-dispatchAction",
      "contents": "cmp.getDef().getHelper().dispatchAction(${1:action},${2:event})"
    },
    {
      "trigger": "helper-aura-html-canHaveBody",
      "contents": "cmp.getDef().getHelper().canHaveBody(${1:component})"
    },
    {
      "trigger": "helper-aura-html-createHtmlAttribute",
      "contents": "cmp.getDef().getHelper().createHtmlAttribute(${1:component},${2:element},${3:name},${4:attribute})"
    },
    {
      "trigger": "helper-aura-html-destroyHtmlAttribute",
      "contents": "cmp.getDef().getHelper().destroyHtmlAttribute(${1:component},${2:name},${3:attribute})"
    },
    {
      "trigger": "helper-aura-if-createBody",
      "contents": "cmp.getDef().getHelper().createBody(${1:cmp},${2:isTrue})"
    },
    {
      "trigger": "helper-aura-iteration-createBody",
      "contents": "cmp.getDef().getHelper().createBody(${1:component},${2:localCreation})"
    },
    {
      "trigger": "helper-aura-iteration-clearUnrenderedBody",
      "contents": "cmp.getDef().getHelper().clearUnrenderedBody(${1:component})"
    },
    {
      "trigger": "helper-aura-iteration-updateBody",
      "contents": "cmp.getDef().getHelper().updateBody(${1:component})"
    },
    {
      "trigger": "helper-aura-iteration-buildBody",
      "contents": "cmp.getDef().getHelper().buildBody(${1:component},${2:itemHandler},${3:completeHandler})"
    },
    {
      "trigger": "helper-aura-iteration-buildTemplate",
      "contents": "cmp.getDef().getHelper().buildTemplate(${1:component},${2:template},${3:item},${4:index},${5:itemVar},${6:indexVar},${7:templateValueProvider},${8:localCreation},${9:forceServer},${10:callback})"
    },
    {
      "trigger": "helper-aura-iteration-getStart",
      "contents": "cmp.getDef().getHelper().getStart(${1:cmp})"
    },
    {
      "trigger": "helper-aura-iteration-getEnd",
      "contents": "cmp.getDef().getHelper().getEnd(${1:cmp})"
    },
    {
      "trigger": "helper-aura-iteration-trackItem",
      "contents": "cmp.getDef().getHelper().trackItem(${1:component},${2:item},${3:index},${4:components})"
    },
    {
      "trigger": "helper-aura-label-tokenize",
      "contents": "cmp.getDef().getHelper().tokenize(${1:base},${2:vPattern},${3:vEndPattern})"
    },
    {
      "trigger": "helper-auraStorage-fuelGauge-getStorage",
      "contents": "cmp.getDef().getHelper().getStorage(${1:cmp})"
    },
    {
      "trigger": "helper-auraStorage-fuelGauge-isEnabled",
      "contents": "cmp.getDef().getHelper().isEnabled(${1:cmp})"
    },
    {
      "trigger": "helper-auraStorage-fuelGauge-update",
      "contents": "cmp.getDef().getHelper().update(${1:cmp})"
    },
    {
      "trigger": "helper-auraStorage-init-getStorage",
      "contents": "cmp.getDef().getHelper().getStorage(${1:cmp})"
    },
    {
      "trigger": "helper-auraStorage-init-init",
      "contents": "cmp.getDef().getHelper().init(${1:cmp})"
    },
    {
      "trigger": "helper-auradev-testDataProvider-provide",
      "contents": "cmp.getDef().getHelper().provide(${1:component},${2:event})"
    },
    {
      "trigger": "helper-auradev-testDataProvider2-provide",
      "contents": "cmp.getDef().getHelper().provide(${1:component},${2:event})"
    },
    {
      "trigger": "helper-auradocs-demoAutocomplete-handleInputChange",
      "contents": "cmp.getDef().getHelper().handleInputChange(${1:cmp},${2:event},${3:autoCompleteCmpName})"
    },
    {
      "trigger": "helper-auradocs-demoAutocomplete-handleSelectOption",
      "contents": "cmp.getDef().getHelper().handleSelectOption(${1:cmp},${2:event},${3:autoCompleteCmpName})"
    },
    {
      "trigger": "helper-auradocs-demoAutocomplete-handleMatchDone",
      "contents": "cmp.getDef().getHelper().handleMatchDone(${1:cmp},${2:event},${3:autoCompleteCmpName})"
    },
    {
      "trigger": "helper-auradocs-demoDataProvider-provide",
      "contents": "cmp.getDef().getHelper().provide(${1:component})"
    },
    {
      "trigger": "helper-auradocs-demoEvents-getUnwrapped",
      "contents": "cmp.getDef().getHelper().getUnwrapped(${1:cmp},${2:action})"
    },
    {
      "trigger": "helper-auradocs-docs-showWaiting",
      "contents": "cmp.getDef().getHelper().showWaiting(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-docs-hideWaiting",
      "contents": "cmp.getDef().getHelper().hideWaiting(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-docs-showRefreshing",
      "contents": "cmp.getDef().getHelper().showRefreshing(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-docs-hideRefreshing",
      "contents": "cmp.getDef().getHelper().hideRefreshing(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-docs-setLayout",
      "contents": "cmp.getDef().getHelper().setLayout(${1:cmp},${2:layout},${3:parameters})"
    },
    {
      "trigger": "helper-auradocs-editorPanel-createCodeMirror",
      "contents": "cmp.getDef().getHelper().createCodeMirror(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-helpPanel-setTopicPanelFacet",
      "contents": "cmp.getDef().getHelper().setTopicPanelFacet(${1:cmp},${2:topic})"
    },
    {
      "trigger": "helper-auradocs-openTopicTree-initActiveTopicVisitor",
      "contents": "cmp.getDef().getHelper().initActiveTopicVisitor(${1:topicMap},${2:parentMap})"
    },
    {
      "trigger": "helper-auradocs-openTopicTree-preprocessTree",
      "contents": "cmp.getDef().getHelper().preprocessTree(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-openTopicTree-expandActiveAncestry",
      "contents": "cmp.getDef().getHelper().expandActiveAncestry(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-openTopicTree-highlightActive",
      "contents": "cmp.getDef().getHelper().highlightActive(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-openTopicTree-setActive",
      "contents": "cmp.getDef().getHelper().setActive(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-openTopicTree-doUpdate",
      "contents": "cmp.getDef().getHelper().doUpdate(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-reference-showWaiting",
      "contents": "cmp.getDef().getHelper().showWaiting(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-reference-hideWaiting",
      "contents": "cmp.getDef().getHelper().hideWaiting(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-reference-showRefreshing",
      "contents": "cmp.getDef().getHelper().showRefreshing(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-reference-hideRefreshing",
      "contents": "cmp.getDef().getHelper().hideRefreshing(${1:cmp})"
    },
    {
      "trigger": "helper-auradocs-searchFilterTree-initSearchFilterVisitor",
      "contents": "cmp.getDef().getHelper().initSearchFilterVisitor(${1:query})"
    },
    {
      "trigger": "helper-auradocs-viewer-normalizeDescriptor",
      "contents": "cmp.getDef().getHelper().normalizeDescriptor(${1:descriptor})"
    },
    {
      "trigger": "helper-aurajstest-jstest-runNextTest",
      "contents": "cmp.getDef().getHelper().runNextTest(${1:cmp})"
    },
    {
      "trigger": "helper-aurajstest-jstestAis-runNextTest",
      "contents": "cmp.getDef().getHelper().runNextTest(${1:cmp})"
    },
    {
      "trigger": "helper-aurajstest-jstestCase-loadTest",
      "contents": "cmp.getDef().getHelper().loadTest(${1:cmp})"
    },
    {
      "trigger": "helper-aurajstest-jstestCase-runTest",
      "contents": "cmp.getDef().getHelper().runTest(${1:cmp})"
    },
    {
      "trigger": "helper-aurajstest-jstestCase-displayResults",
      "contents": "cmp.getDef().getHelper().displayResults(${1:cmp},${2:win})"
    },
    {
      "trigger": "helper-ui-abstractDataGrid-fireSelectedItemsChange",
      "contents": "cmp.getDef().getHelper().fireSelectedItemsChange(${1:cmp},${2:data})"
    },
    {
      "trigger": "helper-ui-abstractDataGrid-fireProvide",
      "contents": "cmp.getDef().getHelper().fireProvide(${1:concrete})"
    },
    {
      "trigger": "helper-ui-abstractDataGrid-initialize",
      "contents": "cmp.getDef().getHelper().initialize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-abstractDataGrid-initializeDataProviders",
      "contents": "cmp.getDef().getHelper().initializeDataProviders(${1:cmp})"
    },
    {
      "trigger": "helper-ui-abstractDataGrid-handleRefresh",
      "contents": "cmp.getDef().getHelper().handleRefresh(${1:concrete})"
    },
    {
      "trigger": "helper-ui-abstractDataGrid-deriveItemShape",
      "contents": "cmp.getDef().getHelper().deriveItemShape(${1:})"
    },
    {
      "trigger": "helper-ui-abstractDataGrid-handleDataChange",
      "contents": "cmp.getDef().getHelper().handleDataChange(${1:concrete},${2:data})"
    },
    {
      "trigger": "helper-ui-abstractDataGrid-handleModeChange",
      "contents": "cmp.getDef().getHelper().handleModeChange(${1:})"
    },
    {
      "trigger": "helper-ui-abstractDataGrid-handleSortByChange",
      "contents": "cmp.getDef().getHelper().handleSortByChange(${1:})"
    },
    {
      "trigger": "helper-ui-abstractDataGrid-handleAddRemove",
      "contents": "cmp.getDef().getHelper().handleAddRemove(${1:})"
    },
    {
      "trigger": "helper-ui-abstractList-handleDataChange",
      "contents": "cmp.getDef().getHelper().handleDataChange(${1:component},${2:event},${3:callback})"
    },
    {
      "trigger": "helper-ui-abstractList-beforeRefresh",
      "contents": "cmp.getDef().getHelper().beforeRefresh(${1:component})"
    },
    {
      "trigger": "helper-ui-abstractList-updateEmptyListContent",
      "contents": "cmp.getDef().getHelper().updateEmptyListContent(${1:component})"
    },
    {
      "trigger": "helper-ui-abstractList-initTriggerDataProviders",
      "contents": "cmp.getDef().getHelper().initTriggerDataProviders(${1:component})"
    },
    {
      "trigger": "helper-ui-abstractList-init",
      "contents": "cmp.getDef().getHelper().init(${1:component})"
    },
    {
      "trigger": "helper-ui-abstractList-initDataProvider",
      "contents": "cmp.getDef().getHelper().initDataProvider(${1:component})"
    },
    {
      "trigger": "helper-ui-abstractList-initPagers",
      "contents": "cmp.getDef().getHelper().initPagers(${1:component})"
    },
    {
      "trigger": "helper-ui-abstractList-remove",
      "contents": "cmp.getDef().getHelper().remove(${1:component},${2:index},${3:count},${4:timeout},${5:animate},${6:callback})"
    },
    {
      "trigger": "helper-ui-abstractList-removeItem",
      "contents": "cmp.getDef().getHelper().removeItem(${1:component},${2:array})"
    },
    {
      "trigger": "helper-ui-abstractList-exclude",
      "contents": "cmp.getDef().getHelper().exclude(${1:items},${2:index})"
    },
    {
      "trigger": "helper-ui-abstractList-showLoading",
      "contents": "cmp.getDef().getHelper().showLoading(${1:component},${2:visible})"
    },
    {
      "trigger": "helper-ui-abstractList-triggerDataProvider",
      "contents": "cmp.getDef().getHelper().triggerDataProvider(${1:component},${2:index},${3:refresh})"
    },
    {
      "trigger": "helper-ui-action-getInputElement",
      "contents": "cmp.getDef().getHelper().getInputElement(${1:cmp})"
    },
    {
      "trigger": "helper-ui-asyncComponentManager-loadComponents",
      "contents": "cmp.getDef().getHelper().loadComponents(${1:cmp})"
    },
    {
      "trigger": "helper-ui-autocomplete-fetchData",
      "contents": "cmp.getDef().getHelper().fetchData(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-autocomplete-fireInputChangeEvent",
      "contents": "cmp.getDef().getHelper().fireInputChangeEvent(${1:component})"
    },
    {
      "trigger": "helper-ui-autocomplete-hideList",
      "contents": "cmp.getDef().getHelper().hideList(${1:component})"
    },
    {
      "trigger": "helper-ui-autocomplete-handleEnterkey",
      "contents": "cmp.getDef().getHelper().handleEnterkey(${1:component})"
    },
    {
      "trigger": "helper-ui-autocomplete-handleEnterkeyOnList",
      "contents": "cmp.getDef().getHelper().handleEnterkeyOnList(${1:component},${2:list})"
    },
    {
      "trigger": "helper-ui-autocomplete-handleEnterKeyOnInput",
      "contents": "cmp.getDef().getHelper().handleEnterKeyOnInput(${1:})"
    },
    {
      "trigger": "helper-ui-autocomplete-handleEsckey",
      "contents": "cmp.getDef().getHelper().handleEsckey(${1:component})"
    },
    {
      "trigger": "helper-ui-autocomplete-handleKeyAction",
      "contents": "cmp.getDef().getHelper().handleKeyAction(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-autocomplete-handleOtherKeyAction",
      "contents": "cmp.getDef().getHelper().handleOtherKeyAction(${1:})"
    },
    {
      "trigger": "helper-ui-autocomplete-handleTabkey",
      "contents": "cmp.getDef().getHelper().handleTabkey(${1:component})"
    },
    {
      "trigger": "helper-ui-autocomplete-highlightNextItem",
      "contents": "cmp.getDef().getHelper().highlightNextItem(${1:component})"
    },
    {
      "trigger": "helper-ui-autocomplete-highlightPrevItem",
      "contents": "cmp.getDef().getHelper().highlightPrevItem(${1:component})"
    },
    {
      "trigger": "helper-ui-autocomplete-relayEvents",
      "contents": "cmp.getDef().getHelper().relayEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-autocomplete-setIgnoredElements",
      "contents": "cmp.getDef().getHelper().setIgnoredElements(${1:component})"
    },
    {
      "trigger": "helper-ui-autocomplete-addIgnoredElement",
      "contents": "cmp.getDef().getHelper().addIgnoredElement(${1:component},${2:element})"
    },
    {
      "trigger": "helper-ui-autocomplete-updateAriaAttributes",
      "contents": "cmp.getDef().getHelper().updateAriaAttributes(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-autocomplete-handleListExpand",
      "contents": "cmp.getDef().getHelper().handleListExpand(${1:})"
    },
    {
      "trigger": "helper-ui-autocompleteList-findHighlightedOptionIndex",
      "contents": "cmp.getDef().getHelper().findHighlightedOptionIndex(${1:iters})"
    },
    {
      "trigger": "helper-ui-autocompleteList-fireMatchDoneEvent",
      "contents": "cmp.getDef().getHelper().fireMatchDoneEvent(${1:component},${2:items})"
    },
    {
      "trigger": "helper-ui-autocompleteList-getEventSourceOptionComponent",
      "contents": "cmp.getDef().getHelper().getEventSourceOptionComponent(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-autocompleteList-getOnClickEndFunction",
      "contents": "cmp.getDef().getHelper().getOnClickEndFunction(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteList-getOnClickEventProp",
      "contents": "cmp.getDef().getHelper().getOnClickEventProp(${1:prop})"
    },
    {
      "trigger": "helper-ui-autocompleteList-getOnClickStartFunction",
      "contents": "cmp.getDef().getHelper().getOnClickStartFunction(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteList-handleDataChange",
      "contents": "cmp.getDef().getHelper().handleDataChange(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-autocompleteList-handleEsckeydown",
      "contents": "cmp.getDef().getHelper().handleEsckeydown(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteList-handleKeydown",
      "contents": "cmp.getDef().getHelper().handleKeydown(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-autocompleteList-handleListHighlight",
      "contents": "cmp.getDef().getHelper().handleListHighlight(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-autocompleteList-createKeyboardTraversalList",
      "contents": "cmp.getDef().getHelper().createKeyboardTraversalList(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteList-_createBasicKeyboardTraversalSection",
      "contents": "cmp.getDef().getHelper()._createBasicKeyboardTraversalSection(${1:})"
    },
    {
      "trigger": "helper-ui-autocompleteList-_createKeyboardTraversalItemsSection",
      "contents": "cmp.getDef().getHelper()._createKeyboardTraversalItemsSection(${1:cmp})"
    },
    {
      "trigger": "helper-ui-autocompleteList-addHeaderAndFooterClassesAndAttributes",
      "contents": "cmp.getDef().getHelper().addHeaderAndFooterClassesAndAttributes(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteList-getHeader",
      "contents": "cmp.getDef().getHelper().getHeader(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteList-getFooter",
      "contents": "cmp.getDef().getHelper().getFooter(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteList-_getComponentElementByAttribute",
      "contents": "cmp.getDef().getHelper()._getComponentElementByAttribute(${1:component},${2:attribute})"
    },
    {
      "trigger": "helper-ui-autocompleteList-_getComponentByAttribute",
      "contents": "cmp.getDef().getHelper()._getComponentByAttribute(${1:component},${2:attribute})"
    },
    {
      "trigger": "helper-ui-autocompleteList-handlePressOnHighlighted",
      "contents": "cmp.getDef().getHelper().handlePressOnHighlighted(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteList-handleTabkeydown",
      "contents": "cmp.getDef().getHelper().handleTabkeydown(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteList-hasVisibleOption",
      "contents": "cmp.getDef().getHelper().hasVisibleOption(${1:items})"
    },
    {
      "trigger": "helper-ui-autocompleteList-isHTMLElement",
      "contents": "cmp.getDef().getHelper().isHTMLElement(${1:obj})"
    },
    {
      "trigger": "helper-ui-autocompleteList-matchFunc",
      "contents": "cmp.getDef().getHelper().matchFunc(${1:component},${2:items})"
    },
    {
      "trigger": "helper-ui-autocompleteList-matchFuncDone",
      "contents": "cmp.getDef().getHelper().matchFuncDone(${1:component},${2:items})"
    },
    {
      "trigger": "helper-ui-autocompleteList-matchText",
      "contents": "cmp.getDef().getHelper().matchText(${1:component},${2:items})"
    },
    {
      "trigger": "helper-ui-autocompleteList-toggleListVisibility",
      "contents": "cmp.getDef().getHelper().toggleListVisibility(${1:component},${2:items})"
    },
    {
      "trigger": "helper-ui-autocompleteList-updateAriaAttributesFromIdAttribute",
      "contents": "cmp.getDef().getHelper().updateAriaAttributesFromIdAttribute(${1:component},${2:highlightedCmp})"
    },
    {
      "trigger": "helper-ui-autocompleteList-updateAriaAttributes",
      "contents": "cmp.getDef().getHelper().updateAriaAttributes(${1:component},${2:highlightedCmp})"
    },
    {
      "trigger": "helper-ui-autocompleteList-updateEmptyListContent",
      "contents": "cmp.getDef().getHelper().updateEmptyListContent(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteList-showLoading",
      "contents": "cmp.getDef().getHelper().showLoading(${1:component},${2:visible})"
    },
    {
      "trigger": "helper-ui-autocompleteList-setDefaultHighlight",
      "contents": "cmp.getDef().getHelper().setDefaultHighlight(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteList-setUpEvents",
      "contents": "cmp.getDef().getHelper().setUpEvents(${1:component},${2:onVisibleChange})"
    },
    {
      "trigger": "helper-ui-autocompleteOption-addOptionDomEvents",
      "contents": "cmp.getDef().getHelper().addOptionDomEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteOption-displayText",
      "contents": "cmp.getDef().getHelper().displayText(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteOption-handleMouseover",
      "contents": "cmp.getDef().getHelper().handleMouseover(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteOption-handleMouseout",
      "contents": "cmp.getDef().getHelper().handleMouseout(${1:component})"
    },
    {
      "trigger": "helper-ui-autocompleteOption-htmlEscape",
      "contents": "cmp.getDef().getHelper().htmlEscape(${1:str})"
    },
    {
      "trigger": "helper-ui-autocompletePanel-_getScrollableParent",
      "contents": "cmp.getDef().getHelper()._getScrollableParent(${1:elem})"
    },
    {
      "trigger": "helper-ui-autocompletePanel-cleanEvents",
      "contents": "cmp.getDef().getHelper().cleanEvents(${1:cmp})"
    },
    {
      "trigger": "helper-ui-autocompletePanel-handleReferenceElement",
      "contents": "cmp.getDef().getHelper().handleReferenceElement(${1:cmp})"
    },
    {
      "trigger": "helper-ui-button-catchAndFireEvent",
      "contents": "cmp.getDef().getHelper().catchAndFireEvent(${1:cmp},${2:event},${3:eventName})"
    },
    {
      "trigger": "helper-ui-button-getClassList",
      "contents": "cmp.getDef().getHelper().getClassList(${1:cmp})"
    },
    {
      "trigger": "helper-ui-button-updateStatefulClasses",
      "contents": "cmp.getDef().getHelper().updateStatefulClasses(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carousel-initialize",
      "contents": "cmp.getDef().getHelper().initialize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carousel-_buildCarouselPlugin",
      "contents": "cmp.getDef().getHelper()._buildCarouselPlugin(${1:})"
    },
    {
      "trigger": "helper-ui-carousel-initializeInstrumentation",
      "contents": "cmp.getDef().getHelper().initializeInstrumentation(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carousel-initializeCarouselPlugin",
      "contents": "cmp.getDef().getHelper().initializeCarouselPlugin(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carousel-initializeIndicator",
      "contents": "cmp.getDef().getHelper().initializeIndicator(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carousel-initializePages",
      "contents": "cmp.getDef().getHelper().initializePages(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carousel-createCarouselPage",
      "contents": "cmp.getDef().getHelper().createCarouselPage(${1:contentCmp},${2:pageConfig},${3:index},${4:preloadContent})"
    },
    {
      "trigger": "helper-ui-carousel-getCarouselSize",
      "contents": "cmp.getDef().getHelper().getCarouselSize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carousel-afterRenderCarousel",
      "contents": "cmp.getDef().getHelper().afterRenderCarousel(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carousel-onPageChange",
      "contents": "cmp.getDef().getHelper().onPageChange(${1:cmp},${2:pageIndex})"
    },
    {
      "trigger": "helper-ui-carousel-setCurrentPageIndex",
      "contents": "cmp.getDef().getHelper().setCurrentPageIndex(${1:cmp},${2:currentIndex})"
    },
    {
      "trigger": "helper-ui-carousel-setPageVisibility",
      "contents": "cmp.getDef().getHelper().setPageVisibility(${1:carouselPage},${2:isVisible})"
    },
    {
      "trigger": "helper-ui-carousel-getCurrentPageIndex",
      "contents": "cmp.getDef().getHelper().getCurrentPageIndex(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carousel-getCarouselInstance",
      "contents": "cmp.getDef().getHelper().getCarouselInstance(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carousel-getDOMPages",
      "contents": "cmp.getDef().getHelper().getDOMPages(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carousel-getCarouselDOM",
      "contents": "cmp.getDef().getHelper().getCarouselDOM(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-init",
      "contents": "cmp.getDef().getHelper().init(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-initSize",
      "contents": "cmp.getDef().getHelper().initSize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-initScroller",
      "contents": "cmp.getDef().getHelper().initScroller(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-initPages",
      "contents": "cmp.getDef().getHelper().initPages(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-initPageIndicator",
      "contents": "cmp.getDef().getHelper().initPageIndicator(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-attachEvents",
      "contents": "cmp.getDef().getHelper().attachEvents(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-detachEvents",
      "contents": "cmp.getDef().getHelper().detachEvents(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-onStart",
      "contents": "cmp.getDef().getHelper().onStart(${1:cmp},${2:evt})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-onMove",
      "contents": "cmp.getDef().getHelper().onMove(${1:cmp},${2:evt})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-onClick",
      "contents": "cmp.getDef().getHelper().onClick(${1:cmp},${2:evt})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-hasMoved",
      "contents": "cmp.getDef().getHelper().hasMoved(${1:cmp},${2:evt},${3:direction})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getPageComponentsFromIteration",
      "contents": "cmp.getDef().getHelper().getPageComponentsFromIteration(${1:iterCmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-refresh",
      "contents": "cmp.getDef().getHelper().refresh(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-updateSize",
      "contents": "cmp.getDef().getHelper().updateSize(${1:cmp},${2:force})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-updateCarouselSize",
      "contents": "cmp.getDef().getHelper().updateCarouselSize(${1:cmp},${2:pages},${3:carouselSize},${4:force})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-updatePageSize",
      "contents": "cmp.getDef().getHelper().updatePageSize(${1:cmp},${2:pages},${3:carouselSize})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getSizeStyle",
      "contents": "cmp.getDef().getHelper().getSizeStyle(${1:width},${2:height})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getCarouselSize",
      "contents": "cmp.getDef().getHelper().getCarouselSize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getPageSize",
      "contents": "cmp.getDef().getHelper().getPageSize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-updatePage",
      "contents": "cmp.getDef().getHelper().updatePage(${1:cmp},${2:pageIndex},${3:pageContentCmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-handlePagerClicked",
      "contents": "cmp.getDef().getHelper().handlePagerClicked(${1:cmp},${2:pageIndex})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-handlePagerKeyed",
      "contents": "cmp.getDef().getHelper().handlePagerKeyed(${1:cmp},${2:evt})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-handleScrollMove",
      "contents": "cmp.getDef().getHelper().handleScrollMove(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-handleScrollEnd",
      "contents": "cmp.getDef().getHelper().handleScrollEnd(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-showPage",
      "contents": "cmp.getDef().getHelper().showPage(${1:pageCmp},${2:pageIndex})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-hidePage",
      "contents": "cmp.getDef().getHelper().hidePage(${1:pageCmp},${2:pageIndex})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-pageSelected",
      "contents": "cmp.getDef().getHelper().pageSelected(${1:cmp},${2:pageIndex})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-showPages",
      "contents": "cmp.getDef().getHelper().showPages(${1:cmp},${2:from},${3:to})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-hideAllUnselectedPages",
      "contents": "cmp.getDef().getHelper().hideAllUnselectedPages(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-firePageSelectedEventToPage",
      "contents": "cmp.getDef().getHelper().firePageSelectedEventToPage(${1:pageCmp},${2:selectedPage})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-firePageSelectedEventToPageIndicator",
      "contents": "cmp.getDef().getHelper().firePageSelectedEventToPageIndicator(${1:carouselCmp},${2:pageCmp},${3:selectedPage})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-selectPage",
      "contents": "cmp.getDef().getHelper().selectPage(${1:cmp},${2:pageIndex},${3:time})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-selectDefaultPage",
      "contents": "cmp.getDef().getHelper().selectDefaultPage(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getDefaultPageIndex",
      "contents": "cmp.getDef().getHelper().getDefaultPageIndex(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getPageComponents",
      "contents": "cmp.getDef().getHelper().getPageComponents(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getPageModels",
      "contents": "cmp.getDef().getHelper().getPageModels(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getPageModelFromIndex",
      "contents": "cmp.getDef().getHelper().getPageModelFromIndex(${1:cmp},${2:pageIndex})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getPageComponentFromIndex",
      "contents": "cmp.getDef().getHelper().getPageComponentFromIndex(${1:cmp},${2:pageIndex})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getPageIndicatorsComponent",
      "contents": "cmp.getDef().getHelper().getPageIndicatorsComponent(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getScroller",
      "contents": "cmp.getDef().getHelper().getScroller(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getSnap",
      "contents": "cmp.getDef().getHelper().getSnap(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-delayHideAllUnselectedPages",
      "contents": "cmp.getDef().getHelper().delayHideAllUnselectedPages(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-showLoadingIndicator",
      "contents": "cmp.getDef().getHelper().showLoadingIndicator(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-hideLoadingIndicator",
      "contents": "cmp.getDef().getHelper().hideLoadingIndicator(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-setSelectedPage",
      "contents": "cmp.getDef().getHelper().setSelectedPage(${1:cmp},${2:selectedPage})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-getSelectedPage",
      "contents": "cmp.getDef().getHelper().getSelectedPage(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselDeprecated-unrender",
      "contents": "cmp.getDef().getHelper().unrender(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselIndicator-_createNavTemplate",
      "contents": "cmp.getDef().getHelper()._createNavTemplate(${1:content})"
    },
    {
      "trigger": "helper-ui-carouselIndicator-_createItem",
      "contents": "cmp.getDef().getHelper()._createItem(${1:data},${2:isDot})"
    },
    {
      "trigger": "helper-ui-carouselIndicator-attachHandlers",
      "contents": "cmp.getDef().getHelper().attachHandlers(${1:cmp},${2:root})"
    },
    {
      "trigger": "helper-ui-carouselIndicator-_getPageNumber",
      "contents": "cmp.getDef().getHelper()._getPageNumber(${1:e})"
    },
    {
      "trigger": "helper-ui-carouselIndicator-_handleEvent",
      "contents": "cmp.getDef().getHelper()._handleEvent(${1:cmp},${2:e})"
    },
    {
      "trigger": "helper-ui-carouselIndicator-_handleKeyEvent",
      "contents": "cmp.getDef().getHelper()._handleKeyEvent(${1:cmp},${2:e})"
    },
    {
      "trigger": "helper-ui-carouselIndicator-changeActivePage",
      "contents": "cmp.getDef().getHelper().changeActivePage(${1:cmp},${2:evt})"
    },
    {
      "trigger": "helper-ui-carouselIndicator-goToPage",
      "contents": "cmp.getDef().getHelper().goToPage(${1:cmp},${2:pageNumber})"
    },
    {
      "trigger": "helper-ui-carouselIndicator-setAriaAttributes",
      "contents": "cmp.getDef().getHelper().setAriaAttributes(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-carouselIndicator-setIndicatorSize",
      "contents": "cmp.getDef().getHelper().setIndicatorSize(${1:cmp},${2:indicatorDOM})"
    },
    {
      "trigger": "helper-ui-carouselIndicator-createDOM",
      "contents": "cmp.getDef().getHelper().createDOM(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselPage-initialize",
      "contents": "cmp.getDef().getHelper().initialize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselPage-_buildScrollerPagePlugin",
      "contents": "cmp.getDef().getHelper()._buildScrollerPagePlugin(${1:})"
    },
    {
      "trigger": "helper-ui-carouselPage-_initScrollerPagePlugin",
      "contents": "cmp.getDef().getHelper()._initScrollerPagePlugin(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselPage-loadComponent",
      "contents": "cmp.getDef().getHelper().loadComponent(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselPage-onLoadComponent",
      "contents": "cmp.getDef().getHelper().onLoadComponent(${1:cmp},${2:action},${3:isAlreadyLoaded})"
    },
    {
      "trigger": "helper-ui-carouselPage-injectComponent",
      "contents": "cmp.getDef().getHelper().injectComponent(${1:cmp},${2:content},${3:noMore})"
    },
    {
      "trigger": "helper-ui-carouselPage-injectPlaceholder",
      "contents": "cmp.getDef().getHelper().injectPlaceholder(${1:cmp},${2:placeholderDef})"
    },
    {
      "trigger": "helper-ui-carouselPage-setPullToLoadMoreDelegation",
      "contents": "cmp.getDef().getHelper().setPullToLoadMoreDelegation(${1:cmp},${2:contentCmp})"
    },
    {
      "trigger": "helper-ui-carouselPage-afterRenderCarouselPage",
      "contents": "cmp.getDef().getHelper().afterRenderCarouselPage(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselPage-addScrollLock",
      "contents": "cmp.getDef().getHelper().addScrollLock(${1:component})"
    },
    {
      "trigger": "helper-ui-carouselPageDeprecated-updateSize",
      "contents": "cmp.getDef().getHelper().updateSize(${1:cmp},${2:width},${3:height})"
    },
    {
      "trigger": "helper-ui-carouselPageDeprecated-selectPage",
      "contents": "cmp.getDef().getHelper().selectPage(${1:cmp},${2:evt})"
    },
    {
      "trigger": "helper-ui-carouselPageDeprecated-updatePage",
      "contents": "cmp.getDef().getHelper().updatePage(${1:cmp},${2:pageBody})"
    },
    {
      "trigger": "helper-ui-carouselPageDeprecated-setVisibility",
      "contents": "cmp.getDef().getHelper().setVisibility(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselPageDeprecated-showPage",
      "contents": "cmp.getDef().getHelper().showPage(${1:cmp},${2:pageIndex})"
    },
    {
      "trigger": "helper-ui-carouselPageDeprecated-hidePage",
      "contents": "cmp.getDef().getHelper().hidePage(${1:cmp},${2:pageIndex})"
    },
    {
      "trigger": "helper-ui-carouselPageDeprecated-setDefaultAttributes",
      "contents": "cmp.getDef().getHelper().setDefaultAttributes(${1:cmp})"
    },
    {
      "trigger": "helper-ui-carouselPageIndicator-onPageSelected",
      "contents": "cmp.getDef().getHelper().onPageSelected(${1:cmp},${2:evt})"
    },
    {
      "trigger": "helper-ui-checkboxMenuItem-setSelected",
      "contents": "cmp.getDef().getHelper().setSelected(${1:component})"
    },
    {
      "trigger": "helper-ui-dataGrid-initializeCaches",
      "contents": "cmp.getDef().getHelper().initializeCaches(${1:cmp})"
    },
    {
      "trigger": "helper-ui-dataGrid-initializeNewColumns",
      "contents": "cmp.getDef().getHelper().initializeNewColumns(${1:concrete})"
    },
    {
      "trigger": "helper-ui-dataGrid-initializeRowData",
      "contents": "cmp.getDef().getHelper().initializeRowData(${1:concrete})"
    },
    {
      "trigger": "helper-ui-dataGrid-handleAddRemove",
      "contents": "cmp.getDef().getHelper().handleAddRemove(${1:cmp},${2:params})"
    },
    {
      "trigger": "helper-ui-dataGrid-handleItemsChange",
      "contents": "cmp.getDef().getHelper().handleItemsChange(${1:cmp},${2:params})"
    },
    {
      "trigger": "helper-ui-dataGrid-handleSortByChange",
      "contents": "cmp.getDef().getHelper().handleSortByChange(${1:concrete})"
    },
    {
      "trigger": "helper-ui-dataGrid-handleAction",
      "contents": "cmp.getDef().getHelper().handleAction(${1:cmp},${2:cfg})"
    },
    {
      "trigger": "helper-ui-dataGrid-getColumns",
      "contents": "cmp.getDef().getHelper().getColumns(${1:concrete})"
    },
    {
      "trigger": "helper-ui-dataGrid-createSelectionData",
      "contents": "cmp.getDef().getHelper().createSelectionData(${1:})"
    },
    {
      "trigger": "helper-ui-dataGrid-selectAll",
      "contents": "cmp.getDef().getHelper().selectAll(${1:cmp},${2:value})"
    },
    {
      "trigger": "helper-ui-dataGrid-setSelectedItems",
      "contents": "cmp.getDef().getHelper().setSelectedItems(${1:cmp},${2:value},${3:rows})"
    },
    {
      "trigger": "helper-ui-dataGrid-updateColumnAttributes",
      "contents": "cmp.getDef().getHelper().updateColumnAttributes(${1:cmp})"
    },
    {
      "trigger": "helper-ui-dataGrid-createRowData",
      "contents": "cmp.getDef().getHelper().createRowData(${1:concrete},${2:items})"
    },
    {
      "trigger": "helper-ui-dataGrid-shiftRowData",
      "contents": "cmp.getDef().getHelper().shiftRowData(${1:concrete},${2:index},${3:count},${4:remove})"
    },
    {
      "trigger": "helper-ui-dataGrid-removeRows",
      "contents": "cmp.getDef().getHelper().removeRows(${1:concrete},${2:index},${3:count})"
    },
    {
      "trigger": "helper-ui-dataGrid-insertRowsAndUpdateData",
      "contents": "cmp.getDef().getHelper().insertRowsAndUpdateData(${1:concrete},${2:index},${3:count},${4:newItems},${5:insertItems},${6:callback})"
    },
    {
      "trigger": "helper-ui-dataGrid-resize",
      "contents": "cmp.getDef().getHelper().resize(${1:concrete})"
    },
    {
      "trigger": "helper-ui-dataGrid-updateValueProvidersFromItems",
      "contents": "cmp.getDef().getHelper().updateValueProvidersFromItems(${1:concrete})"
    },
    {
      "trigger": "helper-ui-dataGrid-createCellData",
      "contents": "cmp.getDef().getHelper().createCellData(${1:rowData},${2:colIndex})"
    },
    {
      "trigger": "helper-ui-dataGrid-destroyCellData",
      "contents": "cmp.getDef().getHelper().destroyCellData(${1:rowData},${2:colIndex},${3:parentTR})"
    },
    {
      "trigger": "helper-ui-dataGrid-createTableBody",
      "contents": "cmp.getDef().getHelper().createTableBody(${1:concrete})"
    },
    {
      "trigger": "helper-ui-dataGrid-createAndRenderTableRows",
      "contents": "cmp.getDef().getHelper().createAndRenderTableRows(${1:concrete},${2:rowDataArray})"
    },
    {
      "trigger": "helper-ui-dataGrid-createAndRenderCell",
      "contents": "cmp.getDef().getHelper().createAndRenderCell(${1:concrete},${2:cdrs},${3:vp},${4:element},${5:components},${6:callback})"
    },
    {
      "trigger": "helper-ui-dataGrid-renderTableRow",
      "contents": "cmp.getDef().getHelper().renderTableRow(${1:concrete},${2:rowData},${3:tr},${4:cleanOldComponents})"
    },
    {
      "trigger": "helper-ui-dataGrid-rerenderRowsWithNewColumns",
      "contents": "cmp.getDef().getHelper().rerenderRowsWithNewColumns(${1:concrete},${2:rowDataArray})"
    },
    {
      "trigger": "helper-ui-dataGrid-updateRowClass",
      "contents": "cmp.getDef().getHelper().updateRowClass(${1:cmp},${2:rowData},${3:rowElement},${4:params})"
    },
    {
      "trigger": "helper-ui-dataGrid-updateValueProvider",
      "contents": "cmp.getDef().getHelper().updateValueProvider(${1:cmp},${2:rowData},${3:attributes})"
    },
    {
      "trigger": "helper-ui-dataGrid-createPassthroughValue",
      "contents": "cmp.getDef().getHelper().createPassthroughValue(${1:concrete},${2:item},${3:rowIndex})"
    },
    {
      "trigger": "helper-ui-dataGrid-updateColumns",
      "contents": "cmp.getDef().getHelper().updateColumns(${1:concrete},${2:attribute},${3:value})"
    },
    {
      "trigger": "helper-ui-dataGrid-destroyTemplates",
      "contents": "cmp.getDef().getHelper().destroyTemplates(${1:concrete})"
    },
    {
      "trigger": "helper-ui-dataGrid-componentMap",
      "contents": "cmp.getDef().getHelper().componentMap(${1:concrete},${2:batch},${3:op})"
    },
    {
      "trigger": "helper-ui-dataGrid-selectiveMap",
      "contents": "cmp.getDef().getHelper().selectiveMap(${1:concrete},${2:rowIndex},${3:count},${4:batch},${5:op})"
    },
    {
      "trigger": "helper-ui-dataGrid-parseSortBy",
      "contents": "cmp.getDef().getHelper().parseSortBy(${1:sortBy})"
    },
    {
      "trigger": "helper-ui-dataGrid-clone",
      "contents": "cmp.getDef().getHelper().clone(${1:source})"
    },
    {
      "trigger": "helper-ui-dataGrid-generateNewItemShape",
      "contents": "cmp.getDef().getHelper().generateNewItemShape(${1:concrete})"
    },
    {
      "trigger": "helper-ui-dataGridColumn-intialize",
      "contents": "cmp.getDef().getHelper().intialize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-dataGridColumn-intializeDefaultOutputComponent",
      "contents": "cmp.getDef().getHelper().intializeDefaultOutputComponent(${1:cmp})"
    },
    {
      "trigger": "helper-ui-dataGridColumn-updateNameRef",
      "contents": "cmp.getDef().getHelper().updateNameRef(${1:cmp})"
    },
    {
      "trigger": "helper-ui-dataGridColumn-wireComponentDefRef",
      "contents": "cmp.getDef().getHelper().wireComponentDefRef(${1:cmp},${2:defRef})"
    },
    {
      "trigger": "helper-ui-dataGridColumn-createPropertyReference",
      "contents": "cmp.getDef().getHelper().createPropertyReference(${1:descriptor},${2:path})"
    },
    {
      "trigger": "helper-ui-dataGridColumn-toggleSort",
      "contents": "cmp.getDef().getHelper().toggleSort(${1:cmp})"
    },
    {
      "trigger": "helper-ui-dataGridSummaryCell-initialize",
      "contents": "cmp.getDef().getHelper().initialize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-dataGridSummaryCell-calculate",
      "contents": "cmp.getDef().getHelper().calculate(${1:cmp})"
    },
    {
      "trigger": "helper-ui-dataGridSummaryCell-isValid",
      "contents": "cmp.getDef().getHelper().isValid(${1:})"
    },
    {
      "trigger": "helper-ui-dataGridSummaryCell-extractNumbers",
      "contents": "cmp.getDef().getHelper().extractNumbers(${1:items},${2:column})"
    },
    {
      "trigger": "helper-ui-dataGridSummaryCell-aggregate_sum",
      "contents": "cmp.getDef().getHelper().aggregate_sum(${1:items},${2:column})"
    },
    {
      "trigger": "helper-ui-dataGridSummaryCell-aggregate_avg",
      "contents": "cmp.getDef().getHelper().aggregate_avg(${1:items},${2:column})"
    },
    {
      "trigger": "helper-ui-dataGridSummaryCell-aggregate_min",
      "contents": "cmp.getDef().getHelper().aggregate_min(${1:items},${2:column})"
    },
    {
      "trigger": "helper-ui-dataGridSummaryCell-aggregate_max",
      "contents": "cmp.getDef().getHelper().aggregate_max(${1:items},${2:column})"
    },
    {
      "trigger": "helper-ui-dataProvider-fireDataChangeEvent",
      "contents": "cmp.getDef().getHelper().fireDataChangeEvent(${1:dataProvider},${2:data},${3:currentPage})"
    },
    {
      "trigger": "helper-ui-dataProvider-invokeProvide",
      "contents": "cmp.getDef().getHelper().invokeProvide(${1:component})"
    },
    {
      "trigger": "helper-ui-dataWriter-handleItemsChange",
      "contents": "cmp.getDef().getHelper().handleItemsChange(${1:cmp})"
    },
    {
      "trigger": "helper-ui-dataWriter-handleWrite",
      "contents": "cmp.getDef().getHelper().handleWrite(${1:cmp})"
    },
    {
      "trigger": "helper-ui-dataWriter-write",
      "contents": "cmp.getDef().getHelper().write(${1:})"
    },
    {
      "trigger": "helper-ui-datePicker-_getScrollableParent",
      "contents": "cmp.getDef().getHelper()._getScrollableParent(${1:elem})"
    },
    {
      "trigger": "helper-ui-datePicker-attachToDocumentBody",
      "contents": "cmp.getDef().getHelper().attachToDocumentBody(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-focusDate",
      "contents": "cmp.getDef().getHelper().focusDate(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-getOnClickEndFunction",
      "contents": "cmp.getDef().getHelper().getOnClickEndFunction(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-getOnClickEventProp",
      "contents": "cmp.getDef().getHelper().getOnClickEventProp(${1:prop})"
    },
    {
      "trigger": "helper-ui-datePicker-getOnClickStartFunction",
      "contents": "cmp.getDef().getHelper().getOnClickStartFunction(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-goToNextYear",
      "contents": "cmp.getDef().getHelper().goToNextYear(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-goToPrevYear",
      "contents": "cmp.getDef().getHelper().goToPrevYear(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-handleKeydown",
      "contents": "cmp.getDef().getHelper().handleKeydown(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-datePicker-isElementInComponent",
      "contents": "cmp.getDef().getHelper().isElementInComponent(${1:component},${2:targetElem})"
    },
    {
      "trigger": "helper-ui-datePicker-localizeToday",
      "contents": "cmp.getDef().getHelper().localizeToday(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-getNormalizedLang",
      "contents": "cmp.getDef().getHelper().getNormalizedLang(${1:})"
    },
    {
      "trigger": "helper-ui-datePicker-handleWinResize",
      "contents": "cmp.getDef().getHelper().handleWinResize(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-position",
      "contents": "cmp.getDef().getHelper().position(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-shouldFlip",
      "contents": "cmp.getDef().getHelper().shouldFlip(${1:element},${2:targetElement})"
    },
    {
      "trigger": "helper-ui-datePicker-refreshYearSelection",
      "contents": "cmp.getDef().getHelper().refreshYearSelection(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-setGridInitialValue",
      "contents": "cmp.getDef().getHelper().setGridInitialValue(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-setTitleTag",
      "contents": "cmp.getDef().getHelper().setTitleTag(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-updateGlobalEventListeners",
      "contents": "cmp.getDef().getHelper().updateGlobalEventListeners(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-updateMonthYear",
      "contents": "cmp.getDef().getHelper().updateMonthYear(${1:component},${2:value})"
    },
    {
      "trigger": "helper-ui-datePicker-updateMobileMonthYear",
      "contents": "cmp.getDef().getHelper().updateMobileMonthYear(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-yearChange",
      "contents": "cmp.getDef().getHelper().yearChange(${1:component})"
    },
    {
      "trigger": "helper-ui-datePicker-hide",
      "contents": "cmp.getDef().getHelper().hide(${1:component},${2:shouldFocusReferenceElem})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-changeCalendar",
      "contents": "cmp.getDef().getHelper().changeCalendar(${1:component},${2:localId},${3:deltaMonth},${4:deltaYear})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-changeMonthYear",
      "contents": "cmp.getDef().getHelper().changeMonthYear(${1:component},${2:monthChange},${3:yearChange},${4:date})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-dateCompare",
      "contents": "cmp.getDef().getHelper().dateCompare(${1:date1},${2:date2})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-dateEquals",
      "contents": "cmp.getDef().getHelper().dateEquals(${1:date1},${2:date2})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-dateInRange",
      "contents": "cmp.getDef().getHelper().dateInRange(${1:date},${2:rangeStart},${3:rangeEnd})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-findDateComponent",
      "contents": "cmp.getDef().getHelper().findDateComponent(${1:component},${2:date})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-generateMonth",
      "contents": "cmp.getDef().getHelper().generateMonth(${1:component})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-getEventTarget",
      "contents": "cmp.getDef().getHelper().getEventTarget(${1:e})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-goToFirstOfMonth",
      "contents": "cmp.getDef().getHelper().goToFirstOfMonth(${1:component})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-goToLastOfMonth",
      "contents": "cmp.getDef().getHelper().goToLastOfMonth(${1:component})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-handleArrowKey",
      "contents": "cmp.getDef().getHelper().handleArrowKey(${1:component},${2:localId},${3:deltaDays})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-fireHideEvent",
      "contents": "cmp.getDef().getHelper().fireHideEvent(${1:component})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-handleKeydown",
      "contents": "cmp.getDef().getHelper().handleKeydown(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-handleSpaceBar",
      "contents": "cmp.getDef().getHelper().handleSpaceBar(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-renderGrid",
      "contents": "cmp.getDef().getHelper().renderGrid(${1:component})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-selectDate",
      "contents": "cmp.getDef().getHelper().selectDate(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-setFocus",
      "contents": "cmp.getDef().getHelper().setFocus(${1:component})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-updateTitle",
      "contents": "cmp.getDef().getHelper().updateTitle(${1:component},${2:month},${3:year})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-getDateFromString",
      "contents": "cmp.getDef().getHelper().getDateFromString(${1:date})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-clearSelectStyles",
      "contents": "cmp.getDef().getHelper().clearSelectStyles(${1:tdNode},${2:dayOfWeek})"
    },
    {
      "trigger": "helper-ui-datePickerGrid-updateNameOfWeekDays",
      "contents": "cmp.getDef().getHelper().updateNameOfWeekDays(${1:component})"
    },
    {
      "trigger": "helper-ui-dayInMonthCell-updateCell",
      "contents": "cmp.getDef().getHelper().updateCell(${1:component})"
    },
    {
      "trigger": "helper-ui-dialogButtons-confirmOrCancel",
      "contents": "cmp.getDef().getHelper().confirmOrCancel(${1:dialog},${2:confirmClicked})"
    },
    {
      "trigger": "helper-ui-dialogManager-activateDialog",
      "contents": "cmp.getDef().getHelper().activateDialog(${1:dialog},${2:manager})"
    },
    {
      "trigger": "helper-ui-dialogManager-deactivateDialog",
      "contents": "cmp.getDef().getHelper().deactivateDialog(${1:dialog},${2:manager})"
    },
    {
      "trigger": "helper-ui-dialogManager-applyHandlers",
      "contents": "cmp.getDef().getHelper().applyHandlers(${1:config})"
    },
    {
      "trigger": "helper-ui-dialogManager-removeHandlers",
      "contents": "cmp.getDef().getHelper().removeHandlers(${1:config})"
    },
    {
      "trigger": "helper-ui-dialogManager-getHandlerConfig",
      "contents": "cmp.getDef().getHelper().getHandlerConfig(${1:dialog},${2:isModal},${3:clickOutToClose})"
    },
    {
      "trigger": "helper-ui-dialogManager-getKeydownHandler",
      "contents": "cmp.getDef().getHelper().getKeydownHandler(${1:dialog},${2:isModal},${3:firstFocusable},${4:event})"
    },
    {
      "trigger": "helper-ui-dialogManager-getClickHandler",
      "contents": "cmp.getDef().getHelper().getClickHandler(${1:dialog},${2:clickOutToClose},${3:event})"
    },
    {
      "trigger": "helper-ui-dialogManager-getResizeHandler",
      "contents": "cmp.getDef().getHelper().getResizeHandler(${1:dialog},${2:isModal})"
    },
    {
      "trigger": "helper-ui-dialogManager-getFirstFocusableElement",
      "contents": "cmp.getDef().getHelper().getFirstFocusableElement(${1:dialog})"
    },
    {
      "trigger": "helper-ui-dialogManager-toggleDisplay",
      "contents": "cmp.getDef().getHelper().toggleDisplay(${1:show},${2:dialog},${3:autoFocus},${4:isModal},${5:config})"
    },
    {
      "trigger": "helper-ui-dialogManager-getContentMaxHeight",
      "contents": "cmp.getDef().getHelper().getContentMaxHeight(${1:dialog})"
    },
    {
      "trigger": "helper-ui-dialogManager-getDialogRoot",
      "contents": "cmp.getDef().getHelper().getDialogRoot(${1:cmp})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibility-getDropzoneComponents",
      "contents": "cmp.getDef().getHelper().getDropzoneComponents(${1:type})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibility-enterDragOperation",
      "contents": "cmp.getDef().getHelper().enterDragOperation(${1:dropzones})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibility-exitDragOperation",
      "contents": "cmp.getDef().getHelper().exitDragOperation(${1:dropzones})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibility-fireDragEnd",
      "contents": "cmp.getDef().getHelper().fireDragEnd(${1:draggables},${2:isValid},${3:target})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibility-fireDragEnter",
      "contents": "cmp.getDef().getHelper().fireDragEnter(${1:dropzones},${2:target})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibility-fireDragLeave",
      "contents": "cmp.getDef().getHelper().fireDragLeave(${1:dropzones},${2:target})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibility-fireDrop",
      "contents": "cmp.getDef().getHelper().fireDrop(${1:dropzones},${2:draggables},${3:target})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibilityMenu-startDragAndDrop",
      "contents": "cmp.getDef().getHelper().startDragAndDrop(${1:component},${2:draggables},${3:target})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibilityMenu-position",
      "contents": "cmp.getDef().getHelper().position(${1:targetComponent},${2:referenceEl})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibilityMenu-areInSameContext",
      "contents": "cmp.getDef().getHelper().areInSameContext(${1:draggables},${2:dropzone})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibilityMenu-handleMenuCollapse",
      "contents": "cmp.getDef().getHelper().handleMenuCollapse(${1:component})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibilityMenu-handleMenuFocusChange",
      "contents": "cmp.getDef().getHelper().handleMenuFocusChange(${1:previousItem},${2:currentItem})"
    },
    {
      "trigger": "helper-ui-dragAndDropAccessibilityMenu-handleMenuSelect",
      "contents": "cmp.getDef().getHelper().handleMenuSelect(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-draggable-resetCssClass",
      "contents": "cmp.getDef().getHelper().resetCssClass(${1:component})"
    },
    {
      "trigger": "helper-ui-draggable-setDragClass",
      "contents": "cmp.getDef().getHelper().setDragClass(${1:component},${2:isInAccessibilityMode})"
    },
    {
      "trigger": "helper-ui-draggable-handleKeyPress",
      "contents": "cmp.getDef().getHelper().handleKeyPress(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-draggable-handleDragStart",
      "contents": "cmp.getDef().getHelper().handleDragStart(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-draggable-getDataTransfer",
      "contents": "cmp.getDef().getHelper().getDataTransfer(${1:component})"
    },
    {
      "trigger": "helper-ui-draggable-fireDragStart",
      "contents": "cmp.getDef().getHelper().fireDragStart(${1:component},${2:target},${3:isInAccessibilityMode})"
    },
    {
      "trigger": "helper-ui-draggable-createDragImage",
      "contents": "cmp.getDef().getHelper().createDragImage(${1:element},${2:cssClasses},${3:x},${4:y},${5:offsetX},${6:offsetY})"
    },
    {
      "trigger": "helper-ui-draggable-isDropEventSuccessful",
      "contents": "cmp.getDef().getHelper().isDropEventSuccessful(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-draggable-handleDragEnd",
      "contents": "cmp.getDef().getHelper().handleDragEnd(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-draggable-fireDragEnd",
      "contents": "cmp.getDef().getHelper().fireDragEnd(${1:component},${2:target},${3:isValid},${4:isInAccessibilityMode})"
    },
    {
      "trigger": "helper-ui-draggable-handleDropComplete",
      "contents": "cmp.getDef().getHelper().handleDropComplete(${1:component},${2:dragEvent})"
    },
    {
      "trigger": "helper-ui-draggable-updateDropOperationStatus",
      "contents": "cmp.getDef().getHelper().updateDropOperationStatus(${1:component},${2:eventType},${3:config})"
    },
    {
      "trigger": "helper-ui-draggable-enterDragOperation",
      "contents": "cmp.getDef().getHelper().enterDragOperation(${1:component},${2:isInAccessibilityMode})"
    },
    {
      "trigger": "helper-ui-draggable-newDropOperationStatus",
      "contents": "cmp.getDef().getHelper().newDropOperationStatus(${1:})"
    },
    {
      "trigger": "helper-ui-draggable-exitDragOperation",
      "contents": "cmp.getDef().getHelper().exitDragOperation(${1:component})"
    },
    {
      "trigger": "helper-ui-dropzone-resetCssClass",
      "contents": "cmp.getDef().getHelper().resetCssClass(${1:component})"
    },
    {
      "trigger": "helper-ui-dropzone-setDragOverClass",
      "contents": "cmp.getDef().getHelper().setDragOverClass(${1:component},${2:isInAccessibilityMode})"
    },
    {
      "trigger": "helper-ui-dropzone-handleDragEnter",
      "contents": "cmp.getDef().getHelper().handleDragEnter(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-dropzone-fireDragEnter",
      "contents": "cmp.getDef().getHelper().fireDragEnter(${1:component},${2:targetComponent},${3:isInAccessibilityMode})"
    },
    {
      "trigger": "helper-ui-dropzone-setDropEffect",
      "contents": "cmp.getDef().getHelper().setDropEffect(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-dropzone-handleDragOver",
      "contents": "cmp.getDef().getHelper().handleDragOver(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-dropzone-fireDragOver",
      "contents": "cmp.getDef().getHelper().fireDragOver(${1:component},${2:targetComponent})"
    },
    {
      "trigger": "helper-ui-dropzone-handleDragLeave",
      "contents": "cmp.getDef().getHelper().handleDragLeave(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-dropzone-fireDragLeave",
      "contents": "cmp.getDef().getHelper().fireDragLeave(${1:component},${2:targetComponent},${3:isInAccessibilityMode})"
    },
    {
      "trigger": "helper-ui-dropzone-handleDrop",
      "contents": "cmp.getDef().getHelper().handleDrop(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-dropzone-fireDrop",
      "contents": "cmp.getDef().getHelper().fireDrop(${1:component},${2:operationType},${3:dataTransfer},${4:dragComponent},${5:targetComponent},${6:isInAccessibilityMode})"
    },
    {
      "trigger": "helper-ui-dropzone-enterDragOperation",
      "contents": "cmp.getDef().getHelper().enterDragOperation(${1:component})"
    },
    {
      "trigger": "helper-ui-dropzone-exitDragOperation",
      "contents": "cmp.getDef().getHelper().exitDragOperation(${1:component})"
    },
    {
      "trigger": "helper-ui-image-getImageElement",
      "contents": "cmp.getDef().getHelper().getImageElement(${1:cmp})"
    },
    {
      "trigger": "helper-ui-image-isAnchorImage",
      "contents": "cmp.getDef().getHelper().isAnchorImage(${1:cmp})"
    },
    {
      "trigger": "helper-ui-image-buildBody",
      "contents": "cmp.getDef().getHelper().buildBody(${1:cmp})"
    },
    {
      "trigger": "helper-ui-image-buildImageElement",
      "contents": "cmp.getDef().getHelper().buildImageElement(${1:cmp})"
    },
    {
      "trigger": "helper-ui-infiniteList-initializeHandlers",
      "contents": "cmp.getDef().getHelper().initializeHandlers(${1:cmp})"
    },
    {
      "trigger": "helper-ui-infiniteList-handleDataChange",
      "contents": "cmp.getDef().getHelper().handleDataChange(${1:cmp},${2:evt},${3:callback})"
    },
    {
      "trigger": "helper-ui-infiniteList-attachListeners",
      "contents": "cmp.getDef().getHelper().attachListeners(${1:cmp})"
    },
    {
      "trigger": "helper-ui-infiniteList-detachListeners",
      "contents": "cmp.getDef().getHelper().detachListeners(${1:cmp})"
    },
    {
      "trigger": "helper-ui-infiniteList-ontouchstart",
      "contents": "cmp.getDef().getHelper().ontouchstart(${1:cmp},${2:e})"
    },
    {
      "trigger": "helper-ui-infiniteList-ontouchcancel",
      "contents": "cmp.getDef().getHelper().ontouchcancel(${1:cmp})"
    },
    {
      "trigger": "helper-ui-infiniteList-ontouchmove",
      "contents": "cmp.getDef().getHelper().ontouchmove(${1:cmp},${2:e})"
    },
    {
      "trigger": "helper-ui-infiniteList-ontouchend",
      "contents": "cmp.getDef().getHelper().ontouchend(${1:cmp},${2:e})"
    },
    {
      "trigger": "helper-ui-infiniteList-fireRowOpen",
      "contents": "cmp.getDef().getHelper().fireRowOpen(${1:cmp},${2:row})"
    },
    {
      "trigger": "helper-ui-infiniteList-fireRowClose",
      "contents": "cmp.getDef().getHelper().fireRowClose(${1:cmp},${2:row})"
    },
    {
      "trigger": "helper-ui-infiniteList-setCheckedTimeout",
      "contents": "cmp.getDef().getHelper().setCheckedTimeout(${1:cmp},${2:code},${3:delay})"
    },
    {
      "trigger": "helper-ui-infiniteList-onInfiniteListRowClose",
      "contents": "cmp.getDef().getHelper().onInfiniteListRowClose(${1:cmp},${2:e})"
    },
    {
      "trigger": "helper-ui-infiniteList-closeRowBlockAndReset",
      "contents": "cmp.getDef().getHelper().closeRowBlockAndReset(${1:cmp},${2:body},${3:useTransition})"
    },
    {
      "trigger": "helper-ui-infiniteList-isBlocked",
      "contents": "cmp.getDef().getHelper().isBlocked(${1:cmp})"
    },
    {
      "trigger": "helper-ui-infiniteList-block",
      "contents": "cmp.getDef().getHelper().block(${1:cmp})"
    },
    {
      "trigger": "helper-ui-infiniteList-unblock",
      "contents": "cmp.getDef().getHelper().unblock(${1:cmp})"
    },
    {
      "trigger": "helper-ui-infiniteList-removeItem",
      "contents": "cmp.getDef().getHelper().removeItem(${1:component},${2:array},${3:index},${4:timeout},${5:animate},${6:callback})"
    },
    {
      "trigger": "helper-ui-infiniteList-getEventNames",
      "contents": "cmp.getDef().getHelper().getEventNames(${1:})"
    },
    {
      "trigger": "helper-ui-infiniteList-getPoint",
      "contents": "cmp.getDef().getHelper().getPoint(${1:e})"
    },
    {
      "trigger": "helper-ui-infiniteList-getScrollAxis",
      "contents": "cmp.getDef().getHelper().getScrollAxis(${1:absX},${2:absY})"
    },
    {
      "trigger": "helper-ui-infiniteList-getRow",
      "contents": "cmp.getDef().getHelper().getRow(${1:el},${2:targetClassName},${3:rootClassName})"
    },
    {
      "trigger": "helper-ui-infiniteList-getNthRow",
      "contents": "cmp.getDef().getHelper().getNthRow(${1:component},${2:index})"
    },
    {
      "trigger": "helper-ui-infiniteList-getWidthPercentage",
      "contents": "cmp.getDef().getHelper().getWidthPercentage(${1:cmp},${2:el},${3:x})"
    },
    {
      "trigger": "helper-ui-infiniteList-getPixelFromPercentage",
      "contents": "cmp.getDef().getHelper().getPixelFromPercentage(${1:cmp},${2:el},${3:percentage})"
    },
    {
      "trigger": "helper-ui-infiniteList-translateX",
      "contents": "cmp.getDef().getHelper().translateX(${1:cmp},${2:el},${3:percent})"
    },
    {
      "trigger": "helper-ui-infiniteListRow-open",
      "contents": "cmp.getDef().getHelper().open(${1:cmp},${2:params})"
    },
    {
      "trigger": "helper-ui-infiniteListRow-close",
      "contents": "cmp.getDef().getHelper().close(${1:cmp},${2:params})"
    },
    {
      "trigger": "helper-ui-infiniteListRow-createAndDispatch",
      "contents": "cmp.getDef().getHelper().createAndDispatch(${1:el},${2:name},${3:detail})"
    },
    {
      "trigger": "helper-ui-input-buildBody",
      "contents": "cmp.getDef().getHelper().buildBody(${1:component})"
    },
    {
      "trigger": "helper-ui-input-resetLabelPosition",
      "contents": "cmp.getDef().getHelper().resetLabelPosition(${1:component})"
    },
    {
      "trigger": "helper-ui-input-checkValidPosition",
      "contents": "cmp.getDef().getHelper().checkValidPosition(${1:passedInPosition})"
    },
    {
      "trigger": "helper-ui-input-addDomHandler",
      "contents": "cmp.getDef().getHelper().addDomHandler(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-input-addInputDomEvents",
      "contents": "cmp.getDef().getHelper().addInputDomEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-input-getUpdateOn",
      "contents": "cmp.getDef().getHelper().getUpdateOn(${1:component})"
    },
    {
      "trigger": "helper-ui-input-getDomElementValue",
      "contents": "cmp.getDef().getHelper().getDomElementValue(${1:element})"
    },
    {
      "trigger": "helper-ui-input-getHandledDOMEvents",
      "contents": "cmp.getDef().getHelper().getHandledDOMEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-input-doUpdate",
      "contents": "cmp.getDef().getHelper().doUpdate(${1:component},${2:value})"
    },
    {
      "trigger": "helper-ui-input-preEventFiring",
      "contents": "cmp.getDef().getHelper().preEventFiring(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-input-fireEvent",
      "contents": "cmp.getDef().getHelper().fireEvent(${1:component},${2:event},${3:helper})"
    },
    {
      "trigger": "helper-ui-input-handleUpdate",
      "contents": "cmp.getDef().getHelper().handleUpdate(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-input-setEventParams",
      "contents": "cmp.getDef().getHelper().setEventParams(${1:e},${2:DOMEvent})"
    },
    {
      "trigger": "helper-ui-input-getInputElement",
      "contents": "cmp.getDef().getHelper().getInputElement(${1:component})"
    },
    {
      "trigger": "helper-ui-input-updateError",
      "contents": "cmp.getDef().getHelper().updateError(${1:component},${2:errors})"
    },
    {
      "trigger": "helper-ui-input-updateAriaDescribedBy",
      "contents": "cmp.getDef().getHelper().updateAriaDescribedBy(${1:component},${2:errorCmpId})"
    },
    {
      "trigger": "helper-ui-input-updateErrorElement",
      "contents": "cmp.getDef().getHelper().updateErrorElement(${1:component})"
    },
    {
      "trigger": "helper-ui-input-addClass",
      "contents": "cmp.getDef().getHelper().addClass(${1:component},${2:className})"
    },
    {
      "trigger": "helper-ui-input-removeClass",
      "contents": "cmp.getDef().getHelper().removeClass(${1:component},${2:className})"
    },
    {
      "trigger": "helper-ui-input-isHTML5Input",
      "contents": "cmp.getDef().getHelper().isHTML5Input(${1:type})"
    },
    {
      "trigger": "helper-ui-input-isEventSupported",
      "contents": "cmp.getDef().getHelper().isEventSupported(${1:eventName})"
    },
    {
      "trigger": "helper-ui-input-setAttribute",
      "contents": "cmp.getDef().getHelper().setAttribute(${1:cmp},${2:attr})"
    },
    {
      "trigger": "helper-ui-input-addTokenToString",
      "contents": "cmp.getDef().getHelper().addTokenToString(${1:str},${2:token})"
    },
    {
      "trigger": "helper-ui-input-removeTokenFromString",
      "contents": "cmp.getDef().getHelper().removeTokenFromString(${1:str},${2:token})"
    },
    {
      "trigger": "helper-ui-input-hasLabel",
      "contents": "cmp.getDef().getHelper().hasLabel(${1:cmp})"
    },
    {
      "trigger": "helper-ui-input-setDisabled",
      "contents": "cmp.getDef().getHelper().setDisabled(${1:component},${2:disabled},${3:disabledCss})"
    },
    {
      "trigger": "helper-ui-input-getDomEvents",
      "contents": "cmp.getDef().getHelper().getDomEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-input-domEventHandler",
      "contents": "cmp.getDef().getHelper().domEventHandler(${1:event})"
    },
    {
      "trigger": "helper-ui-input-updateAriaRequired",
      "contents": "cmp.getDef().getHelper().updateAriaRequired(${1:component})"
    },
    {
      "trigger": "helper-ui-inputCheckbox-getDomElementValue",
      "contents": "cmp.getDef().getHelper().getDomElementValue(${1:element})"
    },
    {
      "trigger": "helper-ui-inputCurrency-doUpdate",
      "contents": "cmp.getDef().getHelper().doUpdate(${1:component},${2:value})"
    },
    {
      "trigger": "helper-ui-inputCurrency-getNumber",
      "contents": "cmp.getDef().getHelper().getNumber(${1:cmp})"
    },
    {
      "trigger": "helper-ui-inputDate-displayValue",
      "contents": "cmp.getDef().getHelper().displayValue(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDate-displayDatePicker",
      "contents": "cmp.getDef().getHelper().displayDatePicker(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDate-doUpdate",
      "contents": "cmp.getDef().getHelper().doUpdate(${1:component},${2:value})"
    },
    {
      "trigger": "helper-ui-inputDate-getInputElement",
      "contents": "cmp.getDef().getHelper().getInputElement(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDate-getDateString",
      "contents": "cmp.getDef().getHelper().getDateString(${1:date})"
    },
    {
      "trigger": "helper-ui-inputDate-toggleClearButton",
      "contents": "cmp.getDef().getHelper().toggleClearButton(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDate-toggleOpenIconVisibility",
      "contents": "cmp.getDef().getHelper().toggleOpenIconVisibility(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateRange-openStartDatePicker",
      "contents": "cmp.getDef().getHelper().openStartDatePicker(${1:component},${2:selectedDate})"
    },
    {
      "trigger": "helper-ui-inputDateRange-openEndDatePicker",
      "contents": "cmp.getDef().getHelper().openEndDatePicker(${1:component},${2:selectedDate})"
    },
    {
      "trigger": "helper-ui-inputDateRange-displayDatePicker",
      "contents": "cmp.getDef().getHelper().displayDatePicker(${1:datePicker},${2:referenceElement},${3:selectedValue})"
    },
    {
      "trigger": "helper-ui-inputDateRange-hideDatePicker",
      "contents": "cmp.getDef().getHelper().hideDatePicker(${1:datePicker},${2:timeout})"
    },
    {
      "trigger": "helper-ui-inputDateRange-highlightRange",
      "contents": "cmp.getDef().getHelper().highlightRange(${1:datePicker},${2:startDate},${3:endDate})"
    },
    {
      "trigger": "helper-ui-inputDateRange-setStartDateValue",
      "contents": "cmp.getDef().getHelper().setStartDateValue(${1:component},${2:newValue})"
    },
    {
      "trigger": "helper-ui-inputDateRange-setEndDateValue",
      "contents": "cmp.getDef().getHelper().setEndDateValue(${1:component},${2:newValue})"
    },
    {
      "trigger": "helper-ui-inputDateRange-displayDates",
      "contents": "cmp.getDef().getHelper().displayDates(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateRange-displayValue",
      "contents": "cmp.getDef().getHelper().displayValue(${1:component},${2:value},${3:inputElement})"
    },
    {
      "trigger": "helper-ui-inputDateRange-getDateString",
      "contents": "cmp.getDef().getHelper().getDateString(${1:date})"
    },
    {
      "trigger": "helper-ui-inputDateRange-dateCompare",
      "contents": "cmp.getDef().getHelper().dateCompare(${1:date1},${2:date2})"
    },
    {
      "trigger": "helper-ui-inputDateRange-getDateFromString",
      "contents": "cmp.getDef().getHelper().getDateFromString(${1:date})"
    },
    {
      "trigger": "helper-ui-inputDateTime-displayDatePicker",
      "contents": "cmp.getDef().getHelper().displayDatePicker(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateTime-displayTimePicker",
      "contents": "cmp.getDef().getHelper().displayTimePicker(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateTime-displayDateTime",
      "contents": "cmp.getDef().getHelper().displayDateTime(${1:component},${2:dateDisplayValue},${3:timeDisplayValue})"
    },
    {
      "trigger": "helper-ui-inputDateTime-addInputClass",
      "contents": "cmp.getDef().getHelper().addInputClass(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateTime-addDomHandler",
      "contents": "cmp.getDef().getHelper().addDomHandler(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-inputDateTime-handleUpdate",
      "contents": "cmp.getDef().getHelper().handleUpdate(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-inputDateTime-doUpdate",
      "contents": "cmp.getDef().getHelper().doUpdate(${1:component},${2:value},${3:hasTime})"
    },
    {
      "trigger": "helper-ui-inputDateTime-formatDateTime",
      "contents": "cmp.getDef().getHelper().formatDateTime(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateTime-getUTCDateString",
      "contents": "cmp.getDef().getHelper().getUTCDateString(${1:date})"
    },
    {
      "trigger": "helper-ui-inputDateTime-is24HourFormat",
      "contents": "cmp.getDef().getHelper().is24HourFormat(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateTime-popUpDatePicker",
      "contents": "cmp.getDef().getHelper().popUpDatePicker(${1:component},${2:date})"
    },
    {
      "trigger": "helper-ui-inputDateTime-toggleClearButton",
      "contents": "cmp.getDef().getHelper().toggleClearButton(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateTime-setDateValue",
      "contents": "cmp.getDef().getHelper().setDateValue(${1:component},${2:dateValue})"
    },
    {
      "trigger": "helper-ui-inputDateTime-setTimeValue",
      "contents": "cmp.getDef().getHelper().setTimeValue(${1:component},${2:selectedHours},${3:selectedMinutes})"
    },
    {
      "trigger": "helper-ui-inputDateTime-setDateTimeValue",
      "contents": "cmp.getDef().getHelper().setDateTimeValue(${1:component},${2:dateString},${3:timeString},${4:langLocale})"
    },
    {
      "trigger": "helper-ui-inputDateTime-updateTimeFormat",
      "contents": "cmp.getDef().getHelper().updateTimeFormat(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateTime-getDateTime",
      "contents": "cmp.getDef().getHelper().getDateTime(${1:component},${2:langLocale},${3:dateString},${4:timeString})"
    },
    {
      "trigger": "helper-ui-inputDateTime-getDateTimeString",
      "contents": "cmp.getDef().getHelper().getDateTimeString(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateTime-getDateString",
      "contents": "cmp.getDef().getHelper().getDateString(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateTime-getTimeString",
      "contents": "cmp.getDef().getHelper().getTimeString(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateTime-isDesktopMode",
      "contents": "cmp.getDef().getHelper().isDesktopMode(${1:component})"
    },
    {
      "trigger": "helper-ui-inputDateTime-parseDateTimeInput",
      "contents": "cmp.getDef().getHelper().parseDateTimeInput(${1:isUTC},${2:component},${3:dateValue},${4:timeValue})"
    },
    {
      "trigger": "helper-ui-inputDateTrigger-displayDatePicker",
      "contents": "cmp.getDef().getHelper().displayDatePicker(${1:component})"
    },
    {
      "trigger": "helper-ui-inputNumber-getNumber",
      "contents": "cmp.getDef().getHelper().getNumber(${1:cmp})"
    },
    {
      "trigger": "helper-ui-inputPercent-doUpdate",
      "contents": "cmp.getDef().getHelper().doUpdate(${1:component},${2:value})"
    },
    {
      "trigger": "helper-ui-inputPercent-getNumber",
      "contents": "cmp.getDef().getHelper().getNumber(${1:component})"
    },
    {
      "trigger": "helper-ui-inputRadio-getDomElementValue",
      "contents": "cmp.getDef().getHelper().getDomElementValue(${1:element})"
    },
    {
      "trigger": "helper-ui-inputRichText-addDomHandler",
      "contents": "cmp.getDef().getHelper().addDomHandler(${1:cmp},${2:event})"
    },
    {
      "trigger": "helper-ui-inputRichText-handleUpdate",
      "contents": "cmp.getDef().getHelper().handleUpdate(${1:cmp},${2:event})"
    },
    {
      "trigger": "helper-ui-inputRichText-editorEventHandler",
      "contents": "cmp.getDef().getHelper().editorEventHandler(${1:event})"
    },
    {
      "trigger": "helper-ui-inputRichText-initEditor",
      "contents": "cmp.getDef().getHelper().initEditor(${1:cmp})"
    },
    {
      "trigger": "helper-ui-inputRichText-isLibraryLoaded",
      "contents": "cmp.getDef().getHelper().isLibraryLoaded(${1:})"
    },
    {
      "trigger": "helper-ui-inputRichText-toggle",
      "contents": "cmp.getDef().getHelper().toggle(${1:cmp},${2:isRichText})"
    },
    {
      "trigger": "helper-ui-inputRichText-getEditorId",
      "contents": "cmp.getDef().getHelper().getEditorId(${1:cmp})"
    },
    {
      "trigger": "helper-ui-inputRichText-getEditorInstance",
      "contents": "cmp.getDef().getHelper().getEditorInstance(${1:cmp})"
    },
    {
      "trigger": "helper-ui-inputRichText-getContent",
      "contents": "cmp.getDef().getHelper().getContent(${1:cmp})"
    },
    {
      "trigger": "helper-ui-inputRichText-setContent",
      "contents": "cmp.getDef().getHelper().setContent(${1:cmp},${2:content})"
    },
    {
      "trigger": "helper-ui-inputRichText-getLocale",
      "contents": "cmp.getDef().getHelper().getLocale(${1:})"
    },
    {
      "trigger": "helper-ui-inputRichText-getEditorConfig",
      "contents": "cmp.getDef().getHelper().getEditorConfig(${1:cmp})"
    },
    {
      "trigger": "helper-ui-inputRichText-merge",
      "contents": "cmp.getDef().getHelper().merge(${1:target},${2:source})"
    },
    {
      "trigger": "helper-ui-inputRichText-getToolbarConfig",
      "contents": "cmp.getDef().getHelper().getToolbarConfig(${1:cmp})"
    },
    {
      "trigger": "helper-ui-inputRichText-getExtraAllowedContent",
      "contents": "cmp.getDef().getHelper().getExtraAllowedContent(${1:})"
    },
    {
      "trigger": "helper-ui-inputRichText-unrender",
      "contents": "cmp.getDef().getHelper().unrender(${1:cmp})"
    },
    {
      "trigger": "helper-ui-inputSearch-addEventHandler",
      "contents": "cmp.getDef().getHelper().addEventHandler(${1:component})"
    },
    {
      "trigger": "helper-ui-inputSearch-preEventFiring",
      "contents": "cmp.getDef().getHelper().preEventFiring(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-inputSearch-fireEvent",
      "contents": "cmp.getDef().getHelper().fireEvent(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-inputSearch-toggleClearButton",
      "contents": "cmp.getDef().getHelper().toggleClearButton(${1:component})"
    },
    {
      "trigger": "helper-ui-inputSelect-init",
      "contents": "cmp.getDef().getHelper().init(${1:cmp})"
    },
    {
      "trigger": "helper-ui-inputSelect-getDomElementValue",
      "contents": "cmp.getDef().getHelper().getDomElementValue(${1:el})"
    },
    {
      "trigger": "helper-ui-inputSelect-getOptionsWithStrategy",
      "contents": "cmp.getDef().getHelper().getOptionsWithStrategy(${1:cmp})"
    },
    {
      "trigger": "helper-ui-inputSelect-updateOptionsFromValue",
      "contents": "cmp.getDef().getHelper().updateOptionsFromValue(${1:cmp},${2:createNewOptions})"
    },
    {
      "trigger": "helper-ui-inputSelect-isAlreadySelected",
      "contents": "cmp.getDef().getHelper().isAlreadySelected(${1:cmp},${2:selectedOptions})"
    },
    {
      "trigger": "helper-ui-inputSelect-updateValueFromOptions",
      "contents": "cmp.getDef().getHelper().updateValueFromOptions(${1:cmp},${2:optionsPack})"
    },
    {
      "trigger": "helper-ui-inputSelect-renderOptions",
      "contents": "cmp.getDef().getHelper().renderOptions(${1:cmp},${2:options})"
    },
    {
      "trigger": "helper-ui-inputSelect-updateOptionElement",
      "contents": "cmp.getDef().getHelper().updateOptionElement(${1:cmp},${2:option},${3:optionElement})"
    },
    {
      "trigger": "helper-ui-inputSelect-getInternalText",
      "contents": "cmp.getDef().getHelper().getInternalText(${1:option})"
    },
    {
      "trigger": "helper-ui-inputTextArea-setDomElementValue",
      "contents": "cmp.getDef().getHelper().setDomElementValue(${1:component})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-position",
      "contents": "cmp.getDef().getHelper().position(${1:component})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-selectTime",
      "contents": "cmp.getDef().getHelper().selectTime(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-hide",
      "contents": "cmp.getDef().getHelper().hide(${1:component},${2:shouldFocusReferenceElem})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-renderList",
      "contents": "cmp.getDef().getHelper().renderList(${1:component})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-updateGlobalEventListeners",
      "contents": "cmp.getDef().getHelper().updateGlobalEventListeners(${1:component})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-getOnClickFunction",
      "contents": "cmp.getDef().getHelper().getOnClickFunction(${1:component})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-isElementInComponent",
      "contents": "cmp.getDef().getHelper().isElementInComponent(${1:component},${2:targetElem})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-appendListElement",
      "contents": "cmp.getDef().getHelper().appendListElement(${1:listElem},${2:displayValue},${3:hourValue},${4:minuteValue})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-scrollToSelectedTime",
      "contents": "cmp.getDef().getHelper().scrollToSelectedTime(${1:component})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-setEventHandlers",
      "contents": "cmp.getDef().getHelper().setEventHandlers(${1:component})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-removeEventHandlers",
      "contents": "cmp.getDef().getHelper().removeEventHandlers(${1:component})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-getMousewheelHandler",
      "contents": "cmp.getDef().getHelper().getMousewheelHandler(${1:component})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-getKeyboardInteractionHandler",
      "contents": "cmp.getDef().getHelper().getKeyboardInteractionHandler(${1:component})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-setFocusToNextItem",
      "contents": "cmp.getDef().getHelper().setFocusToNextItem(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-inputTimePicker-setFocusToPreviousItem",
      "contents": "cmp.getDef().getHelper().setFocusToPreviousItem(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-interactive-addDomEvents",
      "contents": "cmp.getDef().getHelper().addDomEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-interactive-addDomHandler",
      "contents": "cmp.getDef().getHelper().addDomHandler(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-interactive-domEventHandler",
      "contents": "cmp.getDef().getHelper().domEventHandler(${1:event})"
    },
    {
      "trigger": "helper-ui-interactive-fireEvent",
      "contents": "cmp.getDef().getHelper().fireEvent(${1:component},${2:event},${3:helper})"
    },
    {
      "trigger": "helper-ui-interactive-getDomEvents",
      "contents": "cmp.getDef().getHelper().getDomEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-interactive-getHandledDOMEvents",
      "contents": "cmp.getDef().getHelper().getHandledDOMEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-interactive-preEventFiring",
      "contents": "cmp.getDef().getHelper().preEventFiring(${1:})"
    },
    {
      "trigger": "helper-ui-interactive-setEventParams",
      "contents": "cmp.getDef().getHelper().setEventParams(${1:e},${2:DOMEvent})"
    },
    {
      "trigger": "helper-ui-interactive-setDisabled",
      "contents": "cmp.getDef().getHelper().setDisabled(${1:component},${2:disabled},${3:disabledCss})"
    },
    {
      "trigger": "helper-ui-label-updateAttribute",
      "contents": "cmp.getDef().getHelper().updateAttribute(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-doInit",
      "contents": "cmp.getDef().getHelper().doInit(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-initSorterTrigger",
      "contents": "cmp.getDef().getHelper().initSorterTrigger(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-initDataProvider",
      "contents": "cmp.getDef().getHelper().initDataProvider(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-initItems",
      "contents": "cmp.getDef().getHelper().initItems(${1:cmp},${2:items},${3:selectedItems})"
    },
    {
      "trigger": "helper-ui-listSorter-handleOnOpen",
      "contents": "cmp.getDef().getHelper().handleOnOpen(${1:cmp},${2:force})"
    },
    {
      "trigger": "helper-ui-listSorter-handleOnCancel",
      "contents": "cmp.getDef().getHelper().handleOnCancel(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-handleApply",
      "contents": "cmp.getDef().getHelper().handleApply(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-reset",
      "contents": "cmp.getDef().getHelper().reset(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-getDefaultSortBy",
      "contents": "cmp.getDef().getHelper().getDefaultSortBy(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-parseSortBy",
      "contents": "cmp.getDef().getHelper().parseSortBy(${1:cmp},${2:sortBy})"
    },
    {
      "trigger": "helper-ui-listSorter-triggerDataProvider",
      "contents": "cmp.getDef().getHelper().triggerDataProvider(${1:cmp},${2:index})"
    },
    {
      "trigger": "helper-ui-listSorter-setVisible",
      "contents": "cmp.getDef().getHelper().setVisible(${1:cmp},${2:visible})"
    },
    {
      "trigger": "helper-ui-listSorter-updateSortOrder",
      "contents": "cmp.getDef().getHelper().updateSortOrder(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-getSelectedMenuItems",
      "contents": "cmp.getDef().getHelper().getSelectedMenuItems(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-getSelectedItems",
      "contents": "cmp.getDef().getHelper().getSelectedItems(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-setSelectedItems",
      "contents": "cmp.getDef().getHelper().setSelectedItems(${1:cmp},${2:selectedItems})"
    },
    {
      "trigger": "helper-ui-listSorter-selectMenuItem",
      "contents": "cmp.getDef().getHelper().selectMenuItem(${1:cmp},${2:selectedItems})"
    },
    {
      "trigger": "helper-ui-listSorter-attachEventHandler",
      "contents": "cmp.getDef().getHelper().attachEventHandler(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-removeEventHandler",
      "contents": "cmp.getDef().getHelper().removeEventHandler(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-appendElementToBody",
      "contents": "cmp.getDef().getHelper().appendElementToBody(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-updateSize",
      "contents": "cmp.getDef().getHelper().updateSize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-getOrientationChangeHandler",
      "contents": "cmp.getDef().getHelper().getOrientationChangeHandler(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-getKeydownHandler",
      "contents": "cmp.getDef().getHelper().getKeydownHandler(${1:cmp})"
    },
    {
      "trigger": "helper-ui-listSorter-isElementInComponent",
      "contents": "cmp.getDef().getHelper().isElementInComponent(${1:component},${2:targetElem})"
    },
    {
      "trigger": "helper-ui-listSorter-unrender",
      "contents": "cmp.getDef().getHelper().unrender(${1:})"
    },
    {
      "trigger": "helper-ui-listSorter-refreshMenu",
      "contents": "cmp.getDef().getHelper().refreshMenu(${1:cmp})"
    },
    {
      "trigger": "helper-ui-menu-handleRefresh",
      "contents": "cmp.getDef().getHelper().handleRefresh(${1:component})"
    },
    {
      "trigger": "helper-ui-menu-setTargetEventHandlers",
      "contents": "cmp.getDef().getHelper().setTargetEventHandlers(${1:component},${2:targetComponent})"
    },
    {
      "trigger": "helper-ui-menuItem-addMenuItemDomEvents",
      "contents": "cmp.getDef().getHelper().addMenuItemDomEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-menuItem-fireEvent",
      "contents": "cmp.getDef().getHelper().fireEvent(${1:component},${2:event},${3:helper})"
    },
    {
      "trigger": "helper-ui-menuItem-fireSelectEvent",
      "contents": "cmp.getDef().getHelper().fireSelectEvent(${1:component},${2:event},${3:options})"
    },
    {
      "trigger": "helper-ui-menuItem-handleSpacekeydown",
      "contents": "cmp.getDef().getHelper().handleSpacekeydown(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-menuItem-preEventFiring",
      "contents": "cmp.getDef().getHelper().preEventFiring(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-menuItem-setDisabled",
      "contents": "cmp.getDef().getHelper().setDisabled(${1:component})"
    },
    {
      "trigger": "helper-ui-menuItem-setFocus",
      "contents": "cmp.getDef().getHelper().setFocus(${1:component})"
    },
    {
      "trigger": "helper-ui-menuItem-getAnchorElement",
      "contents": "cmp.getDef().getHelper().getAnchorElement(${1:component})"
    },
    {
      "trigger": "helper-ui-menuItem-supportKeyboardInteraction",
      "contents": "cmp.getDef().getHelper().supportKeyboardInteraction(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-menuList-setEventHandlersOnChildren",
      "contents": "cmp.getDef().getHelper().setEventHandlersOnChildren(${1:component})"
    },
    {
      "trigger": "helper-ui-menuList-setHandlersOnMenuItems",
      "contents": "cmp.getDef().getHelper().setHandlersOnMenuItems(${1:component},${2:items},${3:children},${4:existingChildren})"
    },
    {
      "trigger": "helper-ui-menuList-getMenuItem",
      "contents": "cmp.getDef().getHelper().getMenuItem(${1:component},${2:index})"
    },
    {
      "trigger": "helper-ui-menuList-handleVisible",
      "contents": "cmp.getDef().getHelper().handleVisible(${1:component})"
    },
    {
      "trigger": "helper-ui-menuList-setMenuItemFocus",
      "contents": "cmp.getDef().getHelper().setMenuItemFocus(${1:component},${2:index})"
    },
    {
      "trigger": "helper-ui-menuList-setFocus",
      "contents": "cmp.getDef().getHelper().setFocus(${1:component},${2:currentlyVisible})"
    },
    {
      "trigger": "helper-ui-menuList-setKeyboardEventHandlers",
      "contents": "cmp.getDef().getHelper().setKeyboardEventHandlers(${1:component})"
    },
    {
      "trigger": "helper-ui-menuList-removeKeyboardEventHandlers",
      "contents": "cmp.getDef().getHelper().removeKeyboardEventHandlers(${1:component})"
    },
    {
      "trigger": "helper-ui-menuList-getKeyboardInteractionHandler",
      "contents": "cmp.getDef().getHelper().getKeyboardInteractionHandler(${1:component})"
    },
    {
      "trigger": "helper-ui-menuList-handleEsckeydown",
      "contents": "cmp.getDef().getHelper().handleEsckeydown(${1:component})"
    },
    {
      "trigger": "helper-ui-menuList-setFocusToTrigger",
      "contents": "cmp.getDef().getHelper().setFocusToTrigger(${1:component})"
    },
    {
      "trigger": "helper-ui-menuList-setFocusToNextItem",
      "contents": "cmp.getDef().getHelper().setFocusToNextItem(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-menuList-setFocusToPreviousItem",
      "contents": "cmp.getDef().getHelper().setFocusToPreviousItem(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-menuList-fireMenuFocusChangeEvent",
      "contents": "cmp.getDef().getHelper().fireMenuFocusChangeEvent(${1:component},${2:previousItem},${3:currentItem})"
    },
    {
      "trigger": "helper-ui-menuList-handleTabkeydown",
      "contents": "cmp.getDef().getHelper().handleTabkeydown(${1:component})"
    },
    {
      "trigger": "helper-ui-menuList-setFocusToTypingChars",
      "contents": "cmp.getDef().getHelper().setFocusToTypingChars(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-menuList-deselectSiblings",
      "contents": "cmp.getDef().getHelper().deselectSiblings(${1:component},${2:selectedItem})"
    },
    {
      "trigger": "helper-ui-menuList-onMenuItemSelected",
      "contents": "cmp.getDef().getHelper().onMenuItemSelected(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-menuList-getComponentForElement",
      "contents": "cmp.getDef().getHelper().getComponentForElement(${1:element})"
    },
    {
      "trigger": "helper-ui-menuTrigger-handleClick",
      "contents": "cmp.getDef().getHelper().handleClick(${1:component})"
    },
    {
      "trigger": "helper-ui-menuTrigger-fireMenuTriggerPress",
      "contents": "cmp.getDef().getHelper().fireMenuTriggerPress(${1:component},${2:index})"
    },
    {
      "trigger": "helper-ui-menuTriggerLink-focus",
      "contents": "cmp.getDef().getHelper().focus(${1:component})"
    },
    {
      "trigger": "helper-ui-menuTriggerLink-getAnchorElement",
      "contents": "cmp.getDef().getHelper().getAnchorElement(${1:component})"
    },
    {
      "trigger": "helper-ui-menuTriggerLink-handleClick",
      "contents": "cmp.getDef().getHelper().handleClick(${1:component})"
    },
    {
      "trigger": "helper-ui-menuTriggerLink-fireMenuTriggerPress",
      "contents": "cmp.getDef().getHelper().fireMenuTriggerPress(${1:component})"
    },
    {
      "trigger": "helper-ui-modal-init",
      "contents": "cmp.getDef().getHelper().init(${1:cmp})"
    },
    {
      "trigger": "helper-ui-modal-initCloseBtn",
      "contents": "cmp.getDef().getHelper().initCloseBtn(${1:cmp})"
    },
    {
      "trigger": "helper-ui-modal-_getKeyHandler",
      "contents": "cmp.getDef().getHelper()._getKeyHandler(${1:cmp})"
    },
    {
      "trigger": "helper-ui-modal-validateAnimationName",
      "contents": "cmp.getDef().getHelper().validateAnimationName(${1:name})"
    },
    {
      "trigger": "helper-ui-modal-show",
      "contents": "cmp.getDef().getHelper().show(${1:cmp},${2:callback})"
    },
    {
      "trigger": "helper-ui-modal-_findContainedComponent",
      "contents": "cmp.getDef().getHelper()._findContainedComponent(${1:cmp},${2:id})"
    },
    {
      "trigger": "helper-ui-modal-close",
      "contents": "cmp.getDef().getHelper().close(${1:cmp},${2:callback})"
    },
    {
      "trigger": "helper-ui-modal-hide",
      "contents": "cmp.getDef().getHelper().hide(${1:cmp},${2:callback})"
    },
    {
      "trigger": "helper-ui-modal-mask",
      "contents": "cmp.getDef().getHelper().mask(${1:cmp})"
    },
    {
      "trigger": "helper-ui-modal-scopeScrollables",
      "contents": "cmp.getDef().getHelper().scopeScrollables(${1:cmp})"
    },
    {
      "trigger": "helper-ui-modal-unmask",
      "contents": "cmp.getDef().getHelper().unmask(${1:cmp},${2:useTransition},${3:panel})"
    },
    {
      "trigger": "helper-ui-modal-unsetOverflow",
      "contents": "cmp.getDef().getHelper().unsetOverflow(${1:})"
    },
    {
      "trigger": "helper-ui-outputDate-formatDate",
      "contents": "cmp.getDef().getHelper().formatDate(${1:component})"
    },
    {
      "trigger": "helper-ui-outputDateTime-displayDateTime",
      "contents": "cmp.getDef().getHelper().displayDateTime(${1:component},${2:displayValue})"
    },
    {
      "trigger": "helper-ui-outputDateTime-getFormat",
      "contents": "cmp.getDef().getHelper().getFormat(${1:component})"
    },
    {
      "trigger": "helper-ui-outputDateTime-getTimeZone",
      "contents": "cmp.getDef().getHelper().getTimeZone(${1:component})"
    },
    {
      "trigger": "helper-ui-outputDateTime-formatDateTime",
      "contents": "cmp.getDef().getHelper().formatDateTime(${1:component})"
    },
    {
      "trigger": "helper-ui-outputEmail-buildBody",
      "contents": "cmp.getDef().getHelper().buildBody(${1:cmp})"
    },
    {
      "trigger": "helper-ui-outputMultiSelect-updateValue",
      "contents": "cmp.getDef().getHelper().updateValue(${1:cmp})"
    },
    {
      "trigger": "helper-ui-outputPhone-updateValue",
      "contents": "cmp.getDef().getHelper().updateValue(${1:cmp})"
    },
    {
      "trigger": "helper-ui-outputPhone-removeSpaces",
      "contents": "cmp.getDef().getHelper().removeSpaces(${1:value})"
    },
    {
      "trigger": "helper-ui-outputPhone-formatPhoneNumber",
      "contents": "cmp.getDef().getHelper().formatPhoneNumber(${1:rawPhoneNumber})"
    },
    {
      "trigger": "helper-ui-outputRichText-removeEventHandlers",
      "contents": "cmp.getDef().getHelper().removeEventHandlers(${1:element})"
    },
    {
      "trigger": "helper-ui-outputRichText-validate",
      "contents": "cmp.getDef().getHelper().validate(${1:component})"
    },
    {
      "trigger": "helper-ui-outputRichText-validateElement",
      "contents": "cmp.getDef().getHelper().validateElement(${1:element},${2:supportedTags})"
    },
    {
      "trigger": "helper-ui-outputRichText-getSupportedTags",
      "contents": "cmp.getDef().getHelper().getSupportedTags(${1:component})"
    },
    {
      "trigger": "helper-ui-outputRichText-getSupportedAttributes",
      "contents": "cmp.getDef().getHelper().getSupportedAttributes(${1:component})"
    },
    {
      "trigger": "helper-ui-outputRichText-getDefaultSupportedTags",
      "contents": "cmp.getDef().getHelper().getDefaultSupportedTags(${1:})"
    },
    {
      "trigger": "helper-ui-outputRichText-getDefaultSupportedAttributes",
      "contents": "cmp.getDef().getHelper().getDefaultSupportedAttributes(${1:})"
    },
    {
      "trigger": "helper-ui-outputText-appendTextElements",
      "contents": "cmp.getDef().getHelper().appendTextElements(${1:textValue},${2:containerEl})"
    },
    {
      "trigger": "helper-ui-outputText-removeChildren",
      "contents": "cmp.getDef().getHelper().removeChildren(${1:element})"
    },
    {
      "trigger": "helper-ui-outputURL-makeAbsolute",
      "contents": "cmp.getDef().getHelper().makeAbsolute(${1:url})"
    },
    {
      "trigger": "helper-ui-outputURL-buildLinkBody",
      "contents": "cmp.getDef().getHelper().buildLinkBody(${1:cmp})"
    },
    {
      "trigger": "helper-ui-outputURL-handleDisabled",
      "contents": "cmp.getDef().getHelper().handleDisabled(${1:cmp})"
    },
    {
      "trigger": "helper-ui-pager-changePage",
      "contents": "cmp.getDef().getHelper().changePage(${1:component},${2:targetPage},${3:domEvent})"
    },
    {
      "trigger": "helper-ui-pager-changePageSize",
      "contents": "cmp.getDef().getHelper().changePageSize(${1:component},${2:targetPageSize},${3:domEvent})"
    },
    {
      "trigger": "helper-ui-pager-firePageChangeEvent",
      "contents": "cmp.getDef().getHelper().firePageChangeEvent(${1:component},${2:pageData},${3:domEvent})"
    },
    {
      "trigger": "helper-ui-pager-updateCalculatedFields",
      "contents": "cmp.getDef().getHelper().updateCalculatedFields(${1:component})"
    },
    {
      "trigger": "helper-ui-panel-init",
      "contents": "cmp.getDef().getHelper().init(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panel-_getKeyHandler",
      "contents": "cmp.getDef().getHelper()._getKeyHandler(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panel-_getMouseHandler",
      "contents": "cmp.getDef().getHelper()._getMouseHandler(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panel-_getReferenceElement",
      "contents": "cmp.getDef().getHelper()._getReferenceElement(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panel-show",
      "contents": "cmp.getDef().getHelper().show(${1:cmp},${2:callback})"
    },
    {
      "trigger": "helper-ui-panel-reposition",
      "contents": "cmp.getDef().getHelper().reposition(${1:cmp},${2:callback})"
    },
    {
      "trigger": "helper-ui-panel-hide",
      "contents": "cmp.getDef().getHelper().hide(${1:cmp},${2:callback})"
    },
    {
      "trigger": "helper-ui-panel-close",
      "contents": "cmp.getDef().getHelper().close(${1:cmp},${2:callback})"
    },
    {
      "trigger": "helper-ui-panel-cleanPositioning",
      "contents": "cmp.getDef().getHelper().cleanPositioning(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panel-position",
      "contents": "cmp.getDef().getHelper().position(${1:cmp},${2:referenceEl},${3:callback})"
    },
    {
      "trigger": "helper-ui-panelDialog-init",
      "contents": "cmp.getDef().getHelper().init(${1:cmp},${2:event})"
    },
    {
      "trigger": "helper-ui-panelDialog-hide",
      "contents": "cmp.getDef().getHelper().hide(${1:cmp},${2:event})"
    },
    {
      "trigger": "helper-ui-panelDialog-show",
      "contents": "cmp.getDef().getHelper().show(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panelDialog-beforeTransitionEnd",
      "contents": "cmp.getDef().getHelper().beforeTransitionEnd(${1:})"
    },
    {
      "trigger": "helper-ui-panelDialog-position",
      "contents": "cmp.getDef().getHelper().position(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panelDialog-getModalGlassElement",
      "contents": "cmp.getDef().getHelper().getModalGlassElement(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panelDialog-getPanelElement",
      "contents": "cmp.getDef().getHelper().getPanelElement(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panelDialog-close",
      "contents": "cmp.getDef().getHelper().close(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panelDialog-_findContainedComponent",
      "contents": "cmp.getDef().getHelper()._findContainedComponent(${1:cmp},${2:localId})"
    },
    {
      "trigger": "helper-ui-panelDialog-getPrefix",
      "contents": "cmp.getDef().getHelper().getPrefix(${1:})"
    },
    {
      "trigger": "helper-ui-panelDialog-getAnimationEndEventName",
      "contents": "cmp.getDef().getHelper().getAnimationEndEventName(${1:})"
    },
    {
      "trigger": "helper-ui-panelManager-initialize",
      "contents": "cmp.getDef().getHelper().initialize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panelManager-_copy",
      "contents": "cmp.getDef().getHelper()._copy(${1:obj1})"
    },
    {
      "trigger": "helper-ui-panelManager-getManager",
      "contents": "cmp.getDef().getHelper().getManager(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panelManager-createCancelButton",
      "contents": "cmp.getDef().getHelper().createCancelButton(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panelManager-updatePanel",
      "contents": "cmp.getDef().getHelper().updatePanel(${1:cmp},${2:event})"
    },
    {
      "trigger": "helper-ui-panelManager-getHeaderButtons",
      "contents": "cmp.getDef().getHelper().getHeaderButtons(${1:cmp},${2:headerActions},${3:maxButtons})"
    },
    {
      "trigger": "helper-ui-panelManager-openPanel",
      "contents": "cmp.getDef().getHelper().openPanel(${1:cmp},${2:config})"
    },
    {
      "trigger": "helper-ui-panelManager-createPanel",
      "contents": "cmp.getDef().getHelper().createPanel(${1:cmp},${2:config},${3:callback})"
    },
    {
      "trigger": "helper-ui-panelManager-createPanelDialog",
      "contents": "cmp.getDef().getHelper().createPanelDialog(${1:cmp},${2:config},${3:callback})"
    },
    {
      "trigger": "helper-ui-panelManager-beforeCreatePanel",
      "contents": "cmp.getDef().getHelper().beforeCreatePanel(${1:})"
    },
    {
      "trigger": "helper-ui-panelManager-isModal",
      "contents": "cmp.getDef().getHelper().isModal(${1:panelType})"
    },
    {
      "trigger": "helper-ui-panelManager-getCloseActionForModal",
      "contents": "cmp.getDef().getHelper().getCloseActionForModal(${1:})"
    },
    {
      "trigger": "helper-ui-panelManager-_createPanel",
      "contents": "cmp.getDef().getHelper()._createPanel(${1:cmp},${2:def},${3:config},${4:callback})"
    },
    {
      "trigger": "helper-ui-panelManager-_createComponent",
      "contents": "cmp.getDef().getHelper()._createComponent(${1:def},${2:attr},${3:callback})"
    },
    {
      "trigger": "helper-ui-panelManager-attachPanelInstance",
      "contents": "cmp.getDef().getHelper().attachPanelInstance(${1:cmp},${2:panel})"
    },
    {
      "trigger": "helper-ui-panelManager-_findContainer",
      "contents": "cmp.getDef().getHelper()._findContainer(${1:cmp},${2:id})"
    },
    {
      "trigger": "helper-ui-panelManager-openInstance",
      "contents": "cmp.getDef().getHelper().openInstance(${1:cmp},${2:panel},${3:config})"
    },
    {
      "trigger": "helper-ui-panelManager-isPanel",
      "contents": "cmp.getDef().getHelper().isPanel(${1:component})"
    },
    {
      "trigger": "helper-ui-panelManager-closeInstance",
      "contents": "cmp.getDef().getHelper().closeInstance(${1:cmp},${2:panel},${3:options})"
    },
    {
      "trigger": "helper-ui-panelManager-emptyDeleteQueue",
      "contents": "cmp.getDef().getHelper().emptyDeleteQueue(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panelManager-removeInstance",
      "contents": "cmp.getDef().getHelper().removeInstance(${1:cmp},${2:panel},${3:forceImmediateDestroy})"
    },
    {
      "trigger": "helper-ui-panelManager-_removePanel",
      "contents": "cmp.getDef().getHelper()._removePanel(${1:cmp},${2:panel})"
    },
    {
      "trigger": "helper-ui-panelManager-destroySlidePanelDEPRECATED",
      "contents": "cmp.getDef().getHelper().destroySlidePanelDEPRECATED(${1:cmp},${2:event})"
    },
    {
      "trigger": "helper-ui-panelManager-destroyPanel",
      "contents": "cmp.getDef().getHelper().destroyPanel(${1:cmp},${2:event})"
    },
    {
      "trigger": "helper-ui-panelManager-destroyAllPanels",
      "contents": "cmp.getDef().getHelper().destroyAllPanels(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panelManager-getActiveInstance",
      "contents": "cmp.getDef().getHelper().getActiveInstance(${1:manager})"
    },
    {
      "trigger": "helper-ui-panelManager-setActiveInstance",
      "contents": "cmp.getDef().getHelper().setActiveInstance(${1:cmp},${2:panel})"
    },
    {
      "trigger": "helper-ui-panelManager-afterSetActiveInstance",
      "contents": "cmp.getDef().getHelper().afterSetActiveInstance(${1:})"
    },
    {
      "trigger": "helper-ui-panelManager-_updateModalGlasszIndex",
      "contents": "cmp.getDef().getHelper()._updateModalGlasszIndex(${1:panelHelper},${2:panel},${3:stackIndex})"
    },
    {
      "trigger": "helper-ui-panelManager-_updatePanelElementzIndex",
      "contents": "cmp.getDef().getHelper()._updatePanelElementzIndex(${1:panelHelper},${2:panel},${3:stackIndex})"
    },
    {
      "trigger": "helper-ui-panelManager-stackPanel",
      "contents": "cmp.getDef().getHelper().stackPanel(${1:cmp},${2:panel})"
    },
    {
      "trigger": "helper-ui-panelManager-unstackPanel",
      "contents": "cmp.getDef().getHelper().unstackPanel(${1:cmp},${2:panel})"
    },
    {
      "trigger": "helper-ui-panelManager-isVisible",
      "contents": "cmp.getDef().getHelper().isVisible(${1:el})"
    },
    {
      "trigger": "helper-ui-panelManager-focusAllowed",
      "contents": "cmp.getDef().getHelper().focusAllowed(${1:el})"
    },
    {
      "trigger": "helper-ui-panelManager-getFocusables",
      "contents": "cmp.getDef().getHelper().getFocusables(${1:panel})"
    },
    {
      "trigger": "helper-ui-panelManager-bindKeyHandler",
      "contents": "cmp.getDef().getHelper().bindKeyHandler(${1:manager})"
    },
    {
      "trigger": "helper-ui-panelManager-unbindKeyHandler",
      "contents": "cmp.getDef().getHelper().unbindKeyHandler(${1:manager})"
    },
    {
      "trigger": "helper-ui-panelManager-bindClickHandler",
      "contents": "cmp.getDef().getHelper().bindClickHandler(${1:manager})"
    },
    {
      "trigger": "helper-ui-panelManager-unbindClickHandler",
      "contents": "cmp.getDef().getHelper().unbindClickHandler(${1:manager})"
    },
    {
      "trigger": "helper-ui-panelManager-transitionBegin",
      "contents": "cmp.getDef().getHelper().transitionBegin(${1:cmp},${2:event})"
    },
    {
      "trigger": "helper-ui-panelManager-transitionEnd",
      "contents": "cmp.getDef().getHelper().transitionEnd(${1:cmp},${2:event})"
    },
    {
      "trigger": "helper-ui-panelManager-setFocus",
      "contents": "cmp.getDef().getHelper().setFocus(${1:cmp},${2:panel})"
    },
    {
      "trigger": "helper-ui-panelManager-onPanelLoaded",
      "contents": "cmp.getDef().getHelper().onPanelLoaded(${1:cmp},${2:event})"
    },
    {
      "trigger": "helper-ui-panelManager2-initialize",
      "contents": "cmp.getDef().getHelper().initialize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-panelManager2-initializeRegisteredPanels",
      "contents": "cmp.getDef().getHelper().initializeRegisteredPanels(${1:cmp},${2:newPanels})"
    },
    {
      "trigger": "helper-ui-panelManager2-registerPanels",
      "contents": "cmp.getDef().getHelper().registerPanels(${1:cmp},${2:params})"
    },
    {
      "trigger": "helper-ui-panelManager2-createPanel",
      "contents": "cmp.getDef().getHelper().createPanel(${1:cmp},${2:config})"
    },
    {
      "trigger": "helper-ui-panelManager2-getActivePanel",
      "contents": "cmp.getDef().getHelper().getActivePanel(${1:cmp},${2:callback})"
    },
    {
      "trigger": "helper-ui-panelManager2-setPanelOwner",
      "contents": "cmp.getDef().getHelper().setPanelOwner(${1:panel},${2:givenOwner})"
    },
    {
      "trigger": "helper-ui-panelManager2-stackPanel",
      "contents": "cmp.getDef().getHelper().stackPanel(${1:panel})"
    },
    {
      "trigger": "helper-ui-panelManager2-stackElement",
      "contents": "cmp.getDef().getHelper().stackElement(${1:cb})"
    },
    {
      "trigger": "helper-ui-panelManager2-createPanelInstance",
      "contents": "cmp.getDef().getHelper().createPanelInstance(${1:cmp},${2:config})"
    },
    {
      "trigger": "helper-ui-panelManager2-beforeShow",
      "contents": "cmp.getDef().getHelper().beforeShow(${1:cmp},${2:config})"
    },
    {
      "trigger": "helper-ui-panelManager2-destroyPanelInstance",
      "contents": "cmp.getDef().getHelper().destroyPanelInstance(${1:cmp},${2:config},${3:doActivateNext})"
    },
    {
      "trigger": "helper-ui-panelManager2-activateNextPanel",
      "contents": "cmp.getDef().getHelper().activateNextPanel(${1:})"
    },
    {
      "trigger": "helper-ui-panelManager2-deactivateAllPanelInstances",
      "contents": "cmp.getDef().getHelper().deactivateAllPanelInstances(${1:cmp},${2:activePanel})"
    },
    {
      "trigger": "helper-ui-panelManager2-renderPanelInstance",
      "contents": "cmp.getDef().getHelper().renderPanelInstance(${1:cmp},${2:panel},${3:config})"
    },
    {
      "trigger": "helper-ui-panelManager2-notifyPanelContent",
      "contents": "cmp.getDef().getHelper().notifyPanelContent(${1:content},${2:config})"
    },
    {
      "trigger": "helper-ui-panelManager2-broadcastNotify",
      "contents": "cmp.getDef().getHelper().broadcastNotify(${1:cmp},${2:source},${3:config})"
    },
    {
      "trigger": "helper-ui-panelManager2-getContainerPanelId",
      "contents": "cmp.getDef().getHelper().getContainerPanelId(${1:source})"
    },
    {
      "trigger": "helper-ui-pill-handledInteraction",
      "contents": "cmp.getDef().getHelper().handledInteraction(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-pill-fireHandleEvent",
      "contents": "cmp.getDef().getHelper().fireHandleEvent(${1:component},${2:action})"
    },
    {
      "trigger": "helper-ui-pill-setFocus",
      "contents": "cmp.getDef().getHelper().setFocus(${1:component})"
    },
    {
      "trigger": "helper-ui-pill-removeFocus",
      "contents": "cmp.getDef().getHelper().removeFocus(${1:component})"
    },
    {
      "trigger": "helper-ui-pillContainer-handleItemSelected",
      "contents": "cmp.getDef().getHelper().handleItemSelected(${1:cmp},${2:newItemList})"
    },
    {
      "trigger": "helper-ui-pillContainer-insertItems",
      "contents": "cmp.getDef().getHelper().insertItems(${1:cmp},${2:newItems})"
    },
    {
      "trigger": "helper-ui-pillContainer-updateDisplayedItems",
      "contents": "cmp.getDef().getHelper().updateDisplayedItems(${1:cmp})"
    },
    {
      "trigger": "helper-ui-pillContainer-handlePillEvent",
      "contents": "cmp.getDef().getHelper().handlePillEvent(${1:cmp},${2:event})"
    },
    {
      "trigger": "helper-ui-pillContainer-deleteItem",
      "contents": "cmp.getDef().getHelper().deleteItem(${1:cmp},${2:data})"
    },
    {
      "trigger": "helper-ui-pillContainer-focusItem",
      "contents": "cmp.getDef().getHelper().focusItem(${1:cmp},${2:data},${3:direction})"
    },
    {
      "trigger": "helper-ui-pillContainer-focusOnInputBox",
      "contents": "cmp.getDef().getHelper().focusOnInputBox(${1:cmp})"
    },
    {
      "trigger": "helper-ui-pillContainer-adjustHeight",
      "contents": "cmp.getDef().getHelper().adjustHeight(${1:cmp})"
    },
    {
      "trigger": "helper-ui-pillContainer-showMore",
      "contents": "cmp.getDef().getHelper().showMore(${1:cmp})"
    },
    {
      "trigger": "helper-ui-pillContainer-_getActualHeight",
      "contents": "cmp.getDef().getHelper()._getActualHeight(${1:element})"
    },
    {
      "trigger": "helper-ui-pillContainer-_itemExists",
      "contents": "cmp.getDef().getHelper()._itemExists(${1:itemsList},${2:newItem})"
    },
    {
      "trigger": "helper-ui-pillContainer-_hasReachedMax",
      "contents": "cmp.getDef().getHelper()._hasReachedMax(${1:cmp},${2:items})"
    },
    {
      "trigger": "helper-ui-pillContainer-_isEqual",
      "contents": "cmp.getDef().getHelper()._isEqual(${1:object1},${2:object2})"
    },
    {
      "trigger": "helper-ui-pillContainer-_deleteItem",
      "contents": "cmp.getDef().getHelper()._deleteItem(${1:cmp},${2:data})"
    },
    {
      "trigger": "helper-ui-pillContainer-_setActiveItem",
      "contents": "cmp.getDef().getHelper()._setActiveItem(${1:cmp},${2:index})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoComplete-handleEnterKeyOnInput",
      "contents": "cmp.getDef().getHelper().handleEnterKeyOnInput(${1:component},${2:input})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoComplete-handleOtherKeyAction",
      "contents": "cmp.getDef().getHelper().handleOtherKeyAction(${1:component},${2:input},${3:event})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoComplete-handleCreatePill",
      "contents": "cmp.getDef().getHelper().handleCreatePill(${1:concrete},${2:input})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoComplete-initFetchParameters",
      "contents": "cmp.getDef().getHelper().initFetchParameters(${1:})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoComplete-handleParameterChange",
      "contents": "cmp.getDef().getHelper().handleParameterChange(${1:component},${2:parameters})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoComplete-addParentListElementAsInput",
      "contents": "cmp.getDef().getHelper().addParentListElementAsInput(${1:component})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoComplete-handleListExpand",
      "contents": "cmp.getDef().getHelper().handleListExpand(${1:component})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoComplete-_getPillContainerListElement",
      "contents": "cmp.getDef().getHelper()._getPillContainerListElement(${1:component})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoComplete-_getPillContainer",
      "contents": "cmp.getDef().getHelper()._getPillContainer(${1:component})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoComplete-getInputElement",
      "contents": "cmp.getDef().getHelper().getInputElement(${1:component})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoCompleteOption-displayText",
      "contents": "cmp.getDef().getHelper().displayText(${1:})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoCompleteOption-handleMouseover",
      "contents": "cmp.getDef().getHelper().handleMouseover(${1:})"
    },
    {
      "trigger": "helper-ui-pillContainerAutoCompleteOption-handleMouseout",
      "contents": "cmp.getDef().getHelper().handleMouseout(${1:})"
    },
    {
      "trigger": "helper-ui-popup-getTargetComponent",
      "contents": "cmp.getDef().getHelper().getTargetComponent(${1:component})"
    },
    {
      "trigger": "helper-ui-popup-getTriggerComponent",
      "contents": "cmp.getDef().getHelper().getTriggerComponent(${1:component})"
    },
    {
      "trigger": "helper-ui-popup-getComponent",
      "contents": "cmp.getDef().getHelper().getComponent(${1:component},${2:componentName})"
    },
    {
      "trigger": "helper-ui-popup-handleTriggerPress",
      "contents": "cmp.getDef().getHelper().handleTriggerPress(${1:component})"
    },
    {
      "trigger": "helper-ui-popup-handleTargetShow",
      "contents": "cmp.getDef().getHelper().handleTargetShow(${1:component})"
    },
    {
      "trigger": "helper-ui-popup-handleTargetHide",
      "contents": "cmp.getDef().getHelper().handleTargetHide(${1:component})"
    },
    {
      "trigger": "helper-ui-popup-handleKeyboardEvent",
      "contents": "cmp.getDef().getHelper().handleKeyboardEvent(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-popup-setTargetVisibility",
      "contents": "cmp.getDef().getHelper().setTargetVisibility(${1:component},${2:visible})"
    },
    {
      "trigger": "helper-ui-popup-delegateEventToTarget",
      "contents": "cmp.getDef().getHelper().delegateEventToTarget(${1:component},${2:event},${3:eventName})"
    },
    {
      "trigger": "helper-ui-popup-setEventHandlersOnChildren",
      "contents": "cmp.getDef().getHelper().setEventHandlersOnChildren(${1:component})"
    },
    {
      "trigger": "helper-ui-popup-setTriggerEventHandlers",
      "contents": "cmp.getDef().getHelper().setTriggerEventHandlers(${1:component},${2:childComponent})"
    },
    {
      "trigger": "helper-ui-popup-setTargetEventHandlers",
      "contents": "cmp.getDef().getHelper().setTargetEventHandlers(${1:component},${2:targetComponent})"
    },
    {
      "trigger": "helper-ui-popup-addCloseHandler",
      "contents": "cmp.getDef().getHelper().addCloseHandler(${1:component},${2:childComponent})"
    },
    {
      "trigger": "helper-ui-popup-handleRefresh",
      "contents": "cmp.getDef().getHelper().handleRefresh(${1:component})"
    },
    {
      "trigger": "helper-ui-popup-findElement",
      "contents": "cmp.getDef().getHelper().findElement(${1:component},${2:localId})"
    },
    {
      "trigger": "helper-ui-popupTarget-getElementCache",
      "contents": "cmp.getDef().getHelper().getElementCache(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-getTransitionEndEventName",
      "contents": "cmp.getDef().getHelper().getTransitionEndEventName(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-getTriggerComponent",
      "contents": "cmp.getDef().getHelper().getTriggerComponent(${1:element})"
    },
    {
      "trigger": "helper-ui-popupTarget-position",
      "contents": "cmp.getDef().getHelper().position(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-positionAsBodyChild",
      "contents": "cmp.getDef().getHelper().positionAsBodyChild(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-setAriaAttributes",
      "contents": "cmp.getDef().getHelper().setAriaAttributes(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-onVisibleChange",
      "contents": "cmp.getDef().getHelper().onVisibleChange(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-getOnClickEventProp",
      "contents": "cmp.getDef().getHelper().getOnClickEventProp(${1:prop})"
    },
    {
      "trigger": "helper-ui-popupTarget-getOnClickStartFunction",
      "contents": "cmp.getDef().getHelper().getOnClickStartFunction(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-getOnClickEndFunction",
      "contents": "cmp.getDef().getHelper().getOnClickEndFunction(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-getWindowBlurHandler",
      "contents": "cmp.getDef().getHelper().getWindowBlurHandler(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-getWindowResizeHandler",
      "contents": "cmp.getDef().getHelper().getWindowResizeHandler(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-isElementInComponent",
      "contents": "cmp.getDef().getHelper().isElementInComponent(${1:component},${2:targetElem})"
    },
    {
      "trigger": "helper-ui-popupTarget-addDismissEvents",
      "contents": "cmp.getDef().getHelper().addDismissEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-removeDismissEvents",
      "contents": "cmp.getDef().getHelper().removeDismissEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTarget-handleKeyboardEvent",
      "contents": "cmp.getDef().getHelper().handleKeyboardEvent(${1:})"
    },
    {
      "trigger": "helper-ui-popupTrigger-addTriggerDomEvents",
      "contents": "cmp.getDef().getHelper().addTriggerDomEvents(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTrigger-preEventFiring",
      "contents": "cmp.getDef().getHelper().preEventFiring(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-popupTrigger-handleClick",
      "contents": "cmp.getDef().getHelper().handleClick(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTrigger-handleTriggerPress",
      "contents": "cmp.getDef().getHelper().handleTriggerPress(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTrigger-showTarget",
      "contents": "cmp.getDef().getHelper().showTarget(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTrigger-hideTarget",
      "contents": "cmp.getDef().getHelper().hideTarget(${1:component})"
    },
    {
      "trigger": "helper-ui-popupTrigger-handlePopupToggle",
      "contents": "cmp.getDef().getHelper().handlePopupToggle(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-popupTrigger-firePopupEvent",
      "contents": "cmp.getDef().getHelper().firePopupEvent(${1:component},${2:eventName},${3:params})"
    },
    {
      "trigger": "helper-ui-radioMenuItem-handleClick",
      "contents": "cmp.getDef().getHelper().handleClick(${1:component})"
    },
    {
      "trigger": "helper-ui-radioToggleMenuItem-handleClick",
      "contents": "cmp.getDef().getHelper().handleClick(${1:cmp})"
    },
    {
      "trigger": "helper-ui-radioToggleMenuItem-toggleState",
      "contents": "cmp.getDef().getHelper().toggleState(${1:cmp})"
    },
    {
      "trigger": "helper-ui-radioToggleMenuItem-updateDirection",
      "contents": "cmp.getDef().getHelper().updateDirection(${1:cmp},${2:ascending})"
    },
    {
      "trigger": "helper-ui-resizeObserver-getResizer",
      "contents": "cmp.getDef().getHelper().getResizer(${1:})"
    },
    {
      "trigger": "helper-ui-resizeObserver-init",
      "contents": "cmp.getDef().getHelper().init(${1:component})"
    },
    {
      "trigger": "helper-ui-resizeObserver-update",
      "contents": "cmp.getDef().getHelper().update(${1:component})"
    },
    {
      "trigger": "helper-ui-resizeObserver-remove",
      "contents": "cmp.getDef().getHelper().remove(${1:component})"
    },
    {
      "trigger": "helper-ui-resizeObserver-updateSize",
      "contents": "cmp.getDef().getHelper().updateSize(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-initialize",
      "contents": "cmp.getDef().getHelper().initialize(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-isPluginRegistered",
      "contents": "cmp.getDef().getHelper().isPluginRegistered(${1:name})"
    },
    {
      "trigger": "helper-ui-scroller-registerPlugin",
      "contents": "cmp.getDef().getHelper().registerPlugin(${1:name},${2:constructor})"
    },
    {
      "trigger": "helper-ui-scroller-setPluginConfig",
      "contents": "cmp.getDef().getHelper().setPluginConfig(${1:component},${2:config})"
    },
    {
      "trigger": "helper-ui-scroller-initAfterRender",
      "contents": "cmp.getDef().getHelper().initAfterRender(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-getScrollerInstance",
      "contents": "cmp.getDef().getHelper().getScrollerInstance(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-setScollerInstance",
      "contents": "cmp.getDef().getHelper().setScollerInstance(${1:component},${2:scrollerInstance})"
    },
    {
      "trigger": "helper-ui-scroller-getScrollerNamespace",
      "contents": "cmp.getDef().getHelper().getScrollerNamespace(${1:})"
    },
    {
      "trigger": "helper-ui-scroller-handleScrollTo",
      "contents": "cmp.getDef().getHelper().handleScrollTo(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-scroller-handleScrollBy",
      "contents": "cmp.getDef().getHelper().handleScrollBy(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-scroller-swapShowMore",
      "contents": "cmp.getDef().getHelper().swapShowMore(${1:cmp},${2:newValue})"
    },
    {
      "trigger": "helper-ui-scroller-swapRefresh",
      "contents": "cmp.getDef().getHelper().swapRefresh(${1:cmp},${2:newValue})"
    },
    {
      "trigger": "helper-ui-scroller-_bind",
      "contents": "cmp.getDef().getHelper()._bind(${1:method})"
    },
    {
      "trigger": "helper-ui-scroller-_getScrollerWrapper",
      "contents": "cmp.getDef().getHelper()._getScrollerWrapper(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-_getPullToRefreshConfig",
      "contents": "cmp.getDef().getHelper()._getPullToRefreshConfig(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-_getPullToLoadMoreConfig",
      "contents": "cmp.getDef().getHelper()._getPullToLoadMoreConfig(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-_getInfiniteLoadingConfig",
      "contents": "cmp.getDef().getHelper()._getInfiniteLoadingConfig(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-_getVoiceOverConfig",
      "contents": "cmp.getDef().getHelper()._getVoiceOverConfig(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-_getPlugins",
      "contents": "cmp.getDef().getHelper()._getPlugins(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-_mapAuraScrollerOptions",
      "contents": "cmp.getDef().getHelper()._mapAuraScrollerOptions(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-_bridgeScrollerCallback",
      "contents": "cmp.getDef().getHelper()._bridgeScrollerCallback(${1:component},${2:auraAction},${3:callback})"
    },
    {
      "trigger": "helper-ui-scroller-_bridgeScrollerAction",
      "contents": "cmp.getDef().getHelper()._bridgeScrollerAction(${1:component},${2:scrollerInstance},${3:actionName})"
    },
    {
      "trigger": "helper-ui-scroller-_preventDefault",
      "contents": "cmp.getDef().getHelper()._preventDefault(${1:e})"
    },
    {
      "trigger": "helper-ui-scroller-_attachAuraEvents",
      "contents": "cmp.getDef().getHelper()._attachAuraEvents(${1:component},${2:scrollerInstance})"
    },
    {
      "trigger": "helper-ui-scroller-_stopNativeDragging",
      "contents": "cmp.getDef().getHelper()._stopNativeDragging(${1:component})"
    },
    {
      "trigger": "helper-ui-scroller-deactivate",
      "contents": "cmp.getDef().getHelper().deactivate(${1:component})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-refresh",
      "contents": "cmp.getDef().getHelper().refresh(${1:component})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-refreshScroller",
      "contents": "cmp.getDef().getHelper().refreshScroller(${1:component})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-swapShowMore",
      "contents": "cmp.getDef().getHelper().swapShowMore(${1:cmp})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-handleScrollTo",
      "contents": "cmp.getDef().getHelper().handleScrollTo(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-handleScrollBy",
      "contents": "cmp.getDef().getHelper().handleScrollBy(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-parseIntHelper",
      "contents": "cmp.getDef().getHelper().parseIntHelper(${1:str})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-heightOffsetHelper",
      "contents": "cmp.getDef().getHelper().heightOffsetHelper(${1:component})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-init",
      "contents": "cmp.getDef().getHelper().init(${1:component})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-trackActiveInstance",
      "contents": "cmp.getDef().getHelper().trackActiveInstance(${1:component})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-initImageOnload",
      "contents": "cmp.getDef().getHelper().initImageOnload(${1:component})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-initWidth",
      "contents": "cmp.getDef().getHelper().initWidth(${1:component})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-deactivate",
      "contents": "cmp.getDef().getHelper().deactivate(${1:component})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-validateScrollers",
      "contents": "cmp.getDef().getHelper().validateScrollers(${1:})"
    },
    {
      "trigger": "helper-ui-scrollerDeprecated-initIScroll",
      "contents": "cmp.getDef().getHelper().initIScroll(${1:})"
    },
    {
      "trigger": "helper-ui-tabBar-activateTab",
      "contents": "cmp.getDef().getHelper().activateTab(${1:cmp},${2:index},${3:focus})"
    },
    {
      "trigger": "helper-ui-tabBar-closeTab",
      "contents": "cmp.getDef().getHelper().closeTab(${1:cmp},${2:index})"
    },
    {
      "trigger": "helper-ui-tabBar-addTab",
      "contents": "cmp.getDef().getHelper().addTab(${1:cmp},${2:index},${3:tab})"
    },
    {
      "trigger": "helper-ui-tabBar-deactivateTab",
      "contents": "cmp.getDef().getHelper().deactivateTab(${1:cmp},${2:activeTab})"
    },
    {
      "trigger": "helper-ui-tabBar-onKeyDown",
      "contents": "cmp.getDef().getHelper().onKeyDown(${1:cmp},${2:domEvent})"
    },
    {
      "trigger": "helper-ui-tabBar-getTabIndex",
      "contents": "cmp.getDef().getHelper().getTabIndex(${1:cmp},${2:element},${3:visible})"
    },
    {
      "trigger": "helper-ui-tabBar-setTabItems",
      "contents": "cmp.getDef().getHelper().setTabItems(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabBar-createComponents",
      "contents": "cmp.getDef().getHelper().createComponents(${1:cmp},${2:tabValues},${3:callback})"
    },
    {
      "trigger": "helper-ui-tabBar-calculateMaxTabs",
      "contents": "cmp.getDef().getHelper().calculateMaxTabs(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabBar-getMustShowTabs",
      "contents": "cmp.getDef().getHelper().getMustShowTabs(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabBar-getActiveTabWidth",
      "contents": "cmp.getDef().getHelper().getActiveTabWidth(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabBar-getOverflowMenuWidth",
      "contents": "cmp.getDef().getHelper().getOverflowMenuWidth(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabBar-initializeOverflowData",
      "contents": "cmp.getDef().getHelper().initializeOverflowData(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabBar-getBarWidth",
      "contents": "cmp.getDef().getHelper().getBarWidth(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabBar-getOuterWidth",
      "contents": "cmp.getDef().getHelper().getOuterWidth(${1:el})"
    },
    {
      "trigger": "helper-ui-tabBar-adjustOverflow",
      "contents": "cmp.getDef().getHelper().adjustOverflow(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabBar-updateVisibleTabs",
      "contents": "cmp.getDef().getHelper().updateVisibleTabs(${1:overflowData},${2:tabItems},${3:startIndex})"
    },
    {
      "trigger": "helper-ui-tabBar-toggleOverflowMenu",
      "contents": "cmp.getDef().getHelper().toggleOverflowMenu(${1:cmp},${2:visible})"
    },
    {
      "trigger": "helper-ui-tabBar-updateOverflowTab",
      "contents": "cmp.getDef().getHelper().updateOverflowTab(${1:cmp},${2:index})"
    },
    {
      "trigger": "helper-ui-tabBar-findVisibleTabsToReplace",
      "contents": "cmp.getDef().getHelper().findVisibleTabsToReplace(${1:cmp},${2:overflowData},${3:sourceTab},${4:targetTab})"
    },
    {
      "trigger": "helper-ui-tabBar-insertMenuItem",
      "contents": "cmp.getDef().getHelper().insertMenuItem(${1:cmp},${2:tabItem},${3:menuList})"
    },
    {
      "trigger": "helper-ui-tabBar-toggleTab",
      "contents": "cmp.getDef().getHelper().toggleTab(${1:tab},${2:condition})"
    },
    {
      "trigger": "helper-ui-tabBar-isInOverflow",
      "contents": "cmp.getDef().getHelper().isInOverflow(${1:cmp},${2:key})"
    },
    {
      "trigger": "helper-ui-tabBar-getTabName",
      "contents": "cmp.getDef().getHelper().getTabName(${1:tab})"
    },
    {
      "trigger": "helper-ui-tabBar-getOverflowData",
      "contents": "cmp.getDef().getHelper().getOverflowData(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabBar-createMenuItemFromTab",
      "contents": "cmp.getDef().getHelper().createMenuItemFromTab(${1:tab},${2:tabIndex})"
    },
    {
      "trigger": "helper-ui-tabBar-createMenuItem",
      "contents": "cmp.getDef().getHelper().createMenuItem(${1:id},${2:label},${3:value})"
    },
    {
      "trigger": "helper-ui-tabItem-setActive",
      "contents": "cmp.getDef().getHelper().setActive(${1:cmp},${2:active},${3:focus})"
    },
    {
      "trigger": "helper-ui-tabItem-getTabItemElement",
      "contents": "cmp.getDef().getHelper().getTabItemElement(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabItem-handleHoverEvent",
      "contents": "cmp.getDef().getHelper().handleHoverEvent(${1:cmp},${2:eventName})"
    },
    {
      "trigger": "helper-ui-tabItem-initWidth",
      "contents": "cmp.getDef().getHelper().initWidth(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabOverflowMenuItem-handleHoverEvent",
      "contents": "cmp.getDef().getHelper().handleHoverEvent(${1:cmp},${2:eventName})"
    },
    {
      "trigger": "helper-ui-tabOverflowMenuItem-updateMenuItems",
      "contents": "cmp.getDef().getHelper().updateMenuItems(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabOverflowMenuItem-getMenuItemCache",
      "contents": "cmp.getDef().getHelper().getMenuItemCache(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabOverflowMenuItem-updateMenuList",
      "contents": "cmp.getDef().getHelper().updateMenuList(${1:cmp},${2:menuItems})"
    },
    {
      "trigger": "helper-ui-tabOverflowMenuItem-triggerTab",
      "contents": "cmp.getDef().getHelper().triggerTab(${1:cmp},${2:name},${3:index},${4:focus})"
    },
    {
      "trigger": "helper-ui-tabOverflowMenuList-setFocusToNextItem",
      "contents": "cmp.getDef().getHelper().setFocusToNextItem(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-tabOverflowMenuList-setFocusToPreviousItem",
      "contents": "cmp.getDef().getHelper().setFocusToPreviousItem(${1:component},${2:event})"
    },
    {
      "trigger": "helper-ui-tabset-setActive",
      "contents": "cmp.getDef().getHelper().setActive(${1:cmp},${2:option})"
    },
    {
      "trigger": "helper-ui-tabset-addTab",
      "contents": "cmp.getDef().getHelper().addTab(${1:cmp},${2:index},${3:tab},${4:callback})"
    },
    {
      "trigger": "helper-ui-tabset-removeTab",
      "contents": "cmp.getDef().getHelper().removeTab(${1:cmp},${2:index})"
    },
    {
      "trigger": "helper-ui-tabset-getActiveTab",
      "contents": "cmp.getDef().getHelper().getActiveTab(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabset-fireBeforeActiveEvent",
      "contents": "cmp.getDef().getHelper().fireBeforeActiveEvent(${1:cmp},${2:params},${3:target})"
    },
    {
      "trigger": "helper-ui-tabset-getTabIndexFromEvent",
      "contents": "cmp.getDef().getHelper().getTabIndexFromEvent(${1:cmp},${2:evt})"
    },
    {
      "trigger": "helper-ui-tabset-setActiveTabBody",
      "contents": "cmp.getDef().getHelper().setActiveTabBody(${1:cmp},${2:option})"
    },
    {
      "trigger": "helper-ui-tabset-removeTabBody",
      "contents": "cmp.getDef().getHelper().removeTabBody(${1:cmp},${2:index})"
    },
    {
      "trigger": "helper-ui-tabset-initTabs",
      "contents": "cmp.getDef().getHelper().initTabs(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabset-finishInit",
      "contents": "cmp.getDef().getHelper().finishInit(${1:cmp},${2:result})"
    },
    {
      "trigger": "helper-ui-tabset-createTabsFromAttribute",
      "contents": "cmp.getDef().getHelper().createTabsFromAttribute(${1:cmp},${2:tabConfigs})"
    },
    {
      "trigger": "helper-ui-tabset-getTabsFromBody",
      "contents": "cmp.getDef().getHelper().getTabsFromBody(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabset-createTabComponent",
      "contents": "cmp.getDef().getHelper().createTabComponent(${1:cmp},${2:tabConfig},${3:callback})"
    },
    {
      "trigger": "helper-ui-tabset-getTabItemConfig",
      "contents": "cmp.getDef().getHelper().getTabItemConfig(${1:cmp},${2:tab})"
    },
    {
      "trigger": "helper-ui-tabset-getTabComponents",
      "contents": "cmp.getDef().getHelper().getTabComponents(${1:body})"
    },
    {
      "trigger": "helper-ui-tabset-_getTabComponent",
      "contents": "cmp.getDef().getHelper()._getTabComponent(${1:cmp},${2:type})"
    },
    {
      "trigger": "helper-ui-tabset-_getSuperest",
      "contents": "cmp.getDef().getHelper()._getSuperest(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabset-unrender",
      "contents": "cmp.getDef().getHelper().unrender(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tabset-createTabCollection",
      "contents": "cmp.getDef().getHelper().createTabCollection(${1:})"
    },
    {
      "trigger": "helper-ui-timePicker-convertFrom24To12",
      "contents": "cmp.getDef().getHelper().convertFrom24To12(${1:component},${2:hours})"
    },
    {
      "trigger": "helper-ui-timePicker-localizeAmpmLabel",
      "contents": "cmp.getDef().getHelper().localizeAmpmLabel(${1:component})"
    },
    {
      "trigger": "helper-ui-timePicker-renderTime",
      "contents": "cmp.getDef().getHelper().renderTime(${1:component})"
    },
    {
      "trigger": "helper-ui-timePicker-updateHourValue",
      "contents": "cmp.getDef().getHelper().updateHourValue(${1:component},${2:hours})"
    },
    {
      "trigger": "helper-ui-timePicker-updateMinuteValue",
      "contents": "cmp.getDef().getHelper().updateMinuteValue(${1:component},${2:minutes})"
    },
    {
      "trigger": "helper-ui-timePicker-validateNumber",
      "contents": "cmp.getDef().getHelper().validateNumber(${1:value},${2:min},${3:max})"
    },
    {
      "trigger": "helper-ui-timePicker-validateHours",
      "contents": "cmp.getDef().getHelper().validateHours(${1:component})"
    },
    {
      "trigger": "helper-ui-timePicker-validateMinutes",
      "contents": "cmp.getDef().getHelper().validateMinutes(${1:component})"
    },
    {
      "trigger": "helper-ui-tooltip-initStyle",
      "contents": "cmp.getDef().getHelper().initStyle(${1:component})"
    },
    {
      "trigger": "helper-ui-tooltip-updateBodyText",
      "contents": "cmp.getDef().getHelper().updateBodyText(${1:component})"
    },
    {
      "trigger": "helper-ui-tooltip-buildTooltip",
      "contents": "cmp.getDef().getHelper().buildTooltip(${1:component},${2:cb})"
    },
    {
      "trigger": "helper-ui-tooltip-_doUpdatePosition",
      "contents": "cmp.getDef().getHelper()._doUpdatePosition(${1:})"
    },
    {
      "trigger": "helper-ui-tooltip-_handlePositionEvents",
      "contents": "cmp.getDef().getHelper()._handlePositionEvents(${1:ev},${2:component})"
    },
    {
      "trigger": "helper-ui-tooltip-show",
      "contents": "cmp.getDef().getHelper().show(${1:component})"
    },
    {
      "trigger": "helper-ui-tooltip-updatePosition",
      "contents": "cmp.getDef().getHelper().updatePosition(${1:component},${2:async})"
    },
    {
      "trigger": "helper-ui-tooltip-hide",
      "contents": "cmp.getDef().getHelper().hide(${1:component})"
    },
    {
      "trigger": "helper-ui-tooltip-toggle",
      "contents": "cmp.getDef().getHelper().toggle(${1:component})"
    },
    {
      "trigger": "helper-ui-tooltip-cleanup",
      "contents": "cmp.getDef().getHelper().cleanup(${1:component})"
    },
    {
      "trigger": "helper-ui-tooltip-makeTrigger",
      "contents": "cmp.getDef().getHelper().makeTrigger(${1:component})"
    },
    {
      "trigger": "helper-ui-tooltipAdvanced-getClassList",
      "contents": "cmp.getDef().getHelper().getClassList(${1:})"
    },
    {
      "trigger": "helper-ui-tooltipAdvanced-initStyle",
      "contents": "cmp.getDef().getHelper().initStyle(${1:component})"
    },
    {
      "trigger": "helper-ui-tooltipAdvanced-show",
      "contents": "cmp.getDef().getHelper().show(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tooltipAdvanced-hide",
      "contents": "cmp.getDef().getHelper().hide(${1:cmp})"
    },
    {
      "trigger": "helper-ui-tooltipAdvanced-position",
      "contents": "cmp.getDef().getHelper().position(${1:component})"
    },
    {
      "trigger": "helper-ui-tooltipAdvanced-updateConstraints",
      "contents": "cmp.getDef().getHelper().updateConstraints(${1:component})"
    },
    {
      "trigger": "helper-ui-treeNode-getChildren",
      "contents": "cmp.getDef().getHelper().getChildren(${1:node})"
    },
    {
      "trigger": "helper-ui-treeNode-initPostOrderTraverser",
      "contents": "cmp.getDef().getHelper().initPostOrderTraverser(${1:})"
    },
    {
      "trigger": "helper-ui-treeNode-initPreOrderTraverser",
      "contents": "cmp.getDef().getHelper().initPreOrderTraverser(${1:})"
    },
    {
      "trigger": "helper-ui-treeNode-initPrintVisitor",
      "contents": "cmp.getDef().getHelper().initPrintVisitor(${1:})"
    },
    {
      "trigger": "helper-ui-treeNode-initApplyVisitor",
      "contents": "cmp.getDef().getHelper().initApplyVisitor(${1:funcToApply})"
    },
    {
      "trigger": "helper-ui-treeNode-initCollapseVisitor",
      "contents": "cmp.getDef().getHelper().initCollapseVisitor(${1:})"
    },
    {
      "trigger": "helper-ui-vbox-filterEmptyTextNodes",
      "contents": "cmp.getDef().getHelper().filterEmptyTextNodes(${1:el})"
    },
    {
      "trigger": "helper-ui-vbox-updateContainer",
      "contents": "cmp.getDef().getHelper().updateContainer(${1:component})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-initialize",
      "contents": "cmp.getDef().getHelper().initialize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-reset",
      "contents": "cmp.getDef().getHelper().reset(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-verifyInterfaces",
      "contents": "cmp.getDef().getHelper().verifyInterfaces(${1:})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-initializeDataModel",
      "contents": "cmp.getDef().getHelper().initializeDataModel(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-initializeItems",
      "contents": "cmp.getDef().getHelper().initializeItems(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-initializeTemplates",
      "contents": "cmp.getDef().getHelper().initializeTemplates(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-initializeFixedHeader",
      "contents": "cmp.getDef().getHelper().initializeFixedHeader(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-updateSizesForFixedHeader",
      "contents": "cmp.getDef().getHelper().updateSizesForFixedHeader(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-virtualRerender",
      "contents": "cmp.getDef().getHelper().virtualRerender(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-onItemChange",
      "contents": "cmp.getDef().getHelper().onItemChange(${1:ptv})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-getGridBody",
      "contents": "cmp.getDef().getHelper().getGridBody(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-markClean",
      "contents": "cmp.getDef().getHelper().markClean(${1:cmp},${2:value})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-markDirty",
      "contents": "cmp.getDef().getHelper().markDirty(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_initializeRowTemplate",
      "contents": "cmp.getDef().getHelper()._initializeRowTemplate(${1:templates},${2:useRowHeader})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_createColumn",
      "contents": "cmp.getDef().getHelper()._createColumn(${1:elementTemplate},${2:columnTemplate})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_createPassthroughValue",
      "contents": "cmp.getDef().getHelper()._createPassthroughValue(${1:cmp},${2:itemVar},${3:item},${4:rowIndex})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-createEventDelegates",
      "contents": "cmp.getDef().getHelper().createEventDelegates(${1:cmp},${2:container})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_getRenderingComponentForElement",
      "contents": "cmp.getDef().getHelper()._getRenderingComponentForElement(${1:domElement})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_dispatchAction",
      "contents": "cmp.getDef().getHelper()._dispatchAction(${1:actionHandler},${2:event})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_getActionHandler",
      "contents": "cmp.getDef().getHelper()._getActionHandler(${1:htmlCmp},${2:eventType})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_eventDelegator",
      "contents": "cmp.getDef().getHelper()._eventDelegator(${1:cmp},${2:e})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_findVirtualElementPosition",
      "contents": "cmp.getDef().getHelper()._findVirtualElementPosition(${1:items},${2:elmt})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_replaceDOMElement",
      "contents": "cmp.getDef().getHelper()._replaceDOMElement(${1:parent},${2:newChild},${3:oldChild})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_rerenderDirtyElement",
      "contents": "cmp.getDef().getHelper()._rerenderDirtyElement(${1:cmp},${2:item},${3:oldElement})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_generateVirtualRow",
      "contents": "cmp.getDef().getHelper()._generateVirtualRow(${1:cmp},${2:item},${3:index})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_getItemAttached",
      "contents": "cmp.getDef().getHelper()._getItemAttached(${1:dom})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_attachItemToElement",
      "contents": "cmp.getDef().getHelper()._attachItemToElement(${1:dom},${2:item})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_attachIndexToElement",
      "contents": "cmp.getDef().getHelper()._attachIndexToElement(${1:dom},${2:index})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-_getRowIndex",
      "contents": "cmp.getDef().getHelper()._getRowIndex(${1:el})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-appendVirtualRows",
      "contents": "cmp.getDef().getHelper().appendVirtualRows(${1:cmp},${2:items})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-createVirtualRows",
      "contents": "cmp.getDef().getHelper().createVirtualRows(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-selectRow",
      "contents": "cmp.getDef().getHelper().selectRow(${1:cmp},${2:index},${3:value})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-initializeSorting",
      "contents": "cmp.getDef().getHelper().initializeSorting(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-updateSortData",
      "contents": "cmp.getDef().getHelper().updateSortData(${1:cmp},${2:sortBy})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-sortCallback",
      "contents": "cmp.getDef().getHelper().sortCallback(${1:cmp},${2:response})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-enableColumnResizer",
      "contents": "cmp.getDef().getHelper().enableColumnResizer(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-getResizer",
      "contents": "cmp.getDef().getHelper().getResizer(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-updateColumnResizer",
      "contents": "cmp.getDef().getHelper().updateColumnResizer(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-updateResizerAccessibilityLabels",
      "contents": "cmp.getDef().getHelper().updateResizerAccessibilityLabels(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-attachColResizerHandlers",
      "contents": "cmp.getDef().getHelper().attachColResizerHandlers(${1:cmp},${2:resizer})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-resizeColumns",
      "contents": "cmp.getDef().getHelper().resizeColumns(${1:cmp},${2:widths})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-hasResizerHandles",
      "contents": "cmp.getDef().getHelper().hasResizerHandles(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualDataGrid-destroyTemplates",
      "contents": "cmp.getDef().getHelper().destroyTemplates(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualList-initialize",
      "contents": "cmp.getDef().getHelper().initialize(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualList-initializeBody",
      "contents": "cmp.getDef().getHelper().initializeBody(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualList-initializeDataModel",
      "contents": "cmp.getDef().getHelper().initializeDataModel(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualList-_createPassthroughValue",
      "contents": "cmp.getDef().getHelper()._createPassthroughValue(${1:cmp},${2:itemVar},${3:item})"
    },
    {
      "trigger": "helper-ui-virtualList-onItemChange",
      "contents": "cmp.getDef().getHelper().onItemChange(${1:cmp},${2:ptv},${3:evt})"
    },
    {
      "trigger": "helper-ui-virtualList-ignorePTVChanges",
      "contents": "cmp.getDef().getHelper().ignorePTVChanges(${1:cmp},${2:ignore})"
    },
    {
      "trigger": "helper-ui-virtualList-_initializeItemTemplate",
      "contents": "cmp.getDef().getHelper()._initializeItemTemplate(${1:cmpTemplate})"
    },
    {
      "trigger": "helper-ui-virtualList-initializeTemplate",
      "contents": "cmp.getDef().getHelper().initializeTemplate(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualList-initializeItems",
      "contents": "cmp.getDef().getHelper().initializeItems(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualList-_attachItemToElement",
      "contents": "cmp.getDef().getHelper()._attachItemToElement(${1:dom},${2:item})"
    },
    {
      "trigger": "helper-ui-virtualList-_generateVirtualItem",
      "contents": "cmp.getDef().getHelper()._generateVirtualItem(${1:cmp},${2:item})"
    },
    {
      "trigger": "helper-ui-virtualList-createVirtualList",
      "contents": "cmp.getDef().getHelper().createVirtualList(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualList-getListBody",
      "contents": "cmp.getDef().getHelper().getListBody(${1:cmp},${2:dom})"
    },
    {
      "trigger": "helper-ui-virtualList-markClean",
      "contents": "cmp.getDef().getHelper().markClean(${1:cmp},${2:value})"
    },
    {
      "trigger": "helper-ui-virtualList-markDirty",
      "contents": "cmp.getDef().getHelper().markDirty(${1:cmp})"
    },
    {
      "trigger": "helper-ui-virtualList-createEventDelegates",
      "contents": "cmp.getDef().getHelper().createEventDelegates(${1:cmp},${2:container})"
    },
    {
      "trigger": "helper-ui-virtualList-_findVirtualElementPosition",
      "contents": "cmp.getDef().getHelper()._findVirtualElementPosition(${1:virtualElements},${2:item},${3:element})"
    },
    {
      "trigger": "helper-ui-virtualList-_replaceDOMElement",
      "contents": "cmp.getDef().getHelper()._replaceDOMElement(${1:parent},${2:newChild},${3:oldChild})"
    },
    {
      "trigger": "helper-ui-virtualList-_rerenderDirtyElement",
      "contents": "cmp.getDef().getHelper()._rerenderDirtyElement(${1:cmp},${2:item},${3:oldElement})"
    },
    {
      "trigger": "helper-ui-virtualList-_getRenderingComponentForElement",
      "contents": "cmp.getDef().getHelper()._getRenderingComponentForElement(${1:domElement})"
    },
    {
      "trigger": "helper-ui-virtualList-_dispatchAction",
      "contents": "cmp.getDef().getHelper()._dispatchAction(${1:actionHandler},${2:event})"
    },
    {
      "trigger": "helper-ui-virtualList-_getItemAttached",
      "contents": "cmp.getDef().getHelper()._getItemAttached(${1:dom})"
    },
    {
      "trigger": "helper-ui-virtualList-_getActionHandler",
      "contents": "cmp.getDef().getHelper()._getActionHandler(${1:htmlCmp},${2:eventType})"
    },
    {
      "trigger": "helper-ui-virtualList-_eventDelegator",
      "contents": "cmp.getDef().getHelper()._eventDelegator(${1:cmp},${2:e})"
    },
    {
      "trigger": "helper-actionsTest-deferredServerAction-getSuccess",
      "contents": "cmp.getDef().getHelper().getSuccess(${1:cmp})"
    },
    {
      "trigger": "helper-actionsTest-deferredServerAction-getError",
      "contents": "cmp.getDef().getHelper().getError(${1:cmp})"
    },
    {
      "trigger": "helper-actionsTest-transactions-insertResponse",
      "contents": "cmp.getDef().getHelper().insertResponse(${1:cmp},${2:a})"
    },
    {
      "trigger": "helper-actionsTest-transactions-handleCb",
      "contents": "cmp.getDef().getHelper().handleCb(${1:cmp},${2:action},${3:callback})"
    },
    {
      "trigger": "helper-actionsTest-transactions-sendAction",
      "contents": "cmp.getDef().getHelper().sendAction(${1:cmp},${2:abortable},${3:transactionId},${4:callback})"
    },
    {
      "trigger": "helper-auraStorageTest-initTest-resetCounters",
      "contents": "cmp.getDef().getHelper().resetCounters(${1:cmp},${2:_testName})"
    },
    {
      "trigger": "helper-auraStorageTest-initTest-executeAction",
      "contents": "cmp.getDef().getHelper().executeAction(${1:cmp},${2:actionName},${3:actionParam},${4:additionalProperties},${5:extraCallback})"
    },
    {
      "trigger": "helper-auraStorageTest-initTest-findAndSetText",
      "contents": "cmp.getDef().getHelper().findAndSetText(${1:cmp},${2:targetCmpId},${3:msg})"
    },
    {
      "trigger": "helper-auraStorageTest-newComponent-resetCounters",
      "contents": "cmp.getDef().getHelper().resetCounters(${1:cmp},${2:_testName})"
    },
    {
      "trigger": "helper-auraStorageTest-newComponent-setCounter",
      "contents": "cmp.getDef().getHelper().setCounter(${1:cmp},${2:newValue})"
    },
    {
      "trigger": "helper-auraStorageTest-newComponent-getTeamAndPlayers",
      "contents": "cmp.getDef().getHelper().getTeamAndPlayers(${1:cmp},${2:storable})"
    },
    {
      "trigger": "helper-auraStorageTest-newComponent-getTeamAndTeam",
      "contents": "cmp.getDef().getHelper().getTeamAndTeam(${1:cmp},${2:storable})"
    },
    {
      "trigger": "helper-auraStorageTest-newComponent-getTeamOnly",
      "contents": "cmp.getDef().getHelper().getTeamOnly(${1:cmp,storable})"
    },
    {
      "trigger": "helper-auraStorageTest-newComponent-getPlayersOnly",
      "contents": "cmp.getDef().getHelper().getPlayersOnly(${1:cmp,storable})"
    },
    {
      "trigger": "helper-auraStorageTest-newComponent-findAndSetText",
      "contents": "cmp.getDef().getHelper().findAndSetText(${1:cmp},${2:targetCmpId},${3:msg})"
    },
    {
      "trigger": "helper-auraStorageTest-newComponent-findAndAppendText",
      "contents": "cmp.getDef().getHelper().findAndAppendText(${1:cmp},${2:targetCmpId},${3:msg})"
    },
    {
      "trigger": "helper-auratest-componentClassChild-getDelimiter",
      "contents": "cmp.getDef().getHelper().getDelimiter(${1:cmp})"
    },
    {
      "trigger": "helper-auratest-componentClassClientProvider-getDelimiter",
      "contents": "cmp.getDef().getHelper().getDelimiter(${1:})"
    },
    {
      "trigger": "helper-auratest-componentClassGrandChildClientProvider-getDelimiter",
      "contents": "cmp.getDef().getHelper().getDelimiter(${1:cmp})"
    },
    {
      "trigger": "helper-auratest-componentClassGrandChildServerProvider-getDelimiter",
      "contents": "cmp.getDef().getHelper().getDelimiter(${1:})"
    },
    {
      "trigger": "helper-auratest-componentClassInner-getDelimiter",
      "contents": "cmp.getDef().getHelper().getDelimiter(${1:cmp})"
    },
    {
      "trigger": "helper-auratest-componentClassOuter-getDelimiter",
      "contents": "cmp.getDef().getHelper().getDelimiter(${1:cmp})"
    },
    {
      "trigger": "helper-auratest-componentClassParent-getDelimiter",
      "contents": "cmp.getDef().getHelper().getDelimiter(${1:cmp})"
    },
    {
      "trigger": "helper-auratest-componentClassServerProvider-getDelimiter",
      "contents": "cmp.getDef().getHelper().getDelimiter(${1:})"
    },
    {
      "trigger": "helper-auratest-fastClickDomEvents-setOutput",
      "contents": "cmp.getDef().getHelper().setOutput(${1:c},${2:evt},${3:field})"
    },
    {
      "trigger": "helper-auratest-require-updateVersion",
      "contents": "cmp.getDef().getHelper().updateVersion(${1:cmp},${2:version})"
    },
    {
      "trigger": "helper-auratest-require-updateComponentExist",
      "contents": "cmp.getDef().getHelper().updateComponentExist(${1:cmp},${2:exist})"
    },
    {
      "trigger": "helper-auratest-requireWithServerAction-updateVersion",
      "contents": "cmp.getDef().getHelper().updateVersion(${1:cmp},${2:version})"
    },
    {
      "trigger": "helper-auratest-requireWithServerAction-updateText",
      "contents": "cmp.getDef().getHelper().updateText(${1:cmp},${2:str})"
    },
    {
      "trigger": "helper-componentTest-componentApi-helperFunction",
      "contents": "cmp.getDef().getHelper().helperFunction(${1:})"
    },
    {
      "trigger": "helper-componentTest-componentBodyWithChanges-newComponent",
      "contents": "cmp.getDef().getHelper().newComponent(${1:cmp},${2:item})"
    },
    {
      "trigger": "helper-componentTest-componentBodyWithChanges-newComponentList",
      "contents": "cmp.getDef().getHelper().newComponentList(${1:cmp},${2:items})"
    },
    {
      "trigger": "helper-componentTest-helperContainedCmp-getMessage",
      "contents": "cmp.getDef().getHelper().getMessage(${1:})"
    },
    {
      "trigger": "helper-componentTest-helperExplicit-getMessageFromAutowiredHelperMethod",
      "contents": "cmp.getDef().getHelper().getMessageFromAutowiredHelperMethod(${1:})"
    },
    {
      "trigger": "helper-componentTest-helperSuper-getMessageFromSuperCmp",
      "contents": "cmp.getDef().getHelper().getMessageFromSuperCmp(${1:})"
    },
    {
      "trigger": "helper-componentTest-helperSuper-getAwesomeMessage",
      "contents": "cmp.getDef().getHelper().getAwesomeMessage(${1:})"
    },
    {
      "trigger": "helper-componentTest-helperSuper-getSuperAwesomeMessage",
      "contents": "cmp.getDef().getHelper().getSuperAwesomeMessage(${1:})"
    },
    {
      "trigger": "helper-componentTest-helperSuperSuper-getMessageFromSuperSuperCmp",
      "contents": "cmp.getDef().getHelper().getMessageFromSuperSuperCmp(${1:})"
    },
    {
      "trigger": "helper-componentTest-helperSuperSuper-getSuperAwesomeMessage",
      "contents": "cmp.getDef().getHelper().getSuperAwesomeMessage(${1:})"
    },
    {
      "trigger": "helper-componentTest-versionInServer-updateVersion",
      "contents": "cmp.getDef().getHelper().updateVersion(${1:cmp},${2:version})"
    },
    {
      "trigger": "helper-componentTest-versioning-updateVersion",
      "contents": "cmp.getDef().getHelper().updateVersion(${1:cmp},${2:version})"
    },
    {
      "trigger": "helper-expressionTest-bodyAttribute-clearCmpBody",
      "contents": "cmp.getDef().getHelper().clearCmpBody(${1:cmp},${2:id})"
    },
    {
      "trigger": "helper-expressionTest-bodyAttribute-setCmpBody",
      "contents": "cmp.getDef().getHelper().setCmpBody(${1:cmp},${2:id})"
    },
    {
      "trigger": "helper-expressionTest-bodyAttribute-addCmpBody",
      "contents": "cmp.getDef().getHelper().addCmpBody(${1:cmp},${2:id})"
    },
    {
      "trigger": "helper-expressionTest-suite-checkForErrors",
      "contents": "cmp.getDef().getHelper().checkForErrors(${1:cmp})"
    },
    {
      "trigger": "helper-gvpTest-parseLabels-someDummyHelperFunction1",
      "contents": "cmp.getDef().getHelper().someDummyHelperFunction1(${1:cmp})"
    },
    {
      "trigger": "helper-gvpTest-parseLabels-someDummyHelperFunction2",
      "contents": "cmp.getDef().getHelper().someDummyHelperFunction2(${1:cmp})"
    },
    {
      "trigger": "helper-gvpTest-parseLabels-someDummyHelperFunction3",
      "contents": "cmp.getDef().getHelper().someDummyHelperFunction3(${1:cmp})"
    },
    {
      "trigger": "helper-gvpTest-parseLabels-someDummyHelperFunction4",
      "contents": "cmp.getDef().getHelper().someDummyHelperFunction4(${1:cmp})"
    },
    {
      "trigger": "helper-gvpTest-parseLabels-someDummyHelperFunction5",
      "contents": "cmp.getDef().getHelper().someDummyHelperFunction5(${1:cmp})"
    },
    {
      "trigger": "helper-gvpTest-parseLabels-curiousCaseOfBenjamin",
      "contents": "cmp.getDef().getHelper().curiousCaseOfBenjamin(${1:cmp})"
    },
    {
      "trigger": "helper-gvpTest-parseLabels-anotherCuriousCase",
      "contents": "cmp.getDef().getHelper().anotherCuriousCase(${1:})"
    },
    {
      "trigger": "helper-loadLevelTest-lazyLoadHelper-verifyLazyLoading",
      "contents": "cmp.getDef().getHelper().verifyLazyLoading(${1:cmp},${2:lazyCmpId_qualifiedName_map},${3:waitIds},${4:callbackAfterLoad})"
    },
    {
      "trigger": "helper-loadLevelTest-lazyLoadHelper-resumeGateId",
      "contents": "cmp.getDef().getHelper().resumeGateId(${1:cmp},${2:waitId})"
    },
    {
      "trigger": "helper-loadLevelTest-newCmpWithValueProvider-createComponentAndPushToBody",
      "contents": "cmp.getDef().getHelper().createComponentAndPushToBody(${1:cmp},${2:config},${3:attributeValueProvider},${4:localCreation},${5:doForce},${6:forceServer})"
    },
    {
      "trigger": "helper-lockerTest-basic-helperMethod",
      "contents": "cmp.getDef().getHelper().helperMethod(${1:})"
    },
    {
      "trigger": "helper-lockerTest-basic-log",
      "contents": "cmp.getDef().getHelper().log(${1:component},${2:message})"
    },
    {
      "trigger": "helper-lockerTest-basic-testSymbol",
      "contents": "cmp.getDef().getHelper().testSymbol(${1:symbol})"
    },
    {
      "trigger": "helper-lockerTest-basic-verifyElementCount",
      "contents": "cmp.getDef().getHelper().verifyElementCount(${1:className},${2:expected})"
    },
    {
      "trigger": "helper-lockerTest-basic-indexOfLeftMatchingBracket",
      "contents": "cmp.getDef().getHelper().indexOfLeftMatchingBracket(${1:text})"
    },
    {
      "trigger": "helper-lockerTest-basic-findBoundsOfExpression",
      "contents": "cmp.getDef().getHelper().findBoundsOfExpression(${1:text})"
    },
    {
      "trigger": "helper-lockerTest-basic-createSafeCtorExpression",
      "contents": "cmp.getDef().getHelper().createSafeCtorExpression(${1:text})"
    },
    {
      "trigger": "helper-performance-runner-urlToJson",
      "contents": "cmp.getDef().getHelper().urlToJson(${1:historyConfig})"
    },
    {
      "trigger": "helper-performance-runner-queryStringToJson",
      "contents": "cmp.getDef().getHelper().queryStringToJson(${1:queryString})"
    },
    {
      "trigger": "helper-performanceTest-child-init",
      "contents": "cmp.getDef().getHelper().init(${1:cmp},${2:event},${3:helper})"
    },
    {
      "trigger": "helper-performanceTest-grandparent-init",
      "contents": "cmp.getDef().getHelper().init(${1:cmp},${2:event},${3:helper})"
    },
    {
      "trigger": "helper-performanceTest-parent-init",
      "contents": "cmp.getDef().getHelper().init(${1:cmp},${2:event},${3:helper})"
    },
    {
      "trigger": "helper-performanceTest-virtualDataGridTestSwapColumns-generateColumnConfigs",
      "contents": "cmp.getDef().getHelper().generateColumnConfigs(${1:cmp})"
    },
    {
      "trigger": "helper-performanceTest-virtualDataGridTestSwapColumns-shuffle",
      "contents": "cmp.getDef().getHelper().shuffle(${1:array})"
    },
    {
      "trigger": "helper-renderingTest-cmpWithRenderer-plusOne",
      "contents": "cmp.getDef().getHelper().plusOne(${1:component},${2:attributeName})"
    },
    {
      "trigger": "helper-renderingTest-renderCounter-updateMetrics",
      "contents": "cmp.getDef().getHelper().updateMetrics(${1:component},${2:attributeName})"
    }
  ]
}
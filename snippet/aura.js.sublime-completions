{
  "scope": "source.js, source.json, meta.structure.dictionary.json, meta.structure.dictionary.value.json, meta.structure.array.json",
  "completions": [
    {
      "trigger": "A-test-addWaitFor",
      "contents": "A.test.addWaitFor(${1:expected},${2:testFunction},${3:callback})"
    },
    {
      "trigger": "A-test-addWaitForWithFailureMessage",
      "contents": "A.test.addWaitForWithFailureMessage(${1:expected},${2:testFunction},${3:failureMessage},${4:callback})"
    },
    {
      "trigger": "A-test-blockRequests",
      "contents": "A.test.blockRequests(${1:})"
    },
    {
      "trigger": "A-test-blockForegroundRequests",
      "contents": "A.test.blockForegroundRequests(${1:})"
    },
    {
      "trigger": "A-test-blockBackgroundRequests",
      "contents": "A.test.blockBackgroundRequests(${1:})"
    },
    {
      "trigger": "A-test-releaseRequests",
      "contents": "A.test.releaseRequests(${1:})"
    },
    {
      "trigger": "A-test-releaseForegroundRequests",
      "contents": "A.test.releaseForegroundRequests(${1:})"
    },
    {
      "trigger": "A-test-releaseBackgroundRequests",
      "contents": "A.test.releaseBackgroundRequests(${1:})"
    },
    {
      "trigger": "A-test-getSentRequestCount",
      "contents": "A.test.getSentRequestCount(${1:})"
    },
    {
      "trigger": "A-test-areActionsComplete",
      "contents": "A.test.areActionsComplete(${1:actions})"
    },
    {
      "trigger": "A-test-addCleanup",
      "contents": "A.test.addCleanup(${1:cleanupFunction})"
    },
    {
      "trigger": "A-test-getAction",
      "contents": "A.test.getAction(${1:component},${2:name},${3:params},${4:callback})"
    },
    {
      "trigger": "A-test-runActionsAsTransaction",
      "contents": "A.test.runActionsAsTransaction(${1:actions},${2:scope},${3:callback})"
    },
    {
      "trigger": "A-test-enqueueAction",
      "contents": "A.test.enqueueAction(${1:action},${2:background})"
    },
    {
      "trigger": "A-test-getExternalAction",
      "contents": "A.test.getExternalAction(${1:component},${2:descriptor},${3:params},${4:returnType},${5:callback})"
    },
    {
      "trigger": "A-test-clearAndAssertComponentConfigs",
      "contents": "A.test.clearAndAssertComponentConfigs(${1:a})"
    },
    {
      "trigger": "A-test-isActionPending",
      "contents": "A.test.isActionPending(${1:})"
    },
    {
      "trigger": "A-test-callServerAction",
      "contents": "A.test.callServerAction(${1:action},${2:doImmediate})"
    },
    {
      "trigger": "A-test-setServerReachable",
      "contents": "A.test.setServerReachable(${1:reachable})"
    },
    {
      "trigger": "A-test-runAfterIf",
      "contents": "A.test.runAfterIf(${1:conditionFunction},${2:callback},${3:intervalInMs})"
    },
    {
      "trigger": "A-test-setTestTimeout",
      "contents": "A.test.setTestTimeout(${1:timeoutMsec})"
    },
    {
      "trigger": "A-test-isComplete",
      "contents": "A.test.isComplete(${1:})"
    },
    {
      "trigger": "A-test-getErrors",
      "contents": "A.test.getErrors(${1:})"
    },
    {
      "trigger": "A-test-print",
      "contents": "A.test.print(${1:value})"
    },
    {
      "trigger": "A-test-auraError",
      "contents": "A.test.auraError($1level, msg/*, error*/)"
    },
    {
      "trigger": "A-test-expectAuraError",
      "contents": "A.test.expectAuraError(${1:e})"
    },
    {
      "trigger": "A-test-auraWarning",
      "contents": "A.test.auraWarning(${1:level},${2:msg})"
    },
    {
      "trigger": "A-test-expectAuraWarning",
      "contents": "A.test.expectAuraWarning(${1:w})"
    },
    {
      "trigger": "A-test-assertAccessible",
      "contents": "A.test.assertAccessible(${1:})"
    },
    {
      "trigger": "A-test-assertTruthy",
      "contents": "A.test.assertTruthy(${1:condition},${2:assertMessage})"
    },
    {
      "trigger": "A-test-assertFalsy",
      "contents": "A.test.assertFalsy(${1:condition},${2:assertMessage})"
    },
    {
      "trigger": "A-test-assert",
      "contents": "A.test.assert(${1:condition},${2:assertMessage})"
    },
    {
      "trigger": "A-test-assertEquals",
      "contents": "A.test.assertEquals(${1:arg1},${2:arg2},${3:assertMessage})"
    },
    {
      "trigger": "A-test-assertEqualsIgnoreWhitespace",
      "contents": "A.test.assertEqualsIgnoreWhitespace(${1:arg1},${2:arg2},${3:assertMessage})"
    },
    {
      "trigger": "A-test-assertStartsWith",
      "contents": "A.test.assertStartsWith(${1:start},${2:full},${3:assertMessage})"
    },
    {
      "trigger": "A-test-assertNotEquals",
      "contents": "A.test.assertNotEquals(${1:arg1},${2:arg2},${3:assertMessage})"
    },
    {
      "trigger": "A-test-assertDefined",
      "contents": "A.test.assertDefined(${1:condition},${2:assertMessage})"
    },
    {
      "trigger": "A-test-assertTrue",
      "contents": "A.test.assertTrue(${1:condition},${2:assertMessage})"
    },
    {
      "trigger": "A-test-assertFalse",
      "contents": "A.test.assertFalse(${1:condition},${2:assertMessage})"
    },
    {
      "trigger": "A-test-assertUndefined",
      "contents": "A.test.assertUndefined(${1:condition},${2:assertMessage})"
    },
    {
      "trigger": "A-test-assertNotUndefinedOrNull",
      "contents": "A.test.assertNotUndefinedOrNull(${1:condition},${2:assertMessage})"
    },
    {
      "trigger": "A-test-assertUndefinedOrNull",
      "contents": "A.test.assertUndefinedOrNull(${1:condition},${2:assertMessage})"
    },
    {
      "trigger": "A-test-assertNull",
      "contents": "A.test.assertNull(${1:condition},${2:assertMessage})"
    },
    {
      "trigger": "A-test-assertNotNull",
      "contents": "A.test.assertNotNull(${1:condition},${2:assertMessage})"
    },
    {
      "trigger": "A-test-assertAuraType",
      "contents": "A.test.assertAuraType(${1:type},${2:condition},${3:assertMessage})"
    },
    {
      "trigger": "A-test-fail",
      "contents": "A.test.fail(${1:assertMessage},${2:extraInfoMessage})"
    },
    {
      "trigger": "A-test-getPrototype",
      "contents": "A.test.getPrototype(${1:instance})"
    },
    {
      "trigger": "A-test-overrideFunction",
      "contents": "A.test.overrideFunction(${1:instance},${2:name},${3:newFunction})"
    },
    {
      "trigger": "A-test-addFunctionHandler",
      "contents": "A.test.addFunctionHandler(${1:instance},${2:name},${3:newFunction},${4:postProcess})"
    },
    {
      "trigger": "A-test-getOuterHtml",
      "contents": "A.test.getOuterHtml(${1:node})"
    },
    {
      "trigger": "A-test-getText",
      "contents": "A.test.getText(${1:node})"
    },
    {
      "trigger": "A-test-getTextByComponent",
      "contents": "A.test.getTextByComponent(${1:component})"
    },
    {
      "trigger": "A-test-getStyle",
      "contents": "A.test.getStyle(${1:elem},${2:style})"
    },
    {
      "trigger": "A-test-getNonCommentNodes",
      "contents": "A.test.getNonCommentNodes(${1:nodes})"
    },
    {
      "trigger": "A-test-isNodeDeleted",
      "contents": "A.test.isNodeDeleted(${1:node})"
    },
    {
      "trigger": "A-test-select",
      "contents": "A.test.select(${1:})"
    },
    {
      "trigger": "A-test-contains",
      "contents": "A.test.contains(${1:testString},${2:targetString})"
    },
    {
      "trigger": "A-test-compareValues",
      "contents": "A.test.compareValues(${1:expected},${2:actual})"
    },
    {
      "trigger": "A-test-getActiveElement",
      "contents": "A.test.getActiveElement(${1:})"
    },
    {
      "trigger": "A-test-getActiveElementText",
      "contents": "A.test.getActiveElementText(${1:})"
    },
    {
      "trigger": "A-test-walkTheDOM",
      "contents": "A.test.walkTheDOM(${1:node},${2:func})"
    },
    {
      "trigger": "A-test-getElementsByClassNameCustom",
      "contents": "A.test.getElementsByClassNameCustom(${1:className},${2:parentElement})"
    },
    {
      "trigger": "A-test-findChildWithClassName",
      "contents": "A.test.findChildWithClassName(${1:parentElement},${2:className})"
    },
    {
      "trigger": "A-test-getElementByClass",
      "contents": "A.test.getElementByClass(${1:classname})"
    },
    {
      "trigger": "A-test-fireDomEvent",
      "contents": "A.test.fireDomEvent(${1:element},${2:eventName},${3:canBubble},${4:cancelable})"
    },
    {
      "trigger": "A-test-clickOrTouch",
      "contents": "A.test.clickOrTouch(${1:element},${2:canBubble},${3:cancelable})"
    },
    {
      "trigger": "A-test-isInstanceOfText",
      "contents": "A.test.isInstanceOfText(${1:node})"
    },
    {
      "trigger": "A-test-isInstanceOfAnchorElement",
      "contents": "A.test.isInstanceOfAnchorElement(${1:element})"
    },
    {
      "trigger": "A-test-isInstanceOfInputElement",
      "contents": "A.test.isInstanceOfInputElement(${1:element})"
    },
    {
      "trigger": "A-test-isInstanceOfLiElement",
      "contents": "A.test.isInstanceOfLiElement(${1:element})"
    },
    {
      "trigger": "A-test-isInstanceOfParagraphElement",
      "contents": "A.test.isInstanceOfParagraphElement(${1:element})"
    },
    {
      "trigger": "A-test-isInstanceOfButtonElement",
      "contents": "A.test.isInstanceOfButtonElement(${1:element})"
    },
    {
      "trigger": "A-test-isInstanceOfImageElement",
      "contents": "A.test.isInstanceOfImageElement(${1:element})"
    },
    {
      "trigger": "A-test-isInstanceOfDivElement",
      "contents": "A.test.isInstanceOfDivElement(${1:element})"
    },
    {
      "trigger": "A-test-isInstanceOfSpanElement",
      "contents": "A.test.isInstanceOfSpanElement(${1:element})"
    },
    {
      "trigger": "A-test-isInstanceOf",
      "contents": "A.test.isInstanceOf(${1:element},${2:elementType},${3:tag})"
    },
    {
      "trigger": "A-test-objectKeys",
      "contents": "A.test.objectKeys(${1:obj})"
    },
    {
      "trigger": "A-test-getElementAttributeValue",
      "contents": "A.test.getElementAttributeValue(${1:element},${2:attributeName})"
    },
    {
      "trigger": "A-test-addEventHandler",
      "contents": "A.test.addEventHandler(${1:eventName},${2:handler},${3:component},${4:insert})"
    },
    {
      "trigger": "A-test-dummyFunction",
      "contents": "A.test.dummyFunction(${1:})"
    },
    {
      "trigger": "A-test-getAppCacheEvents",
      "contents": "A.test.getAppCacheEvents(${1:})"
    },
    {
      "trigger": "A-test-getAuraErrorMessage",
      "contents": "A.test.getAuraErrorMessage(${1:})"
    },
    {
      "trigger": "A-test-getAvailableXHROverride",
      "contents": "A.test.getAvailableXHROverride(${1:config},${2:isBackground})"
    },
    {
      "trigger": "A-test-sendOverride",
      "contents": "A.test.sendOverride(${1:config},${2:auraXHR},${3:actions},${4:method},${5:options})"
    },
    {
      "trigger": "A-test-decodeOverride",
      "contents": "A.test.decodeOverride(${1:config},${2:response},${3:noStrip})"
    },
    {
      "trigger": "A-test-PrePostConfig",
      "contents": "A.test.PrePostConfig(${1:action},${2:preSendCallback},${3:postSendCallback},${4:preDecodeCallback})"
    },
    {
      "trigger": "A-test-addPrePostSendCallback",
      "contents": "A.test.addPrePostSendCallback(${1:action},${2:preSendCallback},${3:postSendCallback})"
    },
    {
      "trigger": "A-test-removePrePostSendCallback",
      "contents": "A.test.removePrePostSendCallback(${1:handle})"
    },
    {
      "trigger": "A-test-addPreDecodeCallback",
      "contents": "A.test.addPreDecodeCallback(${1:preDecodeCallback})"
    },
    {
      "trigger": "A-test-removePreDecodeCallback",
      "contents": "A.test.removePreDecodeCallback(${1:handle})"
    },
    {
      "trigger": "A-test-installOverride",
      "contents": "A.test.installOverride(${1:})"
    },
    {
      "trigger": "A-test-run",
      "contents": "A.test.run(${1:name},${2:code},${3:timeoutOverride},${4:quickFixException})"
    },
    {
      "trigger": "A-test-runInternal",
      "contents": "A.test.runInternal(${1:name})"
    },
    {
      "trigger": "A-test-executeAfterCkEditorIsReady",
      "contents": "A.test.executeAfterCkEditorIsReady(${1:inputRichTextComponent},${2:callback})"
    },
    {
      "trigger": "A-test-reloadGlobalValueProviders",
      "contents": "A.test.reloadGlobalValueProviders(${1:gvp},${2:callback})"
    },
    {
      "trigger": "A-test-getGlobalValueProvider",
      "contents": "A.test.getGlobalValueProvider(${1:type})"
    },
    {
      "trigger": "A-test-getCreationPath",
      "contents": "A.test.getCreationPath(${1:cmp})"
    },
    {
      "trigger": "A-test-createHttpRequest",
      "contents": "A.test.createHttpRequest(${1:})"
    },
    {
      "trigger": "A-test-checkGlobalNamespacePollution",
      "contents": "A.test.checkGlobalNamespacePollution(${1:whitelistedPollutants})"
    },
    {
      "trigger": "A-util-isIOSWebView",
      "contents": "A.util.isIOSWebView(${1:})"
    },
    {
      "trigger": "A-util-globalEval",
      "contents": "A.util.globalEval(${1:src})"
    },
    {
      "trigger": "A-util-isArray",
      "contents": "A.util.isArray(${1:})"
    },
    {
      "trigger": "A-util-isObject",
      "contents": "A.util.isObject(${1:obj})"
    },
    {
      "trigger": "A-util-isPlainObject",
      "contents": "A.util.isPlainObject(${1:obj})"
    },
    {
      "trigger": "A-util-isError",
      "contents": "A.util.isError(${1:obj})"
    },
    {
      "trigger": "A-util-isFunction",
      "contents": "A.util.isFunction(${1:obj})"
    },
    {
      "trigger": "A-util-isString",
      "contents": "A.util.isString(${1:obj})"
    },
    {
      "trigger": "A-util-isNumber",
      "contents": "A.util.isNumber(${1:obj})"
    },
    {
      "trigger": "A-util-isFiniteNumber",
      "contents": "A.util.isFiniteNumber(${1:obj})"
    },
    {
      "trigger": "A-util-isBoolean",
      "contents": "A.util.isBoolean(${1:obj})"
    },
    {
      "trigger": "A-util-isUndefined",
      "contents": "A.util.isUndefined(${1:obj})"
    },
    {
      "trigger": "A-util-isUndefinedOrNull",
      "contents": "A.util.isUndefinedOrNull(${1:obj})"
    },
    {
      "trigger": "A-util-isEmpty",
      "contents": "A.util.isEmpty(${1:obj})"
    },
    {
      "trigger": "A-util-getBooleanValue",
      "contents": "A.util.getBooleanValue(${1:val})"
    },
    {
      "trigger": "A-util-createHtmlElement",
      "contents": "A.util.createHtmlElement(${1:tagName},${2:attributes})"
    },
    {
      "trigger": "A-util-clearNode",
      "contents": "A.util.clearNode(${1:node})"
    },
    {
      "trigger": "A-util-getElement",
      "contents": "A.util.getElement(${1:id})"
    },
    {
      "trigger": "A-util-copy",
      "contents": "A.util.copy(${1:value})"
    },
    {
      "trigger": "A-util-compareValues",
      "contents": "A.util.compareValues(${1:expected},${2:actual})"
    },
    {
      "trigger": "A-util-hasClass",
      "contents": "A.util.hasClass(${1:element},${2:className})"
    },
    {
      "trigger": "A-util-addClass",
      "contents": "A.util.addClass(${1:element},${2:newClass})"
    },
    {
      "trigger": "A-util-removeClass",
      "contents": "A.util.removeClass(${1:element},${2:newClass})"
    },
    {
      "trigger": "A-util-toggleClass",
      "contents": "A.util.toggleClass(${1:element},${2:className},${3:condition})"
    },
    {
      "trigger": "A-util-swapClass",
      "contents": "A.util.swapClass(${1:element},${2:oldClass},${3:newClass})"
    },
    {
      "trigger": "A-util-setClass",
      "contents": "A.util.setClass(${1:element,newClass,remove})"
    },
    {
      "trigger": "A-util-buildClass",
      "contents": "A.util.buildClass(${1:oldClass},${2:newClass},${3:remove})"
    },
    {
      "trigger": "A-util-buildFlavorClass",
      "contents": "A.util.buildFlavorClass(${1:cmp},${2:flavor})"
    },
    {
      "trigger": "A-util-createElementsFromMarkup",
      "contents": "A.util.createElementsFromMarkup(${1:markup})"
    },
    {
      "trigger": "A-util-insertFirst",
      "contents": "A.util.insertFirst(${1:newEl},${2:referenceEl})"
    },
    {
      "trigger": "A-util-insertBefore",
      "contents": "A.util.insertBefore(${1:newEl},${2:referenceEl})"
    },
    {
      "trigger": "A-util-insertAfter",
      "contents": "A.util.insertAfter(${1:newEl},${2:referenceEl})"
    },
    {
      "trigger": "A-util-appendChild",
      "contents": "A.util.appendChild(${1:newEl},${2:referenceEl})"
    },
    {
      "trigger": "A-util-removeElement",
      "contents": "A.util.removeElement(${1:element})"
    },
    {
      "trigger": "A-util-generateUrl",
      "contents": "A.util.generateUrl(${1:url},${2:params},${3:encoded})"
    },
    {
      "trigger": "A-util-trim",
      "contents": "A.util.trim(${1:value})"
    },
    {
      "trigger": "A-util-format",
      "contents": "A.util.format(${1:formatString,arg1,arg2,argN})"
    },
    {
      "trigger": "A-util-truncate",
      "contents": "A.util.truncate(${1:st},${2:len},${3:ellipsis},${4:truncateByWord})"
    },
    {
      "trigger": "A-util-createTimeoutCallback",
      "contents": "A.util.createTimeoutCallback(${1:callback},${2:toleranceMillis})"
    },
    {
      "trigger": "A-util-on",
      "contents": "A.util.on(${1:element},${2:eventName},${3:handler},${4:useCapture},${5:timeout})"
    },
    {
      "trigger": "A-util-removeOn",
      "contents": "A.util.removeOn(${1:element},${2:eventName},${3:listener},${4:useCapture})"
    },
    {
      "trigger": "A-util-formToMap",
      "contents": "A.util.formToMap(${1:form})"
    },
    {
      "trigger": "A-util-getSelectValue",
      "contents": "A.util.getSelectValue(${1:select})"
    },
    {
      "trigger": "A-util-addValueToMap",
      "contents": "A.util.addValueToMap(${1:inputMap},${2:key},${3:value})"
    },
    {
      "trigger": "A-util-addMapValueToMap",
      "contents": "A.util.addMapValueToMap(${1:inputMap},${2:key},${3:value},${4:subMapKey})"
    },
    {
      "trigger": "A-util-isSubDef",
      "contents": "A.util.isSubDef(${1:def},${2:qname})"
    },
    {
      "trigger": "A-util-apply",
      "contents": "A.util.apply($1/* Object|Function */ baseObject, /* Object|Function*/ members, /* bool */ forceCopy, /* bool */ deepCopy)"
    },
    {
      "trigger": "A-util-camelCaseToHyphens",
      "contents": "A.util.camelCaseToHyphens(${1:str})"
    },
    {
      "trigger": "A-util-hyphensToCamelCase",
      "contents": "A.util.hyphensToCamelCase(${1:str})"
    },
    {
      "trigger": "A-util-acceptsData",
      "contents": "A.util.acceptsData(${1:element})"
    },
    {
      "trigger": "A-util-getElementAttributeValue",
      "contents": "A.util.getElementAttributeValue(${1:element,attributeName})"
    },
    {
      "trigger": "A-util-getDataAttribute",
      "contents": "A.util.getDataAttribute(${1:element},${2:key})"
    },
    {
      "trigger": "A-util-setDataAttribute",
      "contents": "A.util.setDataAttribute(${1:element},${2:key},${3:value})"
    },
    {
      "trigger": "A-util-getDataAttributeName",
      "contents": "A.util.getDataAttributeName(${1:key})"
    },
    {
      "trigger": "A-util-hasDataAttribute",
      "contents": "A.util.hasDataAttribute(${1:element},${2:key})"
    },
    {
      "trigger": "A-util-isElement",
      "contents": "A.util.isElement(${1:obj})"
    },
    {
      "trigger": "A-util-attachToDocumentBody",
      "contents": "A.util.attachToDocumentBody(${1:element})"
    },
    {
      "trigger": "A-util-stringEndsWith",
      "contents": "A.util.stringEndsWith(${1:fullstr},${2:substr})"
    },
    {
      "trigger": "A-util-bind",
      "contents": "A.util.bind($1method /*, this, bind arguments*/)"
    },
    {
      "trigger": "A-util-lookup",
      "contents": "A.util.lookup($1object /*, var-args of arrays*/)"
    },
    {
      "trigger": "A-util-merge",
      "contents": "A.util.merge($1first /*, var-args of arrays*/)"
    },
    {
      "trigger": "A-util-forEach",
      "contents": "A.util.forEach(${1:array},${2:method},${3:that})"
    },
    {
      "trigger": "A-util-map",
      "contents": "A.util.map(${1:array},${2:method},${3:that})"
    },
    {
      "trigger": "A-util-reduce",
      "contents": "A.util.reduce(${1:array},${2:method},${3:initial})"
    },
    {
      "trigger": "A-util-every",
      "contents": "A.util.every(${1:array},${2:predicate},${3:that})"
    },
    {
      "trigger": "A-util-some",
      "contents": "A.util.some(${1:array},${2:predicate},${3:that})"
    },
    {
      "trigger": "A-util-filter",
      "contents": "A.util.filter(${1:array},${2:predicate},${3:that})"
    },
    {
      "trigger": "A-util-destroyAsync",
      "contents": "A.util.destroyAsync(${1:cmp})"
    },
    {
      "trigger": "A-util-instanceOf",
      "contents": "A.util.instanceOf(${1:instance},${2:constructor})"
    },
    {
      "trigger": "A-util-emptyComponentTrash",
      "contents": "A.util.emptyComponentTrash(${1:})"
    },
    {
      "trigger": "A-util-contains",
      "contents": "A.util.contains(${1:container},${2:element})"
    },
    {
      "trigger": "A-util-squash",
      "contents": "A.util.squash(${1:event},${2:preventDefault})"
    },
    {
      "trigger": "A-util-stripTags",
      "contents": "A.util.stripTags(${1:input},${2:tags})"
    },
    {
      "trigger": "A-util-getWindowSize",
      "contents": "A.util.getWindowSize(${1:})"
    },
    {
      "trigger": "A-util-isComponent",
      "contents": "A.util.isComponent(${1:obj})"
    },
    {
      "trigger": "A-util-isExpression",
      "contents": "A.util.isExpression(${1:obj})"
    },
    {
      "trigger": "A-util-isValue",
      "contents": "A.util.isValue(${1:obj})"
    },
    {
      "trigger": "A-util-isAction",
      "contents": "A.util.isAction(${1:obj})"
    },
    {
      "trigger": "A-util-supportsTouchEvents",
      "contents": "A.util.supportsTouchEvents(${1:})"
    },
    {
      "trigger": "A-util-estimateSize",
      "contents": "A.util.estimateSize(${1:obj})"
    },
    {
      "trigger": "A-util-toArray",
      "contents": "A.util.toArray(${1:collection})"
    },
    {
      "trigger": "A-util-setText",
      "contents": "A.util.setText(${1:node},${2:text})"
    },
    {
      "trigger": "A-util-getDebugToolComponent",
      "contents": "A.util.getDebugToolComponent(${1:})"
    },
    {
      "trigger": "A-util-getDebugToolsAuraInstance",
      "contents": "A.util.getDebugToolsAuraInstance(${1:})"
    },
    {
      "trigger": "A-util-setDebugToolWindow",
      "contents": "A.util.setDebugToolWindow(${1:debugWindow})"
    },
    {
      "trigger": "A-util-getUrl",
      "contents": "A.util.getUrl(${1:})"
    },
    {
      "trigger": "A-util-getText",
      "contents": "A.util.getText(${1:node})"
    },
    {
      "trigger": "A-util-includeScript",
      "contents": "A.util.includeScript(${1:url},${2:callback})"
    }
  ]
}
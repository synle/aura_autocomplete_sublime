{
   "scope": "source.js, source.json, meta.structure.dictionary.json, meta.structure.dictionary.value.json, meta.structure.array.json",
   "completions": [
      {
         "trigger": "A-test-getInitialGlobalStatetrue",
         "contents": "A.test.getInitialGlobalState(${1:})"
      },
      {
         "trigger": "A-test-getWhitelistedVariablestrue",
         "contents": "A.test.getWhitelistedVariables(${1:})"
      },
      {
         "trigger": "A-test-addWaitFortrue",
         "contents": "A.test.addWaitFor(${1:expected},${2:testFunction},${3:callback})"
      },
      {
         "trigger": "A-test-addWaitForActiontrue",
         "contents": "A.test.addWaitForAction(${1:success},${2:actionName},${3:callback})"
      },
      {
         "trigger": "A-test-addWaitForWithFailureMessagetrue",
         "contents": "A.test.addWaitForWithFailureMessage(${1:expected},${2:testFunction},${3:failureMessage},${4:callback})"
      },
      {
         "trigger": "A-test-blockRequeststrue",
         "contents": "A.test.blockRequests(${1:})"
      },
      {
         "trigger": "A-test-blockForegroundRequeststrue",
         "contents": "A.test.blockForegroundRequests(${1:})"
      },
      {
         "trigger": "A-test-blockBackgroundRequeststrue",
         "contents": "A.test.blockBackgroundRequests(${1:})"
      },
      {
         "trigger": "A-test-releaseRequeststrue",
         "contents": "A.test.releaseRequests(${1:})"
      },
      {
         "trigger": "A-test-releaseForegroundRequeststrue",
         "contents": "A.test.releaseForegroundRequests(${1:})"
      },
      {
         "trigger": "A-test-releaseBackgroundRequeststrue",
         "contents": "A.test.releaseBackgroundRequests(${1:})"
      },
      {
         "trigger": "A-test-getSentRequestCounttrue",
         "contents": "A.test.getSentRequestCount(${1:})"
      },
      {
         "trigger": "A-test-areActionsCompletetrue",
         "contents": "A.test.areActionsComplete(${1:actions})"
      },
      {
         "trigger": "A-test-addCleanuptrue",
         "contents": "A.test.addCleanup(${1:cleanupFunction})"
      },
      {
         "trigger": "A-test-getActiontrue",
         "contents": "A.test.getAction(${1:component},${2:name},${3:params},${4:callback})"
      },
      {
         "trigger": "A-test-runActionsAsTransactiontrue",
         "contents": "A.test.runActionsAsTransaction(${1:actions},${2:scope},${3:callback})"
      },
      {
         "trigger": "A-test-enqueueActiontrue",
         "contents": "A.test.enqueueAction(${1:action},${2:background})"
      },
      {
         "trigger": "A-test-getExternalActiontrue",
         "contents": "A.test.getExternalAction(${1:component},${2:descriptor},${3:params},${4:returnType},${5:callback})"
      },
      {
         "trigger": "A-test-clearAndAssertComponentConfigstrue",
         "contents": "A.test.clearAndAssertComponentConfigs(${1:a})"
      },
      {
         "trigger": "A-test-isActionPendingtrue",
         "contents": "A.test.isActionPending(${1:})"
      },
      {
         "trigger": "A-test-callServerActiontrue",
         "contents": "A.test.callServerAction(${1:action},${2:doImmediate})"
      },
      {
         "trigger": "A-test-setServerReachabletrue",
         "contents": "A.test.setServerReachable(${1:reachable})"
      },
      {
         "trigger": "A-test-runAfterIftrue",
         "contents": "A.test.runAfterIf(${1:conditionFunction},${2:callback},${3:intervalInMs})"
      },
      {
         "trigger": "A-test-setTestTimeouttrue",
         "contents": "A.test.setTestTimeout(${1:timeoutMsec})"
      },
      {
         "trigger": "A-test-isCompletetrue",
         "contents": "A.test.isComplete(${1:})"
      },
      {
         "trigger": "A-test-getErrorstrue",
         "contents": "A.test.getErrors(${1:})"
      },
      {
         "trigger": "A-test-printtrue",
         "contents": "A.test.print(${1:value})"
      },
      {
         "trigger": "A-test-auraErrortrue",
         "contents": "A.test.auraError($1level, msg/*, error*/)"
      },
      {
         "trigger": "A-test-expectAuraErrortrue",
         "contents": "A.test.expectAuraError(${1:e})"
      },
      {
         "trigger": "A-test-auraWarningtrue",
         "contents": "A.test.auraWarning(${1:level},${2:msg})"
      },
      {
         "trigger": "A-test-expectAuraWarningtrue",
         "contents": "A.test.expectAuraWarning(${1:w})"
      },
      {
         "trigger": "A-test-assertAccessibletrue",
         "contents": "A.test.assertAccessible(${1:})"
      },
      {
         "trigger": "A-test-assertTruthytrue",
         "contents": "A.test.assertTruthy(${1:condition},${2:assertMessage})"
      },
      {
         "trigger": "A-test-assertFalsytrue",
         "contents": "A.test.assertFalsy(${1:condition},${2:assertMessage})"
      },
      {
         "trigger": "A-test-asserttrue",
         "contents": "A.test.assert(${1:condition},${2:assertMessage})"
      },
      {
         "trigger": "A-test-assertEqualstrue",
         "contents": "A.test.assertEquals(${1:arg1},${2:arg2},${3:assertMessage})"
      },
      {
         "trigger": "A-test-assertEqualsIgnoreWhitespacetrue",
         "contents": "A.test.assertEqualsIgnoreWhitespace(${1:arg1},${2:arg2},${3:assertMessage})"
      },
      {
         "trigger": "A-test-assertStartsWithtrue",
         "contents": "A.test.assertStartsWith(${1:start},${2:full},${3:assertMessage})"
      },
      {
         "trigger": "A-test-assertNotEqualstrue",
         "contents": "A.test.assertNotEquals(${1:arg1},${2:arg2},${3:assertMessage})"
      },
      {
         "trigger": "A-test-assertDefinedtrue",
         "contents": "A.test.assertDefined(${1:condition},${2:assertMessage})"
      },
      {
         "trigger": "A-test-assertTruetrue",
         "contents": "A.test.assertTrue(${1:condition},${2:assertMessage})"
      },
      {
         "trigger": "A-test-assertFalsetrue",
         "contents": "A.test.assertFalse(${1:condition},${2:assertMessage})"
      },
      {
         "trigger": "A-test-assertUndefinedtrue",
         "contents": "A.test.assertUndefined(${1:condition},${2:assertMessage})"
      },
      {
         "trigger": "A-test-assertNotUndefinedOrNulltrue",
         "contents": "A.test.assertNotUndefinedOrNull(${1:condition},${2:assertMessage})"
      },
      {
         "trigger": "A-test-assertUndefinedOrNulltrue",
         "contents": "A.test.assertUndefinedOrNull(${1:condition},${2:assertMessage})"
      },
      {
         "trigger": "A-test-assertNulltrue",
         "contents": "A.test.assertNull(${1:condition},${2:assertMessage})"
      },
      {
         "trigger": "A-test-assertNotNulltrue",
         "contents": "A.test.assertNotNull(${1:condition},${2:assertMessage})"
      },
      {
         "trigger": "A-test-assertAuraTypetrue",
         "contents": "A.test.assertAuraType(${1:type},${2:condition},${3:assertMessage})"
      },
      {
         "trigger": "A-test-failtrue",
         "contents": "A.test.fail(${1:assertMessage},${2:extraInfoMessage})"
      },
      {
         "trigger": "A-test-getPrototypetrue",
         "contents": "A.test.getPrototype(${1:instance})"
      },
      {
         "trigger": "A-test-overrideFunctiontrue",
         "contents": "A.test.overrideFunction(${1:instance},${2:name},${3:newFunction})"
      },
      {
         "trigger": "A-test-addFunctionHandlertrue",
         "contents": "A.test.addFunctionHandler(${1:instance},${2:name},${3:newFunction},${4:postProcess})"
      },
      {
         "trigger": "A-test-getOuterHtmltrue",
         "contents": "A.test.getOuterHtml(${1:node})"
      },
      {
         "trigger": "A-test-getTexttrue",
         "contents": "A.test.getText(${1:node})"
      },
      {
         "trigger": "A-test-getTextByComponenttrue",
         "contents": "A.test.getTextByComponent(${1:component})"
      },
      {
         "trigger": "A-test-getStyletrue",
         "contents": "A.test.getStyle(${1:elem},${2:style})"
      },
      {
         "trigger": "A-test-getNonCommentNodestrue",
         "contents": "A.test.getNonCommentNodes(${1:nodes})"
      },
      {
         "trigger": "A-test-isNodeDeletedtrue",
         "contents": "A.test.isNodeDeleted(${1:node})"
      },
      {
         "trigger": "A-test-selecttrue",
         "contents": "A.test.select(${1:})"
      },
      {
         "trigger": "A-test-containstrue",
         "contents": "A.test.contains(${1:testString},${2:targetString})"
      },
      {
         "trigger": "A-test-compareValuestrue",
         "contents": "A.test.compareValues(${1:expected},${2:actual})"
      },
      {
         "trigger": "A-test-getActiveElementtrue",
         "contents": "A.test.getActiveElement(${1:})"
      },
      {
         "trigger": "A-test-getActiveElementTexttrue",
         "contents": "A.test.getActiveElementText(${1:})"
      },
      {
         "trigger": "A-test-walkTheDOMtrue",
         "contents": "A.test.walkTheDOM(${1:node},${2:func})"
      },
      {
         "trigger": "A-test-getElementsByClassNameCustomtrue",
         "contents": "A.test.getElementsByClassNameCustom(${1:className},${2:parentElement})"
      },
      {
         "trigger": "A-test-findChildWithClassNametrue",
         "contents": "A.test.findChildWithClassName(${1:parentElement},${2:className})"
      },
      {
         "trigger": "A-test-getElementByClasstrue",
         "contents": "A.test.getElementByClass(${1:classname})"
      },
      {
         "trigger": "A-test-fireDomEventtrue",
         "contents": "A.test.fireDomEvent(${1:element},${2:eventName},${3:canBubble},${4:cancelable})"
      },
      {
         "trigger": "A-test-clickOrTouchtrue",
         "contents": "A.test.clickOrTouch(${1:element},${2:canBubble},${3:cancelable})"
      },
      {
         "trigger": "A-test-isInstanceOfTexttrue",
         "contents": "A.test.isInstanceOfText(${1:node})"
      },
      {
         "trigger": "A-test-isInstanceOfAnchorElementtrue",
         "contents": "A.test.isInstanceOfAnchorElement(${1:element})"
      },
      {
         "trigger": "A-test-isInstanceOfInputElementtrue",
         "contents": "A.test.isInstanceOfInputElement(${1:element})"
      },
      {
         "trigger": "A-test-isInstanceOfLiElementtrue",
         "contents": "A.test.isInstanceOfLiElement(${1:element})"
      },
      {
         "trigger": "A-test-isInstanceOfParagraphElementtrue",
         "contents": "A.test.isInstanceOfParagraphElement(${1:element})"
      },
      {
         "trigger": "A-test-isInstanceOfButtonElementtrue",
         "contents": "A.test.isInstanceOfButtonElement(${1:element})"
      },
      {
         "trigger": "A-test-isInstanceOfImageElementtrue",
         "contents": "A.test.isInstanceOfImageElement(${1:element})"
      },
      {
         "trigger": "A-test-isInstanceOfDivElementtrue",
         "contents": "A.test.isInstanceOfDivElement(${1:element})"
      },
      {
         "trigger": "A-test-isInstanceOfSpanElementtrue",
         "contents": "A.test.isInstanceOfSpanElement(${1:element})"
      },
      {
         "trigger": "A-test-isInstanceOftrue",
         "contents": "A.test.isInstanceOf(${1:element},${2:elementType},${3:tag})"
      },
      {
         "trigger": "A-test-objectKeystrue",
         "contents": "A.test.objectKeys(${1:obj})"
      },
      {
         "trigger": "A-test-getElementAttributeValuetrue",
         "contents": "A.test.getElementAttributeValue(${1:element},${2:attributeName})"
      },
      {
         "trigger": "A-test-addEventHandlertrue",
         "contents": "A.test.addEventHandler(${1:eventName},${2:handler},${3:component},${4:insert})"
      },
      {
         "trigger": "A-test-dummyFunctiontrue",
         "contents": "A.test.dummyFunction(${1:})"
      },
      {
         "trigger": "A-test-getAppCacheEventstrue",
         "contents": "A.test.getAppCacheEvents(${1:})"
      },
      {
         "trigger": "A-test-getAuraErrorMessagetrue",
         "contents": "A.test.getAuraErrorMessage(${1:})"
      },
      {
         "trigger": "A-test-getAvailableXHROverridetrue",
         "contents": "A.test.getAvailableXHROverride(${1:config},${2:isBackground})"
      },
      {
         "trigger": "A-test-sendOverridetrue",
         "contents": "A.test.sendOverride(${1:config},${2:auraXHR},${3:actions},${4:method},${5:options})"
      },
      {
         "trigger": "A-test-decodeOverridetrue",
         "contents": "A.test.decodeOverride(${1:config},${2:response},${3:noStrip})"
      },
      {
         "trigger": "A-test-PrePostConfigtrue",
         "contents": "A.test.PrePostConfig(${1:action},${2:preSendCallback},${3:postSendCallback})"
      },
      {
         "trigger": "A-test-addPrePostSendCallbacktrue",
         "contents": "A.test.addPrePostSendCallback(${1:action},${2:preSendCallback},${3:postSendCallback})"
      },
      {
         "trigger": "A-test-removePrePostSendCallbacktrue",
         "contents": "A.test.removePrePostSendCallback(${1:handle})"
      },
      {
         "trigger": "A-test-installtrue",
         "contents": "A.test.install(${1:})"
      },
      {
         "trigger": "A-test-runtrue",
         "contents": "A.test.run(${1:name},${2:code},${3:timeoutOverride},${4:quickFixException})"
      },
      {
         "trigger": "A-test-runInternaltrue",
         "contents": "A.test.runInternal(${1:name})"
      },
      {
         "trigger": "A-test-executeAfterCkEditorIsReadytrue",
         "contents": "A.test.executeAfterCkEditorIsReady(${1:inputRichTextComponent},${2:callback})"
      },
      {
         "trigger": "A-test-reloadGlobalValueProviderstrue",
         "contents": "A.test.reloadGlobalValueProviders(${1:gvp},${2:callback})"
      },
      {
         "trigger": "A-test-getCreationPathtrue",
         "contents": "A.test.getCreationPath(${1:cmp})"
      },
      {
         "trigger": "A-test-createHttpRequesttrue",
         "contents": "A.test.createHttpRequest(${1:})"
      },
      {
         "trigger": "A-test-checkGlobalNamespacePollutiontrue",
         "contents": "A.test.checkGlobalNamespacePollution(${1:})"
      },
      {
         "trigger": "A-util-isIOSWebViewfalse",
         "contents": "A.util.isIOSWebView(${1:})"
      },
      {
         "trigger": "A-util-globalEvalfalse",
         "contents": "A.util.globalEval(${1:src})"
      },
      {
         "trigger": "A-util-isArrayfalse",
         "contents": "A.util.isArray(${1:})"
      },
      {
         "trigger": "A-util-isObjectfalse",
         "contents": "A.util.isObject(${1:obj})"
      },
      {
         "trigger": "A-util-isPlainObjectfalse",
         "contents": "A.util.isPlainObject(${1:obj})"
      },
      {
         "trigger": "A-util-isErrorfalse",
         "contents": "A.util.isError(${1:obj})"
      },
      {
         "trigger": "A-util-isFunctionfalse",
         "contents": "A.util.isFunction(${1:obj})"
      },
      {
         "trigger": "A-util-isStringfalse",
         "contents": "A.util.isString(${1:obj})"
      },
      {
         "trigger": "A-util-isNumberfalse",
         "contents": "A.util.isNumber(${1:obj})"
      },
      {
         "trigger": "A-util-isFiniteNumberfalse",
         "contents": "A.util.isFiniteNumber(${1:obj})"
      },
      {
         "trigger": "A-util-isBooleanfalse",
         "contents": "A.util.isBoolean(${1:obj})"
      },
      {
         "trigger": "A-util-isUndefinedfalse",
         "contents": "A.util.isUndefined(${1:obj})"
      },
      {
         "trigger": "A-util-isUndefinedOrNullfalse",
         "contents": "A.util.isUndefinedOrNull(${1:obj})"
      },
      {
         "trigger": "A-util-isEmptyfalse",
         "contents": "A.util.isEmpty(${1:obj})"
      },
      {
         "trigger": "A-util-getBooleanValuefalse",
         "contents": "A.util.getBooleanValue(${1:val})"
      },
      {
         "trigger": "A-util-createHtmlElementfalse",
         "contents": "A.util.createHtmlElement(${1:tagName},${2:attributes})"
      },
      {
         "trigger": "A-util-clearNodefalse",
         "contents": "A.util.clearNode(${1:node})"
      },
      {
         "trigger": "A-util-getElementfalse",
         "contents": "A.util.getElement(${1:id})"
      },
      {
         "trigger": "A-util-copyfalse",
         "contents": "A.util.copy(${1:value})"
      },
      {
         "trigger": "A-util-compareValuesfalse",
         "contents": "A.util.compareValues(${1:expected},${2:actual})"
      },
      {
         "trigger": "A-util-hasClassfalse",
         "contents": "A.util.hasClass(${1:element},${2:className})"
      },
      {
         "trigger": "A-util-addClassfalse",
         "contents": "A.util.addClass(${1:element},${2:newClass})"
      },
      {
         "trigger": "A-util-removeClassfalse",
         "contents": "A.util.removeClass(${1:element},${2:newClass})"
      },
      {
         "trigger": "A-util-toggleClassfalse",
         "contents": "A.util.toggleClass(${1:element},${2:className},${3:condition})"
      },
      {
         "trigger": "A-util-swapClassfalse",
         "contents": "A.util.swapClass(${1:element},${2:oldClass},${3:newClass})"
      },
      {
         "trigger": "A-util-setClassfalse",
         "contents": "A.util.setClass(${1:element,newClass,remove})"
      },
      {
         "trigger": "A-util-buildClassfalse",
         "contents": "A.util.buildClass(${1:oldClass},${2:newClass},${3:remove})"
      },
      {
         "trigger": "A-util-buildFlavorClassfalse",
         "contents": "A.util.buildFlavorClass(${1:cmp},${2:flavor})"
      },
      {
         "trigger": "A-util-createElementsFromMarkupfalse",
         "contents": "A.util.createElementsFromMarkup(${1:markup})"
      },
      {
         "trigger": "A-util-insertFirstfalse",
         "contents": "A.util.insertFirst(${1:newEl},${2:referenceEl})"
      },
      {
         "trigger": "A-util-insertBeforefalse",
         "contents": "A.util.insertBefore(${1:newEl},${2:referenceEl})"
      },
      {
         "trigger": "A-util-insertAfterfalse",
         "contents": "A.util.insertAfter(${1:newEl},${2:referenceEl})"
      },
      {
         "trigger": "A-util-appendChildfalse",
         "contents": "A.util.appendChild(${1:newEl},${2:referenceEl})"
      },
      {
         "trigger": "A-util-removeElementfalse",
         "contents": "A.util.removeElement(${1:element})"
      },
      {
         "trigger": "A-util-urlDecodefalse",
         "contents": "A.util.urlDecode(${1:url})"
      },
      {
         "trigger": "A-util-trimfalse",
         "contents": "A.util.trim(${1:value})"
      },
      {
         "trigger": "A-util-formatfalse",
         "contents": "A.util.format(${1:formatString,arg1,arg2,argN})"
      },
      {
         "trigger": "A-util-truncatefalse",
         "contents": "A.util.truncate(${1:st},${2:len},${3:ellipsis},${4:truncateByWord})"
      },
      {
         "trigger": "A-util-createTimeoutCallbackfalse",
         "contents": "A.util.createTimeoutCallback(${1:callback},${2:toleranceMillis})"
      },
      {
         "trigger": "A-util-onfalse",
         "contents": "A.util.on(${1:element},${2:eventName},${3:handler},${4:useCapture},${5:timeout})"
      },
      {
         "trigger": "A-util-removeOnfalse",
         "contents": "A.util.removeOn(${1:element},${2:eventName},${3:listener},${4:useCapture})"
      },
      {
         "trigger": "A-util-formToMapfalse",
         "contents": "A.util.formToMap(${1:form})"
      },
      {
         "trigger": "A-util-getSelectValuefalse",
         "contents": "A.util.getSelectValue(${1:select})"
      },
      {
         "trigger": "A-util-addValueToMapfalse",
         "contents": "A.util.addValueToMap(${1:inputMap},${2:key},${3:value})"
      },
      {
         "trigger": "A-util-addMapValueToMapfalse",
         "contents": "A.util.addMapValueToMap(${1:inputMap},${2:key},${3:value},${4:subMapKey})"
      },
      {
         "trigger": "A-util-isSubDeffalse",
         "contents": "A.util.isSubDef(${1:def},${2:qname})"
      },
      {
         "trigger": "A-util-applyfalse",
         "contents": "A.util.apply($1/* Object|Function */ baseObject, /* Object|Function*/ members, /* bool */ forceCopy, /* bool */ deepCopy)"
      },
      {
         "trigger": "A-util-camelCaseToHyphensfalse",
         "contents": "A.util.camelCaseToHyphens(${1:str})"
      },
      {
         "trigger": "A-util-hyphensToCamelCasefalse",
         "contents": "A.util.hyphensToCamelCase(${1:str})"
      },
      {
         "trigger": "A-util-acceptsDatafalse",
         "contents": "A.util.acceptsData(${1:element})"
      },
      {
         "trigger": "A-util-getElementAttributeValuefalse",
         "contents": "A.util.getElementAttributeValue(${1:element,attributeName})"
      },
      {
         "trigger": "A-util-getDataAttributefalse",
         "contents": "A.util.getDataAttribute(${1:element},${2:key})"
      },
      {
         "trigger": "A-util-setDataAttributefalse",
         "contents": "A.util.setDataAttribute(${1:element},${2:key},${3:value})"
      },
      {
         "trigger": "A-util-getDataAttributeNamefalse",
         "contents": "A.util.getDataAttributeName(${1:key})"
      },
      {
         "trigger": "A-util-hasDataAttributefalse",
         "contents": "A.util.hasDataAttribute(${1:element},${2:key})"
      },
      {
         "trigger": "A-util-isElementfalse",
         "contents": "A.util.isElement(${1:obj})"
      },
      {
         "trigger": "A-util-attachToDocumentBodyfalse",
         "contents": "A.util.attachToDocumentBody(${1:element})"
      },
      {
         "trigger": "A-util-stringEndsWithfalse",
         "contents": "A.util.stringEndsWith(${1:fullstr},${2:substr})"
      },
      {
         "trigger": "A-util-bindfalse",
         "contents": "A.util.bind($1method /*, this, bind arguments*/)"
      },
      {
         "trigger": "A-util-keysfalse",
         "contents": "A.util.keys(${1:object},${2:excludeFunctions})"
      },
      {
         "trigger": "A-util-lookupfalse",
         "contents": "A.util.lookup($1object /*, var-args of arrays*/)"
      },
      {
         "trigger": "A-util-mergefalse",
         "contents": "A.util.merge($1first /*, var-args of arrays*/)"
      },
      {
         "trigger": "A-util-forEachfalse",
         "contents": "A.util.forEach(${1:array},${2:method},${3:that})"
      },
      {
         "trigger": "A-util-mapfalse",
         "contents": "A.util.map(${1:array},${2:method},${3:that})"
      },
      {
         "trigger": "A-util-reducefalse",
         "contents": "A.util.reduce(${1:array},${2:method},${3:initial})"
      },
      {
         "trigger": "A-util-everyfalse",
         "contents": "A.util.every(${1:array},${2:predicate},${3:that})"
      },
      {
         "trigger": "A-util-somefalse",
         "contents": "A.util.some(${1:array},${2:predicate},${3:that})"
      },
      {
         "trigger": "A-util-filterfalse",
         "contents": "A.util.filter(${1:array},${2:predicate},${3:that})"
      },
      {
         "trigger": "A-util-destroyAsyncfalse",
         "contents": "A.util.destroyAsync(${1:cmp})"
      },
      {
         "trigger": "A-util-instanceOffalse",
         "contents": "A.util.instanceOf(${1:instance},${2:constructor})"
      },
      {
         "trigger": "A-util-emptyComponentTrashfalse",
         "contents": "A.util.emptyComponentTrash(${1:})"
      },
      {
         "trigger": "A-util-containsfalse",
         "contents": "A.util.contains(${1:container},${2:element})"
      },
      {
         "trigger": "A-util-squashfalse",
         "contents": "A.util.squash(${1:event},${2:preventDefault})"
      },
      {
         "trigger": "A-util-stripTagsfalse",
         "contents": "A.util.stripTags(${1:input},${2:tags})"
      },
      {
         "trigger": "A-util-getWindowSizefalse",
         "contents": "A.util.getWindowSize(${1:})"
      },
      {
         "trigger": "A-util-isComponentfalse",
         "contents": "A.util.isComponent(${1:obj})"
      },
      {
         "trigger": "A-util-isExpressionfalse",
         "contents": "A.util.isExpression(${1:obj})"
      },
      {
         "trigger": "A-util-isValuefalse",
         "contents": "A.util.isValue(${1:obj})"
      },
      {
         "trigger": "A-util-isActionfalse",
         "contents": "A.util.isAction(${1:obj})"
      },
      {
         "trigger": "A-util-supportsTouchEventsfalse",
         "contents": "A.util.supportsTouchEvents(${1:})"
      },
      {
         "trigger": "A-util-estimateSizefalse",
         "contents": "A.util.estimateSize(${1:obj})"
      },
      {
         "trigger": "A-util-toArrayfalse",
         "contents": "A.util.toArray(${1:collection})"
      },
      {
         "trigger": "A-util-setTextfalse",
         "contents": "A.util.setText(${1:node},${2:text})"
      },
      {
         "trigger": "A-util-getDebugToolComponentfalse",
         "contents": "A.util.getDebugToolComponent(${1:})"
      },
      {
         "trigger": "A-util-getDebugToolsAuraInstancefalse",
         "contents": "A.util.getDebugToolsAuraInstance(${1:})"
      },
      {
         "trigger": "A-util-setDebugToolWindowfalse",
         "contents": "A.util.setDebugToolWindow(${1:debugWindow})"
      },
      {
         "trigger": "A-util-getUrlfalse",
         "contents": "A.util.getUrl(${1:})"
      },
      {
         "trigger": "A-util-getTextfalse",
         "contents": "A.util.getText(${1:node})"
      },
      {
         "trigger": "A-util-errorBasedOnModefalse",
         "contents": "A.util.errorBasedOnMode(${1:msg})"
      },
      {
         "trigger": "A-util-includeScriptfalse",
         "contents": "A.util.includeScript(${1:url},${2:callback})"
      }
   ]
}
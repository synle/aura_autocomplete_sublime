{
    "scope": "source, comment, js",
    "completions":
    [
        { "trigger": "test.error\t", "contents": "test.errors"},
        { "trigger": "test.addWaitFor\texpected, testFunction, callback", "contents": "test.addWaitFor(expected, testFunction, callback)"},
        { "trigger": "test.addWaitForAction\tsuccess, actionName, callback", "contents": "test.addWaitForAction(success, actionName, callback)"},
        { "trigger": "test.addWaitForWithFailureMessage\texpected, testFunction, failureMessage, callback", "contents": "test.addWaitForWithFailureMessage(expected, testFunction, failureMessage, callback)"},
        { "trigger": "test.blockRequests\t", "contents": "test.blockRequests()"},
        { "trigger": "test.blockForegroundRequests\t", "contents": "test.blockForegroundRequests()"},
        { "trigger": "test.blockBackgroundRequests\t", "contents": "test.blockBackgroundRequests()"},
        { "trigger": "test.releaseRequests\t", "contents": "test.releaseRequests()"},
        { "trigger": "test.releaseForegroundRequests\t", "contents": "test.releaseForegroundRequests()"},
        { "trigger": "test.releaseBackgroundRequests\t", "contents": "test.releaseBackgroundRequests()"},
        { "trigger": "test.getSentRequestCount\t", "contents": "test.getSentRequestCount()"},
        { "trigger": "test.areActionsComplete\tactions", "contents": "test.areActionsComplete(actions)"},
        { "trigger": "test.addCleanup\tcleanupFunction", "contents": "test.addCleanup(cleanupFunction)"},
        { "trigger": "test.getAction\tcomponent, name, params, callback", "contents": "test.getAction(component, name, params, callback)"},
        { "trigger": "test.runActionsAsTransaction\tactions, scope, callback", "contents": "test.runActionsAsTransaction(actions, scope, callback)"},
        { "trigger": "test.enqueueAction\taction, background", "contents": "test.enqueueAction(action, background)"},
        { "trigger": "test.getExternalAction\tcomponent, descriptor, params, returnType, callback", "contents": "test.getExternalAction(component, descriptor, params, returnType, callback)"},
        { "trigger": "test.clearAndAssertComponentConfigs\ta", "contents": "test.clearAndAssertComponentConfigs(a)"},
        { "trigger": "test.isActionPending\t", "contents": "test.isActionPending()"},
        { "trigger": "test.callServerAction\taction, doImmediate", "contents": "test.callServerAction(action, doImmediate)"},
        { "trigger": "test.setServerReachable\treachable", "contents": "test.setServerReachable(reachable)"},
        { "trigger": "test.runAfterIf\tconditionFunction, callback, intervalInMs", "contents": "test.runAfterIf(conditionFunction, callback, intervalInMs)"},
        { "trigger": "test.setTestTimeout\ttimeoutMsec", "contents": "test.setTestTimeout(timeoutMsec)"},
        { "trigger": "test.isComplete\t", "contents": "test.isComplete()"},
        { "trigger": "test.getErrors\t", "contents": "test.getErrors()"},
        { "trigger": "test.print\tvalue", "contents": "test.print(value)"},
        { "trigger": "test.auraError\tlevel, msg", "contents": "test.auraError(level, msg)"},
        { "trigger": "test.expectAuraError\te", "contents": "test.expectAuraError(e)"},
        { "trigger": "test.auraWarning\tlevel, msg", "contents": "test.auraWarning(level, msg)"},
        { "trigger": "test.expectAuraWarning\tw", "contents": "test.expectAuraWarning(w)"},
        { "trigger": "test.assertAccessible\t", "contents": "test.assertAccessible()"},
        { "trigger": "test.assertTruthy\tcondition, assertMessage", "contents": "test.assertTruthy(condition, assertMessage)"},
        { "trigger": "test.assertFalsy\tcondition, assertMessage", "contents": "test.assertFalsy(condition, assertMessage)"},
        { "trigger": "test.assert\tcondition, assertMessage", "contents": "test.assert(condition, assertMessage)"},
        { "trigger": "test.assertEquals\targ1, arg2, assertMessage", "contents": "test.assertEquals(arg1, arg2, assertMessage)"},
        { "trigger": "test.assertEqualsIgnoreWhitespace\targ1, arg2, assertMessage", "contents": "test.assertEqualsIgnoreWhitespace(arg1, arg2, assertMessage)"},
        { "trigger": "test.assertStartsWith\tstart, full, assertMessage", "contents": "test.assertStartsWith(start, full, assertMessage)"},
        { "trigger": "test.assertNotEquals\targ1, arg2, assertMessage", "contents": "test.assertNotEquals(arg1, arg2, assertMessage)"},
        { "trigger": "test.assertDefined\tcondition, assertMessage", "contents": "test.assertDefined(condition, assertMessage)"},
        { "trigger": "test.assertTrue\tcondition, assertMessage", "contents": "test.assertTrue(condition, assertMessage)"},
        { "trigger": "test.assertFalse\tcondition, assertMessage", "contents": "test.assertFalse(condition, assertMessage)"},
        { "trigger": "test.assertUndefined\tcondition, assertMessage", "contents": "test.assertUndefined(condition, assertMessage)"},
        { "trigger": "test.assertNotUndefinedOrNull\tcondition, assertMessage", "contents": "test.assertNotUndefinedOrNull(condition, assertMessage)"},
        { "trigger": "test.assertUndefinedOrNull\tcondition, assertMessage", "contents": "test.assertUndefinedOrNull(condition, assertMessage)"},
        { "trigger": "test.assertNull\tcondition, assertMessage", "contents": "test.assertNull(condition, assertMessage)"},
        { "trigger": "test.assertNotNull\tcondition, assertMessage", "contents": "test.assertNotNull(condition, assertMessage)"},
        { "trigger": "test.assertAuraType\ttype, condition, assertMessage", "contents": "test.assertAuraType(type, condition, assertMessage)"},
        { "trigger": "test.fail\tassertMessage, extraInfoMessage", "contents": "test.fail(assertMessage, extraInfoMessage)"},
        { "trigger": "test.getPrototype\tinstance", "contents": "test.getPrototype(instance)"},
        { "trigger": "test.overrideFunction\tinstance, name, newFunction", "contents": "test.overrideFunction(instance, name, newFunction)"},
        { "trigger": "test.addFunctionHandler\tinstance, name, newFunction, postProcess", "contents": "test.addFunctionHandler(instance, name, newFunction, postProcess)"},
        { "trigger": "test.getOuterHtml\tnode", "contents": "test.getOuterHtml(node)"},
        { "trigger": "test.getText\tnode", "contents": "test.getText(node)"},
        { "trigger": "test.getTextByComponent\tcomponent", "contents": "test.getTextByComponent(component)"},
        { "trigger": "test.getStyle\telem, style", "contents": "test.getStyle(elem, style)"},
        { "trigger": "test.getNonCommentNodes\tnodes", "contents": "test.getNonCommentNodes(nodes)"},
        { "trigger": "test.isNodeDeleted\tnode", "contents": "test.isNodeDeleted(node)"},
        { "trigger": "test.select\t", "contents": "test.select()"},
        { "trigger": "test.contains\ttestString, targetString", "contents": "test.contains(testString, targetString)"},
        { "trigger": "test.compareValues\texpected, actual", "contents": "test.compareValues(expected, actual)"},
        { "trigger": "test.getActiveElement\t", "contents": "test.getActiveElement()"},
        { "trigger": "test.getActiveElementText\t", "contents": "test.getActiveElementText()"},
        { "trigger": "test.walkTheDOM\tnode, func", "contents": "test.walkTheDOM(node, func)"},
        { "trigger": "test.getElementsByClassNameCustom\tclassName, parentElement", "contents": "test.getElementsByClassNameCustom(className, parentElement)"},
        { "trigger": "test.findChildWithClassName\tparentElement, className", "contents": "test.findChildWithClassName(parentElement, className)"},
        { "trigger": "test.getElementByClass\tclassname", "contents": "test.getElementByClass(classname)"},
        { "trigger": "test.fireDomEvent\telement, eventName, canBubble, cancelable", "contents": "test.fireDomEvent(element, eventName, canBubble, cancelable)"},
        { "trigger": "test.clickOrTouch\telement, canBubble, cancelable", "contents": "test.clickOrTouch(element, canBubble, cancelable)"},
        { "trigger": "test.isInstanceOfText\tnode", "contents": "test.isInstanceOfText(node)"},
        { "trigger": "test.isInstanceOfAnchorElement\telement", "contents": "test.isInstanceOfAnchorElement(element)"},
        { "trigger": "test.isInstanceOfInputElement\telement", "contents": "test.isInstanceOfInputElement(element)"},
        { "trigger": "test.isInstanceOfLiElement\telement", "contents": "test.isInstanceOfLiElement(element)"},
        { "trigger": "test.isInstanceOfParagraphElement\telement", "contents": "test.isInstanceOfParagraphElement(element)"},
        { "trigger": "test.isInstanceOfButtonElement\telement", "contents": "test.isInstanceOfButtonElement(element)"},
        { "trigger": "test.isInstanceOfImageElement\telement", "contents": "test.isInstanceOfImageElement(element)"},
        { "trigger": "test.isInstanceOfDivElement\telement", "contents": "test.isInstanceOfDivElement(element)"},
        { "trigger": "test.isInstanceOfSpanElement\telement", "contents": "test.isInstanceOfSpanElement(element)"},
        { "trigger": "test.isInstanceOf\telement, elementType, tag", "contents": "test.isInstanceOf(element, elementType, tag)"},
        { "trigger": "test.objectKeys\tobj", "contents": "test.objectKeys(obj)"},
        { "trigger": "test.getElementAttributeValue\telement, attributeName", "contents": "test.getElementAttributeValue(element, attributeName)"},
        { "trigger": "test.addEventHandler\teventName, handler, component, insert", "contents": "test.addEventHandler(eventName, handler, component, insert)"},
        { "trigger": "test.dummyFunction\t", "contents": "test.dummyFunction()"},
        { "trigger": "test.getAppCacheEvents\t", "contents": "test.getAppCacheEvents()"},
        { "trigger": "test.getAuraErrorMessage\t", "contents": "test.getAuraErrorMessage()"},
        { "trigger": "test.getAvailableXHROverride\tconfig, isBackground", "contents": "test.getAvailableXHROverride(config, isBackground)"},
        { "trigger": "test.sendOverride\tconfig, auraXHR, actions, method, options", "contents": "test.sendOverride(config, auraXHR, actions, method, options)"},
        { "trigger": "test.decodeOverride\tconfig, response, noStrip", "contents": "test.decodeOverride(config, response, noStrip)"},
        { "trigger": "test.PrePostConfig\taction, preSendCallback, postSendCallback", "contents": "test.PrePostConfig(action, preSendCallback, postSendCallback)"},
        { "trigger": "test.addPrePostSendCallback\taction, preSendCallback, postSendCallback", "contents": "test.addPrePostSendCallback(action, preSendCallback, postSendCallback)"},
        { "trigger": "test.removePrePostSendCallback\thandle", "contents": "test.removePrePostSendCallback(handle)"},
        { "trigger": "test.install\t", "contents": "test.install()"},
        { "trigger": "test.run\tname, code, timeoutOverride, quickFixException", "contents": "test.run(name, code, timeoutOverride, quickFixException)"},
        { "trigger": "test.runInternal\tname", "contents": "test.runInternal(name)"},
        { "trigger": "test.executeAfterCkEditorIsReady\tinputRichTextComponent, callback", "contents": "test.executeAfterCkEditorIsReady(inputRichTextComponent, callback)"},
        { "trigger": "test.reloadGlobalValueProviders\tgvp, callback", "contents": "test.reloadGlobalValueProviders(gvp, callback)"},
        { "trigger": "test.getCreationPath\tcmp", "contents": "test.getCreationPath(cmp)"},
        { "trigger": "test.createHttpRequest\t", "contents": "test.createHttpRequest()"},
        { "trigger": "test.checkGlobalNamespacePollution\t", "contents": "test.checkGlobalNamespacePollution()"},
        { "trigger": "test.orderedEncode\tobj", "contents": "test.orderedEncode(obj)"},
        { "trigger": "util.isIE\t", "contents": "util.isIE()"},
        { "trigger": "util.isIOSWebView\t", "contents": "util.isIOSWebView()"},
        { "trigger": "util.globalEval\t", "contents": "util.globalEval()"},
        { "trigger": "util.isArray\t", "contents": "util.isArray()"},
        { "trigger": "util.isObject\tobj", "contents": "util.isObject(obj)"},
        { "trigger": "util.isPlainObject\tobj", "contents": "util.isPlainObject(obj)"},
        { "trigger": "util.isError\tobj", "contents": "util.isError(obj)"},
        { "trigger": "util.isFunction\tobj", "contents": "util.isFunction(obj)"},
        { "trigger": "util.isString\tobj", "contents": "util.isString(obj)"},
        { "trigger": "util.isNumber\tobj", "contents": "util.isNumber(obj)"},
        { "trigger": "util.isFiniteNumber\tobj", "contents": "util.isFiniteNumber(obj)"},
        { "trigger": "util.isBoolean\tobj", "contents": "util.isBoolean(obj)"},
        { "trigger": "util.isUndefined\tobj", "contents": "util.isUndefined(obj)"},
        { "trigger": "util.isUndefinedOrNull\tobj", "contents": "util.isUndefinedOrNull(obj)"},
        { "trigger": "util.isEmpty\tobj", "contents": "util.isEmpty(obj)"},
        { "trigger": "util.getBooleanValue\tval", "contents": "util.getBooleanValue(val)"},
        { "trigger": "util.createHtmlElement\ttagName, attributes", "contents": "util.createHtmlElement(tagName, attributes)"},
        { "trigger": "util.clearNode\tnode", "contents": "util.clearNode(node)"},
        { "trigger": "util.getElement\tid", "contents": "util.getElement(id)"},
        { "trigger": "util.copy\tvalue", "contents": "util.copy(value)"},
        { "trigger": "util.compareValues\texpected, actual", "contents": "util.compareValues(expected, actual)"},
        { "trigger": "util.hasClass\telement, className", "contents": "util.hasClass(element, className)"},
        { "trigger": "util.addClass\telement, newClass", "contents": "util.addClass(element, newClass)"},
        { "trigger": "util.removeClass\telement, newClass", "contents": "util.removeClass(element, newClass)"},
        { "trigger": "util.toggleClass\telement, className, condition", "contents": "util.toggleClass(element, className, condition)"},
        { "trigger": "util.swapClass\telement, oldClass, newClass", "contents": "util.swapClass(element, oldClass, newClass)"},
        { "trigger": "util.setClass\telement,newClass,remove", "contents": "util.setClass(element,newClass,remove)"},
        { "trigger": "util.buildClass\toldClass, newClass, remove", "contents": "util.buildClass(oldClass, newClass, remove)"},
        { "trigger": "util.buildFlavorClass\tcmp, flavor", "contents": "util.buildFlavorClass(cmp, flavor)"},
        { "trigger": "util.createElementsFromMarkup\tmarkup", "contents": "util.createElementsFromMarkup(markup)"},
        { "trigger": "util.insertFirst\tnewEl, referenceEl", "contents": "util.insertFirst(newEl, referenceEl)"},
        { "trigger": "util.insertBefore\tnewEl, referenceEl", "contents": "util.insertBefore(newEl, referenceEl)"},
        { "trigger": "util.insertAfter\tnewEl, referenceEl", "contents": "util.insertAfter(newEl, referenceEl)"},
        { "trigger": "util.appendChild\tnewEl, referenceEl", "contents": "util.appendChild(newEl, referenceEl)"},
        { "trigger": "util.removeElement\telement", "contents": "util.removeElement(element)"},
        { "trigger": "util.urlDecode\turl", "contents": "util.urlDecode(url)"},
        { "trigger": "util.trim\tvalue", "contents": "util.trim(value)"},
        { "trigger": "util.format\tformatString,arg1,arg2,argN", "contents": "util.format(formatString,arg1,arg2,argN)"},
        { "trigger": "util.truncate\tst, len, ellipsis, truncateByWord", "contents": "util.truncate(st, len, ellipsis, truncateByWord)"},
        { "trigger": "util.createTimeoutCallback\tcallback, toleranceMillis", "contents": "util.createTimeoutCallback(callback, toleranceMillis)"},
        { "trigger": "util.removeOn\telement, eventName, listener, useCapture", "contents": "util.removeOn(element, eventName, listener, useCapture)"},
        { "trigger": "util.formToMap\tform", "contents": "util.formToMap(form)"},
        { "trigger": "util.getSelectValue\tselect", "contents": "util.getSelectValue(select)"},
        { "trigger": "util.addValueToMap\tinputMap, key, value", "contents": "util.addValueToMap(inputMap, key, value)"},
        { "trigger": "util.addMapValueToMap\tinputMap, key, value, subMapKey", "contents": "util.addMapValueToMap(inputMap, key, value, subMapKey)"},
        { "trigger": "util.isSubDef\tdef, qname", "contents": "util.isSubDef(def, qname)"},
        { "trigger": "util.apply\t baseObject,  members,  forceCopy,  deepCopy", "contents": "util.apply( baseObject,  members,  forceCopy,  deepCopy)"},
        { "trigger": "util.camelCaseToHyphens\tstr", "contents": "util.camelCaseToHyphens(str)"},
        { "trigger": "util.hyphensToCamelCase\tstr", "contents": "util.hyphensToCamelCase(str)"},
        { "trigger": "util.acceptsData\telement", "contents": "util.acceptsData(element)"},
        { "trigger": "util.getElementAttributeValue\telement,attributeName", "contents": "util.getElementAttributeValue(element,attributeName)"},
        { "trigger": "util.getDataAttribute\telement, key", "contents": "util.getDataAttribute(element, key)"},
        { "trigger": "util.setDataAttribute\telement, key, value", "contents": "util.setDataAttribute(element, key, value)"},
        { "trigger": "util.getDataAttributeName\tkey", "contents": "util.getDataAttributeName(key)"},
        { "trigger": "util.hasDataAttribute\telement, key", "contents": "util.hasDataAttribute(element, key)"},
        { "trigger": "util.isElement\tobj", "contents": "util.isElement(obj)"},
        { "trigger": "util.attachToDocumentBody\telement", "contents": "util.attachToDocumentBody(element)"},
        { "trigger": "util.stringEndsWith\tfullstr, substr", "contents": "util.stringEndsWith(fullstr, substr)"},
        { "trigger": "util.bind\t", "contents": "util.bind()"},
        { "trigger": "util.keys\t", "contents": "util.keys()"},
        { "trigger": "util.lookup\tobject ", "contents": "util.lookup(object )"},
        { "trigger": "util.merge\tfirst ", "contents": "util.merge(first )"},
        { "trigger": "util.forEach\t", "contents": "util.forEach()"},
        { "trigger": "util.map\t", "contents": "util.map()"},
        { "trigger": "util.reduce\t", "contents": "util.reduce()"},
        { "trigger": "util.every\t", "contents": "util.every()"},
        { "trigger": "util.some\t", "contents": "util.some()"},
        { "trigger": "util.filter\t", "contents": "util.filter()"},
        { "trigger": "util.destroyAsync\tcmp", "contents": "util.destroyAsync(cmp)"},
        { "trigger": "util.instanceOf\tinstance, constructor", "contents": "util.instanceOf(instance, constructor)"},
        { "trigger": "util.emptyComponentTrash\t", "contents": "util.emptyComponentTrash()"},
        { "trigger": "util.contains\tcontainer, element", "contents": "util.contains(container, element)"},
        { "trigger": "util.squash\tevent, preventDefault", "contents": "util.squash(event, preventDefault)"},
        { "trigger": "util.stripTags\tinput, tags", "contents": "util.stripTags(input, tags)"},
        { "trigger": "util.getWindowSize\t", "contents": "util.getWindowSize()"},
        { "trigger": "util.isComponent\tobj", "contents": "util.isComponent(obj)"},
        { "trigger": "util.isExpression\tobj", "contents": "util.isExpression(obj)"},
        { "trigger": "util.isValue\tobj", "contents": "util.isValue(obj)"},
        { "trigger": "util.isAction\tobj", "contents": "util.isAction(obj)"},
        { "trigger": "util.supportsTouchEvents\t", "contents": "util.supportsTouchEvents()"},
        { "trigger": "util.estimateSize\tobj", "contents": "util.estimateSize(obj)"},
        { "trigger": "util.toArray\tcollection", "contents": "util.toArray(collection)"},
        { "trigger": "util.setText\tnode, text", "contents": "util.setText(node, text)"},
        { "trigger": "util.getDebugToolComponent\t", "contents": "util.getDebugToolComponent()"},
        { "trigger": "util.getDebugToolsAuraInstance\t", "contents": "util.getDebugToolsAuraInstance()"},
        { "trigger": "util.setDebugToolWindow\tdebugWindow", "contents": "util.setDebugToolWindow(debugWindow)"},
        { "trigger": "util.getUrl\t", "contents": "util.getUrl()"},
        { "trigger": "util.getText\tnode", "contents": "util.getText(node)"},
        { "trigger": "util.errorBasedOnMode\tmsg", "contents": "util.errorBasedOnMode(msg)"},
        { "trigger": "util.includeScript\turl, callback", "contents": "util.includeScript(url, callback)"},
    ]
}

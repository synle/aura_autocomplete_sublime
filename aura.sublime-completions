{
    "scope": "source, comment, text.plain, meta.tag, punctuation.definition.tag.begin, css",
    "completions":
    [
        { "trigger": "$A.test.errors", "content" : "$A.test.errors"},
        { "trigger": "$A.test.addWaitFor(expected, testFunction, callback)", "content" : "$A.test.addWaitFor(expected, testFunction, callback)"},
        { "trigger": "$A.test.addWaitForAction(success, actionName, callback)", "content" : "$A.test.addWaitForAction(success, actionName, callback)"},
        { "trigger": "$A.test.addWaitForWithFailureMessage(expected, testFunction, failureMessage, callback)", "content" : "$A.test.addWaitForWithFailureMessage(expected, testFunction, failureMessage, callback)"},
        { "trigger": "$A.test.blockRequests()", "content" : "$A.test.blockRequests()"},
        { "trigger": "$A.test.blockForegroundRequests()", "content" : "$A.test.blockForegroundRequests()"},
        { "trigger": "$A.test.blockBackgroundRequests()", "content" : "$A.test.blockBackgroundRequests()"},
        { "trigger": "$A.test.releaseRequests()", "content" : "$A.test.releaseRequests()"},
        { "trigger": "$A.test.releaseForegroundRequests()", "content" : "$A.test.releaseForegroundRequests()"},
        { "trigger": "$A.test.releaseBackgroundRequests()", "content" : "$A.test.releaseBackgroundRequests()"},
        { "trigger": "$A.test.getSentRequestCount()", "content" : "$A.test.getSentRequestCount()"},
        { "trigger": "$A.test.areActionsComplete(actions)", "content" : "$A.test.areActionsComplete(actions)"},
        { "trigger": "$A.test.addCleanup(cleanupFunction)", "content" : "$A.test.addCleanup(cleanupFunction)"},
        { "trigger": "$A.test.getAction(component, name, params, callback)", "content" : "$A.test.getAction(component, name, params, callback)"},
        { "trigger": "$A.test.runActionsAsTransaction(actions, scope, callback)", "content" : "$A.test.runActionsAsTransaction(actions, scope, callback)"},
        { "trigger": "$A.test.enqueueAction(action, background)", "content" : "$A.test.enqueueAction(action, background)"},
        { "trigger": "$A.test.getExternalAction(component, descriptor, params, returnType, callback)", "content" : "$A.test.getExternalAction(component, descriptor, params, returnType, callback)"},
        { "trigger": "$A.test.clearAndAssertComponentConfigs(a)", "content" : "$A.test.clearAndAssertComponentConfigs(a)"},
        { "trigger": "$A.test.isActionPending()", "content" : "$A.test.isActionPending()"},
        { "trigger": "$A.test.callServerAction(action, doImmediate)", "content" : "$A.test.callServerAction(action, doImmediate)"},
        { "trigger": "$A.test.setServerReachable(reachable)", "content" : "$A.test.setServerReachable(reachable)"},
        { "trigger": "$A.test.runAfterIf(conditionFunction, callback, intervalInMs)", "content" : "$A.test.runAfterIf(conditionFunction, callback, intervalInMs)"},
        { "trigger": "$A.test.setTestTimeout(timeoutMsec)", "content" : "$A.test.setTestTimeout(timeoutMsec)"},
        { "trigger": "$A.test.isComplete()", "content" : "$A.test.isComplete()"},
        { "trigger": "$A.test.getErrors()", "content" : "$A.test.getErrors()"},
        { "trigger": "$A.test.print(value)", "content" : "$A.test.print(value)"},
        { "trigger": "$A.test.auraError(level, msg/*, error*/)", "content" : "$A.test.auraError(level, msg/*, error*/)"},
        { "trigger": "$A.test.expectAuraError(e)", "content" : "$A.test.expectAuraError(e)"},
        { "trigger": "$A.test.auraWarning(level, msg)", "content" : "$A.test.auraWarning(level, msg)"},
        { "trigger": "$A.test.expectAuraWarning(w)", "content" : "$A.test.expectAuraWarning(w)"},
        { "trigger": "$A.test.assertAccessible()", "content" : "$A.test.assertAccessible()"},
        { "trigger": "$A.test.assertTruthy(condition, assertMessage)", "content" : "$A.test.assertTruthy(condition, assertMessage)"},
        { "trigger": "$A.test.assertFalsy(condition, assertMessage)", "content" : "$A.test.assertFalsy(condition, assertMessage)"},
        { "trigger": "$A.test.assert(condition, assertMessage)", "content" : "$A.test.assert(condition, assertMessage)"},
        { "trigger": "$A.test.assertEquals(arg1, arg2, assertMessage)", "content" : "$A.test.assertEquals(arg1, arg2, assertMessage)"},
        { "trigger": "$A.test.assertEqualsIgnoreWhitespace(arg1, arg2, assertMessage)", "content" : "$A.test.assertEqualsIgnoreWhitespace(arg1, arg2, assertMessage)"},
        { "trigger": "$A.test.assertStartsWith(start, full, assertMessage)", "content" : "$A.test.assertStartsWith(start, full, assertMessage)"},
        { "trigger": "$A.test.assertNotEquals(arg1, arg2, assertMessage)", "content" : "$A.test.assertNotEquals(arg1, arg2, assertMessage)"},
        { "trigger": "$A.test.assertDefined(condition, assertMessage)", "content" : "$A.test.assertDefined(condition, assertMessage)"},
        { "trigger": "$A.test.assertTrue(condition, assertMessage)", "content" : "$A.test.assertTrue(condition, assertMessage)"},
        { "trigger": "$A.test.assertFalse(condition, assertMessage)", "content" : "$A.test.assertFalse(condition, assertMessage)"},
        { "trigger": "$A.test.assertUndefined(condition, assertMessage)", "content" : "$A.test.assertUndefined(condition, assertMessage)"},
        { "trigger": "$A.test.assertNotUndefinedOrNull(condition, assertMessage)", "content" : "$A.test.assertNotUndefinedOrNull(condition, assertMessage)"},
        { "trigger": "$A.test.assertUndefinedOrNull(condition, assertMessage)", "content" : "$A.test.assertUndefinedOrNull(condition, assertMessage)"},
        { "trigger": "$A.test.assertNull(condition, assertMessage)", "content" : "$A.test.assertNull(condition, assertMessage)"},
        { "trigger": "$A.test.assertNotNull(condition, assertMessage)", "content" : "$A.test.assertNotNull(condition, assertMessage)"},
        { "trigger": "$A.test.assertAuraType(type, condition, assertMessage)", "content" : "$A.test.assertAuraType(type, condition, assertMessage)"},
        { "trigger": "$A.test.fail(assertMessage, extraInfoMessage)", "content" : "$A.test.fail(assertMessage, extraInfoMessage)"},
        { "trigger": "$A.test.getPrototype(instance)", "content" : "$A.test.getPrototype(instance)"},
        { "trigger": "$A.test.overrideFunction(instance, name, newFunction)", "content" : "$A.test.overrideFunction(instance, name, newFunction)"},
        { "trigger": "$A.test.addFunctionHandler(instance, name, newFunction, postProcess)", "content" : "$A.test.addFunctionHandler(instance, name, newFunction, postProcess)"},
        { "trigger": "$A.test.getOuterHtml(node)", "content" : "$A.test.getOuterHtml(node)"},
        { "trigger": "$A.test.getText(node)", "content" : "$A.test.getText(node)"},
        { "trigger": "$A.test.getTextByComponent(component)", "content" : "$A.test.getTextByComponent(component)"},
        { "trigger": "$A.test.getStyle(elem, style)", "content" : "$A.test.getStyle(elem, style)"},
        { "trigger": "$A.test.getNonCommentNodes(nodes)", "content" : "$A.test.getNonCommentNodes(nodes)"},
        { "trigger": "$A.test.isNodeDeleted(node)", "content" : "$A.test.isNodeDeleted(node)"},
        { "trigger": "$A.test.select()", "content" : "$A.test.select()"},
        { "trigger": "$A.test.contains(testString, targetString)", "content" : "$A.test.contains(testString, targetString)"},
        { "trigger": "$A.test.compareValues(expected, actual)", "content" : "$A.test.compareValues(expected, actual)"},
        { "trigger": "$A.test.getActiveElement()", "content" : "$A.test.getActiveElement()"},
        { "trigger": "$A.test.getActiveElementText()", "content" : "$A.test.getActiveElementText()"},
        { "trigger": "$A.test.walkTheDOM(node, func)", "content" : "$A.test.walkTheDOM(node, func)"},
        { "trigger": "$A.test.getElementsByClassNameCustom(className, parentElement)", "content" : "$A.test.getElementsByClassNameCustom(className, parentElement)"},
        { "trigger": "$A.test.findChildWithClassName(parentElement, className)", "content" : "$A.test.findChildWithClassName(parentElement, className)"},
        { "trigger": "$A.test.getElementByClass(classname)", "content" : "$A.test.getElementByClass(classname)"},
        { "trigger": "$A.test.fireDomEvent(element, eventName, canBubble, cancelable)", "content" : "$A.test.fireDomEvent(element, eventName, canBubble, cancelable)"},
        { "trigger": "$A.test.clickOrTouch(element, canBubble, cancelable)", "content" : "$A.test.clickOrTouch(element, canBubble, cancelable)"},
        { "trigger": "$A.test.isInstanceOfText(node)", "content" : "$A.test.isInstanceOfText(node)"},
        { "trigger": "$A.test.isInstanceOfAnchorElement(element)", "content" : "$A.test.isInstanceOfAnchorElement(element)"},
        { "trigger": "$A.test.isInstanceOfInputElement(element)", "content" : "$A.test.isInstanceOfInputElement(element)"},
        { "trigger": "$A.test.isInstanceOfLiElement(element)", "content" : "$A.test.isInstanceOfLiElement(element)"},
        { "trigger": "$A.test.isInstanceOfParagraphElement(element)", "content" : "$A.test.isInstanceOfParagraphElement(element)"},
        { "trigger": "$A.test.isInstanceOfButtonElement(element)", "content" : "$A.test.isInstanceOfButtonElement(element)"},
        { "trigger": "$A.test.isInstanceOfImageElement(element)", "content" : "$A.test.isInstanceOfImageElement(element)"},
        { "trigger": "$A.test.isInstanceOfDivElement(element)", "content" : "$A.test.isInstanceOfDivElement(element)"},
        { "trigger": "$A.test.isInstanceOfSpanElement(element)", "content" : "$A.test.isInstanceOfSpanElement(element)"},
        { "trigger": "$A.test.isInstanceOf(element, elementType, tag)", "content" : "$A.test.isInstanceOf(element, elementType, tag)"},
        { "trigger": "$A.test.objectKeys(obj)", "content" : "$A.test.objectKeys(obj)"},
        { "trigger": "$A.test.getElementAttributeValue(element, attributeName)", "content" : "$A.test.getElementAttributeValue(element, attributeName)"},
        { "trigger": "$A.test.addEventHandler(eventName, handler, component, insert)", "content" : "$A.test.addEventHandler(eventName, handler, component, insert)"},
        { "trigger": "$A.test.dummyFunction()", "content" : "$A.test.dummyFunction()"},
        { "trigger": "$A.test.getAppCacheEvents()", "content" : "$A.test.getAppCacheEvents()"},
        { "trigger": "$A.test.getAuraErrorMessage()", "content" : "$A.test.getAuraErrorMessage()"},
        { "trigger": "$A.test.getAvailableXHROverride(config, isBackground)", "content" : "$A.test.getAvailableXHROverride(config, isBackground)"},
        { "trigger": "$A.test.sendOverride(config, auraXHR, actions, method, options)", "content" : "$A.test.sendOverride(config, auraXHR, actions, method, options)"},
        { "trigger": "$A.test.decodeOverride(config, response, noStrip)", "content" : "$A.test.decodeOverride(config, response, noStrip)"},
        { "trigger": "$A.test.PrePostConfig (action, preSendCallback, postSendCallback)", "content" : "$A.test.PrePostConfig (action, preSendCallback, postSendCallback)"},
        { "trigger": "$A.test.addPrePostSendCallback (action, preSendCallback, postSendCallback)", "content" : "$A.test.addPrePostSendCallback (action, preSendCallback, postSendCallback)"},
        { "trigger": "$A.test.removePrePostSendCallback (handle)", "content" : "$A.test.removePrePostSendCallback (handle)"},
        { "trigger": "$A.test.install()", "content" : "$A.test.install()"},
        { "trigger": "$A.test.run(name, code, timeoutOverride, quickFixException)", "content" : "$A.test.run(name, code, timeoutOverride, quickFixException)"},
        { "trigger": "$A.test.runInternal(name)", "content" : "$A.test.runInternal(name)"},
        { "trigger": "$A.test.executeAfterCkEditorIsReady(inputRichTextComponent, callback)", "content" : "$A.test.executeAfterCkEditorIsReady(inputRichTextComponent, callback)"},
        { "trigger": "$A.test.reloadGlobalValueProviders(gvp, callback)", "content" : "$A.test.reloadGlobalValueProviders(gvp, callback)"},
        { "trigger": "$A.test.getCreationPath(cmp)", "content" : "$A.test.getCreationPath(cmp)"},
        { "trigger": "$A.test.createHttpRequest()", "content" : "$A.test.createHttpRequest()"},
        { "trigger": "$A.test.checkGlobalNamespacePollution()", "content" : "$A.test.checkGlobalNamespacePollution()"},
        { "trigger": "$A.test.orderedEncode(obj)", "content" : "$A.test.orderedEncode(obj)"},
        { "trigger": "$A.util.isIE()", "content" : "$A.util.isIE()"},
        { "trigger": "$A.util.isIOSWebView()", "content" : "$A.util.isIOSWebView()"},
        { "trigger": "$A.util.globalEval()", "content" : "$A.util.globalEval()"},
        { "trigger": "$A.util.isArray()", "content" : "$A.util.isArray()"},
        { "trigger": "$A.util.isObject(obj)", "content" : "$A.util.isObject(obj)"},
        { "trigger": "$A.util.isPlainObject(obj)", "content" : "$A.util.isPlainObject(obj)"},
        { "trigger": "$A.util.isError(obj)", "content" : "$A.util.isError(obj)"},
        { "trigger": "$A.util.isFunction(obj)", "content" : "$A.util.isFunction(obj)"},
        { "trigger": "$A.util.isString(obj)", "content" : "$A.util.isString(obj)"},
        { "trigger": "$A.util.isNumber(obj)", "content" : "$A.util.isNumber(obj)"},
        { "trigger": "$A.util.isFiniteNumber(obj)", "content" : "$A.util.isFiniteNumber(obj)"},
        { "trigger": "$A.util.isBoolean(obj)", "content" : "$A.util.isBoolean(obj)"},
        { "trigger": "$A.util.isUndefined(obj)", "content" : "$A.util.isUndefined(obj)"},
        { "trigger": "$A.util.isUndefinedOrNull(obj)", "content" : "$A.util.isUndefinedOrNull(obj)"},
        { "trigger": "$A.util.isEmpty(obj)", "content" : "$A.util.isEmpty(obj)"},
        { "trigger": "$A.util.getBooleanValue (val)", "content" : "$A.util.getBooleanValue (val)"},
        { "trigger": "$A.util.createHtmlElement (tagName, attributes)", "content" : "$A.util.createHtmlElement (tagName, attributes)"},
        { "trigger": "$A.util.clearNode (node)", "content" : "$A.util.clearNode (node)"},
        { "trigger": "$A.util.getElement(id)", "content" : "$A.util.getElement(id)"},
        { "trigger": "$A.util.copy(value)", "content" : "$A.util.copy(value)"},
        { "trigger": "$A.util.compareValues(expected, actual)", "content" : "$A.util.compareValues(expected, actual)"},
        { "trigger": "$A.util.hasClass(element, className)", "content" : "$A.util.hasClass(element, className)"},
        { "trigger": "$A.util.addClass(element, newClass)", "content" : "$A.util.addClass(element, newClass)"},
        { "trigger": "$A.util.removeClass(element, newClass)", "content" : "$A.util.removeClass(element, newClass)"},
        { "trigger": "$A.util.toggleClass(element, className, condition)", "content" : "$A.util.toggleClass(element, className, condition)"},
        { "trigger": "$A.util.swapClass(element, oldClass, newClass)", "content" : "$A.util.swapClass(element, oldClass, newClass)"},
        { "trigger": "$A.util.setClass(element,newClass,remove)", "content" : "$A.util.setClass(element,newClass,remove)"},
        { "trigger": "$A.util.buildClass(oldClass, newClass, remove)", "content" : "$A.util.buildClass(oldClass, newClass, remove)"},
        { "trigger": "$A.util.buildFlavorClass(cmp, flavor)", "content" : "$A.util.buildFlavorClass(cmp, flavor)"},
        { "trigger": "$A.util.createElementsFromMarkup(markup)", "content" : "$A.util.createElementsFromMarkup(markup)"},
        { "trigger": "$A.util.insertFirst(newEl, referenceEl)", "content" : "$A.util.insertFirst(newEl, referenceEl)"},
        { "trigger": "$A.util.insertBefore(newEl, referenceEl)", "content" : "$A.util.insertBefore(newEl, referenceEl)"},
        { "trigger": "$A.util.insertAfter(newEl, referenceEl)", "content" : "$A.util.insertAfter(newEl, referenceEl)"},
        { "trigger": "$A.util.appendChild(newEl, referenceEl)", "content" : "$A.util.appendChild(newEl, referenceEl)"},
        { "trigger": "$A.util.removeElement(element)", "content" : "$A.util.removeElement(element)"},
        { "trigger": "$A.util.urlDecode(url)", "content" : "$A.util.urlDecode(url)"},
        { "trigger": "$A.util.trim(value)", "content" : "$A.util.trim(value)"},
        { "trigger": "$A.util.format(formatString,arg1,arg2,argN)", "content" : "$A.util.format(formatString,arg1,arg2,argN)"},
        { "trigger": "$A.util.truncate(st, len, ellipsis, truncateByWord)", "content" : "$A.util.truncate(st, len, ellipsis, truncateByWord)"},
        { "trigger": "$A.util.createTimeoutCallback(callback, toleranceMillis)", "content" : "$A.util.createTimeoutCallback(callback, toleranceMillis)"},
        { "trigger": "$A.util.removeOn(element, eventName, listener, useCapture)", "content" : "$A.util.removeOn(element, eventName, listener, useCapture)"},
        { "trigger": "$A.util.formToMap(form)", "content" : "$A.util.formToMap(form)"},
        { "trigger": "$A.util.getSelectValue(select)", "content" : "$A.util.getSelectValue(select)"},
        { "trigger": "$A.util.addValueToMap(inputMap, key, value)", "content" : "$A.util.addValueToMap(inputMap, key, value)"},
        { "trigger": "$A.util.addMapValueToMap(inputMap, key, value, subMapKey)", "content" : "$A.util.addMapValueToMap(inputMap, key, value, subMapKey)"},
        { "trigger": "$A.util.isSubDef(def, qname)", "content" : "$A.util.isSubDef(def, qname)"},
        { "trigger": "$A.util.apply(/* Object|Function */ baseObject, /* Object|Function*/ members, /* bool */ forceCopy, /* bool */ deepCopy)", "content" : "$A.util.apply(/* Object|Function */ baseObject, /* Object|Function*/ members, /* bool */ forceCopy, /* bool */ deepCopy)"},
        { "trigger": "$A.util.camelCaseToHyphens(str)", "content" : "$A.util.camelCaseToHyphens(str)"},
        { "trigger": "$A.util.hyphensToCamelCase(str)", "content" : "$A.util.hyphensToCamelCase(str)"},
        { "trigger": "$A.util.acceptsData(element)", "content" : "$A.util.acceptsData(element)"},
        { "trigger": "$A.util.getElementAttributeValue(element,attributeName)", "content" : "$A.util.getElementAttributeValue(element,attributeName)"},
        { "trigger": "$A.util.getDataAttribute(element, key)", "content" : "$A.util.getDataAttribute(element, key)"},
        { "trigger": "$A.util.setDataAttribute(element, key, value)", "content" : "$A.util.setDataAttribute(element, key, value)"},
        { "trigger": "$A.util.getDataAttributeName(key)", "content" : "$A.util.getDataAttributeName(key)"},
        { "trigger": "$A.util.hasDataAttribute(element, key)", "content" : "$A.util.hasDataAttribute(element, key)"},
        { "trigger": "$A.util.isElement(obj)", "content" : "$A.util.isElement(obj)"},
        { "trigger": "$A.util.attachToDocumentBody(element)", "content" : "$A.util.attachToDocumentBody(element)"},
        { "trigger": "$A.util.stringEndsWith(fullstr, substr)", "content" : "$A.util.stringEndsWith(fullstr, substr)"},
        { "trigger": "$A.util.bind()", "content" : "$A.util.bind()"},
        { "trigger": "$A.util.keys()", "content" : "$A.util.keys()"},
        { "trigger": "$A.util.lookup(object /*, var-args of arrays*/)", "content" : "$A.util.lookup(object /*, var-args of arrays*/)"},
        { "trigger": "$A.util.merge(first /*, var-args of arrays*/)", "content" : "$A.util.merge(first /*, var-args of arrays*/)"},
        { "trigger": "$A.util.forEach()", "content" : "$A.util.forEach()"},
        { "trigger": "$A.util.map()", "content" : "$A.util.map()"},
        { "trigger": "$A.util.reduce()", "content" : "$A.util.reduce()"},
        { "trigger": "$A.util.every()", "content" : "$A.util.every()"},
        { "trigger": "$A.util.some()", "content" : "$A.util.some()"},
        { "trigger": "$A.util.filter()", "content" : "$A.util.filter()"},
        { "trigger": "$A.util.destroyAsync(cmp)", "content" : "$A.util.destroyAsync(cmp)"},
        { "trigger": "$A.util.instanceOf(instance, constructor)", "content" : "$A.util.instanceOf(instance, constructor)"},
        { "trigger": "$A.util.emptyComponentTrash()", "content" : "$A.util.emptyComponentTrash()"},
        { "trigger": "$A.util.contains(container, element)", "content" : "$A.util.contains(container, element)"},
        { "trigger": "$A.util.squash(event, preventDefault)", "content" : "$A.util.squash(event, preventDefault)"},
        { "trigger": "$A.util.stripTags(input, tags)", "content" : "$A.util.stripTags(input, tags)"},
        { "trigger": "$A.util.getWindowSize()", "content" : "$A.util.getWindowSize()"},
        { "trigger": "$A.util.isComponent(obj)", "content" : "$A.util.isComponent(obj)"},
        { "trigger": "$A.util.isExpression (obj)", "content" : "$A.util.isExpression (obj)"},
        { "trigger": "$A.util.isValue(obj)", "content" : "$A.util.isValue(obj)"},
        { "trigger": "$A.util.isAction(obj)", "content" : "$A.util.isAction(obj)"},
        { "trigger": "$A.util.supportsTouchEvents()", "content" : "$A.util.supportsTouchEvents()"},
        { "trigger": "$A.util.estimateSize(obj)", "content" : "$A.util.estimateSize(obj)"},
        { "trigger": "$A.util.toArray(collection)", "content" : "$A.util.toArray(collection)"},
        { "trigger": "$A.util.setText(node, text)", "content" : "$A.util.setText(node, text)"},
        { "trigger": "$A.util.getDebugToolComponent()", "content" : "$A.util.getDebugToolComponent()"},
        { "trigger": "$A.util.getDebugToolsAuraInstance()", "content" : "$A.util.getDebugToolsAuraInstance()"},
        { "trigger": "$A.util.setDebugToolWindow(debugWindow)", "content" : "$A.util.setDebugToolWindow(debugWindow)"},
        { "trigger": "$A.util.getUrl()", "content" : "$A.util.getUrl()"},
        { "trigger": "$A.util.getText(node)", "content" : "$A.util.getText(node)"},
        { "trigger": "$A.util.errorBasedOnMode(msg)", "content" : "$A.util.errorBasedOnMode(msg)"},
        { "trigger": "$A.util.includeScript(url, callback", "content)" : "$A.util.includeScript(url, callback)"}
    ]
}

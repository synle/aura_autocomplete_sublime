{
    "scope": "source, js",
    "completions":
    [
        { "trigger": "a_test_error\t()", "contents": "A.test.errors $1"},
        { "trigger": "a_test_addWaitFor\texpected, testFunc, callback", "contents": "A.test.addWaitFor( $1expected, testFunc, callback )"},
        { "trigger": "a_test_addWaitForAction\tsuccess, actionName, callback", "contents": "A.test.addWaitForAction( $1success, actionName, callback )"},
        { "trigger": "a_test_addWaitForWithFailureMessage\texpected, testFunc, failureMessage, callback", "contents": "A.test.addWaitForWithFailureMessage( $1expected, testFunc, failureMessage, callback )"},
        { "trigger": "a_test_blockRequests\t()", "contents": "A.test.blockRequests( $1 )"},
        { "trigger": "a_test_blockForegroundRequests\t()", "contents": "A.test.blockForegroundRequests( $1 )"},
        { "trigger": "a_test_blockBackgroundRequests\t()", "contents": "A.test.blockBackgroundRequests( $1 )"},
        { "trigger": "a_test_releaseRequests\t()", "contents": "A.test.releaseRequests( $1 )"},
        { "trigger": "a_test_releaseForegroundRequests\t()", "contents": "A.test.releaseForegroundRequests( $1 )"},
        { "trigger": "a_test_releaseBackgroundRequests\t()", "contents": "A.test.releaseBackgroundRequests( $1 )"},
        { "trigger": "a_test_getSentRequestCount\t()", "contents": "A.test.getSentRequestCount( $1 )"},
        { "trigger": "a_test_areActionsComplete\tactions", "contents": "A.test.areActionsComplete( $1actions )"},
        { "trigger": "a_test_addCleanup\tcleanupFunction", "contents": "A.test.addCleanup( $1cleanupFunction )"},
        { "trigger": "a_test_getAction\tcomponent, name, params, callback", "contents": "A.test.getAction( $1component, name, params, callback )"},
        { "trigger": "a_test_runActionsAsTransaction\tactions, scope, callback", "contents": "A.test.runActionsAsTransaction( $1actions, scope, callback )"},
        { "trigger": "a_test_enqueueAction\taction, background", "contents": "A.test.enqueueAction( $1action, background )"},
        { "trigger": "a_test_getExternalAction\tcomponent, descriptor, params, returnType, callback", "contents": "A.test.getExternalAction( $1component, descriptor, params, returnType, callback )"},
        { "trigger": "a_test_clearAndAssertComponentConfigs\ta", "contents": "A.test.clearAndAssertComponentConfigs( $1a )"},
        { "trigger": "a_test_isActionPending\t()", "contents": "A.test.isActionPending( $1 )"},
        { "trigger": "a_test_callServerAction\taction, doImmediate", "contents": "A.test.callServerAction( $1action, doImmediate )"},
        { "trigger": "a_test_setServerReachable\treachable", "contents": "A.test.setServerReachable( $1reachable )"},
        { "trigger": "a_test_runAfterIf\tcdnFunc, cb, intervalInMs", "contents": "A.test.runAfterIf( $1cdnFunc, cb, intervalInMs )"},
        { "trigger": "a_test_setTestTimeout\ttimeoutMsec", "contents": "A.test.setTestTimeout( $1timeoutMsec )"},
        { "trigger": "a_test_isComplete\t()", "contents": "A.test.isComplete( $1 )"},
        { "trigger": "a_test_getErrors\t()", "contents": "A.test.getErrors( $1 )"},
        { "trigger": "a_test_print\tvalue", "contents": "A.test.print( $1value )"},
        { "trigger": "a_test_auraError\tlevel, msg", "contents": "A.test.auraError( $1level, msg )"},
        { "trigger": "a_test_expectAuraError\te", "contents": "A.test.expectAuraError( $1e )"},
        { "trigger": "a_test_auraWarning\tlevel, msg", "contents": "A.test.auraWarning( $1level, msg )"},
        { "trigger": "a_test_expectAuraWarning\tw", "contents": "A.test.expectAuraWarning( $1w )"},
        { "trigger": "a_test_assertAccessible\t()", "contents": "A.test.assertAccessible( $1 )"},
        { "trigger": "a_test_assertTruthy\tcdn, assertMsg", "contents": "A.test.assertTruthy( $1cdn, assertMsg )"},
        { "trigger": "a_test_assertFalsy\tcdn, assertMsg", "contents": "A.test.assertFalsy( $1cdn, assertMsg )"},
        { "trigger": "a_test_assert\tcdn, assertMsg", "contents": "A.test.assert( $1cdn, assertMsg )"},
        { "trigger": "a_test_assertEquals\targ1, arg2, assertMsg", "contents": "A.test.assertEquals( $1arg1, arg2, assertMsg )"},
        { "trigger": "a_test_assertEqualsIgnoreWhitespace\targ1, arg2, assertMsg", "contents": "A.test.assertEqualsIgnoreWhitespace( $1arg1, arg2, assertMsg )"},
        { "trigger": "a_test_assertStartsWith\tstart, full, assertMsg", "contents": "A.test.assertStartsWith( $1start, full, assertMsg )"},
        { "trigger": "a_test_assertNotEquals\targ1, arg2, assertMsg", "contents": "A.test.assertNotEquals( $1arg1, arg2, assertMsg )"},
        { "trigger": "a_test_assertDefined\tcdn, assertMsg", "contents": "A.test.assertDefined( $1cdn, assertMsg )"},
        { "trigger": "a_test_assertTrue\tcdn, assertMsg", "contents": "A.test.assertTrue( $1cdn, assertMsg )"},
        { "trigger": "a_test_assertFalse\tcdn, assertMsg", "contents": "A.test.assertFalse( $1cdn, assertMsg )"},
        { "trigger": "a_test_assertUndefined\tcdn, assertMsg", "contents": "A.test.assertUndefined( $1cdn, assertMsg )"},
        { "trigger": "a_test_assertNotUndefinedOrNull\tcdn, assertMsg", "contents": "A.test.assertNotUndefinedOrNull( $1cdn, assertMsg )"},
        { "trigger": "a_test_assertUndefinedOrNull\tcdn, assertMsg", "contents": "A.test.assertUndefinedOrNull( $1cdn, assertMsg )"},
        { "trigger": "a_test_assertNull\tcdn, assertMsg", "contents": "A.test.assertNull( $1cdn, assertMsg )"},
        { "trigger": "a_test_assertNotNull\tcdn, assertMsg", "contents": "A.test.assertNotNull( $1cdn, assertMsg )"},
        { "trigger": "a_test_assertAuraType\ttype, cdn, assertMsg", "contents": "A.test.assertAuraType( $1type, cdn, assertMsg )"},
        { "trigger": "a_test_fail\tassertMsg, extraInfoMsg", "contents": "A.test.fail( $1assertMsg, extraInfoMsg )"},
        { "trigger": "a_test_getPrototype\tinstance", "contents": "A.test.getPrototype( $1instance )"},
        { "trigger": "a_test_overrideFunction\tinstance, name, newFunc", "contents": "A.test.overrideFunction( $1instance, name, newFunc )"},
        { "trigger": "a_test_addFunctionHandler\tinstance, name, newFunc, postProcess", "contents": "A.test.addFunctionHandler( $1instance, name, newFunc, postProcess )"},
        { "trigger": "a_test_getOuterHtml\tnode", "contents": "A.test.getOuterHtml( $1node )"},
        { "trigger": "a_test_getText\tnode", "contents": "A.test.getText( $1node )"},
        { "trigger": "a_test_getTextByComponent\tcomponent", "contents": "A.test.getTextByComponent( $1component )"},
        { "trigger": "a_test_getStyle\telem, style", "contents": "A.test.getStyle( $1elem, style )"},
        { "trigger": "a_test_getNonCommentNodes\tnodes", "contents": "A.test.getNonCommentNodes( $1nodes )"},
        { "trigger": "a_test_isNodeDeleted\tnode", "contents": "A.test.isNodeDeleted( $1node )"},
        { "trigger": "a_test_select\t()", "contents": "A.test.select( $1 )"},
        { "trigger": "a_test_contains\ttestString, targetString", "contents": "A.test.contains( $1testString, targetString )"},
        { "trigger": "a_test_compareValues\texpected, actual", "contents": "A.test.compareValues( $1expected, actual )"},
        { "trigger": "a_test_getActiveElement\t()", "contents": "A.test.getActiveElement( $1 )"},
        { "trigger": "a_test_getActiveElementText\t()", "contents": "A.test.getActiveElementText( $1 )"},
        { "trigger": "a_test_walkTheDOM\tnode, func", "contents": "A.test.walkTheDOM( $1node, func )"},
        { "trigger": "a_test_getElementsByClassNameCustom\tclassName, parentElement", "contents": "A.test.getElementsByClassNameCustom( $1className, parentel )"},
        { "trigger": "a_test_findChildWithClassName\tparentElement, className", "contents": "A.test.findChildWithClassName( $1parentElement, className )"},
        { "trigger": "a_test_getElementByClass\tclassname", "contents": "A.test.getElementByClass( $1classname )"},
        { "trigger": "a_test_fireDomEvent\tel, eventName, canBubble, cancelable", "contents": "A.test.fireDomEvent( $1element, eventName, canBubble, cancelable )"},
        { "trigger": "a_test_clickOrTouch\tel, canBubble, cancelable", "contents": "A.test.clickOrTouch( $1element, canBubble, cancelable )"},
        { "trigger": "a_test_isInstanceOfText\tnode", "contents": "A.test.isInstanceOfText( $1node )"},
        { "trigger": "a_test_isInstanceOfAnchorElement\tel", "contents": "A.test.isInstanceOfAnchorElement( $1el )"},
        { "trigger": "a_test_isInstanceOfInputElement\tel", "contents": "A.test.isInstanceOfInputElement( $1el )"},
        { "trigger": "a_test_isInstanceOfLiElement\tel", "contents": "A.test.isInstanceOfLiElement( $1el )"},
        { "trigger": "a_test_isInstanceOfParagraphElement\tel", "contents": "A.test.isInstanceOfParagraphElement( $1el )"},
        { "trigger": "a_test_isInstanceOfButtonElement\tel", "contents": "A.test.isInstanceOfButtonElement( $1el )"},
        { "trigger": "a_test_isInstanceOfImageElement\tel", "contents": "A.test.isInstanceOfImageElement( $1el )"},
        { "trigger": "a_test_isInstanceOfDivElement\tel", "contents": "A.test.isInstanceOfDivElement( $1el )"},
        { "trigger": "a_test_isInstanceOfSpanElement\tel", "contents": "A.test.isInstanceOfSpanElement( $1el )"},
        { "trigger": "a_test_isInstanceOf\tel, elType, tag", "contents": "A.test.isInstanceOf( $1element, elType, tag )"},
        { "trigger": "a_test_objectKeys\tobj", "contents": "A.test.objectKeys( $1obj )"},
        { "trigger": "a_test_getElementAttributeValue\tel, attributeName", "contents": "A.test.getElementAttributeValue( $1element, attributeName )"},
        { "trigger": "a_test_addEventHandler\teventName, handler, component, insert", "contents": "A.test.addEventHandler( $1eventName, handler, component, insert )"},
        { "trigger": "a_test_dummyFunction\t()", "contents": "A.test.dummyFunction( $1 )"},
        { "trigger": "a_test_getAppCacheEvents\t()", "contents": "A.test.getAppCacheEvents( $1 )"},
        { "trigger": "a_test_getAuraErrorMessage\t()", "contents": "A.test.getAuraErrorMessage( $1 )"},
        { "trigger": "a_test_getAvailableXHROverride\tconfig, isBackground", "contents": "A.test.getAvailableXHROverride( $1config, isBackground )"},
        { "trigger": "a_test_sendOverride\tconfig, auraXHR, actions, method, options", "contents": "A.test.sendOverride( $1config, auraXHR, actions, method, options )"},
        { "trigger": "a_test_decodeOverride\tconfig, response, noStrip", "contents": "A.test.decodeOverride( $1config, response, noStrip )"},
        { "trigger": "a_test_PrePostConfig\taction, preSendcb, postSendCallback", "contents": "A.test.PrePostConfig( $1action, preSendcb, postSendCallback )"},
        { "trigger": "a_test_addPrePostSendCallback\taction, preSendcb, postSendCallback", "contents": "A.test.addPrePostSendCallback( $1action, preSendcb, postSendCallback )"},
        { "trigger": "a_test_removePrePostSendCallback\thandle", "contents": "A.test.removePrePostSendCallback( $1handle )"},
        { "trigger": "a_test_install\t()", "contents": "A.test.install( $1 )"},
        { "trigger": "a_test_run\tname, code, timeoutOverride, quickFixException", "contents": "A.test.run( $1name, code, timeoutOverride, quickFixException )"},
        { "trigger": "a_test_runInternal\tname", "contents": "A.test.runInternal( $1name )"},
        { "trigger": "a_test_executeAfterCkEditorIsReady\tinputRichTextComponent, callback", "contents": "A.test.executeAfterCkEditorIsReady( $1inputRichTextComponent, callback )"},
        { "trigger": "a_test_reloadGlobalValueProviders\tgvp, callback", "contents": "A.test.reloadGlobalValueProviders( $1gvp, callback )"},
        { "trigger": "a_test_getCreationPath\tcmp", "contents": "A.test.getCreationPath( $1cmp )"},
        { "trigger": "a_test_createHttpRequest\t()", "contents": "A.test.createHttpRequest( $1 )"},
        { "trigger": "a_test_checkGlobalNamespacePollution\t()", "contents": "A.test.checkGlobalNamespacePollution( $1 )"},
        { "trigger": "a_test_orderedEncode\tobj", "contents": "A.test.orderedEncode( $1obj )"},
        { "trigger": "a_util_isIE\t()", "contents": "A.util.isIE( $1 )"},
        { "trigger": "a_util_isIOSWebView\t()", "contents": "A.util.isIOSWebView( $1 )"},
        { "trigger": "a_util_globalEval\t()", "contents": "A.util.globalEval( $1 )"},
        { "trigger": "a_util_isArray\t()", "contents": "A.util.isArray( $1 )"},
        { "trigger": "a_util_isObject\tobj", "contents": "A.util.isObject( $1obj )"},
        { "trigger": "a_util_isPlainObject\tobj", "contents": "A.util.isPlainObject( $1obj )"},
        { "trigger": "a_util_isError\tobj", "contents": "A.util.isError( $1obj )"},
        { "trigger": "a_util_isFunction\tobj", "contents": "A.util.isFunction( $1obj )"},
        { "trigger": "a_util_isString\tobj", "contents": "A.util.isString( $1obj )"},
        { "trigger": "a_util_isNumber\tobj", "contents": "A.util.isNumber( $1obj )"},
        { "trigger": "a_util_isFiniteNumber\tobj", "contents": "A.util.isFiniteNumber( $1obj )"},
        { "trigger": "a_util_isBoolean\tobj", "contents": "A.util.isBoolean( $1obj )"},
        { "trigger": "a_util_isUndefined\tobj", "contents": "A.util.isUndefined( $1obj )"},
        { "trigger": "a_util_isUndefinedOrNull\tobj", "contents": "A.util.isUndefinedOrNull( $1obj )"},
        { "trigger": "a_util_isEmpty\tobj", "contents": "A.util.isEmpty( $1obj )"},
        { "trigger": "a_util_getBooleanValue\tval", "contents": "A.util.getBooleanValue( $1val )"},
        { "trigger": "a_util_createHtmlElement\ttagName, attributes", "contents": "A.util.createHtmlElement( $1tagName, attributes )"},
        { "trigger": "a_util_clearNode\tnode", "contents": "A.util.clearNode( $1node )"},
        { "trigger": "a_util_getElement\tid", "contents": "A.util.getElement( $1id )"},
        { "trigger": "a_util_copy\tvalue", "contents": "A.util.copy( $1value )"},
        { "trigger": "a_util_compareValues\texpected, actual", "contents": "A.util.compareValues( $1expected, actual )"},
        { "trigger": "a_util_hasClass\tel, className", "contents": "A.util.hasClass( $1element, className )"},
        { "trigger": "a_util_addClass\tel, newClass", "contents": "A.util.addClass( $1element, newClass )"},
        { "trigger": "a_util_removeClass\tel, newClass", "contents": "A.util.removeClass( $1element, newClass )"},
        { "trigger": "a_util_toggleClass\tel, className, cdn", "contents": "A.util.toggleClass( $1element, className, cdn )"},
        { "trigger": "a_util_swapClass\tel, oldClass, newClass", "contents": "A.util.swapClass( $1element, oldClass, newClass )"},
        { "trigger": "a_util_setClass\tel,newClass,remove", "contents": "A.util.setClass( $1element,newClass,remove )"},
        { "trigger": "a_util_buildClass\toldClass, newClass, remove", "contents": "A.util.buildClass( $1oldClass, newClass, remove )"},
        { "trigger": "a_util_buildFlavorClass\tcmp, flavor", "contents": "A.util.buildFlavorClass( $1cmp, flavor )"},
        { "trigger": "a_util_createElementsFromMarkup\tmarkup", "contents": "A.util.createElementsFromMarkup( $1markup )"},
        { "trigger": "a_util_insertFirst\tnewEl, referenceEl", "contents": "A.util.insertFirst( $1newEl, referenceEl )"},
        { "trigger": "a_util_insertBefore\tnewEl, referenceEl", "contents": "A.util.insertBefore( $1newEl, referenceEl )"},
        { "trigger": "a_util_insertAfter\tnewEl, referenceEl", "contents": "A.util.insertAfter( $1newEl, referenceEl )"},
        { "trigger": "a_util_appendChild\tnewEl, referenceEl", "contents": "A.util.appendChild( $1newEl, referenceEl )"},
        { "trigger": "a_util_removeElement\tel", "contents": "A.util.removeElement( $1el )"},
        { "trigger": "a_util_urlDecode\turl", "contents": "A.util.urlDecode( $1url )"},
        { "trigger": "a_util_trim\tvalue", "contents": "A.util.trim( $1value )"},
        { "trigger": "a_util_format\tformatString,arg1,arg2,argN", "contents": "A.util.format( $1formatString,arg1,arg2,argN )"},
        { "trigger": "a_util_truncate\tst, len, ellipsis, truncateByWord", "contents": "A.util.truncate( $1st, len, ellipsis, truncateByWord )"},
        { "trigger": "a_util_createTimeoutCallback\tcb, toleranceMillis", "contents": "A.util.createTimeoutCallback( $1cb, toleranceMillis )"},
        { "trigger": "a_util_removeOn\tel, eventName, listener, useCapture", "contents": "A.util.removeOn( $1element, eventName, listener, useCapture )"},
        { "trigger": "a_util_formToMap\tform", "contents": "A.util.formToMap( $1form )"},
        { "trigger": "a_util_getSelectValue\tselect", "contents": "A.util.getSelectValue( $1select )"},
        { "trigger": "a_util_addValueToMap\tinputMap, key, value", "contents": "A.util.addValueToMap( $1inputMap, key, value )"},
        { "trigger": "a_util_addMapValueToMap\tinputMap, key, value, subMapKey", "contents": "A.util.addMapValueToMap( $1inputMap, key, value, subMapKey )"},
        { "trigger": "a_util_isSubDef\tdef, qname", "contents": "A.util.isSubDef( $1def, qname )"},
        { "trigger": "a_util_apply\tbaseObject,  members,  forceCopy,  deepCopy", "contents": "A.util.apply( $1 baseObject,  members,  forceCopy,  deepCopy )"},
        { "trigger": "a_util_camelCaseToHyphens\tstr", "contents": "A.util.camelCaseToHyphens( $1str )"},
        { "trigger": "a_util_hyphensToCamelCase\tstr", "contents": "A.util.hyphensToCamelCase( $1str )"},
        { "trigger": "a_util_acceptsData\tel", "contents": "A.util.acceptsData( $1el )"},
        { "trigger": "a_util_getElementAttributeValue\tel,attributeName", "contents": "A.util.getElementAttributeValue( $1element,attributeName )"},
        { "trigger": "a_util_getDataAttribute\tel, key", "contents": "A.util.getDataAttribute( $1element, key )"},
        { "trigger": "a_util_setDataAttribute\tel, key, value", "contents": "A.util.setDataAttribute( $1element, key, value )"},
        { "trigger": "a_util_getDataAttributeName\tkey", "contents": "A.util.getDataAttributeName( $1key )"},
        { "trigger": "a_util_hasDataAttribute\tel, key", "contents": "A.util.hasDataAttribute( $1element, key )"},
        { "trigger": "a_util_isElement\tobj", "contents": "A.util.isElement( $1obj )"},
        { "trigger": "a_util_attachToDocumentBody\tel", "contents": "A.util.attachToDocumentBody( $1el )"},
        { "trigger": "a_util_stringEndsWith\tfullstr, substr", "contents": "A.util.stringEndsWith( $1fullstr, substr )"},
        { "trigger": "a_util_bind\t()", "contents": "A.util.bind( $1 )"},
        { "trigger": "a_util_keys\t()", "contents": "A.util.keys( $1 )"},
        { "trigger": "a_util_lookup\tobject ", "contents": "A.util.lookup( $1object  )"},
        { "trigger": "a_util_merge\tfirst ", "contents": "A.util.merge( $1first  )"},
        { "trigger": "a_util_forEach\t()", "contents": "A.util.forEach( $1 )"},
        { "trigger": "a_util_map\t()", "contents": "A.util.map( $1 )"},
        { "trigger": "a_util_reduce\t()", "contents": "A.util.reduce( $1 )"},
        { "trigger": "a_util_every\t()", "contents": "A.util.every( $1 )"},
        { "trigger": "a_util_some\t()", "contents": "A.util.some( $1 )"},
        { "trigger": "a_util_filter\t()", "contents": "A.util.filter( $1 )"},
        { "trigger": "a_util_destroyAsync\tcmp", "contents": "A.util.destroyAsync( $1cmp )"},
        { "trigger": "a_util_instanceOf\tinstance, constructor", "contents": "A.util.instanceOf( $1instance, constructor )"},
        { "trigger": "a_util_emptyComponentTrash\t()", "contents": "A.util.emptyComponentTrash( $1 )"},
        { "trigger": "a_util_contains\tcontainer, el", "contents": "A.util.contains( $1container, el )"},
        { "trigger": "a_util_squash\tevent, preventDefault", "contents": "A.util.squash( $1event, preventDefault )"},
        { "trigger": "a_util_stripTags\tinput, tags", "contents": "A.util.stripTags( $1input, tags )"},
        { "trigger": "a_util_getWindowSize\t()", "contents": "A.util.getWindowSize( $1 )"},
        { "trigger": "a_util_isComponent\tobj", "contents": "A.util.isComponent( $1obj )"},
        { "trigger": "a_util_isExpression\tobj", "contents": "A.util.isExpression( $1obj )"},
        { "trigger": "a_util_isValue\tobj", "contents": "A.util.isValue( $1obj )"},
        { "trigger": "a_util_isAction\tobj", "contents": "A.util.isAction( $1obj )"},
        { "trigger": "a_util_supportsTouchEvents\t()", "contents": "A.util.supportsTouchEvents( $1 )"},
        { "trigger": "a_util_estimateSize\tobj", "contents": "A.util.estimateSize( $1obj )"},
        { "trigger": "a_util_toArray\tcollection", "contents": "A.util.toArray( $1collection )"},
        { "trigger": "a_util_setText\tnode, text", "contents": "A.util.setText( $1node, text )"},
        { "trigger": "a_util_getDebugToolComponent\t()", "contents": "A.util.getDebugToolComponent( $1 )"},
        { "trigger": "a_util_getDebugToolsAuraInstance\t()", "contents": "A.util.getDebugToolsAuraInstance( $1 )"},
        { "trigger": "a_util_setDebugToolWindow\tdebugWindow", "contents": "A.util.setDebugToolWindow( $1debugWindow )"},
        { "trigger": "a_util_getUrl\t()", "contents": "A.util.getUrl( $1 )"},
        { "trigger": "a_util_getText\tnode", "contents": "A.util.getText( $1node )"},
        { "trigger": "a_util_errorBasedOnMode\tmsg", "contents": "A.util.errorBasedOnMode( $1msg )"},
        { "trigger": "a_util_includeScript\turl, callback", "contents": "A.util.includeScript( $1url, callback )"},
    ]
}

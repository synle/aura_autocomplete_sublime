{
    "scope": "source, comment, js",
    "completions":
    [
        { "trigger": "test_error\t()", "contents": "\\$A.test.errors"},
        { "trigger": "test_addWaitFor\texpected, testFunction, callback", "contents": "\\$A.test.addWaitFor(expected, testFunction, callback)"},
        { "trigger": "test_addWaitForAction\tsuccess, actionName, callback", "contents": "\\$A.test.addWaitForAction(success, actionName, callback)"},
        { "trigger": "test_addWaitForWithFailureMessage\texpected, testFunction, failureMessage, callback", "contents": "\\$A.test.addWaitForWithFailureMessage(expected, testFunction, failureMessage, callback)"},
        { "trigger": "test_blockRequests\t()", "contents": "\\$A.test.blockRequests()"},
        { "trigger": "test_blockForegroundRequests\t()", "contents": "\\$A.test.blockForegroundRequests()"},
        { "trigger": "test_blockBackgroundRequests\t()", "contents": "\\$A.test.blockBackgroundRequests()"},
        { "trigger": "test_releaseRequests\t()", "contents": "\\$A.test.releaseRequests()"},
        { "trigger": "test_releaseForegroundRequests\t()", "contents": "\\$A.test.releaseForegroundRequests()"},
        { "trigger": "test_releaseBackgroundRequests\t()", "contents": "\\$A.test.releaseBackgroundRequests()"},
        { "trigger": "test_getSentRequestCount\t()", "contents": "\\$A.test.getSentRequestCount()"},
        { "trigger": "test_areActionsComplete\tactions", "contents": "\\$A.test.areActionsComplete(actions)"},
        { "trigger": "test_addCleanup\tcleanupFunction", "contents": "\\$A.test.addCleanup(cleanupFunction)"},
        { "trigger": "test_getAction\tcomponent, name, params, callback", "contents": "\\$A.test.getAction(component, name, params, callback)"},
        { "trigger": "test_runActionsAsTransaction\tactions, scope, callback", "contents": "\\$A.test.runActionsAsTransaction(actions, scope, callback)"},
        { "trigger": "test_enqueueAction\taction, background", "contents": "\\$A.test.enqueueAction(action, background)"},
        { "trigger": "test_getExternalAction\tcomponent, descriptor, params, returnType, callback", "contents": "\\$A.test.getExternalAction(component, descriptor, params, returnType, callback)"},
        { "trigger": "test_clearAndAssertComponentConfigs\ta", "contents": "\\$A.test.clearAndAssertComponentConfigs(a)"},
        { "trigger": "test_isActionPending\t()", "contents": "\\$A.test.isActionPending()"},
        { "trigger": "test_callServerAction\taction, doImmediate", "contents": "\\$A.test.callServerAction(action, doImmediate)"},
        { "trigger": "test_setServerReachable\treachable", "contents": "\\$A.test.setServerReachable(reachable)"},
        { "trigger": "test_runAfterIf\tconditionFunction, callback, intervalInMs", "contents": "\\$A.test.runAfterIf(conditionFunction, callback, intervalInMs)"},
        { "trigger": "test_setTestTimeout\ttimeoutMsec", "contents": "\\$A.test.setTestTimeout(timeoutMsec)"},
        { "trigger": "test_isComplete\t()", "contents": "\\$A.test.isComplete()"},
        { "trigger": "test_getErrors\t()", "contents": "\\$A.test.getErrors()"},
        { "trigger": "test_print\tvalue", "contents": "\\$A.test.print(value)"},
        { "trigger": "test_auraError\tlevel, msg", "contents": "\\$A.test.auraError(level, msg)"},
        { "trigger": "test_expectAuraError\te", "contents": "\\$A.test.expectAuraError(e)"},
        { "trigger": "test_auraWarning\tlevel, msg", "contents": "\\$A.test.auraWarning(level, msg)"},
        { "trigger": "test_expectAuraWarning\tw", "contents": "\\$A.test.expectAuraWarning(w)"},
        { "trigger": "test_assertAccessible\t()", "contents": "\\$A.test.assertAccessible()"},
        { "trigger": "test_assertTruthy\tcondition, assertMessage", "contents": "\\$A.test.assertTruthy(condition, assertMessage)"},
        { "trigger": "test_assertFalsy\tcondition, assertMessage", "contents": "\\$A.test.assertFalsy(condition, assertMessage)"},
        { "trigger": "test_assert\tcondition, assertMessage", "contents": "\\$A.test.assert(condition, assertMessage)"},
        { "trigger": "test_assertEquals\targ1, arg2, assertMessage", "contents": "\\$A.test.assertEquals(arg1, arg2, assertMessage)"},
        { "trigger": "test_assertEqualsIgnoreWhitespace\targ1, arg2, assertMessage", "contents": "\\$A.test.assertEqualsIgnoreWhitespace(arg1, arg2, assertMessage)"},
        { "trigger": "test_assertStartsWith\tstart, full, assertMessage", "contents": "\\$A.test.assertStartsWith(start, full, assertMessage)"},
        { "trigger": "test_assertNotEquals\targ1, arg2, assertMessage", "contents": "\\$A.test.assertNotEquals(arg1, arg2, assertMessage)"},
        { "trigger": "test_assertDefined\tcondition, assertMessage", "contents": "\\$A.test.assertDefined(condition, assertMessage)"},
        { "trigger": "test_assertTrue\tcondition, assertMessage", "contents": "\\$A.test.assertTrue(condition, assertMessage)"},
        { "trigger": "test_assertFalse\tcondition, assertMessage", "contents": "\\$A.test.assertFalse(condition, assertMessage)"},
        { "trigger": "test_assertUndefined\tcondition, assertMessage", "contents": "\\$A.test.assertUndefined(condition, assertMessage)"},
        { "trigger": "test_assertNotUndefinedOrNull\tcondition, assertMessage", "contents": "\\$A.test.assertNotUndefinedOrNull(condition, assertMessage)"},
        { "trigger": "test_assertUndefinedOrNull\tcondition, assertMessage", "contents": "\\$A.test.assertUndefinedOrNull(condition, assertMessage)"},
        { "trigger": "test_assertNull\tcondition, assertMessage", "contents": "\\$A.test.assertNull(condition, assertMessage)"},
        { "trigger": "test_assertNotNull\tcondition, assertMessage", "contents": "\\$A.test.assertNotNull(condition, assertMessage)"},
        { "trigger": "test_assertAuraType\ttype, condition, assertMessage", "contents": "\\$A.test.assertAuraType(type, condition, assertMessage)"},
        { "trigger": "test_fail\tassertMessage, extraInfoMessage", "contents": "\\$A.test.fail(assertMessage, extraInfoMessage)"},
        { "trigger": "test_getPrototype\tinstance", "contents": "\\$A.test.getPrototype(instance)"},
        { "trigger": "test_overrideFunction\tinstance, name, newFunction", "contents": "\\$A.test.overrideFunction(instance, name, newFunction)"},
        { "trigger": "test_addFunctionHandler\tinstance, name, newFunction, postProcess", "contents": "\\$A.test.addFunctionHandler(instance, name, newFunction, postProcess)"},
        { "trigger": "test_getOuterHtml\tnode", "contents": "\\$A.test.getOuterHtml(node)"},
        { "trigger": "test_getText\tnode", "contents": "\\$A.test.getText(node)"},
        { "trigger": "test_getTextByComponent\tcomponent", "contents": "\\$A.test.getTextByComponent(component)"},
        { "trigger": "test_getStyle\telem, style", "contents": "\\$A.test.getStyle(elem, style)"},
        { "trigger": "test_getNonCommentNodes\tnodes", "contents": "\\$A.test.getNonCommentNodes(nodes)"},
        { "trigger": "test_isNodeDeleted\tnode", "contents": "\\$A.test.isNodeDeleted(node)"},
        { "trigger": "test_select\t()", "contents": "\\$A.test.select()"},
        { "trigger": "test_contains\ttestString, targetString", "contents": "\\$A.test.contains(testString, targetString)"},
        { "trigger": "test_compareValues\texpected, actual", "contents": "\\$A.test.compareValues(expected, actual)"},
        { "trigger": "test_getActiveElement\t()", "contents": "\\$A.test.getActiveElement()"},
        { "trigger": "test_getActiveElementText\t()", "contents": "\\$A.test.getActiveElementText()"},
        { "trigger": "test_walkTheDOM\tnode, func", "contents": "\\$A.test.walkTheDOM(node, func)"},
        { "trigger": "test_getElementsByClassNameCustom\tclassName, parentElement", "contents": "\\$A.test.getElementsByClassNameCustom(className, parentElement)"},
        { "trigger": "test_findChildWithClassName\tparentElement, className", "contents": "\\$A.test.findChildWithClassName(parentElement, className)"},
        { "trigger": "test_getElementByClass\tclassname", "contents": "\\$A.test.getElementByClass(classname)"},
        { "trigger": "test_fireDomEvent\telement, eventName, canBubble, cancelable", "contents": "\\$A.test.fireDomEvent(element, eventName, canBubble, cancelable)"},
        { "trigger": "test_clickOrTouch\telement, canBubble, cancelable", "contents": "\\$A.test.clickOrTouch(element, canBubble, cancelable)"},
        { "trigger": "test_isInstanceOfText\tnode", "contents": "\\$A.test.isInstanceOfText(node)"},
        { "trigger": "test_isInstanceOfAnchorElement\telement", "contents": "\\$A.test.isInstanceOfAnchorElement(element)"},
        { "trigger": "test_isInstanceOfInputElement\telement", "contents": "\\$A.test.isInstanceOfInputElement(element)"},
        { "trigger": "test_isInstanceOfLiElement\telement", "contents": "\\$A.test.isInstanceOfLiElement(element)"},
        { "trigger": "test_isInstanceOfParagraphElement\telement", "contents": "\\$A.test.isInstanceOfParagraphElement(element)"},
        { "trigger": "test_isInstanceOfButtonElement\telement", "contents": "\\$A.test.isInstanceOfButtonElement(element)"},
        { "trigger": "test_isInstanceOfImageElement\telement", "contents": "\\$A.test.isInstanceOfImageElement(element)"},
        { "trigger": "test_isInstanceOfDivElement\telement", "contents": "\\$A.test.isInstanceOfDivElement(element)"},
        { "trigger": "test_isInstanceOfSpanElement\telement", "contents": "\\$A.test.isInstanceOfSpanElement(element)"},
        { "trigger": "test_isInstanceOf\telement, elementType, tag", "contents": "\\$A.test.isInstanceOf(element, elementType, tag)"},
        { "trigger": "test_objectKeys\tobj", "contents": "\\$A.test.objectKeys(obj)"},
        { "trigger": "test_getElementAttributeValue\telement, attributeName", "contents": "\\$A.test.getElementAttributeValue(element, attributeName)"},
        { "trigger": "test_addEventHandler\teventName, handler, component, insert", "contents": "\\$A.test.addEventHandler(eventName, handler, component, insert)"},
        { "trigger": "test_dummyFunction\t()", "contents": "\\$A.test.dummyFunction()"},
        { "trigger": "test_getAppCacheEvents\t()", "contents": "\\$A.test.getAppCacheEvents()"},
        { "trigger": "test_getAuraErrorMessage\t()", "contents": "\\$A.test.getAuraErrorMessage()"},
        { "trigger": "test_getAvailableXHROverride\tconfig, isBackground", "contents": "\\$A.test.getAvailableXHROverride(config, isBackground)"},
        { "trigger": "test_sendOverride\tconfig, auraXHR, actions, method, options", "contents": "\\$A.test.sendOverride(config, auraXHR, actions, method, options)"},
        { "trigger": "test_decodeOverride\tconfig, response, noStrip", "contents": "\\$A.test.decodeOverride(config, response, noStrip)"},
        { "trigger": "test_PrePostConfig\taction, preSendCallback, postSendCallback", "contents": "\\$A.test.PrePostConfig(action, preSendCallback, postSendCallback)"},
        { "trigger": "test_addPrePostSendCallback\taction, preSendCallback, postSendCallback", "contents": "\\$A.test.addPrePostSendCallback(action, preSendCallback, postSendCallback)"},
        { "trigger": "test_removePrePostSendCallback\thandle", "contents": "\\$A.test.removePrePostSendCallback(handle)"},
        { "trigger": "test_install\t()", "contents": "\\$A.test.install()"},
        { "trigger": "test_run\tname, code, timeoutOverride, quickFixException", "contents": "\\$A.test.run(name, code, timeoutOverride, quickFixException)"},
        { "trigger": "test_runInternal\tname", "contents": "\\$A.test.runInternal(name)"},
        { "trigger": "test_executeAfterCkEditorIsReady\tinputRichTextComponent, callback", "contents": "\\$A.test.executeAfterCkEditorIsReady(inputRichTextComponent, callback)"},
        { "trigger": "test_reloadGlobalValueProviders\tgvp, callback", "contents": "\\$A.test.reloadGlobalValueProviders(gvp, callback)"},
        { "trigger": "test_getCreationPath\tcmp", "contents": "\\$A.test.getCreationPath(cmp)"},
        { "trigger": "test_createHttpRequest\t()", "contents": "\\$A.test.createHttpRequest()"},
        { "trigger": "test_checkGlobalNamespacePollution\t()", "contents": "\\$A.test.checkGlobalNamespacePollution()"},
        { "trigger": "test_orderedEncode\tobj", "contents": "\\$A.test.orderedEncode(obj)"},
        { "trigger": "util_isIE\t()", "contents": "\\$A.util.isIE()"},
        { "trigger": "util_isIOSWebView\t()", "contents": "\\$A.util.isIOSWebView()"},
        { "trigger": "util_globalEval\t()", "contents": "\\$A.util.globalEval()"},
        { "trigger": "util_isArray\t()", "contents": "\\$A.util.isArray()"},
        { "trigger": "util_isObject\tobj", "contents": "\\$A.util.isObject(obj)"},
        { "trigger": "util_isPlainObject\tobj", "contents": "\\$A.util.isPlainObject(obj)"},
        { "trigger": "util_isError\tobj", "contents": "\\$A.util.isError(obj)"},
        { "trigger": "util_isFunction\tobj", "contents": "\\$A.util.isFunction(obj)"},
        { "trigger": "util_isString\tobj", "contents": "\\$A.util.isString(obj)"},
        { "trigger": "util_isNumber\tobj", "contents": "\\$A.util.isNumber(obj)"},
        { "trigger": "util_isFiniteNumber\tobj", "contents": "\\$A.util.isFiniteNumber(obj)"},
        { "trigger": "util_isBoolean\tobj", "contents": "\\$A.util.isBoolean(obj)"},
        { "trigger": "util_isUndefined\tobj", "contents": "\\$A.util.isUndefined(obj)"},
        { "trigger": "util_isUndefinedOrNull\tobj", "contents": "\\$A.util.isUndefinedOrNull(obj)"},
        { "trigger": "util_isEmpty\tobj", "contents": "\\$A.util.isEmpty(obj)"},
        { "trigger": "util_getBooleanValue\tval", "contents": "\\$A.util.getBooleanValue(val)"},
        { "trigger": "util_createHtmlElement\ttagName, attributes", "contents": "\\$A.util.createHtmlElement(tagName, attributes)"},
        { "trigger": "util_clearNode\tnode", "contents": "\\$A.util.clearNode(node)"},
        { "trigger": "util_getElement\tid", "contents": "\\$A.util.getElement(id)"},
        { "trigger": "util_copy\tvalue", "contents": "\\$A.util.copy(value)"},
        { "trigger": "util_compareValues\texpected, actual", "contents": "\\$A.util.compareValues(expected, actual)"},
        { "trigger": "util_hasClass\telement, className", "contents": "\\$A.util.hasClass(element, className)"},
        { "trigger": "util_addClass\telement, newClass", "contents": "\\$A.util.addClass(element, newClass)"},
        { "trigger": "util_removeClass\telement, newClass", "contents": "\\$A.util.removeClass(element, newClass)"},
        { "trigger": "util_toggleClass\telement, className, condition", "contents": "\\$A.util.toggleClass(element, className, condition)"},
        { "trigger": "util_swapClass\telement, oldClass, newClass", "contents": "\\$A.util.swapClass(element, oldClass, newClass)"},
        { "trigger": "util_setClass\telement,newClass,remove", "contents": "\\$A.util.setClass(element,newClass,remove)"},
        { "trigger": "util_buildClass\toldClass, newClass, remove", "contents": "\\$A.util.buildClass(oldClass, newClass, remove)"},
        { "trigger": "util_buildFlavorClass\tcmp, flavor", "contents": "\\$A.util.buildFlavorClass(cmp, flavor)"},
        { "trigger": "util_createElementsFromMarkup\tmarkup", "contents": "\\$A.util.createElementsFromMarkup(markup)"},
        { "trigger": "util_insertFirst\tnewEl, referenceEl", "contents": "\\$A.util.insertFirst(newEl, referenceEl)"},
        { "trigger": "util_insertBefore\tnewEl, referenceEl", "contents": "\\$A.util.insertBefore(newEl, referenceEl)"},
        { "trigger": "util_insertAfter\tnewEl, referenceEl", "contents": "\\$A.util.insertAfter(newEl, referenceEl)"},
        { "trigger": "util_appendChild\tnewEl, referenceEl", "contents": "\\$A.util.appendChild(newEl, referenceEl)"},
        { "trigger": "util_removeElement\telement", "contents": "\\$A.util.removeElement(element)"},
        { "trigger": "util_urlDecode\turl", "contents": "\\$A.util.urlDecode(url)"},
        { "trigger": "util_trim\tvalue", "contents": "\\$A.util.trim(value)"},
        { "trigger": "util_format\tformatString,arg1,arg2,argN", "contents": "\\$A.util.format(formatString,arg1,arg2,argN)"},
        { "trigger": "util_truncate\tst, len, ellipsis, truncateByWord", "contents": "\\$A.util.truncate(st, len, ellipsis, truncateByWord)"},
        { "trigger": "util_createTimeoutCallback\tcallback, toleranceMillis", "contents": "\\$A.util.createTimeoutCallback(callback, toleranceMillis)"},
        { "trigger": "util_removeOn\telement, eventName, listener, useCapture", "contents": "\\$A.util.removeOn(element, eventName, listener, useCapture)"},
        { "trigger": "util_formToMap\tform", "contents": "\\$A.util.formToMap(form)"},
        { "trigger": "util_getSelectValue\tselect", "contents": "\\$A.util.getSelectValue(select)"},
        { "trigger": "util_addValueToMap\tinputMap, key, value", "contents": "\\$A.util.addValueToMap(inputMap, key, value)"},
        { "trigger": "util_addMapValueToMap\tinputMap, key, value, subMapKey", "contents": "\\$A.util.addMapValueToMap(inputMap, key, value, subMapKey)"},
        { "trigger": "util_isSubDef\tdef, qname", "contents": "\\$A.util.isSubDef(def, qname)"},
        { "trigger": "util_apply\t baseObject,  members,  forceCopy,  deepCopy", "contents": "\\$A.util.apply( baseObject,  members,  forceCopy,  deepCopy)"},
        { "trigger": "util_camelCaseToHyphens\tstr", "contents": "\\$A.util.camelCaseToHyphens(str)"},
        { "trigger": "util_hyphensToCamelCase\tstr", "contents": "\\$A.util.hyphensToCamelCase(str)"},
        { "trigger": "util_acceptsData\telement", "contents": "\\$A.util.acceptsData(element)"},
        { "trigger": "util_getElementAttributeValue\telement,attributeName", "contents": "\\$A.util.getElementAttributeValue(element,attributeName)"},
        { "trigger": "util_getDataAttribute\telement, key", "contents": "\\$A.util.getDataAttribute(element, key)"},
        { "trigger": "util_setDataAttribute\telement, key, value", "contents": "\\$A.util.setDataAttribute(element, key, value)"},
        { "trigger": "util_getDataAttributeName\tkey", "contents": "\\$A.util.getDataAttributeName(key)"},
        { "trigger": "util_hasDataAttribute\telement, key", "contents": "\\$A.util.hasDataAttribute(element, key)"},
        { "trigger": "util_isElement\tobj", "contents": "\\$A.util.isElement(obj)"},
        { "trigger": "util_attachToDocumentBody\telement", "contents": "\\$A.util.attachToDocumentBody(element)"},
        { "trigger": "util_stringEndsWith\tfullstr, substr", "contents": "\\$A.util.stringEndsWith(fullstr, substr)"},
        { "trigger": "util_bind\t()", "contents": "\\$A.util.bind()"},
        { "trigger": "util_keys\t()", "contents": "\\$A.util.keys()"},
        { "trigger": "util_lookup\tobject ", "contents": "\\$A.util.lookup(object )"},
        { "trigger": "util_merge\tfirst ", "contents": "\\$A.util.merge(first )"},
        { "trigger": "util_forEach\t()", "contents": "\\$A.util.forEach()"},
        { "trigger": "util_map\t()", "contents": "\\$A.util.map()"},
        { "trigger": "util_reduce\t()", "contents": "\\$A.util.reduce()"},
        { "trigger": "util_every\t()", "contents": "\\$A.util.every()"},
        { "trigger": "util_some\t()", "contents": "\\$A.util.some()"},
        { "trigger": "util_filter\t()", "contents": "\\$A.util.filter()"},
        { "trigger": "util_destroyAsync\tcmp", "contents": "\\$A.util.destroyAsync(cmp)"},
        { "trigger": "util_instanceOf\tinstance, constructor", "contents": "\\$A.util.instanceOf(instance, constructor)"},
        { "trigger": "util_emptyComponentTrash\t()", "contents": "\\$A.util.emptyComponentTrash()"},
        { "trigger": "util_contains\tcontainer, element", "contents": "\\$A.util.contains(container, element)"},
        { "trigger": "util_squash\tevent, preventDefault", "contents": "\\$A.util.squash(event, preventDefault)"},
        { "trigger": "util_stripTags\tinput, tags", "contents": "\\$A.util.stripTags(input, tags)"},
        { "trigger": "util_getWindowSize\t()", "contents": "\\$A.util.getWindowSize()"},
        { "trigger": "util_isComponent\tobj", "contents": "\\$A.util.isComponent(obj)"},
        { "trigger": "util_isExpression\tobj", "contents": "\\$A.util.isExpression(obj)"},
        { "trigger": "util_isValue\tobj", "contents": "\\$A.util.isValue(obj)"},
        { "trigger": "util_isAction\tobj", "contents": "\\$A.util.isAction(obj)"},
        { "trigger": "util_supportsTouchEvents\t()", "contents": "\\$A.util.supportsTouchEvents()"},
        { "trigger": "util_estimateSize\tobj", "contents": "\\$A.util.estimateSize(obj)"},
        { "trigger": "util_toArray\tcollection", "contents": "\\$A.util.toArray(collection)"},
        { "trigger": "util_setText\tnode, text", "contents": "\\$A.util.setText(node, text)"},
        { "trigger": "util_getDebugToolComponent\t()", "contents": "\\$A.util.getDebugToolComponent()"},
        { "trigger": "util_getDebugToolsAuraInstance\t()", "contents": "\\$A.util.getDebugToolsAuraInstance()"},
        { "trigger": "util_setDebugToolWindow\tdebugWindow", "contents": "\\$A.util.setDebugToolWindow(debugWindow)"},
        { "trigger": "util_getUrl\t()", "contents": "\\$A.util.getUrl()"},
        { "trigger": "util_getText\tnode", "contents": "\\$A.util.getText(node)"},
        { "trigger": "util_errorBasedOnMode\tmsg", "contents": "\\$A.util.errorBasedOnMode(msg)"},
        { "trigger": "util_includeScript\turl, callback", "contents": "\\$A.util.includeScript(url, callback)"},
    ]
}

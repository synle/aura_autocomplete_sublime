{
    "scope": "source, js",
    "completions":
    [
        { "trigger": "A_test_error\t()", "contents": "\\$A.test.errors$1"},
        { "trigger": "A_test_addWaitFor\texpected, testFunction, callback", "contents": "\\$A.test.addWaitFor($1expected, testFunction, callback)"},
        { "trigger": "A_test_addWaitForAction\tsuccess, actionName, callback", "contents": "\\$A.test.addWaitForAction($1success, actionName, callback)"},
        { "trigger": "A_test_addWaitForWithFailureMessage\texpected, testFunction, failureMessage, callback", "contents": "\\$A.test.addWaitForWithFailureMessage($1expected, testFunction, failureMessage, callback)"},
        { "trigger": "A_test_blockRequests\t()", "contents": "\\$A.test.blockRequests($1)"},
        { "trigger": "A_test_blockForegroundRequests\t()", "contents": "\\$A.test.blockForegroundRequests($1)"},
        { "trigger": "A_test_blockBackgroundRequests\t()", "contents": "\\$A.test.blockBackgroundRequests($1)"},
        { "trigger": "A_test_releaseRequests\t()", "contents": "\\$A.test.releaseRequests($1)"},
        { "trigger": "A_test_releaseForegroundRequests\t()", "contents": "\\$A.test.releaseForegroundRequests($1)"},
        { "trigger": "A_test_releaseBackgroundRequests\t()", "contents": "\\$A.test.releaseBackgroundRequests($1)"},
        { "trigger": "A_test_getSentRequestCount\t()", "contents": "\\$A.test.getSentRequestCount($1)"},
        { "trigger": "A_test_areActionsComplete\tactions", "contents": "\\$A.test.areActionsComplete($1actions)"},
        { "trigger": "A_test_addCleanup\tcleanupFunction", "contents": "\\$A.test.addCleanup($1cleanupFunction)"},
        { "trigger": "A_test_getAction\tcomponent, name, params, callback", "contents": "\\$A.test.getAction($1component, name, params, callback)"},
        { "trigger": "A_test_runActionsAsTransaction\tactions, scope, callback", "contents": "\\$A.test.runActionsAsTransaction($1actions, scope, callback)"},
        { "trigger": "A_test_enqueueAction\taction, background", "contents": "\\$A.test.enqueueAction($1action, background)"},
        { "trigger": "A_test_getExternalAction\tcomponent, descriptor, params, returnType, callback", "contents": "\\$A.test.getExternalAction($1component, descriptor, params, returnType, callback)"},
        { "trigger": "A_test_clearAndAssertComponentConfigs\ta", "contents": "\\$A.test.clearAndAssertComponentConfigs($1a)"},
        { "trigger": "A_test_isActionPending\t()", "contents": "\\$A.test.isActionPending($1)"},
        { "trigger": "A_test_callServerAction\taction, doImmediate", "contents": "\\$A.test.callServerAction($1action, doImmediate)"},
        { "trigger": "A_test_setServerReachable\treachable", "contents": "\\$A.test.setServerReachable($1reachable)"},
        { "trigger": "A_test_runAfterIf\tconditionFunction, callback, intervalInMs", "contents": "\\$A.test.runAfterIf($1conditionFunction, callback, intervalInMs)"},
        { "trigger": "A_test_setTestTimeout\ttimeoutMsec", "contents": "\\$A.test.setTestTimeout($1timeoutMsec)"},
        { "trigger": "A_test_isComplete\t()", "contents": "\\$A.test.isComplete($1)"},
        { "trigger": "A_test_getErrors\t()", "contents": "\\$A.test.getErrors($1)"},
        { "trigger": "A_test_print\tvalue", "contents": "\\$A.test.print($1value)"},
        { "trigger": "A_test_auraError\tlevel, msg", "contents": "\\$A.test.auraError($1level, msg)"},
        { "trigger": "A_test_expectAuraError\te", "contents": "\\$A.test.expectAuraError($1e)"},
        { "trigger": "A_test_auraWarning\tlevel, msg", "contents": "\\$A.test.auraWarning($1level, msg)"},
        { "trigger": "A_test_expectAuraWarning\tw", "contents": "\\$A.test.expectAuraWarning($1w)"},
        { "trigger": "A_test_assertAccessible\t()", "contents": "\\$A.test.assertAccessible($1)"},
        { "trigger": "A_test_assertTruthy\tcondition, assertMessage", "contents": "\\$A.test.assertTruthy($1condition, assertMessage)"},
        { "trigger": "A_test_assertFalsy\tcondition, assertMessage", "contents": "\\$A.test.assertFalsy($1condition, assertMessage)"},
        { "trigger": "A_test_assert\tcondition, assertMessage", "contents": "\\$A.test.assert($1condition, assertMessage)"},
        { "trigger": "A_test_assertEquals\targ1, arg2, assertMessage", "contents": "\\$A.test.assertEquals($1arg1, arg2, assertMessage)"},
        { "trigger": "A_test_assertEqualsIgnoreWhitespace\targ1, arg2, assertMessage", "contents": "\\$A.test.assertEqualsIgnoreWhitespace($1arg1, arg2, assertMessage)"},
        { "trigger": "A_test_assertStartsWith\tstart, full, assertMessage", "contents": "\\$A.test.assertStartsWith($1start, full, assertMessage)"},
        { "trigger": "A_test_assertNotEquals\targ1, arg2, assertMessage", "contents": "\\$A.test.assertNotEquals($1arg1, arg2, assertMessage)"},
        { "trigger": "A_test_assertDefined\tcondition, assertMessage", "contents": "\\$A.test.assertDefined($1condition, assertMessage)"},
        { "trigger": "A_test_assertTrue\tcondition, assertMessage", "contents": "\\$A.test.assertTrue($1condition, assertMessage)"},
        { "trigger": "A_test_assertFalse\tcondition, assertMessage", "contents": "\\$A.test.assertFalse($1condition, assertMessage)"},
        { "trigger": "A_test_assertUndefined\tcondition, assertMessage", "contents": "\\$A.test.assertUndefined($1condition, assertMessage)"},
        { "trigger": "A_test_assertNotUndefinedOrNull\tcondition, assertMessage", "contents": "\\$A.test.assertNotUndefinedOrNull($1condition, assertMessage)"},
        { "trigger": "A_test_assertUndefinedOrNull\tcondition, assertMessage", "contents": "\\$A.test.assertUndefinedOrNull($1condition, assertMessage)"},
        { "trigger": "A_test_assertNull\tcondition, assertMessage", "contents": "\\$A.test.assertNull($1condition, assertMessage)"},
        { "trigger": "A_test_assertNotNull\tcondition, assertMessage", "contents": "\\$A.test.assertNotNull($1condition, assertMessage)"},
        { "trigger": "A_test_assertAuraType\ttype, condition, assertMessage", "contents": "\\$A.test.assertAuraType($1type, condition, assertMessage)"},
        { "trigger": "A_test_fail\tassertMessage, extraInfoMessage", "contents": "\\$A.test.fail($1assertMessage, extraInfoMessage)"},
        { "trigger": "A_test_getPrototype\tinstance", "contents": "\\$A.test.getPrototype($1instance)"},
        { "trigger": "A_test_overrideFunction\tinstance, name, newFunction", "contents": "\\$A.test.overrideFunction($1instance, name, newFunction)"},
        { "trigger": "A_test_addFunctionHandler\tinstance, name, newFunction, postProcess", "contents": "\\$A.test.addFunctionHandler($1instance, name, newFunction, postProcess)"},
        { "trigger": "A_test_getOuterHtml\tnode", "contents": "\\$A.test.getOuterHtml($1node)"},
        { "trigger": "A_test_getText\tnode", "contents": "\\$A.test.getText($1node)"},
        { "trigger": "A_test_getTextByComponent\tcomponent", "contents": "\\$A.test.getTextByComponent($1component)"},
        { "trigger": "A_test_getStyle\telem, style", "contents": "\\$A.test.getStyle($1elem, style)"},
        { "trigger": "A_test_getNonCommentNodes\tnodes", "contents": "\\$A.test.getNonCommentNodes($1nodes)"},
        { "trigger": "A_test_isNodeDeleted\tnode", "contents": "\\$A.test.isNodeDeleted($1node)"},
        { "trigger": "A_test_select\t()", "contents": "\\$A.test.select($1)"},
        { "trigger": "A_test_contains\ttestString, targetString", "contents": "\\$A.test.contains($1testString, targetString)"},
        { "trigger": "A_test_compareValues\texpected, actual", "contents": "\\$A.test.compareValues($1expected, actual)"},
        { "trigger": "A_test_getActiveElement\t()", "contents": "\\$A.test.getActiveElement($1)"},
        { "trigger": "A_test_getActiveElementText\t()", "contents": "\\$A.test.getActiveElementText($1)"},
        { "trigger": "A_test_walkTheDOM\tnode, func", "contents": "\\$A.test.walkTheDOM($1node, func)"},
        { "trigger": "A_test_getElementsByClassNameCustom\tclassName, parentElement", "contents": "\\$A.test.getElementsByClassNameCustom($1className, parentElement)"},
        { "trigger": "A_test_findChildWithClassName\tparentElement, className", "contents": "\\$A.test.findChildWithClassName($1parentElement, className)"},
        { "trigger": "A_test_getElementByClass\tclassname", "contents": "\\$A.test.getElementByClass($1classname)"},
        { "trigger": "A_test_fireDomEvent\telement, eventName, canBubble, cancelable", "contents": "\\$A.test.fireDomEvent($1element, eventName, canBubble, cancelable)"},
        { "trigger": "A_test_clickOrTouch\telement, canBubble, cancelable", "contents": "\\$A.test.clickOrTouch($1element, canBubble, cancelable)"},
        { "trigger": "A_test_isInstanceOfText\tnode", "contents": "\\$A.test.isInstanceOfText($1node)"},
        { "trigger": "A_test_isInstanceOfAnchorElement\telement", "contents": "\\$A.test.isInstanceOfAnchorElement($1element)"},
        { "trigger": "A_test_isInstanceOfInputElement\telement", "contents": "\\$A.test.isInstanceOfInputElement($1element)"},
        { "trigger": "A_test_isInstanceOfLiElement\telement", "contents": "\\$A.test.isInstanceOfLiElement($1element)"},
        { "trigger": "A_test_isInstanceOfParagraphElement\telement", "contents": "\\$A.test.isInstanceOfParagraphElement($1element)"},
        { "trigger": "A_test_isInstanceOfButtonElement\telement", "contents": "\\$A.test.isInstanceOfButtonElement($1element)"},
        { "trigger": "A_test_isInstanceOfImageElement\telement", "contents": "\\$A.test.isInstanceOfImageElement($1element)"},
        { "trigger": "A_test_isInstanceOfDivElement\telement", "contents": "\\$A.test.isInstanceOfDivElement($1element)"},
        { "trigger": "A_test_isInstanceOfSpanElement\telement", "contents": "\\$A.test.isInstanceOfSpanElement($1element)"},
        { "trigger": "A_test_isInstanceOf\telement, elementType, tag", "contents": "\\$A.test.isInstanceOf($1element, elementType, tag)"},
        { "trigger": "A_test_objectKeys\tobj", "contents": "\\$A.test.objectKeys($1obj)"},
        { "trigger": "A_test_getElementAttributeValue\telement, attributeName", "contents": "\\$A.test.getElementAttributeValue($1element, attributeName)"},
        { "trigger": "A_test_addEventHandler\teventName, handler, component, insert", "contents": "\\$A.test.addEventHandler($1eventName, handler, component, insert)"},
        { "trigger": "A_test_dummyFunction\t()", "contents": "\\$A.test.dummyFunction($1)"},
        { "trigger": "A_test_getAppCacheEvents\t()", "contents": "\\$A.test.getAppCacheEvents($1)"},
        { "trigger": "A_test_getAuraErrorMessage\t()", "contents": "\\$A.test.getAuraErrorMessage($1)"},
        { "trigger": "A_test_getAvailableXHROverride\tconfig, isBackground", "contents": "\\$A.test.getAvailableXHROverride($1config, isBackground)"},
        { "trigger": "A_test_sendOverride\tconfig, auraXHR, actions, method, options", "contents": "\\$A.test.sendOverride($1config, auraXHR, actions, method, options)"},
        { "trigger": "A_test_decodeOverride\tconfig, response, noStrip", "contents": "\\$A.test.decodeOverride($1config, response, noStrip)"},
        { "trigger": "A_test_PrePostConfig\taction, preSendCallback, postSendCallback", "contents": "\\$A.test.PrePostConfig($1action, preSendCallback, postSendCallback)"},
        { "trigger": "A_test_addPrePostSendCallback\taction, preSendCallback, postSendCallback", "contents": "\\$A.test.addPrePostSendCallback($1action, preSendCallback, postSendCallback)"},
        { "trigger": "A_test_removePrePostSendCallback\thandle", "contents": "\\$A.test.removePrePostSendCallback($1handle)"},
        { "trigger": "A_test_install\t()", "contents": "\\$A.test.install($1)"},
        { "trigger": "A_test_run\tname, code, timeoutOverride, quickFixException", "contents": "\\$A.test.run($1name, code, timeoutOverride, quickFixException)"},
        { "trigger": "A_test_runInternal\tname", "contents": "\\$A.test.runInternal($1name)"},
        { "trigger": "A_test_executeAfterCkEditorIsReady\tinputRichTextComponent, callback", "contents": "\\$A.test.executeAfterCkEditorIsReady($1inputRichTextComponent, callback)"},
        { "trigger": "A_test_reloadGlobalValueProviders\tgvp, callback", "contents": "\\$A.test.reloadGlobalValueProviders($1gvp, callback)"},
        { "trigger": "A_test_getCreationPath\tcmp", "contents": "\\$A.test.getCreationPath($1cmp)"},
        { "trigger": "A_test_createHttpRequest\t()", "contents": "\\$A.test.createHttpRequest($1)"},
        { "trigger": "A_test_checkGlobalNamespacePollution\t()", "contents": "\\$A.test.checkGlobalNamespacePollution($1)"},
        { "trigger": "A_test_orderedEncode\tobj", "contents": "\\$A.test.orderedEncode($1obj)"},
        { "trigger": "A_util_isIE\t()", "contents": "\\$A.util.isIE($1)"},
        { "trigger": "A_util_isIOSWebView\t()", "contents": "\\$A.util.isIOSWebView($1)"},
        { "trigger": "A_util_globalEval\t()", "contents": "\\$A.util.globalEval($1)"},
        { "trigger": "A_util_isArray\t()", "contents": "\\$A.util.isArray($1)"},
        { "trigger": "A_util_isObject\tobj", "contents": "\\$A.util.isObject($1obj)"},
        { "trigger": "A_util_isPlainObject\tobj", "contents": "\\$A.util.isPlainObject($1obj)"},
        { "trigger": "A_util_isError\tobj", "contents": "\\$A.util.isError($1obj)"},
        { "trigger": "A_util_isFunction\tobj", "contents": "\\$A.util.isFunction($1obj)"},
        { "trigger": "A_util_isString\tobj", "contents": "\\$A.util.isString($1obj)"},
        { "trigger": "A_util_isNumber\tobj", "contents": "\\$A.util.isNumber($1obj)"},
        { "trigger": "A_util_isFiniteNumber\tobj", "contents": "\\$A.util.isFiniteNumber($1obj)"},
        { "trigger": "A_util_isBoolean\tobj", "contents": "\\$A.util.isBoolean($1obj)"},
        { "trigger": "A_util_isUndefined\tobj", "contents": "\\$A.util.isUndefined($1obj)"},
        { "trigger": "A_util_isUndefinedOrNull\tobj", "contents": "\\$A.util.isUndefinedOrNull($1obj)"},
        { "trigger": "A_util_isEmpty\tobj", "contents": "\\$A.util.isEmpty($1obj)"},
        { "trigger": "A_util_getBooleanValue\tval", "contents": "\\$A.util.getBooleanValue($1val)"},
        { "trigger": "A_util_createHtmlElement\ttagName, attributes", "contents": "\\$A.util.createHtmlElement($1tagName, attributes)"},
        { "trigger": "A_util_clearNode\tnode", "contents": "\\$A.util.clearNode($1node)"},
        { "trigger": "A_util_getElement\tid", "contents": "\\$A.util.getElement($1id)"},
        { "trigger": "A_util_copy\tvalue", "contents": "\\$A.util.copy($1value)"},
        { "trigger": "A_util_compareValues\texpected, actual", "contents": "\\$A.util.compareValues($1expected, actual)"},
        { "trigger": "A_util_hasClass\telement, className", "contents": "\\$A.util.hasClass($1element, className)"},
        { "trigger": "A_util_addClass\telement, newClass", "contents": "\\$A.util.addClass($1element, newClass)"},
        { "trigger": "A_util_removeClass\telement, newClass", "contents": "\\$A.util.removeClass($1element, newClass)"},
        { "trigger": "A_util_toggleClass\telement, className, condition", "contents": "\\$A.util.toggleClass($1element, className, condition)"},
        { "trigger": "A_util_swapClass\telement, oldClass, newClass", "contents": "\\$A.util.swapClass($1element, oldClass, newClass)"},
        { "trigger": "A_util_setClass\telement,newClass,remove", "contents": "\\$A.util.setClass($1element,newClass,remove)"},
        { "trigger": "A_util_buildClass\toldClass, newClass, remove", "contents": "\\$A.util.buildClass($1oldClass, newClass, remove)"},
        { "trigger": "A_util_buildFlavorClass\tcmp, flavor", "contents": "\\$A.util.buildFlavorClass($1cmp, flavor)"},
        { "trigger": "A_util_createElementsFromMarkup\tmarkup", "contents": "\\$A.util.createElementsFromMarkup($1markup)"},
        { "trigger": "A_util_insertFirst\tnewEl, referenceEl", "contents": "\\$A.util.insertFirst($1newEl, referenceEl)"},
        { "trigger": "A_util_insertBefore\tnewEl, referenceEl", "contents": "\\$A.util.insertBefore($1newEl, referenceEl)"},
        { "trigger": "A_util_insertAfter\tnewEl, referenceEl", "contents": "\\$A.util.insertAfter($1newEl, referenceEl)"},
        { "trigger": "A_util_appendChild\tnewEl, referenceEl", "contents": "\\$A.util.appendChild($1newEl, referenceEl)"},
        { "trigger": "A_util_removeElement\telement", "contents": "\\$A.util.removeElement($1element)"},
        { "trigger": "A_util_urlDecode\turl", "contents": "\\$A.util.urlDecode($1url)"},
        { "trigger": "A_util_trim\tvalue", "contents": "\\$A.util.trim($1value)"},
        { "trigger": "A_util_format\tformatString,arg1,arg2,argN", "contents": "\\$A.util.format($1formatString,arg1,arg2,argN)"},
        { "trigger": "A_util_truncate\tst, len, ellipsis, truncateByWord", "contents": "\\$A.util.truncate($1st, len, ellipsis, truncateByWord)"},
        { "trigger": "A_util_createTimeoutCallback\tcallback, toleranceMillis", "contents": "\\$A.util.createTimeoutCallback($1callback, toleranceMillis)"},
        { "trigger": "A_util_removeOn\telement, eventName, listener, useCapture", "contents": "\\$A.util.removeOn($1element, eventName, listener, useCapture)"},
        { "trigger": "A_util_formToMap\tform", "contents": "\\$A.util.formToMap($1form)"},
        { "trigger": "A_util_getSelectValue\tselect", "contents": "\\$A.util.getSelectValue($1select)"},
        { "trigger": "A_util_addValueToMap\tinputMap, key, value", "contents": "\\$A.util.addValueToMap($1inputMap, key, value)"},
        { "trigger": "A_util_addMapValueToMap\tinputMap, key, value, subMapKey", "contents": "\\$A.util.addMapValueToMap($1inputMap, key, value, subMapKey)"},
        { "trigger": "A_util_isSubDef\tdef, qname", "contents": "\\$A.util.isSubDef($1def, qname)"},
        { "trigger": "A_util_apply\t baseObject,  members,  forceCopy,  deepCopy", "contents": "\\$A.util.apply($1 baseObject,  members,  forceCopy,  deepCopy)"},
        { "trigger": "A_util_camelCaseToHyphens\tstr", "contents": "\\$A.util.camelCaseToHyphens($1str)"},
        { "trigger": "A_util_hyphensToCamelCase\tstr", "contents": "\\$A.util.hyphensToCamelCase($1str)"},
        { "trigger": "A_util_acceptsData\telement", "contents": "\\$A.util.acceptsData($1element)"},
        { "trigger": "A_util_getElementAttributeValue\telement,attributeName", "contents": "\\$A.util.getElementAttributeValue($1element,attributeName)"},
        { "trigger": "A_util_getDataAttribute\telement, key", "contents": "\\$A.util.getDataAttribute($1element, key)"},
        { "trigger": "A_util_setDataAttribute\telement, key, value", "contents": "\\$A.util.setDataAttribute($1element, key, value)"},
        { "trigger": "A_util_getDataAttributeName\tkey", "contents": "\\$A.util.getDataAttributeName($1key)"},
        { "trigger": "A_util_hasDataAttribute\telement, key", "contents": "\\$A.util.hasDataAttribute($1element, key)"},
        { "trigger": "A_util_isElement\tobj", "contents": "\\$A.util.isElement($1obj)"},
        { "trigger": "A_util_attachToDocumentBody\telement", "contents": "\\$A.util.attachToDocumentBody($1element)"},
        { "trigger": "A_util_stringEndsWith\tfullstr, substr", "contents": "\\$A.util.stringEndsWith($1fullstr, substr)"},
        { "trigger": "A_util_bind\t()", "contents": "\\$A.util.bind($1)"},
        { "trigger": "A_util_keys\t()", "contents": "\\$A.util.keys($1)"},
        { "trigger": "A_util_lookup\tobject ", "contents": "\\$A.util.lookup($1object )"},
        { "trigger": "A_util_merge\tfirst ", "contents": "\\$A.util.merge($1first )"},
        { "trigger": "A_util_forEach\t()", "contents": "\\$A.util.forEach($1)"},
        { "trigger": "A_util_map\t()", "contents": "\\$A.util.map($1)"},
        { "trigger": "A_util_reduce\t()", "contents": "\\$A.util.reduce($1)"},
        { "trigger": "A_util_every\t()", "contents": "\\$A.util.every($1)"},
        { "trigger": "A_util_some\t()", "contents": "\\$A.util.some($1)"},
        { "trigger": "A_util_filter\t()", "contents": "\\$A.util.filter($1)"},
        { "trigger": "A_util_destroyAsync\tcmp", "contents": "\\$A.util.destroyAsync($1cmp)"},
        { "trigger": "A_util_instanceOf\tinstance, constructor", "contents": "\\$A.util.instanceOf($1instance, constructor)"},
        { "trigger": "A_util_emptyComponentTrash\t()", "contents": "\\$A.util.emptyComponentTrash($1)"},
        { "trigger": "A_util_contains\tcontainer, element", "contents": "\\$A.util.contains($1container, element)"},
        { "trigger": "A_util_squash\tevent, preventDefault", "contents": "\\$A.util.squash($1event, preventDefault)"},
        { "trigger": "A_util_stripTags\tinput, tags", "contents": "\\$A.util.stripTags($1input, tags)"},
        { "trigger": "A_util_getWindowSize\t()", "contents": "\\$A.util.getWindowSize($1)"},
        { "trigger": "A_util_isComponent\tobj", "contents": "\\$A.util.isComponent($1obj)"},
        { "trigger": "A_util_isExpression\tobj", "contents": "\\$A.util.isExpression($1obj)"},
        { "trigger": "A_util_isValue\tobj", "contents": "\\$A.util.isValue($1obj)"},
        { "trigger": "A_util_isAction\tobj", "contents": "\\$A.util.isAction($1obj)"},
        { "trigger": "A_util_supportsTouchEvents\t()", "contents": "\\$A.util.supportsTouchEvents($1)"},
        { "trigger": "A_util_estimateSize\tobj", "contents": "\\$A.util.estimateSize($1obj)"},
        { "trigger": "A_util_toArray\tcollection", "contents": "\\$A.util.toArray($1collection)"},
        { "trigger": "A_util_setText\tnode, text", "contents": "\\$A.util.setText($1node, text)"},
        { "trigger": "A_util_getDebugToolComponent\t()", "contents": "\\$A.util.getDebugToolComponent($1)"},
        { "trigger": "A_util_getDebugToolsAuraInstance\t()", "contents": "\\$A.util.getDebugToolsAuraInstance($1)"},
        { "trigger": "A_util_setDebugToolWindow\tdebugWindow", "contents": "\\$A.util.setDebugToolWindow($1debugWindow)"},
        { "trigger": "A_util_getUrl\t()", "contents": "\\$A.util.getUrl($1)"},
        { "trigger": "A_util_getText\tnode", "contents": "\\$A.util.getText($1node)"},
        { "trigger": "A_util_errorBasedOnMode\tmsg", "contents": "\\$A.util.errorBasedOnMode($1msg)"},
        { "trigger": "A_util_includeScript\turl, callback", "contents": "\\$A.util.includeScript($1url, callback)"},
    ]
}

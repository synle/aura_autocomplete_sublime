{
    "scope": "source, comment, text.plain, meta.tag, punctuation.definition.tag.begin, css",
    "completions":
    [
        { "trigger": "A.test.errors", "contents": "A.test.errors$1"},
        { "trigger": "A.test.addWaitFor(expected, testFunction, callback)", "contents": "A.test.addWaitFor($1expected, testFunction, callback)"},
        { "trigger": "A.test.addWaitForAction(success, actionName, callback)", "contents": "A.test.addWaitForAction($1success, actionName, callback)"},
        { "trigger": "A.test.addWaitForWithFailureMessage(expected, testFunction, failureMessage, callback)", "contents": "A.test.addWaitForWithFailureMessage($1expected, testFunction, failureMessage, callback)"},
        { "trigger": "A.test.blockRequests()", "contents": "A.test.blockRequests($1)"},
        { "trigger": "A.test.blockForegroundRequests()", "contents": "A.test.blockForegroundRequests($1)"},
        { "trigger": "A.test.blockBackgroundRequests()", "contents": "A.test.blockBackgroundRequests($1)"},
        { "trigger": "A.test.releaseRequests()", "contents": "A.test.releaseRequests($1)"},
        { "trigger": "A.test.releaseForegroundRequests()", "contents": "A.test.releaseForegroundRequests($1)"},
        { "trigger": "A.test.releaseBackgroundRequests()", "contents": "A.test.releaseBackgroundRequests($1)"},
        { "trigger": "A.test.getSentRequestCount()", "contents": "A.test.getSentRequestCount($1)"},
        { "trigger": "A.test.areActionsComplete(actions)", "contents": "A.test.areActionsComplete($1actions)"},
        { "trigger": "A.test.addCleanup(cleanupFunction)", "contents": "A.test.addCleanup($1cleanupFunction)"},
        { "trigger": "A.test.getAction(component, name, params, callback)", "contents": "A.test.getAction($1component, name, params, callback)"},
        { "trigger": "A.test.runActionsAsTransaction(actions, scope, callback)", "contents": "A.test.runActionsAsTransaction($1actions, scope, callback)"},
        { "trigger": "A.test.enqueueAction(action, background)", "contents": "A.test.enqueueAction($1action, background)"},
        { "trigger": "A.test.getExternalAction(component, descriptor, params, returnType, callback)", "contents": "A.test.getExternalAction($1component, descriptor, params, returnType, callback)"},
        { "trigger": "A.test.clearAndAssertComponentConfigs(a)", "contents": "A.test.clearAndAssertComponentConfigs($1a)"},
        { "trigger": "A.test.isActionPending()", "contents": "A.test.isActionPending($1)"},
        { "trigger": "A.test.callServerAction(action, doImmediate)", "contents": "A.test.callServerAction($1action, doImmediate)"},
        { "trigger": "A.test.setServerReachable(reachable)", "contents": "A.test.setServerReachable($1reachable)"},
        { "trigger": "A.test.runAfterIf(conditionFunction, callback, intervalInMs)", "contents": "A.test.runAfterIf($1conditionFunction, callback, intervalInMs)"},
        { "trigger": "A.test.setTestTimeout(timeoutMsec)", "contents": "A.test.setTestTimeout($1timeoutMsec)"},
        { "trigger": "A.test.isComplete()", "contents": "A.test.isComplete($1)"},
        { "trigger": "A.test.getErrors()", "contents": "A.test.getErrors($1)"},
        { "trigger": "A.test.print(value)", "contents": "A.test.print($1value)"},
        { "trigger": "A.test.auraError(level, msg/*, error*/)", "contents": "A.test.auraError($1level, msg/*, error*/)"},
        { "trigger": "A.test.expectAuraError(e)", "contents": "A.test.expectAuraError($1e)"},
        { "trigger": "A.test.auraWarning(level, msg)", "contents": "A.test.auraWarning($1level, msg)"},
        { "trigger": "A.test.expectAuraWarning(w)", "contents": "A.test.expectAuraWarning($1w)"},
        { "trigger": "A.test.assertAccessible()", "contents": "A.test.assertAccessible($1)"},
        { "trigger": "A.test.assertTruthy(condition, assertMessage)", "contents": "A.test.assertTruthy($1condition, assertMessage)"},
        { "trigger": "A.test.assertFalsy(condition, assertMessage)", "contents": "A.test.assertFalsy($1condition, assertMessage)"},
        { "trigger": "A.test.assert(condition, assertMessage)", "contents": "A.test.assert($1condition, assertMessage)"},
        { "trigger": "A.test.assertEquals(arg1, arg2, assertMessage)", "contents": "A.test.assertEquals($1arg1, arg2, assertMessage)"},
        { "trigger": "A.test.assertEqualsIgnoreWhitespace(arg1, arg2, assertMessage)", "contents": "A.test.assertEqualsIgnoreWhitespace($1arg1, arg2, assertMessage)"},
        { "trigger": "A.test.assertStartsWith(start, full, assertMessage)", "contents": "A.test.assertStartsWith($1start, full, assertMessage)"},
        { "trigger": "A.test.assertNotEquals(arg1, arg2, assertMessage)", "contents": "A.test.assertNotEquals($1arg1, arg2, assertMessage)"},
        { "trigger": "A.test.assertDefined(condition, assertMessage)", "contents": "A.test.assertDefined($1condition, assertMessage)"},
        { "trigger": "A.test.assertTrue(condition, assertMessage)", "contents": "A.test.assertTrue($1condition, assertMessage)"},
        { "trigger": "A.test.assertFalse(condition, assertMessage)", "contents": "A.test.assertFalse($1condition, assertMessage)"},
        { "trigger": "A.test.assertUndefined(condition, assertMessage)", "contents": "A.test.assertUndefined($1condition, assertMessage)"},
        { "trigger": "A.test.assertNotUndefinedOrNull(condition, assertMessage)", "contents": "A.test.assertNotUndefinedOrNull($1condition, assertMessage)"},
        { "trigger": "A.test.assertUndefinedOrNull(condition, assertMessage)", "contents": "A.test.assertUndefinedOrNull($1condition, assertMessage)"},
        { "trigger": "A.test.assertNull(condition, assertMessage)", "contents": "A.test.assertNull($1condition, assertMessage)"},
        { "trigger": "A.test.assertNotNull(condition, assertMessage)", "contents": "A.test.assertNotNull($1condition, assertMessage)"},
        { "trigger": "A.test.assertAuraType(type, condition, assertMessage)", "contents": "A.test.assertAuraType($1type, condition, assertMessage)"},
        { "trigger": "A.test.fail(assertMessage, extraInfoMessage)", "contents": "A.test.fail($1assertMessage, extraInfoMessage)"},
        { "trigger": "A.test.getPrototype(instance)", "contents": "A.test.getPrototype($1instance)"},
        { "trigger": "A.test.overrideFunction(instance, name, newFunction)", "contents": "A.test.overrideFunction($1instance, name, newFunction)"},
        { "trigger": "A.test.addFunctionHandler(instance, name, newFunction, postProcess)", "contents": "A.test.addFunctionHandler($1instance, name, newFunction, postProcess)"},
        { "trigger": "A.test.getOuterHtml(node)", "contents": "A.test.getOuterHtml($1node)"},
        { "trigger": "A.test.getText(node)", "contents": "A.test.getText($1node)"},
        { "trigger": "A.test.getTextByComponent(component)", "contents": "A.test.getTextByComponent($1component)"},
        { "trigger": "A.test.getStyle(elem, style)", "contents": "A.test.getStyle($1elem, style)"},
        { "trigger": "A.test.getNonCommentNodes(nodes)", "contents": "A.test.getNonCommentNodes($1nodes)"},
        { "trigger": "A.test.isNodeDeleted(node)", "contents": "A.test.isNodeDeleted($1node)"},
        { "trigger": "A.test.select()", "contents": "A.test.select($1)"},
        { "trigger": "A.test.contains(testString, targetString)", "contents": "A.test.contains($1testString, targetString)"},
        { "trigger": "A.test.compareValues(expected, actual)", "contents": "A.test.compareValues($1expected, actual)"},
        { "trigger": "A.test.getActiveElement()", "contents": "A.test.getActiveElement($1)"},
        { "trigger": "A.test.getActiveElementText()", "contents": "A.test.getActiveElementText($1)"},
        { "trigger": "A.test.walkTheDOM(node, func)", "contents": "A.test.walkTheDOM($1node, func)"},
        { "trigger": "A.test.getElementsByClassNameCustom(className, parentElement)", "contents": "A.test.getElementsByClassNameCustom($1className, parentElement)"},
        { "trigger": "A.test.findChildWithClassName(parentElement, className)", "contents": "A.test.findChildWithClassName($1parentElement, className)"},
        { "trigger": "A.test.getElementByClass(classname)", "contents": "A.test.getElementByClass($1classname)"},
        { "trigger": "A.test.fireDomEvent(element, eventName, canBubble, cancelable)", "contents": "A.test.fireDomEvent($1element, eventName, canBubble, cancelable)"},
        { "trigger": "A.test.clickOrTouch(element, canBubble, cancelable)", "contents": "A.test.clickOrTouch($1element, canBubble, cancelable)"},
        { "trigger": "A.test.isInstanceOfText(node)", "contents": "A.test.isInstanceOfText($1node)"},
        { "trigger": "A.test.isInstanceOfAnchorElement(element)", "contents": "A.test.isInstanceOfAnchorElement($1element)"},
        { "trigger": "A.test.isInstanceOfInputElement(element)", "contents": "A.test.isInstanceOfInputElement($1element)"},
        { "trigger": "A.test.isInstanceOfLiElement(element)", "contents": "A.test.isInstanceOfLiElement($1element)"},
        { "trigger": "A.test.isInstanceOfParagraphElement(element)", "contents": "A.test.isInstanceOfParagraphElement($1element)"},
        { "trigger": "A.test.isInstanceOfButtonElement(element)", "contents": "A.test.isInstanceOfButtonElement($1element)"},
        { "trigger": "A.test.isInstanceOfImageElement(element)", "contents": "A.test.isInstanceOfImageElement($1element)"},
        { "trigger": "A.test.isInstanceOfDivElement(element)", "contents": "A.test.isInstanceOfDivElement($1element)"},
        { "trigger": "A.test.isInstanceOfSpanElement(element)", "contents": "A.test.isInstanceOfSpanElement($1element)"},
        { "trigger": "A.test.isInstanceOf(element, elementType, tag)", "contents": "A.test.isInstanceOf($1element, elementType, tag)"},
        { "trigger": "A.test.objectKeys(obj)", "contents": "A.test.objectKeys($1obj)"},
        { "trigger": "A.test.getElementAttributeValue(element, attributeName)", "contents": "A.test.getElementAttributeValue($1element, attributeName)"},
        { "trigger": "A.test.addEventHandler(eventName, handler, component, insert)", "contents": "A.test.addEventHandler($1eventName, handler, component, insert)"},
        { "trigger": "A.test.dummyFunction()", "contents": "A.test.dummyFunction($1)"},
        { "trigger": "A.test.getAppCacheEvents()", "contents": "A.test.getAppCacheEvents($1)"},
        { "trigger": "A.test.getAuraErrorMessage()", "contents": "A.test.getAuraErrorMessage($1)"},
        { "trigger": "A.test.getAvailableXHROverride(config, isBackground)", "contents": "A.test.getAvailableXHROverride($1config, isBackground)"},
        { "trigger": "A.test.sendOverride(config, auraXHR, actions, method, options)", "contents": "A.test.sendOverride($1config, auraXHR, actions, method, options)"},
        { "trigger": "A.test.decodeOverride(config, response, noStrip)", "contents": "A.test.decodeOverride($1config, response, noStrip)"},
        { "trigger": "A.test.PrePostConfig (action, preSendCallback, postSendCallback)", "contents": "A.test.PrePostConfig $1(action, preSendCallback, postSendCallback)"},
        { "trigger": "A.test.addPrePostSendCallback (action, preSendCallback, postSendCallback)", "contents": "A.test.addPrePostSendCallback $1(action, preSendCallback, postSendCallback)"},
        { "trigger": "A.test.removePrePostSendCallback (handle)", "contents": "A.test.removePrePostSendCallback $1(handle)"},
        { "trigger": "A.test.install()", "contents": "A.test.install($1)"},
        { "trigger": "A.test.run(name, code, timeoutOverride, quickFixException)", "contents": "A.test.run($1name, code, timeoutOverride, quickFixException)"},
        { "trigger": "A.test.runInternal(name)", "contents": "A.test.runInternal($1name)"},
        { "trigger": "A.test.executeAfterCkEditorIsReady(inputRichTextComponent, callback)", "contents": "A.test.executeAfterCkEditorIsReady($1inputRichTextComponent, callback)"},
        { "trigger": "A.test.reloadGlobalValueProviders(gvp, callback)", "contents": "A.test.reloadGlobalValueProviders($1gvp, callback)"},
        { "trigger": "A.test.getCreationPath(cmp)", "contents": "A.test.getCreationPath($1cmp)"},
        { "trigger": "A.test.createHttpRequest()", "contents": "A.test.createHttpRequest($1)"},
        { "trigger": "A.test.checkGlobalNamespacePollution()", "contents": "A.test.checkGlobalNamespacePollution($1)"},
        { "trigger": "A.test.orderedEncode(obj)", "contents": "A.test.orderedEncode($1obj)"},
        { "trigger": "A.util.isIE()", "contents": "A.util.isIE($1)"},
        { "trigger": "A.util.isIOSWebView()", "contents": "A.util.isIOSWebView($1)"},
        { "trigger": "A.util.globalEval()", "contents": "A.util.globalEval($1)"},
        { "trigger": "A.util.isArray()", "contents": "A.util.isArray($1)"},
        { "trigger": "A.util.isObject(obj)", "contents": "A.util.isObject($1obj)"},
        { "trigger": "A.util.isPlainObject(obj)", "contents": "A.util.isPlainObject($1obj)"},
        { "trigger": "A.util.isError(obj)", "contents": "A.util.isError($1obj)"},
        { "trigger": "A.util.isFunction(obj)", "contents": "A.util.isFunction($1obj)"},
        { "trigger": "A.util.isString(obj)", "contents": "A.util.isString($1obj)"},
        { "trigger": "A.util.isNumber(obj)", "contents": "A.util.isNumber($1obj)"},
        { "trigger": "A.util.isFiniteNumber(obj)", "contents": "A.util.isFiniteNumber($1obj)"},
        { "trigger": "A.util.isBoolean(obj)", "contents": "A.util.isBoolean($1obj)"},
        { "trigger": "A.util.isUndefined(obj)", "contents": "A.util.isUndefined($1obj)"},
        { "trigger": "A.util.isUndefinedOrNull(obj)", "contents": "A.util.isUndefinedOrNull($1obj)"},
        { "trigger": "A.util.isEmpty(obj)", "contents": "A.util.isEmpty($1obj)"},
        { "trigger": "A.util.getBooleanValue (val)", "contents": "A.util.getBooleanValue $1(val)"},
        { "trigger": "A.util.createHtmlElement (tagName, attributes)", "contents": "A.util.createHtmlElement $1(tagName, attributes)"},
        { "trigger": "A.util.clearNode (node)", "contents": "A.util.clearNode $1(node)"},
        { "trigger": "A.util.getElement(id)", "contents": "A.util.getElement($1id)"},
        { "trigger": "A.util.copy(value)", "contents": "A.util.copy($1value)"},
        { "trigger": "A.util.compareValues(expected, actual)", "contents": "A.util.compareValues($1expected, actual)"},
        { "trigger": "A.util.hasClass(element, className)", "contents": "A.util.hasClass($1element, className)"},
        { "trigger": "A.util.addClass(element, newClass)", "contents": "A.util.addClass($1element, newClass)"},
        { "trigger": "A.util.removeClass(element, newClass)", "contents": "A.util.removeClass($1element, newClass)"},
        { "trigger": "A.util.toggleClass(element, className, condition)", "contents": "A.util.toggleClass($1element, className, condition)"},
        { "trigger": "A.util.swapClass(element, oldClass, newClass)", "contents": "A.util.swapClass($1element, oldClass, newClass)"},
        { "trigger": "A.util.setClass(element,newClass,remove)", "contents": "A.util.setClass($1element,newClass,remove)"},
        { "trigger": "A.util.buildClass(oldClass, newClass, remove)", "contents": "A.util.buildClass($1oldClass, newClass, remove)"},
        { "trigger": "A.util.buildFlavorClass(cmp, flavor)", "contents": "A.util.buildFlavorClass($1cmp, flavor)"},
        { "trigger": "A.util.createElementsFromMarkup(markup)", "contents": "A.util.createElementsFromMarkup($1markup)"},
        { "trigger": "A.util.insertFirst(newEl, referenceEl)", "contents": "A.util.insertFirst($1newEl, referenceEl)"},
        { "trigger": "A.util.insertBefore(newEl, referenceEl)", "contents": "A.util.insertBefore($1newEl, referenceEl)"},
        { "trigger": "A.util.insertAfter(newEl, referenceEl)", "contents": "A.util.insertAfter($1newEl, referenceEl)"},
        { "trigger": "A.util.appendChild(newEl, referenceEl)", "contents": "A.util.appendChild($1newEl, referenceEl)"},
        { "trigger": "A.util.removeElement(element)", "contents": "A.util.removeElement($1element)"},
        { "trigger": "A.util.urlDecode(url)", "contents": "A.util.urlDecode($1url)"},
        { "trigger": "A.util.trim(value)", "contents": "A.util.trim($1value)"},
        { "trigger": "A.util.format(formatString,arg1,arg2,argN)", "contents": "A.util.format($1formatString,arg1,arg2,argN)"},
        { "trigger": "A.util.truncate(st, len, ellipsis, truncateByWord)", "contents": "A.util.truncate($1st, len, ellipsis, truncateByWord)"},
        { "trigger": "A.util.createTimeoutCallback(callback, toleranceMillis)", "contents": "A.util.createTimeoutCallback($1callback, toleranceMillis)"},
        { "trigger": "A.util.removeOn(element, eventName, listener, useCapture)", "contents": "A.util.removeOn($1element, eventName, listener, useCapture)"},
        { "trigger": "A.util.formToMap(form)", "contents": "A.util.formToMap($1form)"},
        { "trigger": "A.util.getSelectValue(select)", "contents": "A.util.getSelectValue($1select)"},
        { "trigger": "A.util.addValueToMap(inputMap, key, value)", "contents": "A.util.addValueToMap($1inputMap, key, value)"},
        { "trigger": "A.util.addMapValueToMap(inputMap, key, value, subMapKey)", "contents": "A.util.addMapValueToMap($1inputMap, key, value, subMapKey)"},
        { "trigger": "A.util.isSubDef(def, qname)", "contents": "A.util.isSubDef($1def, qname)"},
        { "trigger": "A.util.apply(/* Object|Function */ baseObject, /* Object|Function*/ members, /* bool */ forceCopy, /* bool */ deepCopy)", "contents": "A.util.apply($1/* Object|Function */ baseObject, /* Object|Function*/ members, /* bool */ forceCopy, /* bool */ deepCopy)"},
        { "trigger": "A.util.camelCaseToHyphens(str)", "contents": "A.util.camelCaseToHyphens($1str)"},
        { "trigger": "A.util.hyphensToCamelCase(str)", "contents": "A.util.hyphensToCamelCase($1str)"},
        { "trigger": "A.util.acceptsData(element)", "contents": "A.util.acceptsData($1element)"},
        { "trigger": "A.util.getElementAttributeValue(element,attributeName)", "contents": "A.util.getElementAttributeValue($1element,attributeName)"},
        { "trigger": "A.util.getDataAttribute(element, key)", "contents": "A.util.getDataAttribute($1element, key)"},
        { "trigger": "A.util.setDataAttribute(element, key, value)", "contents": "A.util.setDataAttribute($1element, key, value)"},
        { "trigger": "A.util.getDataAttributeName(key)", "contents": "A.util.getDataAttributeName($1key)"},
        { "trigger": "A.util.hasDataAttribute(element, key)", "contents": "A.util.hasDataAttribute($1element, key)"},
        { "trigger": "A.util.isElement(obj)", "contents": "A.util.isElement($1obj)"},
        { "trigger": "A.util.attachToDocumentBody(element)", "contents": "A.util.attachToDocumentBody($1element)"},
        { "trigger": "A.util.stringEndsWith(fullstr, substr)", "contents": "A.util.stringEndsWith($1fullstr, substr)"},
        { "trigger": "A.util.bind()", "contents": "A.util.bind($1)"},
        { "trigger": "A.util.keys()", "contents": "A.util.keys($1)"},
        { "trigger": "A.util.lookup(object /*, var-args of arrays*/)", "contents": "A.util.lookup($1object /*, var-args of arrays*/)"},
        { "trigger": "A.util.merge(first /*, var-args of arrays*/)", "contents": "A.util.merge($1first /*, var-args of arrays*/)"},
        { "trigger": "A.util.forEach()", "contents": "A.util.forEach($1)"},
        { "trigger": "A.util.map()", "contents": "A.util.map($1)"},
        { "trigger": "A.util.reduce()", "contents": "A.util.reduce($1)"},
        { "trigger": "A.util.every()", "contents": "A.util.every($1)"},
        { "trigger": "A.util.some()", "contents": "A.util.some($1)"},
        { "trigger": "A.util.filter()", "contents": "A.util.filter($1)"},
        { "trigger": "A.util.destroyAsync(cmp)", "contents": "A.util.destroyAsync($1cmp)"},
        { "trigger": "A.util.instanceOf(instance, constructor)", "contents": "A.util.instanceOf($1instance, constructor)"},
        { "trigger": "A.util.emptyComponentTrash()", "contents": "A.util.emptyComponentTrash($1)"},
        { "trigger": "A.util.contains(container, element)", "contents": "A.util.contains($1container, element)"},
        { "trigger": "A.util.squash(event, preventDefault)", "contents": "A.util.squash($1event, preventDefault)"},
        { "trigger": "A.util.stripTags(input, tags)", "contents": "A.util.stripTags($1input, tags)"},
        { "trigger": "A.util.getWindowSize()", "contents": "A.util.getWindowSize($1)"},
        { "trigger": "A.util.isComponent(obj)", "contents": "A.util.isComponent($1obj)"},
        { "trigger": "A.util.isExpression (obj)", "contents": "A.util.isExpression $1(obj)"},
        { "trigger": "A.util.isValue(obj)", "contents": "A.util.isValue($1obj)"},
        { "trigger": "A.util.isAction(obj)", "contents": "A.util.isAction($1obj)"},
        { "trigger": "A.util.supportsTouchEvents()", "contents": "A.util.supportsTouchEvents($1)"},
        { "trigger": "A.util.estimateSize(obj)", "contents": "A.util.estimateSize($1obj)"},
        { "trigger": "A.util.toArray(collection)", "contents": "A.util.toArray($1collection)"},
        { "trigger": "A.util.setText(node, text)", "contents": "A.util.setText($1node, text)"},
        { "trigger": "A.util.getDebugToolComponent()", "contents": "A.util.getDebugToolComponent($1)"},
        { "trigger": "A.util.getDebugToolsAuraInstance()", "contents": "A.util.getDebugToolsAuraInstance($1)"},
        { "trigger": "A.util.setDebugToolWindow(debugWindow)", "contents": "A.util.setDebugToolWindow($1debugWindow)"},
        { "trigger": "A.util.getUrl()", "contents": "A.util.getUrl($1)"},
        { "trigger": "A.util.getText(node)", "contents": "A.util.getText($1node)"},
        { "trigger": "A.util.errorBasedOnMode(msg)", "contents": "A.util.errorBasedOnMode($1msg)"},
        { "trigger": "A.util.includeScript(url, callback", "contents": "A.util.includeScript($1url, callback"},
    ]
}
